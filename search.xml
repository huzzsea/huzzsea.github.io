<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2023/12/10/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Redis</title>
    <url>/2023/12/10/Redis/</url>
    <content><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="第一节入门概述"><a href="#第一节入门概述" class="headerlink" title="第一节	入门概述"></a>第一节	入门概述</h2><ul>
<li><p><strong>基本介绍</strong>：全称 <strong>Remote Dictionary Server</strong> ，即远程字典服务，是一个完全开源的，使用 <strong>ANSIC</strong> 语言编写遵守 <strong>BSD</strong> 协议，高性能的 <strong>Key-Value</strong> 数据库，提供了丰富的数据结构，数据是存在内存中的，同时 <strong>Redis</strong> 支持事务、持久化、<strong>LUA</strong> 脚本、发布&#x2F;订阅、缓存淘汰、流技术等多种功能特性提供了主从模式、<strong>Redis Sentinel和Redis Cluster</strong> 集群架构方案</p>
</li>
<li><p><strong>功能</strong></p>
<ul>
<li>分布式缓存，挡在 <strong>MySQL</strong> 数据库之前的一道屏障</li>
<li>内存存储和持久化，支持异步将内存中的数据写到硬盘上，同时不影响继续服务</li>
<li>高可用架构搭配</li>
<li>缓存穿透、击穿、雪崩</li>
<li>分布式锁</li>
<li>消息队列平台</li>
</ul>
</li>
<li><p><strong>优势</strong></p>
<ul>
<li>性能极高，读写速度快</li>
<li>数据类型丰富，不仅仅支持简单的 <strong>key-value</strong> 类型的数据，同时还提供 <strong>list</strong>，<strong>zset</strong>，<strong>set</strong>，<strong>hash</strong> 等数据结构的存储</li>
<li>支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用</li>
</ul>
</li>
<li><p><strong>Redis 启动命令</strong></p>
<ul>
<li><p><strong>默认启动</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server // 启动服务器</span><br><span class="line">redis-cli // 启动客户端</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>指定参数</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server --port 6379 --requirepass 12456 // 指定端口和密码</span><br><span class="line">redis-cli -p 6379 -a 123456 // 启动客户端</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置文件启动</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server redis-6379.conf // 启动服务器</span><br><span class="line">redis-cli // 启动客户端</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第二节数据类型"><a href="#第二节数据类型" class="headerlink" title="第二节	数据类型"></a>第二节	数据类型</h2><h3 id="2-1数据库"><a href="#2-1数据库" class="headerlink" title="2.1	数据库"></a>2.1	数据库</h3><ul>
<li><p><strong>键的相关操作</strong></p>
<ul>
<li><p>查询所有键</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">keys *</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断键是否存在</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">exists key</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看键的类型</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span> key</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除指定键</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">del key</span><br></pre></td></tr></table></figure>
</li>
<li><p>非阻塞删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">unlink</span> key</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看过期时间</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ttl key</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置过期时间</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">expire key 1</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看键的数量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dbsize</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>数据库的相关操作</strong></p>
<ul>
<li><p>移动数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">move key [0-15]</span><br></pre></td></tr></table></figure>
</li>
<li><p>切换数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> [0-15]</span><br></pre></td></tr></table></figure>
</li>
<li><p>清空当前数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flushdb</span><br></pre></td></tr></table></figure>
</li>
<li><p>清空所有数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flushall</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-2字符串"><a href="#2-2字符串" class="headerlink" title="2.2	字符串"></a>2.2	字符串</h3><ul>
<li><p><strong>字符串类型</strong></p>
<ul>
<li><strong>Redis</strong> 最基本的类型，一个 <strong>key</strong> 对应一个 <strong>value</strong></li>
<li><strong>string</strong> 类型是二进制安全的，可以包含任何数据，比如jpg图片或者序列化的对象</li>
<li>一个字符串 <strong>value</strong> 最多可以是512M</li>
</ul>
</li>
<li><p><strong>SET 语句</strong></p>
<ul>
<li><p>添加键值对</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> key value</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行条件</p>
<ul>
<li><p>键不存在时设置键值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> key value nx</span><br></pre></td></tr></table></figure>
</li>
<li><p>键存在时设置键值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> key value xx </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>设置过期时间</p>
<ul>
<li><p>以秒为单位设置过期时间</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> key value ex seconds</span><br></pre></td></tr></table></figure>
</li>
<li><p>以毫秒为单位设置过期时间</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> key value px milliseconds</span><br></pre></td></tr></table></figure>
</li>
<li><p>以秒为单位设置以 <strong>UNIX</strong> 时间戳对应时间为过期时间</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> key value exat unix-time-seconds</span><br></pre></td></tr></table></figure>
</li>
<li><p>以毫秒为单位设置以 <strong>UNIX</strong> 时间戳对应时间为过期时间</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> key value pxat unix-time-milliseconds</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>保留设置前指定键的生存时间</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> key value keepttl</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>GET 语句</strong></p>
<ul>
<li><p>返回指定键的值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">get key</span><br></pre></td></tr></table></figure>
</li>
<li><p>返回指定键原本的值，并修改键值对</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">getset key value</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>同时获取设置多对键值对</strong></p>
<ul>
<li><p>同时设置多对键值对</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mset key1 value1 key2 value2</span><br></pre></td></tr></table></figure>
</li>
<li><p>同时获取多对键值对</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mget key1 key2</span><br></pre></td></tr></table></figure>
</li>
<li><p>仅当键都不存在时，同时设置多对键值对</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msetnx key1 value1 key2 value2</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>获取指定区间</strong></p>
<ul>
<li><p>获取键的全部值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">getrange key 0 -1</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取键的指定区间值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">getrange key 0 x</span><br></pre></td></tr></table></figure>
</li>
<li><p>替换键的指定区间值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">setrange key x <span class="string">&quot;xxx&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>数值增减</strong></p>
<ul>
<li><p>数值递增</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">incr key</span><br></pre></td></tr></table></figure>
</li>
<li><p>数值相加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">incrby key</span><br></pre></td></tr></table></figure>
</li>
<li><p>数值递减</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">decr key</span><br></pre></td></tr></table></figure>
</li>
<li><p>数值相减</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">decrby key</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>获取字符串长度和内容相加</strong></p>
<ul>
<li><p>获取键值长度</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">strlen key</span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串相加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">append key value</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-3列表"><a href="#2-3列表" class="headerlink" title="2.3	列表"></a>2.3	列表</h3><ul>
<li><p><strong>列表类型</strong></p>
<ul>
<li>一个双端链表的结构，容量是2的32次方减1个元素，大概40多亿，主要功能有 <strong>push</strong>，<strong>pop</strong> 等，一般用在栈、队列、消息队列等场景</li>
<li><strong>left</strong>、<strong>right</strong> 都可以插入添加</li>
<li>底层就是个双向链表，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差</li>
</ul>
</li>
<li><p><strong>添加元素</strong></p>
<ul>
<li><p>左侧添加元素</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lpush key value</span><br></pre></td></tr></table></figure>
</li>
<li><p>右侧添加元素</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpush key value</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>获取元素</strong></p>
<ul>
<li><p>遍历列表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lrange key 0 -1</span><br></pre></td></tr></table></figure>
</li>
<li><p>左侧出栈</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lpop key</span><br></pre></td></tr></table></figure>
</li>
<li><p>右侧出栈</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpop key</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过索引获取值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lindex key index</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取元素个数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">llen key</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>删除元素</strong></p>
<ul>
<li><p>从左到右删除指定数量的指定值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lrem key num value</span><br></pre></td></tr></table></figure>
</li>
<li><p>从左到右删除所有指定值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lrem key 0 value</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>修改元素</strong></p>
<ul>
<li><p>截取指定区间值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ltrim key index1 index2</span><br></pre></td></tr></table></figure>
</li>
<li><p>将最后一个值添加到另一个列表的第一个</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpoplpush key1 key2</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改指定值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lset key index value</span><br></pre></td></tr></table></figure>
</li>
<li><p>在指定值前后插入值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">linsert key before/after value1 value2</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-4哈希表"><a href="#2-4哈希表" class="headerlink" title="2.4	哈希表"></a>2.4	哈希表</h3><ul>
<li><p><strong>哈希表类型</strong>：<strong>key-value</strong> 模式不变，但是 <strong>value</strong> 是一个键值对</p>
</li>
<li><p><strong>获取键值对</strong></p>
<ul>
<li><p>获取字段数量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hlen key</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断键值对中是否含有指定键</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexists key1 key2</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取键值对中所有键</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hkeys key</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取键值对中所有值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hvals key</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>修改键值对</strong></p>
<ul>
<li><p>添加键值对</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hset key1 key2 value</span><br></pre></td></tr></table></figure>
</li>
<li><p>键值对中的指定键的值增加指定整数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hincrby key1 key2 num</span><br></pre></td></tr></table></figure>
</li>
<li><p>键值对中的指定键的值增加指定小数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hincrbyfloat key1 key2 num</span><br></pre></td></tr></table></figure>
</li>
<li><p>不存在赋值，存在失效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hsetnx key1 key2 value</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-5集合"><a href="#2-5集合" class="headerlink" title="2.5	集合"></a>2.5	集合</h3><ul>
<li><p><strong>集合类型</strong>：单个 <strong>key</strong> 含有多个 <strong>value</strong>，且不重复</p>
</li>
<li><p><strong>常用操作</strong></p>
<ul>
<li><p>添加元素</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sadd key member</span><br></pre></td></tr></table></figure>
</li>
<li><p>遍历集合</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">smenbers key</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断元素是否存在</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sismember key member</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除元素</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">srem key membr</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取集合长度</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scard key</span><br></pre></td></tr></table></figure>
</li>
<li><p>随机取出指定数量的元素</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">srandmember key m</span><br></pre></td></tr></table></figure>
</li>
<li><p>随机删除指定数量的元素</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spop key m</span><br></pre></td></tr></table></figure>
</li>
<li><p>将集合内的指定元素赋值给另外一个集合</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">smove key1 key2 member</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>集合运算</strong></p>
<ul>
<li><p>减运算</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sdiff key1 key2</span><br></pre></td></tr></table></figure>
</li>
<li><p>交运算</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sinter key1 key2</span><br></pre></td></tr></table></figure>
</li>
<li><p>并运算</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sunion key1 key2</span><br></pre></td></tr></table></figure>
</li>
<li><p>交运算结果的基数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sintercard numkeys key1 key2</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-6有序集合"><a href="#2-6有序集合" class="headerlink" title="2.6	有序集合"></a>2.6	有序集合</h3><ul>
<li><p><strong>有序集合类型</strong>：在集合的基础上加上一个 <strong>score</strong> 分数</p>
</li>
<li><p><strong>常用操作</strong></p>
<ul>
<li><p>添加元素</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zadd key score member</span><br></pre></td></tr></table></figure>
</li>
<li><p>以分数排序返回指定区间元素</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zrange key index1 index2</span><br></pre></td></tr></table></figure>
</li>
<li><p>反序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zrevrange key index1 index2</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取指定分数区间的元素</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zrangebyscore key min max [<span class="built_in">limit</span> offset count]</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取元素的分数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zscore key member</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取集合元素数量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zcard key</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除元素</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zrem key value</span><br></pre></td></tr></table></figure>
</li>
<li><p>增加指定元素的分数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">incrby key increment member</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取指定分数区间的元素数量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zcount key min max</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取指定元素下标值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zrank key values</span><br></pre></td></tr></table></figure>
</li>
<li><p>逆序获得下标值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zrevrank key values</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-7位图"><a href="#2-7位图" class="headerlink" title="2.7	位图"></a>2.7	位图</h3><ul>
<li><p><strong>位图类型</strong></p>
<ul>
<li>用 <strong>string</strong> 类型作为底层数据结构实现的一种统计二值状态的数据类型</li>
<li>本质是数组，基于 <strong>string</strong> 数据类型的按位的操作，该数组由多个二进制位组成，每个二进制位都对应一个偏移量</li>
<li>支持的最大位数是2^32位，它可以极大的节约存储空间，使用512M内存就可以存储多达42.9亿的字节信息</li>
</ul>
</li>
<li><p><strong>常用操作</strong></p>
<ul>
<li><p>设置二进制位</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">setbit key offset value</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取二进制位的值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">getbit key offset</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取字节数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">strlen key</span><br></pre></td></tr></table></figure>
</li>
<li><p>获得含有一的数量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bitcount key</span><br></pre></td></tr></table></figure>
</li>
<li><p>并运算</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bitop and destKey key1 key2</span><br></pre></td></tr></table></figure>
</li>
<li><p>或运算</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bitop or destKey key1 key2</span><br></pre></td></tr></table></figure>
</li>
<li><p>异或运算</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bitop xor destKey key1 key2</span><br></pre></td></tr></table></figure>
</li>
<li><p>非运算</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bitop not destKey key1 key2</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-8基数统计"><a href="#2-8基数统计" class="headerlink" title="2.8	基数统计"></a>2.8	基数统计</h3><ul>
<li><p><strong>基数统计类型</strong></p>
<ul>
<li>去重复统计功能的基数估计算法</li>
<li>基数是一种数据集，去重复后的真实个数</li>
<li>用于统计一个集合中不重复的元素个数，就是对集合去重复后剩余元素的计算，只需要花费12KB内存，就能记录2的64次方个不同元素的基数</li>
</ul>
</li>
<li><p><strong>常用操作</strong></p>
<ul>
<li><p>添加元素</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pfadd key value</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取指定基数估算值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pfcount key</span><br></pre></td></tr></table></figure>
</li>
<li><p>合并基数统计</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pfmerge destKey sourceKey</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-9地理空间"><a href="#2-9地理空间" class="headerlink" title="2.9	地理空间"></a>2.9	地理空间</h3><ul>
<li><p><strong>地理空间类型</strong>： 使用二维的经纬度表示，经度范围 (-180, 180]，纬度范围 (-90, 90]，只要我们确定一个点的经纬度就可以名取得他在地球的位置</p>
</li>
<li><p><strong>常用操作</strong></p>
<ul>
<li><p>添加坐标</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">geoadd key longitude latitude member</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取经纬度</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">geopos key member</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取坐标的bash32表示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">geohash key member</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取两个位置之间的距离</p>
<ul>
<li><p>以米为单位计算</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">geodist key member1 member2 m</span><br></pre></td></tr></table></figure>
</li>
<li><p>以千米为单位计算</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">geodist key member1 member2 km</span><br></pre></td></tr></table></figure>
</li>
<li><p>以英寸为单位计算</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">geodist key member1 member2 ft</span><br></pre></td></tr></table></figure>
</li>
<li><p>以英里为单位计算</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">geodist key member1 member2 mi</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>获取指定距离内的位置元素</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">georadius key longitude latitude radius</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取指定范围内的元素</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">georadiusbymember key longitude latitude radius</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-10流"><a href="#2-10流" class="headerlink" title="2.10	流"></a>2.10	流</h3><ul>
<li><p><strong>流类型</strong>：实现消息队列，支持消息的持久化、支持自动生成全局唯一 <strong>id</strong>、支持 <strong>ACK</strong> 确认消息的模式、支持消费组模式等，让消息队列更加的稳定和可靠</p>
</li>
<li><p><strong>流的结构</strong></p>
<ul>
<li><strong>消费组</strong>：由命令创建，同一消费组可以有多个消费者</li>
<li><strong>游标</strong>：每个消费组都有一个游标，任意消费者读取消息后都会使游标向前移动</li>
<li><strong>消费者</strong>：消费组中的消费者</li>
<li><strong>待处理编号</strong>：记录当前被消费已读取但未 <strong>ACK</strong> 的消息 <strong>id</strong></li>
</ul>
</li>
<li><p><strong>常用操作</strong></p>
<ul>
<li><p><strong>队列指令</strong></p>
<ul>
<li><p>添加到队列末尾</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xadd key field value</span><br></pre></td></tr></table></figure>
</li>
<li><p>限制流的长度</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrim key maxlen len</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除消息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xdel key <span class="built_in">id</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>获取消息长度</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xlen key</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取消息列表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xrange key index1 index2</span><br></pre></td></tr></table></figure>
</li>
<li><p>反向获取消息列表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xrevrange key index1 index2</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取消息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xread count block key <span class="built_in">id</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>消费组指令</strong></p>
<ul>
<li><p>创建消费者组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xgroup create key groupname</span><br></pre></td></tr></table></figure>
</li>
<li><p>读取消费者组的消息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xreadgroup group group consumer key <span class="built_in">id</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>消息被标记为已处理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xack key group <span class="built_in">id</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>设置消费组最后递送消息的 <strong>id</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xgroup setid key groupname <span class="built_in">id</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>删除消费者组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xgroup delconsumer key groupname consumername</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取待处理消息的详细信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xpending key group index1 index2 count</span><br></pre></td></tr></table></figure>
</li>
<li><p>转移消息的归属权</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xclaim key group consumer time <span class="built_in">id</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>打印消费者组的详细信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xinfo <span class="built_in">groups</span> key</span><br></pre></td></tr></table></figure>
</li>
<li><p>打印流的详细信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xinfo stream key</span><br></pre></td></tr></table></figure>
</li>
<li><p>打印流的详细信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xinfo consumers key groupname</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>四个特殊符号</strong></p>
<ul>
<li>**+&#x2F;-**：最小和最大可能出现的 <strong>id</strong></li>
<li>**$**：表示只消费新的消息，当前流中最大的 <strong>id</strong></li>
<li>**&gt;**：用于 <strong>xreadgroup</strong> 命令，表示迄今没有发送给组中的使用者的消息</li>
<li>*****：用于 <strong>xadd</strong> 命令，让系统自动生成 <strong>id</strong></li>
</ul>
</li>
</ul>
<h3 id="2-11位域"><a href="#2-11位域" class="headerlink" title="2.11	位域"></a>2.11	位域</h3><ul>
<li><strong>位域类型</strong><ul>
<li>将很多小的整数存储到一个长度较大的位图中，又或者将一个非常庞大的键分割位多个较小的键来进行储存，从而高效利用内存</li>
<li>将 <strong>Redis</strong> 字符串看作是一个由二进制位组成的数组并能对变长位宽和任意没有字节对齐的指定整型位域进行寻址和修改</li>
</ul>
</li>
</ul>
<h2 id="第三节持久化"><a href="#第三节持久化" class="headerlink" title="第三节	持久化"></a>第三节	持久化</h2><h3 id="3-1RDB"><a href="#3-1RDB" class="headerlink" title="3.1	RDB"></a>3.1	RDB</h3><ul>
<li><p><strong>RDB</strong>：全称 <strong>Redis Data Base</strong>，即 <strong>Redis</strong> 数据库，<strong>RDB</strong> 持久性以指定的时间间隔执行数据集的时间点快照</p>
<ul>
<li>在指定的时间间隔，执行数据集的时间点快照</li>
<li>实现类似照片记录效果的方式，就是把某一时刻的数据和状态以文件的形式写到磁盘上，也就是快照，即使故障宕机，快照文件也不会丢失，数据的可靠性也就得到了保证</li>
<li>将内存数据全部保存到磁盘 <strong>dump.rdb</strong> 文件中</li>
</ul>
</li>
<li><p><strong>配置方法</strong></p>
<ul>
<li><p>配置保存间隔</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">save 3600 1 300 100 60 100  // 3600秒 修改一次  100秒 修改60次  60秒 修改10000次 触发保存</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改快照文件保存地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dir</span> /user/local/dump</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改快照文件名称</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">abfilename dump6666.rdb</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>恢复备份</strong></p>
<ul>
<li><strong>自动操作</strong>：物理恢复，一定服务和备份分机隔离，各自存储</li>
<li><strong>手动操作</strong><ul>
<li><strong>save</strong>：在主线程中执行会阻塞 <strong>Redis</strong> 服务器，直到持久化工作完成才能处理其他命令，线上禁止使用</li>
<li><strong>bgsave</strong>：在后台异步进行快照操作，不阻塞快照同时还可以响应客户端请求，该触发过程会 <strong>fork</strong> 一个子进程由子进程复制持久化过程</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>优缺点</strong></p>
<ul>
<li><strong>优点</strong>：适合大规模的数据恢复，按照业务定时备份，对数据完整性和一致性要求不高，<strong>RDB</strong> 文件在内存中的加载速度比 <strong>AOF</strong> 快得多</li>
<li><strong>缺点</strong><ul>
<li>在一定间隔时间做一次备份，如果 <strong>Redis</strong> 意外宕机，就会丢掉最近一次快照到宕机时的数据</li>
<li>内存数量的全量同步，如果数据量过大会导致 <strong>IO</strong> 严重影响服务器性能</li>
<li><strong>RDB</strong> 依赖于主进程的 <strong>fork</strong> ，在更大的数据集中，这可能会导致服务器请求的瞬间延迟</li>
<li><strong>fork</strong> 的时候内存中的数据被克隆了一份，大致2倍的膨胀性，需要考虑</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>检查修复快照文件</strong>：当文件受损时，检查并修复受损的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-check-rdb dump.rdb</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>触发 RDB 快照的情况</strong></p>
<ul>
<li>配置文件中默认快照配置</li>
<li>手动执行 <strong>save</strong> 或者 <strong>bgsave</strong> 命令</li>
<li>执行清空数据库的命令</li>
<li>执行关机命令且没有开启 <strong>AOF</strong> 持久化</li>
<li>主从复制时，主节点自动触发</li>
</ul>
</li>
<li><p><strong>禁用快照</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">save <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>RDB 配置优化</strong></p>
<ul>
<li><p>保存错误时停止写入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stop-writes-on-bgsave-error <span class="built_in">yes</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>快照压缩存储</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rdbcompression <span class="built_in">yes</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>算法数据校验</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rdbchecksum <span class="built_in">yes</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>删除复制中的快照文件启用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rdb-del-sync-files no</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="3-2AOF"><a href="#3-2AOF" class="headerlink" title="3.2	AOF"></a>3.2	AOF</h3><ul>
<li><p><strong>AOF 简介</strong>：以日志的形式来记录每个写操作，将 <strong>Redis</strong> 执行过的所有写指令记录下来（读操作不记录），只许追加文件但不可以改写文件，<strong>Redis</strong> 启动之初会读取该文件重新构建数据，即根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</p>
</li>
<li><p><strong>AOF 持久化流程</strong></p>
<ul>
<li>客户端作为命令的来源，会有多个源头以及源源不断的请求命令</li>
<li>在这些命令到达服务器以后并不是直接写入 <strong>AOF</strong> 文件，会将这些命念先放入 <strong>AOF</strong> 缓存中进行保存，即内存中的一片区域，当这些命令达到一定量以后再写入磁盘，避免频繁的磁盘 <strong>IO</strong> 操作</li>
<li><strong>AOF</strong> 缓存会根据同步文件的三种写回策略将命令写入磁盘上 <strong>AOF</strong> 文件</li>
<li>随着写入 <strong>AOF</strong> 内容的增加为避免文件膨胀，会根据规则进行命令的合并，从而起到 <strong>AOF</strong> 文件压縮的目的</li>
<li>当服务器重启的时候会从 <strong>AOF</strong> 文件载入数据</li>
</ul>
</li>
<li><p><strong>AOF 缓冲区三种写回策略</strong></p>
<ul>
<li><strong>always</strong>：同步写回，每个写命令执行完立刻同步地将日志写回磁盘</li>
<li><strong>everysec</strong>：每秒写回，每个写命令执行完，只是先把日志写到 <strong>AOF</strong> 缓冲区，每隔1s把缓存区地数据写入磁盘</li>
<li><strong>no</strong>：操作系统控制写回，只是将日志先写到 <strong>AOF</strong> 文件的内存缓冲区，由操作系统决定何时将缓冲区内容写回磁盘</li>
</ul>
</li>
<li><p><strong>AOF 配置优化</strong></p>
<ul>
<li><p>开启 <strong>AOF</strong> 持久化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">appendonly no</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置 <strong>AOF</strong> 文件保存路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">appenddirname <span class="string">&quot;appendonlydir&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>设置 <strong>AOF</strong> 文件名称</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">appendfilename <span class="string">&quot;appendonly.aof&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>异常恢复</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-check-aof --fix appendonly.aof</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>优缺点</strong></p>
<ul>
<li><strong>优点</strong>：更好的保护数据不丢失、性能高、可做紧急恢复</li>
<li><strong>缺点</strong><ul>
<li>相同数据集的数据而言 <strong>AOF</strong> 文件要远大于 <strong>RDB</strong> 文件，恢复速度慢于 <strong>RDB</strong></li>
<li><strong>AOF</strong> 运行效率要慢于 <strong>RDB</strong>，每秒同步策略效率较好，不同步效率和 <strong>RDB</strong> 相同</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>AOF 重写机制</strong></p>
<ul>
<li><p>开启重写机制</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure>
</li>
<li><p>自动触发</p>
<ul>
<li>满足配置文件中的选项后，<strong>Redis</strong> 会记录上次重写时的 <strong>AOF</strong> 大小</li>
<li>默认配置是当 <strong>AOF</strong> 文件大小是上次重写后大小的一倍且文件大于64M时触发</li>
</ul>
</li>
<li><p>手动触发</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bgrewriteaof</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="3-3RDB-AOF混合持久化"><a href="#3-3RDB-AOF混合持久化" class="headerlink" title="3.3	RDB-AOF混合持久化"></a>3.3	RDB-AOF混合持久化</h3><ul>
<li><strong>数据恢复顺序和加载顺序</strong>：在同时开启 <strong>RDB</strong> 和 <strong>AOF</strong> 持久化时，重启时只会加载 <strong>AOF</strong> 文件，不会加载 <strong>RDB</strong> 文件</li>
<li><strong>同时开启两种持久化方式</strong><ul>
<li>设置 <strong>aof-use-rdb-preamble</strong> 的值为 <strong>yes</strong>，开启混合方式持久化</li>
<li>当 <strong>Redis</strong> 重启时候会优先载入 <strong>AOF</strong> 文件来恢复原始的数据，在通常情况下 <strong>AOF</strong> 文件保存的数据集要比 <strong>RDB</strong> 文件保存的数据集要完整</li>
<li>当 <strong>RDB</strong> 的数据不实时，同时使用两者时服务器重启也只会找 <strong>AOF</strong> 文件</li>
</ul>
</li>
</ul>
<h3 id="3-4纯缓存模式"><a href="#3-4纯缓存模式" class="headerlink" title="3.4	纯缓存模式"></a>3.4	纯缓存模式</h3><ul>
<li><strong>同时关闭 RDB 和 AOF</strong><ul>
<li>禁用 <strong>RDB</strong> 持久化：<strong>save “”</strong> 命令，禁用 <strong>RDB</strong> 持久化模式下，仍然可以使用命令 <strong>save</strong>、<strong>bgsave</strong>生成 <strong>RDB</strong> 文件</li>
<li>禁用 <strong>AOF</strong>持久化：<strong>appendonly no</strong> 命令，禁用 <strong>AOF</strong> 持久化模式下，仍然可以使用命令 <strong>bgrewriteaof</strong> 生成 <strong>AOF</strong> 文件</li>
</ul>
</li>
</ul>
<h2 id="第四节事务"><a href="#第四节事务" class="headerlink" title="第四节	事务"></a>第四节	事务</h2><h3 id="4-1事务介绍"><a href="#4-1事务介绍" class="headerlink" title="4.1	事务介绍"></a>4.1	事务介绍</h3><ul>
<li><strong>Redis 事务介绍</strong><ul>
<li>可以一次执行多个命令，本质是一组命令的集合，一个事务中的所有命令都会序列化，按顺序地串行化执行而不会被其他命令插入，不许加塞</li>
<li>一个队列中，一次性、顺序性、排他性的执行一系列命令</li>
</ul>
</li>
<li><strong>Redis事务和数据库事务</strong><ul>
<li><strong>单独的隔离操作</strong>：仅仅保证事务里的操作会被连续地独占执行，在执行完所有指令之前不会同时执行其他客户端的请求</li>
<li><strong>没有隔离级别的概念</strong>：事务提交前不会执行任何指令，所有不存在隔离级别的概念</li>
<li><strong>不保证原子性</strong>：不保证所有指令同时成功或同时失败，没有执行到一半回滚的能力</li>
<li><strong>排它性</strong>：会保证一个事务内的命令依次执行，不会被其他命令插入</li>
</ul>
</li>
</ul>
<h3 id="4-2事务基本操作"><a href="#4-2事务基本操作" class="headerlink" title="4.2	事务基本操作"></a>4.2	事务基本操作</h3><ul>
<li><p><strong>事务命令</strong></p>
<ul>
<li><p>取消事务，放弃事务块内的所有命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">discard</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行事务块内的所有命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exec</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>标记一个事务块的开始</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">multi</span><br></pre></td></tr></table></figure>
</li>
<li><p>取消 <strong>watch</strong> 命令对所有 <strong>key</strong> 的监视</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unwatch</span><br></pre></td></tr></table></figure>
</li>
<li><p>监视一个或多个 <strong>key</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">watch key</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>事务操作</strong></p>
<ul>
<li><p>正常执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">multi</span><br><span class="line"><span class="built_in">exec</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>放弃事务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">multi</span><br><span class="line">discard</span><br></pre></td></tr></table></figure>
</li>
<li><p>全体连坐：事务中含有语法错误时，全部指令都不会执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">multi</span><br><span class="line">// 语法错误</span><br><span class="line"><span class="built_in">exec</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>冤头债主：执行后错误时，不提供事务回滚，正确的指令依然会执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">multi</span><br><span class="line"><span class="built_in">exec</span></span><br><span class="line">// 执行错误</span><br></pre></td></tr></table></figure>
</li>
<li><p>监视：监视变量后，如果中途发生数据篡改，后续命令执行会失败</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">watch key</span><br><span class="line">// 加塞篡改</span><br><span class="line">multi</span><br><span class="line"><span class="built_in">exec</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第五节管道"><a href="#第五节管道" class="headerlink" title="第五节	管道"></a>第五节	管道</h2><h3 id="5-1管道介绍"><a href="#5-1管道介绍" class="headerlink" title="5.1	管道介绍"></a>5.1	管道介绍</h3><ul>
<li><p><strong>管道简介</strong></p>
<ul>
<li>可以一次性发送多条命令给服务端</li>
<li>服务端依次处理完完毕后，通过一条响应一次性将结果返回，通过减少客户端与 <strong>Redis</strong> 的通信次数来实现降低往返延时时间</li>
<li>管道实现的原理是队列，先进先出特性保证数据的顺序性</li>
<li>将多个命令都存在一个 <strong>txt</strong> 文件中，然后一同批处理，验证批处理</li>
</ul>
</li>
<li><p><strong>管道通信</strong>：<strong>Redis</strong> 是一种基于客户端-服务端模型以及请求&#x2F;响应协议的 <strong>TCP</strong> 服务，如果同时需要执行大量的命令，那么就要等待上一条命令应答后再执行，这中间不仅仅多了 <strong>RTT</strong>，而且还频繁调用系统 <strong>IO</strong>，发送网络请求，同时需要  <strong>Redis</strong> 调用多次读写系统方法，系统方法会将数据从用户态转移到内核态，会对进程上下文有较大的影响，管道通过一条响应一次性将结果返回，通过减少通信次数来实现降低往返延时时间</p>
</li>
</ul>
<h3 id="5-2管道操作"><a href="#5-2管道操作" class="headerlink" title="5.2	管道操作"></a>5.2	管道操作</h3><ul>
<li><p><strong>管道操作</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> cmd.txt | redis-cli --pipe</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>管道与原生批量</strong></p>
<ul>
<li>原生批量命令是原子性，而管道是非原子性</li>
<li>原生批量命令一次只能执行一种命令，而管道支持批量执行不同命令</li>
<li>原生批命令是服务端实现，而管道需要服务端与客户端共同完成</li>
</ul>
</li>
<li><p><strong>管道与事务</strong></p>
<ul>
<li>事务具有原子性，管道不具有原子性</li>
<li>管道一次性将多条命令发送到服务器，事务是一条一条发的，事务只有在接收到 <strong>exec</strong> 命令后才会执行，管道不会</li>
<li>执行事务时会阻塞其他命令的执行，而执行管道中的命令时不会</li>
</ul>
</li>
<li><p><strong>管道注意事项</strong></p>
<ul>
<li>管道缓冲的指令只是会依次执行，不保证原子性，如果执行中指令发生异常，将会继续执行后续的指令</li>
<li>使用管道组装的命令个数不能太多，不然数据量过大客户端阻塞的时间可能过久，同时服务器也被迫回复一个队列答复，占用很多内存</li>
</ul>
</li>
</ul>
<h2 id="第六节复制"><a href="#第六节复制" class="headerlink" title="第六节	复制"></a>第六节	复制</h2><h3 id="6-1复制介绍"><a href="#6-1复制介绍" class="headerlink" title="6.1	复制介绍"></a>6.1	复制介绍</h3><ul>
<li><strong>主从复制</strong>：将一台 <strong>Redis</strong> 服务器的数据，复制到其他的 <strong>Redis</strong> 服务器，前者称为主节点，后者称为从节点，数据的复制是单向的，只能由主节点到从节点，主节点以写为主，从节点以读为主，当主节点数据变化时，自动将新的数据异步同步到其他从节点数据库</li>
</ul>
<h3 id="6-2基本操作"><a href="#6-2基本操作" class="headerlink" title="6.2	基本操作"></a>6.2	基本操作</h3><ul>
<li><p><strong>配置方式</strong></p>
<ul>
<li><strong>配置文件</strong>：一次配置，持久稳定</li>
<li><strong>命令配置</strong>：当次生效</li>
</ul>
</li>
<li><p><strong>编辑 redis.conf 配置文件</strong></p>
<ul>
<li><p>修改端口号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">port 6379</span><br></pre></td></tr></table></figure>
</li>
<li><p>开启守护进程模式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">daemonize <span class="built_in">yes</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 <strong>pid</strong> 文件名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pidfile <span class="string">&quot;/var/run/redis_6379.pid&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 <strong>log</strong> 文件名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">logfile <span class="string">&quot;./log/6379.log&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>主从复制配置</strong></p>
<ul>
<li><p>去除配置文件中的从属关系</p>
</li>
<li><p>升级为主机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">replicaof/slaveof no one</span><br></pre></td></tr></table></figure>
</li>
<li><p>从机连接到主机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">replicaof/slaveof 192.168.1.100 6379</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看复制节点的主从关系和配置信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">info replication</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>主从复制结构</strong></p>
<ul>
<li><strong>一主多从结构</strong><ul>
<li>主机有读写能力，从机只有读能力</li>
<li>当主机宕机时，从机原地待命，不会变成主机</li>
<li>当主机恢复时，主从关系恢复正常</li>
</ul>
</li>
<li><strong>薪火相传结构</strong><ul>
<li>上一个从机也可以是下一个从机的主机，从机同样可以接受其他的从机的连接和同步请求</li>
<li>从机作为链条中下一个的主机，可以有效减轻主机的写压力</li>
<li>中途变更转向会清除之前的数据，重新建立拷贝最新的数据</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="6-3复制原理"><a href="#6-3复制原理" class="headerlink" title="6.3	复制原理"></a>6.3	复制原理</h3><ul>
<li><strong>主从复制原理</strong><ul>
<li><strong>从机启动</strong>，<strong>同步初请</strong><ul>
<li>从机启动成功连接到主机后会发送一个 <strong>sync</strong> 同步命令</li>
<li>从机首次全新连接主机，一次完全同步将被自动执行，原有数据将会被主机数据覆盖清除</li>
</ul>
</li>
<li><strong>首次连接</strong>，<strong>全量复制</strong><ul>
<li>主机节点收到同步命令后开始保存快照，同时收集所有接受接收到的数据修改命令，在执行快照持久化后，将所有的快照文件和缓存命令后发送到从机，完成一次同步</li>
<li>从机服务在接受到数据库文件操作后，将其存盘并加载到内存中，从而完成复制初始化</li>
</ul>
</li>
<li><strong>心跳持续</strong>，<strong>保持通信</strong><ul>
<li>设置复制周期 <strong>repl-ping-replica-period</strong> 参数</li>
<li>主机发出 <strong>ping</strong> 包的周期默认为10秒</li>
</ul>
</li>
<li><strong>进入平稳</strong>，<strong>增量复制</strong><ul>
<li>主机继续将新的所有收集到的修改命令自动一次传给从机，完成同步</li>
</ul>
</li>
<li><strong>从机下线</strong>，重传续传<ul>
<li>主机会检查 <strong>backlog</strong> 里面的 <strong>offset</strong>，主机和从机都会保存一个复制的 <strong>offset</strong> 怀有一个 <strong>masterId</strong></li>
<li><strong>offset</strong> 是保存在 <strong>backlog</strong> 中的，主机只会把已经复制的 <strong>offset</strong> 后面的数据赋值给从机，类似断电续传</li>
</ul>
</li>
</ul>
</li>
<li><strong>主从复制的缺点</strong><ul>
<li><strong>复制延时，信号衰弱</strong>：所有的写操作先在主机上操作，然后同步更新到从机上，存在一定的延迟<ul>
<li><strong>主机宕机</strong>：默认情况下当主机宕机时不会重选一个主机，需要人工干预</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="第七节哨兵"><a href="#第七节哨兵" class="headerlink" title="第七节	哨兵"></a>第七节	哨兵</h2><h3 id="7-1哨兵介绍"><a href="#7-1哨兵介绍" class="headerlink" title="7.1	哨兵介绍"></a>7.1	哨兵介绍</h3><ul>
<li><strong>哨兵介绍</strong>：哨兵巡查监控后主机是否故障，如果故障了根据投票数自动将某一个从库转换为新主库，继续对外服务，俗称无人值守运维</li>
<li><strong>哨兵的作用</strong><ul>
<li>监控 <strong>Redis</strong> 运行状态，包括主节点和从节点</li>
<li>当主节点宕机时，能自动将从节点切换成新主节点</li>
</ul>
</li>
<li><strong>哨兵的功能</strong><ul>
<li><strong>主从监控</strong>：监控主从 <strong>Redis</strong> 库运行是否正常</li>
<li><strong>消息通知</strong>：哨兵可以将故障转移的结果发送到客户端</li>
<li><strong>故障转移</strong>：如果主节点异常，则会进行主从切换，将其中一个从节点作为新主节点</li>
<li><strong>配置中心</strong>：客户端通过连接哨兵来获得当前 <strong>Redis</strong> 服务的主节点地址</li>
</ul>
</li>
</ul>
<h3 id="7-2基本操作"><a href="#7-2基本操作" class="headerlink" title="7.2	基本操作"></a>7.2	基本操作</h3><ul>
<li><p><strong>哨兵配置文件 sentinel.conf 参数</strong></p>
<ul>
<li><strong>bind</strong>：服务监听地址，用于客户端连接</li>
<li><strong>daemonize</strong>：守护进程模式</li>
<li><strong>protect-mode</strong>：安全保护模式</li>
<li><strong>port</strong>：端口号</li>
<li><strong>logfile</strong>：日志文件存放地址</li>
<li><strong>pidfile</strong>：<strong>pid</strong> 日志路径</li>
<li><strong>dir</strong>：工作目录</li>
<li><strong>sentinel monitor</strong><ul>
<li>设置要监视的主机</li>
<li>其中 <strong>quorum</strong> 参数表示最少有几个哨兵认可客观下线，同意故障迁移的法定票数</li>
</ul>
</li>
<li><strong>sentiel auth-pass</strong>：通过密码连接主机，对应主机 <strong>redis.conf</strong> 配置文件的 <strong>masterauth</strong> 参数</li>
</ul>
</li>
<li><p><strong>哨兵案例演示</strong></p>
<ul>
<li><p>启动一主多从的服务端和客户端</p>
</li>
<li><p>启动哨兵</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-sentinel sentinel26379.conf --sentinel</span><br><span class="line">redis-sentinel sentinel26380.conf --sentinel</span><br><span class="line">redis-sentinel sentinel26381.conf --sentinel</span><br></pre></td></tr></table></figure>
</li>
<li><p>当主机宕机时，会从从机中选举一个新的主机，如果主机恢复，则充当从机身份</p>
</li>
</ul>
</li>
</ul>
<h3 id="7-3哨兵原理"><a href="#7-3哨兵原理" class="headerlink" title="7.3	哨兵原理"></a>7.3	哨兵原理</h3><ul>
<li><strong>SDOWN 主观下线</strong><ul>
<li>单个哨兵主观上检测到关于主机的状态，如果发送 <strong>ping</strong> 包后在一定时间内没有收到合法的回复，就达到了主观下线的条件</li>
<li>哨兵配置文件中设置了 <strong>down-after-milliseconds</strong> 参数表示判断主观下线的时间长度</li>
</ul>
</li>
<li><strong>ODOWN 客观下线</strong><ul>
<li>需要一定数量的哨兵，多个哨兵达成一致意见才能认为一个主机客观上已经宕机</li>
<li>哨兵配置文件中设置了 <strong>quorum</strong> 参数表示判断主机宕机的最少哨兵数量</li>
</ul>
</li>
<li><strong>选举出领导者哨兵</strong><ul>
<li>当主节点被判断客观下线后，各哨兵会进行协商，先选举一个领导哨兵节点并由它进行故障迁移</li>
<li>使用 <strong>Raft</strong> 算法选出领导节点，算法的基本思路是先到先得，哨兵 <strong>A</strong> 向 <strong>B</strong> 发送成为领导者的请求，如果 <strong>B</strong> 没有同意其他哨兵的请求，则同意其成为领导者</li>
</ul>
</li>
<li><strong>领导者哨兵选举主机</strong><ul>
<li>过滤故障的节点</li>
<li>选择优先级 <strong>slave-priority</strong> 属性最大的从节点作为主节点，如不存在则继续</li>
<li>选择复制偏移量最大，即记录数据最多的从节点作为主节点，如不存在则继续</li>
<li>选择 <strong>runid</strong> 属性最小，即 <strong>Redis</strong> 随机标识最小的从节点作为主节点</li>
</ul>
</li>
<li><strong>哨兵选举流程</strong><ul>
<li><strong>新主登基</strong>：某一个从机备选成为新的主机</li>
<li><strong>群臣俯首</strong>：其他从机更新从属关系</li>
<li><strong>旧主拜服</strong>：原有的主机回来也会成为新主机的从机</li>
</ul>
</li>
<li><strong>哨兵的使用技巧</strong><ul>
<li>哨兵节点数量应为多个，保证高可用</li>
<li>哨兵节点数量应为奇数个</li>
<li>各个哨兵节点的配置应该保持一致</li>
<li>哨兵集群 + 主从复制并不能保证数据零丢失</li>
</ul>
</li>
</ul>
<h2 id="第八节集群"><a href="#第八节集群" class="headerlink" title="第八节	集群"></a>第八节	集群</h2><h3 id="8-1集群介绍"><a href="#8-1集群介绍" class="headerlink" title="8.1	集群介绍"></a>8.1	集群介绍</h3><ul>
<li><strong>集群简介</strong>：对多个复制集进行集群，形成水平扩展每个复制集只负责存储整个数据集的一部分，是一个提供在多个 <strong>Redis</strong> 节点间共享数据的程序集</li>
<li><strong>集群的功能</strong><ul>
<li>支持多个主机，每个主机又可以挂载多个从机</li>
<li>读写分离，支持海量数据的高可用，支持海量数据的读写存储操作</li>
<li>由于集群自带哨兵的故障转移机制，内置了高可用的支持，无需再去使用哨兵功能</li>
<li>客户端和 <strong>Redis</strong> 的节点连接，不再需要连接集群中所有节点，只需连接集群中的任意一个可用节点即可</li>
<li>槽位 <strong>slot</strong> 负责分配到各个物理服务节点，由对应的集群来负责维护节点、插槽和数据之间的关系</li>
</ul>
</li>
</ul>
<h3 id="8-2集群分布式存储"><a href="#8-2集群分布式存储" class="headerlink" title="8.2	集群分布式存储"></a>8.2	集群分布式存储</h3><ul>
<li><p><strong>哈希取余分区</strong></p>
<ul>
<li><strong>算法描述</strong>：<strong>hash(key) % N</strong> 个机器台数，计算出哈希值，用来决定数据映射到哪一个节点上</li>
<li><strong>优点</strong>：简单粗暴，直接有效，只需要预估好数据规划节点，就能保证一段时间的数据支撑，使用 <strong>Hash</strong> 算法让固定的一部分请求落到同一台服务器上，每台服务器固定处理一部分请求，起到负载均衡和分而治之的作用</li>
<li><strong>缺点</strong><ul>
<li>直接规划好节点，进行扩容或者缩容会很麻烦，每次数据变动会导致节点有变动，映射关系都要重新计算</li>
<li>如果需要弹性扩容或故障停机的情况下，原来的取模公式就会发生变化，此时地址经过取余运算的结果将发生很大变化，根据公式获取的服务器也会变得不可控</li>
<li>某个 <strong>Redis</strong> 机器宕机了，由于台数数量变化，会导致 <strong>hash</strong> 取余全部数据重新洗牌</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>一致性哈希算法分区</strong></p>
<ul>
<li><p><strong>算法描述</strong></p>
<ul>
<li>将整个哈希值组织成一个抽象的圆环，称为哈希环，哈希函数的输出值一般在0到 <strong>INT_MAX</strong> 之间，这些输出值可以均匀地映射到哈希环边上</li>
<li>将分布式系统的节点映射到圆环上，可以通过机器名称或 <strong>IP</strong> 地址将节点映射到环上</li>
<li>将需要存储的数据的关键字输入哈希函数，计算出哈希值，根据哈希值将数据映射到哈希环上</li>
<li>数据存储在按照顺时针方向遇到的第一个节点上</li>
</ul>
</li>
<li><p><strong>优点</strong></p>
<ul>
<li>容错性高，如果一台服务器不可用，则受影响的数据仅仅是此服务器到其环空间中前一台服务器</li>
<li>扩展性高，添加服务器节点不会导致 <strong>hash</strong> 取余全部数据重新洗牌</li>
</ul>
</li>
<li><p><strong>缺点</strong>：在服务节点太少时，容易因为节点分布不均匀而造成数据倾斜问题</p>
</li>
</ul>
</li>
<li><p><strong>哈希槽分区</strong></p>
<ul>
<li><strong>算法描述</strong><ul>
<li>在数据和节点之间加入一层哈希槽，本质是一个数组，用于管理数据和节点之间的关系</li>
<li>一个集群只能有 16384个 槽，这些槽会分配给集群中的所有主节点，分配策略没有要求</li>
<li>集群会记录节点和槽的对应关系，需要对 <strong>key</strong> 求哈希值，然后对16384取模，根据余数落入对应的槽里</li>
<li>当需要在集群中放置一个节点时，先对 <strong>key</strong> 使用 <strong>crc16</strong> 算法算出一个结果然后用结果对16384取模，这样每个 <strong>key</strong> 都会对应一个编号在 0-16383 之间的哈希槽，也就是映射到某个节点上</li>
</ul>
</li>
<li><strong>优点</strong>：很容易增加或删除节点，无论添加删除或者改变某个节点的哈希槽的数量都不会造成集群不可用的状态</li>
<li><strong>缺点</strong>：集群不保证强一致性，在特定的条件下，可能会丢掉一些被系统收到的写入请求命令</li>
</ul>
</li>
</ul>
<h3 id="8-3集群配置"><a href="#8-3集群配置" class="headerlink" title="8.3	集群配置"></a>8.3	集群配置</h3><ul>
<li><p><strong>集群配置步骤</strong></p>
<ul>
<li><p>创建配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cluster-enabled <span class="built_in">yes</span> // 系统启用集群</span><br><span class="line">cluster-config-file nodes-6381.conf // 指定包含集群中节点信息的配置文件</span><br><span class="line">cluster-node-timeout 5000 // 检验集群中节点无响应的超时时间</span><br></pre></td></tr></table></figure>
</li>
<li><p>构建集群关系</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server /myredis/cluster/redisCluter6381.conf // 启动服务器</span><br><span class="line">redis-cli --cluster create ip1:port1 ip2:port2 ip3:port3 ip4:port4 ip5:port5 ip6:port6 --cluster-replicas 1 // 构建主从关系</span><br></pre></td></tr></table></figure>
</li>
<li><p>检验集群状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli -a 123456 -p 6381 -c // 连接集群端口</span><br><span class="line">cluster nodes // 查看集群的主从关系</span><br><span class="line">cluster info // 查看集群信息</span><br><span class="line">info replication // 查看主从信息</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试集群</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cluster keyslot k1 // 查看键的槽位值</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>主从容错切换迁移</strong></p>
<ul>
<li><p>主机宕机，从机会成为主机，当原主机恢复时，不会重新成为主机</p>
</li>
<li><p>恢复原有主从关系</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CLUSTER FAILOVER   // 在原始从机端口号下执行</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>主从扩容</strong></p>
<ul>
<li><p>新建主节点服务实例配置文件并启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server redis_7007.conf</span><br></pre></td></tr></table></figure>
</li>
<li><p>主节点 7007 加入集群</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster add-node 192.168.3.100:7007 192.168.3.100:7001</span><br></pre></td></tr></table></figure>
</li>
<li><p>分配槽号，并输入分配槽位数量和插入节点 ID</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster reshard 192.168.3.100:7007</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查集群情况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster check 192.168.3.100:7001</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建从节点服务实例配置文件并启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server redis_7008.conf</span><br></pre></td></tr></table></figure>
</li>
<li><p>从节点 7008 加入集群</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster add-node 192.168.3.100:7008 192.168.3.100:7001</span><br></pre></td></tr></table></figure>
</li>
<li><p>挂接从节点，参数为主节点的 ID</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:7008&gt; cluster replicate 1d708c5042d53b6bc1e855ea41755782b6692e1a</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查集群情况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cluster nodes</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>主从缩容</strong></p>
<ul>
<li><p>删除从节点，参数为待删除从节点的 ID</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster del-node 192.168.3.100:7001 cd26feeb271c1260ec134d85dcdeaf4c72bfc3ad</span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭从节点 7008 服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli -p 7008 shutdown</span><br></pre></td></tr></table></figure>
</li>
<li><p>分配槽位给其他主节点，并输入分配槽位数量和接受节点 ID，其中 done 表示结束</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster reshard 192.168.3.100:7001</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除主节点，参数为待删除从节点的 ID</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster del-node 192.168.3.100:7001 1d708c5042d53b6bc1e855ea41755782b6692e1a</span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭主节点 7007 服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli -p 7007 shutdown</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第九节SpringBoot集成Redis"><a href="#第九节SpringBoot集成Redis" class="headerlink" title="第九节	SpringBoot集成Redis"></a>第九节	SpringBoot集成Redis</h2><h3 id="9-1Redis配置"><a href="#9-1Redis配置" class="headerlink" title="9.1	Redis配置"></a>9.1	Redis配置</h3><ul>
<li><p><strong>编写  redis.conf 配置文件</strong></p>
<ul>
<li><p>开启守护模式进程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">daemonize <span class="built_in">yes</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭安全保护模式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">protected-mode=no</span><br></pre></td></tr></table></figure>
</li>
<li><p>注释服务监听地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bind 127.0.0.1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">requirepass=123456</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>防火墙配置</strong></p>
<ul>
<li><p>开启防火墙</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start firewalld</span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭防火墙</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure>
</li>
<li><p>开机禁用防火墙</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure>
</li>
<li><p>开机启用防火墙</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> firewalld</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="9-2Redis-Template"><a href="#9-2Redis-Template" class="headerlink" title="9.2	Redis Template"></a>9.2	Redis Template</h3><ul>
<li><p><strong>连接单机</strong></p>
<ul>
<li><p><strong>添加依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置文件</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.data.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="attr">spring.data.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="attr">spring.data.redis.timeout</span>=<span class="string">3000</span></span><br><span class="line"><span class="attr">spring.data.redis.connectTimeout</span>=<span class="string">5000</span></span><br><span class="line"><span class="attr">spring.data.redis.lettuce.pool.min-idle</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">spring.data.redis.lettuce.pool.max-idle</span>=<span class="string">8</span></span><br><span class="line"><span class="attr">spring.data.redis.lettuce.pool.max-active</span>=<span class="string">100   </span></span><br><span class="line"><span class="attr">spring.data.redis.lettuce.pool.max-wait</span>=<span class="string">2000</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置类</strong></p>
<ul>
<li><p><strong>Redis 配置</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String,Object&gt; <span class="title function_">redisTemplate</span><span class="params">(LettuceConnectionFactory lettuceConnectionFactory)</span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(lettuceConnectionFactory);</span><br><span class="line">        <span class="comment">//设置key序列化方式String</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        <span class="comment">//设置value的序列化方式json，使用GenericJackson2JsonRedisSerializer替换默认的序列化</span></span><br><span class="line">        redisTemplate.setValueSerializer(<span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setHashKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setHashValueSerializer(<span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>());</span><br><span class="line">        redisTemplate.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>业务层</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addOrder</span><span class="params">()</span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key,value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getOrderId</span><span class="params">(Integer keyId)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (String) redisTemplate.opsForValue().get(ORDER_KEY + keyId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>控制层</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/order/add&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addOrder</span><span class="params">()</span>&#123;</span><br><span class="line">        orderService.addOrder();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/order/&#123;keyId&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getOrderId</span><span class="params">(<span class="meta">@PathVariable</span> Integer keyId)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderService.getOrderId(keyId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>连接集群</strong></p>
<ul>
<li><p><strong>配置文件</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.redis.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="attr">spring.redis.clusterspring.redis.cluster.nodes</span>=<span class="string">192.1.max-redirects=3</span></span><br><span class="line"><span class="attr">spring.redis.lettuce.pool.max-active</span>=<span class="string">8</span></span><br><span class="line"><span class="attr">spring.redis.lettuce.pool.max-wait</span>=<span class="string">-1ms</span></span><br><span class="line"><span class="attr">spring.redis.lettuce.pool.max-idle</span>=<span class="string">8</span></span><br><span class="line"><span class="attr">spring.redis.lettuce.pool.min-idle</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">68.238.111</span>:<span class="string">6381,192.168.238.111:6382,192.168.238.112:6383,192.168.238.112:6384,192.168.238.113:6385,192.168.238.113:6386</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>设置刷新节点结群拓扑和动态感应</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.redis.lettuce.cluster.refresh.adaptive</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.redis.lettuce.cluster.refresh.period</span>=<span class="string">2000</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第十节多线程"><a href="#第十节多线程" class="headerlink" title="第十节	多线程"></a>第十节	多线程</h2><h2 id="第十一节BigKey"><a href="#第十一节BigKey" class="headerlink" title="第十一节	BigKey"></a>第十一节	BigKey</h2><h2 id="第十二节缓存双写一致性"><a href="#第十二节缓存双写一致性" class="headerlink" title="第十二节	缓存双写一致性"></a>第十二节	缓存双写一致性</h2><h2 id="第十三节大数据统计"><a href="#第十三节大数据统计" class="headerlink" title="第十三节	大数据统计"></a>第十三节	大数据统计</h2><h2 id="第十四节布隆过滤器"><a href="#第十四节布隆过滤器" class="headerlink" title="第十四节	布隆过滤器"></a>第十四节	布隆过滤器</h2><h2 id="第十五节缓存"><a href="#第十五节缓存" class="headerlink" title="第十五节	缓存"></a>第十五节	缓存</h2><h2 id="第十六节分布式锁"><a href="#第十六节分布式锁" class="headerlink" title="第十六节	分布式锁"></a>第十六节	分布式锁</h2><h2 id="第十七节IO多路复用"><a href="#第十七节IO多路复用" class="headerlink" title="第十七节	IO多路复用"></a>第十七节	IO多路复用</h2>]]></content>
  </entry>
  <entry>
    <title>Java SE基础</title>
    <url>/2024/01/28/Java-SE%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="Java-SE基础"><a href="#Java-SE基础" class="headerlink" title="Java SE基础"></a>Java SE基础</h1><h2 id="第一章基本数据类型"><a href="#第一章基本数据类型" class="headerlink" title="第一章	基本数据类型"></a>第一章	基本数据类型</h2><table>
<thead>
<tr>
<th align="center">数据类型</th>
<th align="center">描述</th>
<th align="center">位数</th>
<th align="center">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>byte</strong></td>
<td align="center">位</td>
<td align="center">8</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center"><strong>short</strong></td>
<td align="center">短整数</td>
<td align="center">16</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center"><strong>int</strong></td>
<td align="center">整数</td>
<td align="center">32</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center"><strong>long</strong></td>
<td align="center">长整数</td>
<td align="center">64</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center"><strong>float</strong></td>
<td align="center">单精度浮点数</td>
<td align="center">32</td>
<td align="center">0.0</td>
</tr>
<tr>
<td align="center"><strong>double</strong></td>
<td align="center">双精度浮点数</td>
<td align="center">64</td>
<td align="center">0.0</td>
</tr>
<tr>
<td align="center"><strong>char</strong></td>
<td align="center">字符</td>
<td align="center">16</td>
<td align="center">null</td>
</tr>
<tr>
<td align="center"><strong>boolean</strong></td>
<td align="center">布尔值</td>
<td align="center">8</td>
<td align="center">false</td>
</tr>
</tbody></table>
<h2 id="第二章数组"><a href="#第二章数组" class="headerlink" title="第二章	数组"></a>第二章	数组</h2><ul>
<li><p><strong>定义数组</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>输出数组地址</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(a);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>数组转字符串</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(a.toString());</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第三章方法"><a href="#第三章方法" class="headerlink" title="第三章	方法"></a>第三章	方法</h2><h3 id="3-1方法重载"><a href="#3-1方法重载" class="headerlink" title="3.1	方法重载"></a>3.1	方法重载</h3><ul>
<li><p><strong>重载</strong>：指一个类中可以有多个方法具有相同的方法名，但这些方法的参数类型不同、个数不同、顺序不同</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span> &#123; </span><br><span class="line">    System.out.println(<span class="string">&quot;3f&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> a)</span> &#123;        <span class="comment">//重载，注意返回值同，参数不同</span></span><br><span class="line">    System.out.println(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-2可变参数"><a href="#3-2可变参数" class="headerlink" title="3.2	可变参数"></a>3.2	可变参数</h3><ul>
<li><p><strong>可变参数</strong>：是将所有参数封装到数组里，注意可变参数要放在后面</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span>... b)</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第四章修饰符"><a href="#第四章修饰符" class="headerlink" title="第四章	修饰符"></a>第四章	修饰符</h2><h3 id="4-1访问权限修饰符"><a href="#4-1访问权限修饰符" class="headerlink" title="4.1	访问权限修饰符"></a>4.1	访问权限修饰符</h3><table>
<thead>
<tr>
<th align="center">修饰符</th>
<th align="center">访问权限</th>
<th align="center">适用范围</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>public</strong></td>
<td align="center">所有类可见</td>
<td align="center">类，接口，变量，方法</td>
</tr>
<tr>
<td align="center"><strong>protected</strong></td>
<td align="center">同一个包的类，不同包的子类可见</td>
<td align="center">变量，方法</td>
</tr>
<tr>
<td align="center"><strong>default</strong></td>
<td align="center">同一个包的类可见</td>
<td align="center">类，接口，变量，方法</td>
</tr>
<tr>
<td align="center"><strong>private</strong></td>
<td align="center">仅当前类可见</td>
<td align="center">变量，方法</td>
</tr>
</tbody></table>
<h3 id="4-2static关键字"><a href="#4-2static关键字" class="headerlink" title="4.2	static关键字"></a>4.2	static关键字</h3><ul>
<li><p><strong>静态成员变量</strong>：被所有对象共享，可用类名调用，局部变量不能被声明为 <strong>static</strong> 变量</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> price;<span class="comment">//成员变量在堆内存</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>静态方法</strong>：可用类名调用，只能访问静态变量和方法，不能使用 <strong>this</strong> 关键字</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        Phone.price=<span class="number">4</span>;</span><br><span class="line">        <span class="comment">//fun();会报错，静态方法只能访问静态方法或变量。</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">fun</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-3abstract关键字"><a href="#4-3abstract关键字" class="headerlink" title="4.3	abstract关键字"></a>4.3	abstract关键字</h3><ul>
<li><p><strong>抽象类</strong>：使用 <strong>abstract</strong> 修饰，不能使用 <strong>final</strong> 修饰，可以包括抽象方法和非抽象方法</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">()</span>; <span class="comment">//抽象方法</span></span><br><span class="line">	<span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">n</span><span class="params">()</span>; <span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>抽象方法</strong>：使用 <strong>abstract</strong> 修饰，只能存在于抽象类中，非抽象子类必须重写抽象父类中的所有抽象方法，抽象子类可以直接继承</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;    <span class="comment">//非抽象子类</span></span><br><span class="line">     <span class="comment">//实现父类所有抽象方法</span></span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">m</span><span class="params">()</span>&#123;</span><br><span class="line">          .........</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">n</span><span class="params">()</span>&#123;</span><br><span class="line">          .........</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-4final"><a href="#4-4final" class="headerlink" title="4.4	final"></a>4.4	final</h3><ul>
<li><p><strong>final 变量</strong>：必须显式指定初始值，不能被重新赋值</p>
</li>
<li><p><strong>final 方法</strong>：不能被子类重写</p>
</li>
<li><p><strong>final 类</strong>：不能被继承</p>
</li>
<li><p><strong>final 引用</strong>：不能变地址值，但是可以变地址内容</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> M m=<span class="keyword">new</span> <span class="title class_">M</span>();</span><br><span class="line">m.age=<span class="number">12</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第五章关键字"><a href="#第五章关键字" class="headerlink" title="第五章	关键字"></a>第五章	关键字</h2><h3 id="5-1this"><a href="#5-1this" class="headerlink" title="5.1	this"></a>5.1	this</h3><ul>
<li><p><strong>this 关键字</strong>：指代当前类中的成员变量、方法，可以用于方法的形参与成员变量同名时进行区分</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-2super"><a href="#5-2super" class="headerlink" title="5.2	super"></a>5.2	super</h3><ul>
<li><p><strong>super 关键字</strong>：指代父类的成员变量、方法</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123; </span><br><span class="line">    <span class="keyword">public</span> String name;   </span><br><span class="line">    <span class="type">int</span> age=<span class="number">3</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;  <span class="comment">//吃东西方法的具体实现  &#125; </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123; <span class="comment">//睡觉方法的具体实现  &#125; </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//子类 </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Penguin</span>  <span class="keyword">extends</span>  <span class="title class_">Animal</span>&#123; </span><br><span class="line">    <span class="type">int</span> age=<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> age=<span class="number">5</span>;</span><br><span class="line">         System.out.println(age);   <span class="comment">//5,子类可以访问父类非私有成员变量</span></span><br><span class="line">        System.out.println(<span class="built_in">this</span>.age);<span class="comment">//4</span></span><br><span class="line">        System.out.println(<span class="built_in">super</span>.age);<span class="comment">//3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第六章面向对象"><a href="#第六章面向对象" class="headerlink" title="第六章	面向对象"></a>第六章	面向对象</h2><h3 id="6-1类和对象"><a href="#6-1类和对象" class="headerlink" title="6.1	类和对象"></a>6.1	类和对象</h3><ul>
<li><p><strong>类</strong>：对象在堆内存，成员变量便也在堆内存，创建对象时有初始值</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="type">int</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> tmp;<span class="comment">//局部变量在栈内存，不赋值就用会报错</span></span><br><span class="line">        System.out.println(<span class="string">&quot;phone&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>对象</strong>：使用 <strong>new</strong> 关键字创建对象</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Phone p=<span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="6-2内部类"><a href="#6-2内部类" class="headerlink" title="6.2	内部类"></a>6.2	内部类</h3><ul>
<li><p><strong>内部类</strong>：在一个类中定义类，可以直接访问外部类私有、公有成员</p>
</li>
<li><p><strong>成员内部类</strong>：定义在外部类的成员位置</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="type">int</span> num=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;innershow&quot;</span>+num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//外部类访问成员内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">()</span>&#123;        </span><br><span class="line">        Inner in=<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        in.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>局部内部类</strong>：定义在外部类的成员方法内</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fun2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner2</span>&#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;成员内部类&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Inner2 in=<span class="keyword">new</span> <span class="title class_">Inner2</span>();</span><br><span class="line">    in.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>匿名内部类</strong>：在成员方法内定义子类，实现接口或继承抽象类</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fun3</span><span class="params">()</span>&#123;</span><br><span class="line">        Phone p=<span class="keyword">new</span> <span class="title class_">Phone</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;实现接口的匿名内部类&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        p.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="6-3封装"><a href="#6-3封装" class="headerlink" title="6.3	封装"></a>6.3	封装</h3><ul>
<li><p><strong>封装</strong>：将类的某些信息隐藏在类的内部，不允许外部程序直接访问，以提高安全性和复用性</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="type">int</span> price;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第七章继承"><a href="#第七章继承" class="headerlink" title="第七章	继承"></a>第七章	继承</h2><ul>
<li><p><strong>继承</strong>：子类拥有父类的属性、方法等，同时可以拥有自己的属性和方法，即子类可以对父类进行扩展</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>继承的特点</strong>：可以提高代码的复用性， 便于后续的维护，但是同时也会增加代码的耦合性</p>
</li>
<li><p><strong>构造器的继承</strong>：子类所有构造方法会默认先运行 **super()**，构造方法内的其余语句必须写在 <strong>super()</strong> 语句后</p>
</li>
</ul>
<h2 id="第八章多态"><a href="#第八章多态" class="headerlink" title="第八章	多态"></a>第八章	多态</h2><ul>
<li><p><strong>多态</strong>：同一个实体同时具有多种形式，即同一个对象，在不同时刻，代表的对象不一样，指的是对象的多种形态</p>
</li>
<li><p><strong>向上转型</strong>：父类引用指向子类对象，编译看左边，运行看右边</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();  <span class="comment">// 向上转型  </span></span><br><span class="line">a.eat();               <span class="comment">// 调用的是 Cat 的 eat</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>向下转型</strong>：子类引用恢复成原有对象类型</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();  <span class="comment">// 向上转型  </span></span><br><span class="line">a.eat();               <span class="comment">// 调用的是 Cat 的 eat</span></span><br><span class="line"><span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> (Cat)a;        <span class="comment">// 向下转型  </span></span><br><span class="line">c.work();        <span class="comment">// 调用的是 Cat 的 work</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第九章接口"><a href="#第九章接口" class="headerlink" title="第九章	接口"></a>第九章	接口</h2><ul>
<li><p><strong>接口</strong>：一系列方法的声明，是一些方法特征的集合</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> price=<span class="number">4</span>;    <span class="comment">//修饰符可省略</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;        <span class="comment">//修饰符可省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhoneImpl</span> <span class="keyword">implements</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;        <span class="comment">//必须是public，否则报错</span></span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>接口的特点</strong></p>
<ul>
<li>没有构造方法</li>
<li>接口中的方法会被隐式的指定为 <strong>public abstract</strong> 方法，不能定义静态方法</li>
<li>接口中的变量会被隐式的指定为 <strong>public static final</strong> 变量，不能定义私有成员</li>
<li>接口和接口多继承，接口和类多实现</li>
</ul>
</li>
</ul>
<h2 id="第十章异常"><a href="#第十章异常" class="headerlink" title="第十章	异常"></a>第十章	异常</h2><h3 id="10-1Throwable类"><a href="#10-1Throwable类" class="headerlink" title="10.1	Throwable类"></a>10.1	Throwable类</h3><ul>
<li><p><strong>Throwable</strong> 类：所有异常类的父类</p>
<ul>
<li><strong>Error</strong> 错误类：严重问题，不需要程序员处理</li>
<li><strong>Exception</strong> 异常类：程序本身可以处理的问题<ul>
<li><strong>RuntimeException</strong> 运行时异常类：编译不出错，运行时出错</li>
<li><strong>IOException</strong> 编译检查异常类：编译时异常，<strong>throws</strong> 可以抛出异常，使编译通过，运行时还会出错，要 <strong>try-catch</strong>处理</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Throwable</strong> 类主要方法</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>String getMessage()</strong></td>
<td align="center">返回关于发生的异常的详细信息，这个消息在 <strong>Throwable</strong> 类的构造函数中初始化了</td>
</tr>
<tr>
<td align="center"><strong>String toString()</strong></td>
<td align="center">返回此 <strong>Throwable</strong> 的简短描述</td>
</tr>
<tr>
<td align="center"><strong>void printStackTrace()</strong></td>
<td align="center">将此 <strong>Throwable</strong> 及其回溯打印到标准错误流</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="10-2捕获异常"><a href="#10-2捕获异常" class="headerlink" title="10.2	捕获异常"></a>10.2	捕获异常</h3><ul>
<li><p><strong>捕获异常</strong>：使用 <strong>try</strong> 和 <strong>catch</strong> 关键字可以捕获异常，将 <strong>try&#x2F;catch</strong> 代码块放在异常可能发生的地方</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    System.out.println(arr[<span class="number">10</span>]);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;        <span class="comment">//ArrayIndexOutOfBoundsException </span></span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="10-3自定义异常"><a href="#10-3自定义异常" class="headerlink" title="10.3	自定义异常"></a>10.3	自定义异常</h3><ul>
<li><strong>自定义异常类</strong>：继承 <strong>Exception</strong> 类以实现检查时异常类，继承 <strong>RuntimeException</strong> 类以实现运行时异常类</li>
</ul>
<h2 id="第十一章集合"><a href="#第十一章集合" class="headerlink" title="第十一章	集合"></a>第十一章	集合</h2><h3 id="11-1集合体系"><a href="#11-1集合体系" class="headerlink" title="11.1	集合体系"></a>11.1	集合体系</h3><ul>
<li><strong>集合</strong>：长度可变，只能容纳引用类型<ul>
<li><strong>Map</strong> 类：双列集合，主要包括 <strong>HashMap</strong> 类</li>
<li><strong>Collection</strong> 类：单列集合<ul>
<li><strong>List</strong> 类：可以重复，主要包括 <strong>ArrayList</strong> 类和 <strong>LinkedList</strong> 类</li>
<li><strong>Set</strong> 类：不可以重复，主要包括 <strong>HashSet</strong> 类和 <strong>TreeSet</strong> 类</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="11-2ListIterator"><a href="#11-2ListIterator" class="headerlink" title="11.2	ListIterator"></a>11.2	ListIterator</h3><ul>
<li><p><strong>列表迭代器</strong>：允许沿任一方向遍历列表</p>
</li>
<li><p><strong>常用方法</strong></p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>void add(E e)</strong></td>
<td align="center">将指定元素插入到列表</td>
</tr>
<tr>
<td align="center"><strong>boolean hasNext()</strong></td>
<td align="center">正向遍历列表，判断是否有元素</td>
</tr>
<tr>
<td align="center"><strong>boolean hasPrevious()</strong></td>
<td align="center">反向遍历列表，判断是否有元素</td>
</tr>
<tr>
<td align="center"><strong>E next()</strong></td>
<td align="center">返回列表中的下一个元素，并且前进光标位置</td>
</tr>
<tr>
<td align="center"><strong>int nextIndex()</strong></td>
<td align="center">返回随后调用 <strong>next()</strong> 返回的元素的索引</td>
</tr>
<tr>
<td align="center"><strong>E previous()</strong></td>
<td align="center">返回列表中的上一个元素，并且前进光标位置</td>
</tr>
<tr>
<td align="center"><strong>int previousIndex()</strong></td>
<td align="center">返回由后续调用 <strong>previous()</strong> 返回的元素的索引</td>
</tr>
<tr>
<td align="center"><strong>void remove()</strong></td>
<td align="center">从列表中删除由 <strong>next()</strong> 或 <strong>previous()</strong> 返回的最后一个元素</td>
</tr>
<tr>
<td align="center"><strong>void set(E e)</strong></td>
<td align="center">用指定的元素替换由 <strong>next()</strong> 或 <strong>previous()</strong> 返回的最后一个元素</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="11-3ArrayList"><a href="#11-3ArrayList" class="headerlink" title="11.3	ArrayList"></a>11.3	ArrayList</h3><ul>
<li><strong>ArrayList</strong>：可以动态修改的数组，没有固定大小的限制，采用数组的数据类型实现</li>
</ul>
<h3 id="11-4LinkedList"><a href="#11-4LinkedList" class="headerlink" title="11.4	LinkedList"></a>11.4	LinkedList</h3><ul>
<li><strong>LinkedList</strong>：可以动态修改的数组，没有固定大小的限制，采用链表的数据类型实现</li>
</ul>
<h3 id="11-5HashSet"><a href="#11-5HashSet" class="headerlink" title="11.5	HashSet"></a>11.5	HashSet</h3><ul>
<li><strong>HashSet</strong>：不包含重复元素，元素无序，允许有 <strong>null</strong> 值，不是线程安全的</li>
<li><strong>hashCode()<strong>：返回哈希值，不同对象的哈希值默认不同，</strong>HashSet</strong> 通过哈希值来判断重复元素</li>
</ul>
<h3 id="11-6LinkedHashSet"><a href="#11-6LinkedHashSet" class="headerlink" title="11.6	LinkedHashSet"></a>11.6	LinkedHashSet</h3><ul>
<li><strong>LinkedHashSet</strong>：不包含重复元素，存取有序，通过哈希表和双向链表维护访问次序</li>
</ul>
<h3 id="11-7TreeSet"><a href="#11-7TreeSet" class="headerlink" title="11.7	TreeSet"></a>11.7	TreeSet</h3><ul>
<li><strong>TreeSet</strong>：不包含重复元素，元素有序，实现 <strong>Comparable</strong> 接口来对元素排序</li>
</ul>
<h3 id="11-8HashMap"><a href="#11-8HashMap" class="headerlink" title="11.8	HashMap"></a>11.8	HashMap</h3><ul>
<li><p><strong>HashMap</strong>：实现接口 <strong>Map(K,V)<strong>，其中，</strong>K</strong> 是键，<strong>V</strong> 是值</p>
</li>
<li><p><strong>常用方法</strong></p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>void clear()</strong></td>
<td align="center">删除所有的映射</td>
</tr>
<tr>
<td align="center"><strong>boolean isEmpty()</strong></td>
<td align="center">判断是否包含指定映射</td>
</tr>
<tr>
<td align="center"><strong>V put()</strong></td>
<td align="center">将指定的值与此映射中的指定键相关联</td>
</tr>
<tr>
<td align="center"><strong>V get()</strong></td>
<td align="center">获取指定 <strong>key</strong> 对应对 <strong>value</strong></td>
</tr>
<tr>
<td align="center"><strong>boolean	containsKey()</strong></td>
<td align="center">判断此映射是否包含指定键的映射</td>
</tr>
<tr>
<td align="center"><strong>V remove()</strong></td>
<td align="center">删除指定键的映射</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="11-9Collections"><a href="#11-9Collections" class="headerlink" title="11.9	Collections"></a>11.9	Collections</h3><ul>
<li><p><strong>常用方法</strong></p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>sort()</strong></td>
<td align="center">对指定的列表进行排序</td>
</tr>
<tr>
<td align="center"><strong>reverse()</strong></td>
<td align="center">反转指定列表中元素的顺序</td>
</tr>
<tr>
<td align="center"><strong>shuffle()</strong></td>
<td align="center">随机排列指定的列表</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="第十二章泛型"><a href="#第十二章泛型" class="headerlink" title="第十二章	泛型"></a>第十二章	泛型</h2><h3 id="12-1泛型"><a href="#12-1泛型" class="headerlink" title="12.1	泛型"></a>12.1	泛型</h3><ul>
<li><p><strong>泛型</strong>：将具体的类型参数化，提供了编译时类型安全检测机制</p>
</li>
<li><p><strong>定义泛型</strong>：&lt;类型&gt;、&lt;类型1，类型2…&gt;</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collection&lt;String&gt; b=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="12-2泛型类"><a href="#12-2泛型类" class="headerlink" title="12.2	泛型类"></a>12.2	泛型类</h3><ul>
<li><p><strong>泛型类</strong>：将类型参数化、模板化，创建对象时再指定具体类型</p>
</li>
<li><p><strong>定义泛型类</strong>：修饰符 class 类名&lt;类型&gt; {}</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Generic</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T t;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getT</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setT</span><span class="params">(T t)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.t = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="12-3泛型方法"><a href="#12-3泛型方法" class="headerlink" title="12.3	泛型方法"></a>12.3	泛型方法</h3><ul>
<li><p><strong>定义泛型方法</strong>：修饰符 &lt;类型&gt; 返回值类型 方法名(变量列表) {}</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Generic</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt;<span class="keyword">void</span> <span class="title function_">show</span><span class="params">(T t)</span>&#123;</span><br><span class="line">        System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="12-4泛型接口"><a href="#12-4泛型接口" class="headerlink" title="12.4	泛型接口"></a>12.4	泛型接口</h3><ul>
<li><p><strong>定义泛型接口</strong>：修饰符 interface 接口名&lt;类型&gt; {}</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AdapterItemListener</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">onItemClick</span><span class="params">(<span class="type">int</span> position,T item)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">onLongItemClick</span><span class="params">(<span class="type">int</span> position, T item)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="12-5类型通配符"><a href="#12-5类型通配符" class="headerlink" title="12.5	类型通配符"></a>12.5	类型通配符</h3><ul>
<li><p>**&lt;?&gt;**：匹配任何类型</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;?&gt; l0=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Number&gt;();    </span><br></pre></td></tr></table></figure>
</li>
<li><p>**List&lt;? extends 指定类型&gt;**：匹配指定类型的子类</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;? <span class="keyword">extends</span> <span class="title class_">Object</span>&gt; l1=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Number&gt;();    <span class="comment">//通配object的子类</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>**List&lt;? super 指定类型&gt;**：匹配指定类型的父类</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;? <span class="built_in">super</span> Integer&gt; l2=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Number&gt;();    <span class="comment">//通配Integer的父类</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第十三章I-O流"><a href="#第十三章I-O流" class="headerlink" title="第十三章	I&#x2F;O流"></a>第十三章	I&#x2F;O流</h2><h3 id="13-1IO流分类"><a href="#13-1IO流分类" class="headerlink" title="13.1	IO流分类"></a>13.1	IO流分类</h3><ul>
<li><p>按数据流向</p>
<ul>
<li><strong>输入流</strong>：读数据</li>
<li><strong>输出流</strong>：写数据</li>
</ul>
</li>
<li><p>按数据类型</p>
<ul>
<li><strong>字节流</strong>：处理单元为1个字节，操作字节和字节数组，存储的是二进制文件，应用范围有音频文件、图片、歌曲</li>
<li><strong>字符流</strong>：处理的单元为2个字节的 <strong>Unicode</strong> 字符，分别操作字符、字符数组或字符串，应用范围有中文文本</li>
</ul>
</li>
</ul>
<h3 id="13-2File类"><a href="#13-2File类" class="headerlink" title="13.2	File类"></a>13.2	File类</h3><ul>
<li><p><strong>File 类</strong>：封装的不是真正的文件，只是路径</p>
</li>
<li><p><strong>常用方法</strong></p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>boolean createNewFile()</strong></td>
<td align="center">创建一个新的空文件</td>
</tr>
<tr>
<td align="center"><strong>boolean mkdir()</strong></td>
<td align="center">创建目录</td>
</tr>
<tr>
<td align="center"><strong>boolean mkdirs()</strong></td>
<td align="center">创建目录，包括任何必需但不存在的父目录</td>
</tr>
<tr>
<td align="center"><strong>boolean delete()</strong></td>
<td align="center">删除文件或目录</td>
</tr>
<tr>
<td align="center"><strong>File[] listFiles()</strong></td>
<td align="center">返回一个数组，表示目录中的文件</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="13-3字节输出流OutputStream"><a href="#13-3字节输出流OutputStream" class="headerlink" title="13.3	字节输出流OutputStream"></a>13.3	字节输出流OutputStream</h3><ul>
<li><p><strong>字节输出流</strong>：关于字节输出的抽象类</p>
</li>
<li><p><strong>子类</strong></p>
<ul>
<li><strong>网络数据传输</strong>：<strong>SocketInputStream</strong> 和 <strong>SocketOutputStream</strong></li>
<li><strong>文件操作</strong>：<strong>FileInputStream</strong> 和 <strong>FileOutputStream</strong></li>
<li><strong>字节数据操作</strong>：<strong>DataInputStream</strong> 和 <strong>DataOutputStream</strong></li>
</ul>
</li>
<li><p><strong>常用方法</strong></p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>void close()</strong></td>
<td align="center">关闭此输出流并释放与此流相关联的任何系统资源</td>
</tr>
<tr>
<td align="center"><strong>void flush()</strong></td>
<td align="center">刷新此输出流并强制任何缓冲的输出字节被写出</td>
</tr>
<tr>
<td align="center"><strong>void write()</strong></td>
<td align="center">将指定的字节写入此输出流</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="13-4字节输入流InputStream"><a href="#13-4字节输入流InputStream" class="headerlink" title="13.4	字节输入流InputStream"></a>13.4	字节输入流InputStream</h3><ul>
<li><p><strong>字节输入流</strong>：关于字节输入的抽象类</p>
</li>
<li><p><strong>子类</strong></p>
<ul>
<li><strong>网络数据传输</strong>：<strong>SocketInputStream</strong> 和 <strong>SocketOutputStream</strong></li>
<li><strong>文件操作</strong>：<strong>FileInputStream</strong> 和 <strong>FileOutputStream</strong></li>
<li><strong>字节数据操作</strong>：<strong>DataInputStream</strong> 和 <strong>DataOutputStream</strong></li>
</ul>
</li>
<li><p><strong>常用方法</strong></p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>int read()</strong></td>
<td align="center">从输入流读取数据字节</td>
</tr>
<tr>
<td align="center"><strong>void mark()</strong></td>
<td align="center">标记此输入流中的当前位置</td>
</tr>
<tr>
<td align="center"><strong>void reset()</strong></td>
<td align="center">将此流重新定位到上次在此输入流上调用该方法时 <strong>mark</strong> 的位置</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="13-5文件输出流FileOutputStream"><a href="#13-5文件输出流FileOutputStream" class="headerlink" title="13.5	文件输出流FileOutputStream"></a>13.5	文件输出流FileOutputStream</h3><ul>
<li><strong>文件输出流</strong>：字节输出流的子类，将数据输出到文件里</li>
<li>**void write()**：将指定字节写入文件输出流</li>
</ul>
<h3 id="13-6文件输入流-FileInputStream"><a href="#13-6文件输入流-FileInputStream" class="headerlink" title="13.6	文件输入流 FileInputStream"></a>13.6	文件输入流 FileInputStream</h3><ul>
<li><strong>文件输入</strong>：输入流的子类，从文件当中输入数据</li>
<li>**int read()**：从该输入流读取数据字节</li>
</ul>
<h3 id="13-7字节缓冲流"><a href="#13-7字节缓冲流" class="headerlink" title="13.7	字节缓冲流"></a>13.7	字节缓冲流</h3><ul>
<li><p><strong>字节缓冲流 BufferStream</strong>：提供缓冲区，实现复制操作比基本字节流要快</p>
</li>
<li><p><strong>字节缓冲输出流 BufferedOutputStream</strong>：实现缓冲输出流，应用程序可以向底层输出流写入字节，而不必为写入的每个字节导致底层系统的调用</p>
</li>
<li><p><strong>字节缓冲输入流 BufferedInputStream</strong>：创建一个内部缓冲区数组，当从流中读取或跳过字节时，内部缓冲区将根据需要从所包含的输入流中重新填充，一次有多个字节</p>
</li>
</ul>
<h3 id="13-8字符流"><a href="#13-8字符流" class="headerlink" title="13.8	字符流"></a>13.8	字符流</h3><ul>
<li><p><strong>Reader</strong>：读取字符流抽象类</p>
<ul>
<li><strong>InputStreamReader</strong>：字符输入处理流，主要包括 <strong>FileReader</strong> 字符输入流</li>
<li><strong>BufferReader</strong>：字符输入缓冲流</li>
<li><strong>CharArrayReader</strong>：字符数组输入流</li>
</ul>
</li>
<li><p><strong>Writer</strong>：写入字符流抽象类</p>
<ul>
<li><strong>OutputStreamWriter</strong>：字符输出处理流，主要包括 <strong>FileWriter</strong> 字符输出流</li>
<li><strong>BufferWriter</strong>：字符输出缓冲流</li>
<li><strong>CharArrayWriter</strong>：字符数组输出流</li>
</ul>
</li>
<li><p><strong>字符输出流 OutputStreamWriter</strong>：只用于字符转字节，写入字节文件</p>
</li>
<li><p><strong>字符输入流InputStreamReader</strong>：只用于从字节文件解码出字符</p>
</li>
<li><p><strong>FileWriter</strong>和 <strong>FileReader</strong>：字符输入输出流的子类，用于文件的输入输出</p>
</li>
</ul>
<h3 id="13-9特殊操作流"><a href="#13-9特殊操作流" class="headerlink" title="13.9	特殊操作流"></a>13.9	特殊操作流</h3><ul>
<li><p><strong>标准输入输出流</strong></p>
<ul>
<li>标准输出流：<strong>System.out</strong></li>
<li>标准输入流：<strong>System.in</strong></li>
<li>错误输出流：<strong>System.err</strong></li>
</ul>
</li>
<li><p><strong>字节打印流 PrintStream</strong>：只负责输出数据，不负责读取数据</p>
</li>
<li><p><strong>字符打印流 PrintWriter</strong>：输出数据，打印字符</p>
</li>
<li><p><strong>对象序列化流 ObjectOutputStream</strong>：将指定对象序列化，写入流中</p>
</li>
<li><p><strong>对象反序列化流 ObjectInputStream</strong>：从流中读取数据反序列化，得到对象</p>
</li>
</ul>
<h2 id="第十四章多线程"><a href="#第十四章多线程" class="headerlink" title="第十四章	多线程"></a>第十四章	多线程</h2><h3 id="14-1概念"><a href="#14-1概念" class="headerlink" title="14.1	概念"></a>14.1	概念</h3><ul>
<li><p><strong>进程</strong>：一个进程包括由操作系统分配的内存空间，包含一个或多个线程</p>
</li>
<li><p><strong>线程</strong>：一条线程指的是进程中一个单一顺序的控制流，是一条执行路径</p>
</li>
<li><p><strong>多线程</strong>：一个进程里有多条执行路径</p>
</li>
<li><p><strong>Java抢占式调度模型</strong>：每一个 <strong>Java</strong> 线程都有一个 1~10 的整数作为优先级，优先级高的线程获取CPU时间片的几率高</p>
</li>
</ul>
<h3 id="14-2创建线程方法"><a href="#14-2创建线程方法" class="headerlink" title="14.2	创建线程方法"></a>14.2	创建线程方法</h3><ul>
<li><p><strong>继承 Thread 类</strong>：继承类必须重写 <strong>run()</strong> 方法，该方法是新线程的入口点</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        MyThread a=<span class="keyword">new</span> <span class="title class_">MyThread</span>(<span class="string">&quot;a&quot;</span>),b=<span class="keyword">new</span> <span class="title class_">MyThread</span>(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        a.start();b.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++) System.out.println(getName()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyThread</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyThread</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现 <strong>Runnable</strong> 接口：实现接口，重写<strong>run()</strong> 方法，创建新类的对象作为 <strong>Thread</strong> 类对象的构造器参数</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        MyRunnable mr=<span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line">        Thread a=<span class="keyword">new</span> <span class="title class_">Thread</span>(mr,<span class="string">&quot;a&quot;</span>),b=<span class="keyword">new</span> <span class="title class_">Thread</span>(mr,<span class="string">&quot;b&quot;</span>),c=<span class="keyword">new</span> <span class="title class_">Thread</span>(mr);</span><br><span class="line">        a.start();b.start();c.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="14-3线程同步"><a href="#14-3线程同步" class="headerlink" title="14.3	线程同步"></a>14.3	线程同步</h3><ul>
<li><p><strong>同步代码块</strong>：将一段代码用一把锁给锁起来，只有获得了这把锁的线程才访问，并且同一时刻，只有一个线程能持有这把锁，这样就保证了同一时刻只有一个线程能执行被锁住的代码</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(同步对象) &#123;</span><br><span class="line">    <span class="comment">//多条语句操作共享数据的代码 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>同步方法</strong>：非静态同步方法的锁对象为 <strong>this</strong>，静态同步方法的锁对象为 <strong>类名.class</strong></p>
</li>
<li><p><strong>线程安全的类</strong>：<strong>StringBuffer</strong>，<strong>Vector</strong>，<strong>Hashtable</strong></p>
</li>
<li><p><strong>Lock</strong> 锁：提供比同步方法和代码块更广泛的锁定操作，<strong>ReentrantLock</strong> 是它的实现类</p>
<ul>
<li>**void lock()**：获得锁</li>
<li>**void unlock()**：释放锁</li>
</ul>
</li>
</ul>
<h2 id="第十五章网络编程"><a href="#第十五章网络编程" class="headerlink" title="第十五章	网络编程"></a>第十五章	网络编程</h2><h3 id="15-1概念"><a href="#15-1概念" class="headerlink" title="15.1	概念"></a>15.1	概念</h3><ul>
<li><strong>IP 地址</strong>：设备接收数据的识别数据的标识号，可分为 <strong>IP v4</strong> 和 <strong>IP v6</strong></li>
<li><strong>端口</strong>：设备中的应用程序的唯一标识号，用 0~65535 的整数表示</li>
<li><strong>协议</strong>：计算机网络中连接和通信的规则</li>
</ul>
<h3 id="15-2InetAddress-类"><a href="#15-2InetAddress-类" class="headerlink" title="15.2	InetAddress 类"></a>15.2	InetAddress 类</h3><ul>
<li><p><strong>InetAddress 类</strong>：表示 <strong>IP</strong> 地址，没有构造方法</p>
</li>
<li><p><strong>常用方法</strong></p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>InetAddress getByName()</strong></td>
<td align="center">确定主机名称的 <strong>IP</strong> 地址</td>
</tr>
<tr>
<td align="center"><strong>String getHostAddress()</strong></td>
<td align="center">返回文本显示中的 <strong>IP</strong> 地址字符串</td>
</tr>
<tr>
<td align="center"><strong>String getHostName()</strong></td>
<td align="center">获取此 <strong>IP</strong> 地址的主机名</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="15-3UDP协议接收发送数据"><a href="#15-3UDP协议接收发送数据" class="headerlink" title="15.3	UDP协议接收发送数据"></a>15.3	UDP协议接收发送数据</h3><ul>
<li><strong>发送数据的步骤</strong><ul>
<li>创建发送端的 <strong>Socket</strong> 对象</li>
<li>创建数据并打包</li>
<li>调用 <strong>DatagramSocket</strong> 对象的方法发送数据</li>
<li>关闭发送端</li>
</ul>
</li>
<li><strong>接收数据的步骤</strong><ul>
<li>创建接收端的 <strong>Socket</strong> 对象</li>
<li>创建数据包用于接收数据</li>
<li>调用 <strong>DatagramSocket</strong> 对象的方法发送数据</li>
<li>关闭接收端</li>
</ul>
</li>
</ul>
<h3 id="15-4TCP协议"><a href="#15-4TCP协议" class="headerlink" title="15.4	TCP协议"></a>15.4	TCP协议</h3><ul>
<li><strong>发送数据的步骤</strong><ul>
<li>创建客户端的 <strong>Socket</strong> 对象</li>
<li>获取输入流，写入数据</li>
<li>释放资源</li>
</ul>
</li>
<li><strong>接收数据的步骤</strong><ul>
<li>创建服务器端的 <strong>Socket</strong> 对象</li>
<li>监听客户端对象，返回一个 <strong>Socket</strong> 对象</li>
<li>获取输入流，读取数据，并把数据显示在控制台</li>
<li>释放资源</li>
</ul>
</li>
</ul>
<h2 id="第十六章Lambda表达式"><a href="#第十六章Lambda表达式" class="headerlink" title="第十六章	Lambda表达式"></a>第十六章	Lambda表达式</h2><h3 id="16-1概念"><a href="#16-1概念" class="headerlink" title="16.1	概念"></a>16.1	概念</h3><ul>
<li><p><strong>Lambda 表达式</strong>：是一个对象，且必须有上下文环境，作用是实现单方法的接口</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        fun((a,b)-&gt;&#123;    <span class="comment">//Lambda形参类型、返回类型可以省略</span></span><br><span class="line">            <span class="keyword">return</span> a+b;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">(Dog d)</span>&#123;</span><br><span class="line">        d.add(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Dog</span> &#123;    <span class="comment">//单方法接口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;<span class="comment">//只能有一个方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Lambda 表达式格式</strong>：(形参)-&gt;{方法内的代码块}</p>
<ul>
<li>形参类型、返回类型可以省略</li>
<li>如果只有一个参数，小括号可以省略</li>
<li>如果代码句只有一条，大括号和分号可以省略，要么都省，要么都不省略</li>
<li>若单语句是 <strong>return</strong>，要么大括号、分号、<strong>return</strong> 要么都省，要么都不省略</li>
</ul>
</li>
</ul>
<h3 id="16-2Lambda-和匿名内部类区别"><a href="#16-2Lambda-和匿名内部类区别" class="headerlink" title="16.2	Lambda 和匿名内部类区别"></a>16.2	Lambda 和匿名内部类区别</h3><ul>
<li><strong>接口</strong>：<strong>Lambda</strong>只能是接口，匿名内部类可以是接口、抽象类、具体类</li>
<li><strong>方法</strong>：**Lambda **只能单方法，匿名内部类可以多方法</li>
<li><strong>原理</strong>：**Lambda **编译后字节码在运行时动态生成，匿名内部类编译后生成一个字节码文件</li>
</ul>
<h2 id="第十七章接口组成更新"><a href="#第十七章接口组成更新" class="headerlink" title="第十七章	接口组成更新"></a>第十七章	接口组成更新</h2><h3 id="17-1接口中default默认方法"><a href="#17-1接口中default默认方法" class="headerlink" title="17.1	接口中default默认方法"></a>17.1	接口中default默认方法</h3><ul>
<li><p>默认方法不是抽象方法，实现类可以重写，也可以不重写</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;he&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="17-2接口中静态方法"><a href="#17-2接口中静态方法" class="headerlink" title="17.2	接口中静态方法"></a>17.2	接口中静态方法</h3><ul>
<li><p>接口中静态方法只能被接口名调用，不能被实现类对象调用</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;he&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Dog.eat();</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="17-3接口中私有方法"><a href="#17-3接口中私有方法" class="headerlink" title="17.3	接口中私有方法"></a>17.3	接口中私有方法</h3><ul>
<li><p><strong>接口私有方法</strong>：为了将接口中多个默认或静态方法中的共性方法抽离出来</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;    <span class="comment">//静态方法只能访问静态变量和方法</span></span><br><span class="line">        look();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;        <span class="comment">//非静态方法可以访问静态非静态成员</span></span><br><span class="line">        look();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">look</span><span class="params">()</span>&#123;    <span class="comment">//私有成员仅本类内可见</span></span><br><span class="line">        System.out.println(<span class="string">&quot;look&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第十八章方法引用"><a href="#第十八章方法引用" class="headerlink" title="第十八章	方法引用"></a>第十八章	方法引用</h2><h3 id="18-1概念"><a href="#18-1概念" class="headerlink" title="18.1	概念"></a>18.1	概念</h3><ul>
<li><strong>方法引用</strong>：和 <strong>Lambda</strong> 表达式一样都可以根据上下文推导</li>
<li><strong>方法引用格式</strong>：引用类::不带括号的方法名</li>
</ul>
<h3 id="18-2引用类的方法"><a href="#18-2引用类的方法" class="headerlink" title="18.2	引用类的方法"></a>18.2	引用类的方法</h3><ul>
<li><p>引用 <strong>Lambda</strong>  中类的方法</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        fun((s)-&gt; System.out.println(s));    <span class="comment">//fruit</span></span><br><span class="line">        fun(System.out::println);    <span class="comment">//fruit        //根据上下文推导出标准输出流类的println方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">(Dog dog)</span>&#123;    <span class="comment">//Dog是个接口</span></span><br><span class="line">        dog.eat(<span class="string">&quot; fruit&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>引用匿名内部类中类的方法</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">fun(<span class="keyword">new</span> <span class="title class_">Dog</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">fun(System.out::println);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="18-2引用对象"><a href="#18-2引用对象" class="headerlink" title="18.2	引用对象"></a>18.2	引用对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Dog dog=<span class="keyword">new</span> <span class="title class_">Dog</span>();        <span class="comment">//Dog是类        </span></span><br><span class="line">        fun(dog::eat);        引用对象的方法，实参为对象，形参是接口</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">(Cat c)</span>&#123;        <span class="comment">//Cat是接口</span></span><br><span class="line">        c.look(<span class="string">&quot;4346&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="18-3引用构造器"><a href="#18-3引用构造器" class="headerlink" title="18.3	引用构造器"></a>18.3	引用构造器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">useStudentBuilder((name,age) -&gt; <span class="keyword">new</span> <span class="title class_">Student</span>(name,age));</span><br><span class="line">useStudentBuilder(Student::<span class="keyword">new</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">useStudentBuilder</span><span class="params">(StudentBuilder sb)</span>;</span><br></pre></td></tr></table></figure>

<h2 id="第十九章函数式接口"><a href="#第十九章函数式接口" class="headerlink" title="第十九章	函数式接口"></a>第十九章	函数式接口</h2><h3 id="19-1概念"><a href="#19-1概念" class="headerlink" title="19.1	概念"></a>19.1	概念</h3><ul>
<li><strong>函数式接口</strong>：有且仅有一个抽象方法的接口，<strong>Java</strong> 中函数式编程体现就是 <strong>Lambda</strong> 表达式</li>
<li><strong>JDK 中自带的函数式接口</strong>：<strong>Supplier</strong>，<strong>Consumer</strong>，<strong>Predicate</strong>，<strong>Function</strong></li>
</ul>
<h3 id="19-2函数式接口Supplier接口"><a href="#19-2函数式接口Supplier接口" class="headerlink" title="19.2	函数式接口Supplier接口"></a>19.2	函数式接口Supplier接口</h3><ul>
<li><p><strong>Supplier</strong>：获取到生产出的数据</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Supplier</span>&lt;T&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="19-3函数式接口Consumer"><a href="#19-3函数式接口Consumer" class="headerlink" title="19.3	函数式接口Consumer"></a>19.3	函数式接口Consumer</h3><ul>
<li><p><strong>Consumer</strong>：对数据进行操作，无返回值</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Consumer</span>&lt;T&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="19-4函数式接口Predicate"><a href="#19-4函数式接口Predicate" class="headerlink" title="19.4	函数式接口Predicate"></a>19.4	函数式接口Predicate</h3><ul>
<li><p><strong>Predicate</strong>：判断参数是否满足条件</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Predicate</span>&lt;T&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="19-5函数式接口Function"><a href="#19-5函数式接口Function" class="headerlink" title="19.5	函数式接口Function"></a>19.5	函数式接口Function</h3><ul>
<li><p><strong>Function</strong>：用于对参数进行处理、转换，然后返回一个新值</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Function</span>&lt;T,R&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第二十章Stream流"><a href="#第二十章Stream流" class="headerlink" title="第二十章	Stream流"></a>第二十章	Stream流</h2><h3 id="20-1Stream流生成："><a href="#20-1Stream流生成：" class="headerlink" title="20.1	Stream流生成："></a>20.1	Stream流生成：</h3><ul>
<li><T> Stream<T> of(T t)：返回包含单个元素的顺序 <strong>Stream</strong></li>
</ul>
<h3 id="20-2Stream流中间操作"><a href="#20-2Stream流中间操作" class="headerlink" title="20.2	Stream流中间操作"></a>20.2	Stream流中间操作</h3><table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>Stream<T>	filter()</strong></td>
<td align="center">返回由与此给定谓词匹配的此流的元素组成的流</td>
</tr>
<tr>
<td align="center"><strong>Stream<T>	limit()</strong></td>
<td align="center">返回由此流的元素组成的流</td>
</tr>
<tr>
<td align="center"><strong>Stream<T>	skip()</strong></td>
<td align="center">在丢弃流的第一个 n 元素后，返回由该流的 n元素组成的流</td>
</tr>
<tr>
<td align="center"><strong>Stream<T>	concat()</strong></td>
<td align="center">创建一个懒惰连接的流，其元素是第一个流的所有元素，后跟第二个流的所有元素</td>
</tr>
</tbody></table>
<h3 id="20-3Stream流终结"><a href="#20-3Stream流终结" class="headerlink" title="20.3	Stream流终结"></a>20.3	Stream流终结</h3><table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>long count()</strong></td>
<td align="center">返回此流中的元素数</td>
</tr>
<tr>
<td align="center"><strong>void forEach()</strong></td>
<td align="center">对此流的每个元素执行操作</td>
</tr>
</tbody></table>
<h3 id="20-4Stream流收集"><a href="#20-4Stream流收集" class="headerlink" title="20.4	Stream流收集"></a>20.4	Stream流收集</h3><ul>
<li>**&lt;R,A&gt; R	collect()**：使用 <strong>Collector</strong> 对此流的元素执行操作</li>
</ul>
<h2 id="第二十一章反射"><a href="#第二十一章反射" class="headerlink" title="第二十一章	反射"></a>第二十一章	反射</h2><h3 id="21-1类加载和类加载器"><a href="#21-1类加载和类加载器" class="headerlink" title="21.1	类加载和类加载器"></a>21.1	类加载和类加载器</h3><ul>
<li><strong>类加载</strong><ul>
<li><strong>类的加载</strong>：将 <strong>class</strong> 文件读入内存，并为之创建一个 <strong>Class</strong> 对象</li>
<li><strong>类的链接</strong>：验证类是否有正确的结构，为类的变量分配内存并设置默认值，将类的二进制数据中的符号引用替换为直接引用</li>
<li><strong>类的初始化</strong>：先初始化父类，依次执行初始化语句</li>
</ul>
</li>
</ul>
<h3 id="21-2反射概述"><a href="#21-2反射概述" class="headerlink" title="21.2	反射概述"></a>21.2	反射概述</h3><ul>
<li><strong>反射</strong>：把 <strong>Java</strong> 类中的各个成分映射成一个个的 <strong>Java</strong> 对象</li>
<li><strong>反射机制的作用</strong><ul>
<li>操作字节码文件</li>
<li>操作代码片段</li>
</ul>
</li>
</ul>
<h3 id="21-3三种获取Class类的对象方法"><a href="#21-3三种获取Class类的对象方法" class="headerlink" title="21.3	三种获取Class类的对象方法"></a>21.3	三种获取Class类的对象方法</h3><ul>
<li><p><strong>类的 class 属性</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;Dog&gt; c1=Dog.class;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>对象的 getclass 方法</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;? <span class="keyword">extends</span> <span class="title class_">Dog</span>&gt; c2=d.getClass();</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Class 类的静态方法 forName</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; c3= Class.forName(<span class="string">&quot;train.Dog&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="21-4反射获取构造方法并实例化"><a href="#21-4反射获取构造方法并实例化" class="headerlink" title="21.4	反射获取构造方法并实例化"></a>21.4	反射获取构造方法并实例化</h3><table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>Constructor<T> getConstructor()</strong></td>
<td align="center">返回单个公共构造方法对象</td>
</tr>
<tr>
<td align="center"><strong>Constructor<T> getDeclaredConstructor()</strong></td>
<td align="center">返回单个构造方法对象</td>
</tr>
<tr>
<td align="center"><strong>Constructor&lt;?&gt;[] getConstructors()</strong></td>
<td align="center">返回所有公共构造方法对象的数组</td>
</tr>
<tr>
<td align="center"><strong>Constructor&lt;?&gt;[] getDeclaredConstructors()</strong></td>
<td align="center">返回所有构造方法对象的数组</td>
</tr>
<tr>
<td align="center"><strong>T newInstance()</strong></td>
<td align="center">调用类的指定构造方法，完成构造方法的对象创建</td>
</tr>
</tbody></table>
<h3 id="21-5反射获取成员变量并赋值"><a href="#21-5反射获取成员变量并赋值" class="headerlink" title="21.5	反射获取成员变量并赋值"></a>21.5	反射获取成员变量并赋值</h3><table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>Field getField()</strong></td>
<td align="center">返回一个 <strong>Field</strong> 对象，反映此表示的类或接口的指定公共成员字段类对象</td>
</tr>
<tr>
<td align="center"><strong>Field[] getFields()</strong></td>
<td align="center">返回包含一个 <strong>Field</strong> 对象数组，反映由此表示的类或接口的所有可访问的公共字段类对象</td>
</tr>
<tr>
<td align="center"><strong>Field getDeclaredField()</strong></td>
<td align="center">返回一个 <strong>Field</strong> 对象，反映此表示的类或接口的指定已声明字段类对象</td>
</tr>
<tr>
<td align="center"><strong>Field[] getDeclaredFields()</strong></td>
<td align="center">返回的数组 <strong>Field</strong> 对象反映此表示的类或接口声明的所有字段类对象</td>
</tr>
<tr>
<td align="center"><strong>void set()</strong></td>
<td align="center">给对象的成员变量赋值</td>
</tr>
</tbody></table>
<h3 id="21-6获取成员方法对象并调用成员方法"><a href="#21-6获取成员方法对象并调用成员方法" class="headerlink" title="21.6	获取成员方法对象并调用成员方法"></a>21.6	获取成员方法对象并调用成员方法</h3><table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>Method getMethod()</strong></td>
<td align="center">返回一个 <strong>Method</strong> 对象，反映此表示的类或接口的指定公共成员方法类对象</td>
</tr>
<tr>
<td align="center"><strong>Method[] getMethods()</strong></td>
<td align="center">返回包含一个 <strong>Method</strong> 对象数组，反映由此表示的类或接口的所有公共方法 类对象，包括那些由类或接口和那些从超类和超接口继承的声明</td>
</tr>
<tr>
<td align="center"><strong>Method getDeclaredMethod()</strong></td>
<td align="center">返回一个 <strong>Method</strong> 对象，反映此表示的类或接口的指定声明的方法 类对象</td>
</tr>
<tr>
<td align="center"><strong>Method[] getDeclaredMethods()</strong></td>
<td align="center">返回包含一个 <strong>Method</strong> 对象数组，反映的类或接口的所有声明的方法，通过此表示 类对象，包括公共，保护，默认（包）访问和私有方法，但不包括继承的方法</td>
</tr>
<tr>
<td align="center"><strong>Object invoke()</strong></td>
<td align="center">在具有指定参数的 <strong>Method</strong> 对象上调用此 <strong>Method</strong> 对象表示的底层方法</td>
</tr>
</tbody></table>
<h2 id="第二十二章注解"><a href="#第二十二章注解" class="headerlink" title="第二十二章	注解"></a>第二十二章	注解</h2><h2 id="第二十三章枚举"><a href="#第二十三章枚举" class="headerlink" title="第二十三章	枚举"></a>第二十三章	枚举</h2>]]></content>
  </entry>
  <entry>
    <title>Java编程思想</title>
    <url>/2024/01/28/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/</url>
    <content><![CDATA[<h1 id="Java编程思想"><a href="#Java编程思想" class="headerlink" title="Java编程思想"></a>Java编程思想</h1><h2 id="第一章对象导论"><a href="#第一章对象导论" class="headerlink" title="第一章	对象导论"></a>第一章	对象导论</h2><h3 id="1-1抽象过程"><a href="#1-1抽象过程" class="headerlink" title="1.1	抽象过程"></a>1.1	抽象过程</h3><ul>
<li><strong>抽象机制</strong>：所有编程语言都提供抽象机制，问题的复杂性取决于类型和质量</li>
<li><strong>抽象语言的五大特征</strong><ul>
<li>万物皆为对象</li>
<li>程序是对象的集合，它们通过发送消息来告知彼此所要做的</li>
<li>每个对象都有自己的由其他对象所构成的存储</li>
<li>每个对象都拥有类型</li>
<li>某一特定类型的所有对象都可以接收同样的消息</li>
</ul>
</li>
<li><strong>对对象的描述</strong>：对象具有状态，行为和标识</li>
</ul>
<h3 id="1-2每个对象都有一个接口"><a href="#1-2每个对象都有一个接口" class="headerlink" title="1.2	每个对象都有一个接口"></a>1.2	每个对象都有一个接口</h3><ul>
<li>类描述了具有相同特性（数据元素）和行为（功能）的对象集合</li>
<li>类实际上就是一个数据类型，程序员通过定义类来适应问题，编程系统欣然接受新的类</li>
<li>接口确定了对某一特定对象所能发出的请求</li>
</ul>
<h3 id="1-3每个对象都提供服务"><a href="#1-3每个对象都提供服务" class="headerlink" title="1.3	每个对象都提供服务"></a>1.3	每个对象都提供服务</h3><ul>
<li>将对象想象为“服务提供者”，程序本身将向用户提供服务</li>
<li>服务提供者的思想有助于提高对象的内聚性，意味着一个软件构件的各个方面组合得很好</li>
</ul>
<h3 id="1-4被隐藏的具体实现"><a href="#1-4被隐藏的具体实现" class="headerlink" title="1.4	被隐藏的具体实现"></a>1.4	被隐藏的具体实现</h3><ul>
<li><p>程序开发人员可分为类创建者（创建新数据类型的程序员）和客户端程序员（使用数据类型的类消费者）</p>
</li>
<li><p>访问控制约束了客户端程序员，将实现隐藏起来</p>
</li>
<li><p>访问控制允许库设计者可以改变类内部的工作方式而不用担心会影响到客户端程序员</p>
</li>
</ul>
<h3 id="1-5复用具体体现"><a href="#1-5复用具体体现" class="headerlink" title="1.5	复用具体体现"></a>1.5	复用具体体现</h3><ul>
<li>组合：使用现有的类合成新的类，经常被视为<strong>“has-a”</strong>关系</li>
<li>新类的成员对象通常被声明为<strong>private</strong>，使得那些使用新类的客户端程序员不能访问它们，以及实现动态修改代码的行为</li>
</ul>
<h3 id="1-6继承"><a href="#1-6继承" class="headerlink" title="1.6	继承"></a>1.6	继承</h3><ul>
<li><strong>继承</strong>：以现有的基类为基础，复制并添加和修改这个副本，创建新的类</li>
<li>经过继承，两个类型可以有相同的特性和行为，但是其中一个类型可能比另一个拥有更多的特性，并且可以处理更多的消息</li>
<li>使基类和导出类<strong>产生差异</strong>的方式<ul>
<li>直接在导出类中添加新方法</li>
<li>覆盖，即改变现有基类的方法</li>
</ul>
</li>
<li><strong>“是一个”</strong>与<strong>“像是一个”</strong>关系<ul>
<li><code>is-a</code>：替代原则，不添加新方法，只覆盖基类的方法</li>
<li><code>is-like-a</code>：添加新的接口元素，拓展接口</li>
</ul>
</li>
</ul>
<h3 id="1-7伴随多态的可互换对象"><a href="#1-7伴随多态的可互换对象" class="headerlink" title="1.7	伴随多态的可互换对象"></a>1.7	伴随多态的可互换对象</h3><ul>
<li><strong>后期绑定</strong>：当向对象发送消息时，被调用的代码直到运行时才能确定</li>
<li><strong>向上转型</strong>：将导出类看做是它的基类</li>
</ul>
<h3 id="1-8单根继承结构"><a href="#1-8单根继承结构" class="headerlink" title="1.8	单根继承结构"></a>1.8	单根继承结构</h3><ul>
<li><strong>Object类</strong>：所有的类都继承自单一的基类</li>
<li>单根继承结构保证所有的对象都具备某些功能，使垃圾回收器的实现变得容易得多</li>
</ul>
<h3 id="1-9容器"><a href="#1-9容器" class="headerlink" title="1.9	容器"></a>1.9	容器</h3><ul>
<li><strong>容器</strong>：创建的一种数据类型，使得它持有对其他对象的引用</li>
<li>Java在其标准类库中包含大量的容器<ul>
<li>不同的容器提供了不同类型的接口和外部行为</li>
<li>不同的容器对于某些操作具有不同的效率</li>
</ul>
</li>
<li><strong>参数化类型（泛型）</strong>：编译器自动定制用于特定类型上的类，例如只接纳和取出特定类型的容器</li>
</ul>
<h3 id="1-10对象的创建和生命期"><a href="#1-10对象的创建和生命期" class="headerlink" title="1.10	对象的创建和生命期"></a>1.10	对象的创建和生命期</h3><ul>
<li><strong>动态内存分配方式</strong>：在堆的内存池中动态地创建对象，当需要一个新对象时，直接在堆中复制</li>
<li><strong>垃圾回收器</strong>：自动发现对象何时不再使用，并继而销毁它，避免暗藏的内存泄漏问题</li>
</ul>
<h3 id="1-11异常处理：处理错误"><a href="#1-11异常处理：处理错误" class="headerlink" title="1.11	异常处理：处理错误"></a>1.11	异常处理：处理错误</h3><ul>
<li><strong>异常处理</strong>：将异常从出错地点“抛出”，并被异常处理器”捕获“</li>
<li>异常处理是与程序正常执行路径并行的，在错误发生时执行的另一条路径，不会干扰正常的执行代码</li>
</ul>
<h3 id="1-12并发编程"><a href="#1-12并发编程" class="headerlink" title="1.12	并发编程"></a>1.12	并发编程</h3><ul>
<li><strong>并发编程</strong>：将问题切分成多个可独立运行的部分（线程），从而提高程序的响应能力</li>
<li><strong>并发编程的隐患</strong>：共享资源的使用，可以使用资源锁来解决</li>
</ul>
<h3 id="1-13Java与Internet"><a href="#1-13Java与Internet" class="headerlink" title="1.13	Java与Internet"></a>1.13	Java与Internet</h3><h4 id="Web是什么"><a href="#Web是什么" class="headerlink" title="Web是什么"></a>Web是什么</h4><ul>
<li><strong>客户&#x2F;服务器系统思想</strong>：系统具有一个中央信息存储池，用来存储某种数据，通常存在于数据库，可以根据需要将它分发给某些人员或机器集群</li>
<li>Web是一个巨型的客户&#x2F;服务器系统</li>
</ul>
<h4 id="客户端编程"><a href="#客户端编程" class="headerlink" title="客户端编程"></a>客户端编程</h4><ul>
<li><strong>客户端编程</strong>：Web浏览器利用空闲的时间执行工作，使得返回给用户的结果更加迅捷，使得网站更加具有交互性</li>
<li><strong>脚本语言</strong>：通过脚本语言，将客户端程序的源代码嵌入到<strong>HTML</strong>页面中，解释这种语言的插件自动被激活</li>
<li><strong>Java</strong>：通过<strong>applet</strong>在浏览器中运行以分发客户端软件，<strong>Java</strong>凭借Web浏览器内置的解释器，解决脚本语言难以解决的复杂问题</li>
</ul>
<h4 id="服务器端编程"><a href="#服务器端编程" class="headerlink" title="服务器端编程"></a>服务器端编程</h4><ul>
<li><strong>Java servlet</strong>：涉及到文件发送问题和数据库修改等，消除了处理具有不同能力的浏览器时遇到的问题</li>
</ul>
<h2 id="第二章一切都是对象"><a href="#第二章一切都是对象" class="headerlink" title="第二章	一切都是对象"></a>第二章	一切都是对象</h2><h3 id="2-1用引用操纵对象"><a href="#2-1用引用操纵对象" class="headerlink" title="2.1	用引用操纵对象"></a>2.1	用引用操纵对象</h3><ul>
<li><p>将一切都看做对象，操纵对象的标识符是对象的一个引用</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s;</span><br><span class="line"><span class="comment">//此处只是创建引用，而不是对象</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-2必须由你创建所有对象"><a href="#2-2必须由你创建所有对象" class="headerlink" title="2.2	必须由你创建所有对象"></a>2.2	必须由你创建所有对象</h3><h4 id="存储到什么地方"><a href="#存储到什么地方" class="headerlink" title="存储到什么地方"></a>存储到什么地方</h4><ul>
<li><strong>寄存器</strong>：最快的存储区，位于处理器内部</li>
<li><strong>堆栈</strong>：位于通用<strong>RAM</strong>（随机访问寄存器）中，可以通过操纵堆栈指针来管理内存</li>
<li><strong>堆</strong>：一种通用的内存池，也位于<strong>RAM</strong>，用于存放<strong>Java</strong>中的对象</li>
<li><strong>常量存储</strong>：通常直接存储在代码内部，在嵌入式系统中，可能会存放在<strong>ROM</strong>（只读存储器）中</li>
<li><strong>非RAM存储</strong>：<strong>流对象</strong>和<strong>持久化对象</strong>，可以完全存活于程序之外</li>
</ul>
<h4 id="特例：基本类型"><a href="#特例：基本类型" class="headerlink" title="特例：基本类型"></a>特例：基本类型</h4><ul>
<li><strong>基本类型</strong>：并非引用的“自动”变量，直接存储值，并置于堆栈中，更加地高效</li>
<li><strong>高精度数字</strong>：<strong>BigInteger</strong>支持任意精度的整数，<strong>BigDecimal</strong>支持任意精度的定点数</li>
</ul>
<h4 id="Java中的数组"><a href="#Java中的数组" class="headerlink" title="Java中的数组"></a>Java中的数组</h4><ul>
<li><strong>安全性</strong>：确保数组被初始化，进行范围检查</li>
</ul>
<h3 id="2-3永远不需要销毁对象"><a href="#2-3永远不需要销毁对象" class="headerlink" title="2.3	永远不需要销毁对象"></a>2.3	永远不需要销毁对象</h3><ul>
<li><p><strong>作用域</strong>：由花括号的位置决定</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">96</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在Java中不合法，不允许在c++中将较大作用域的变量隐藏的做法</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>对象的作用域</strong>：引用在作用域终点即消失，但<strong>new</strong>创建的对象可以存活于作用域外，直至被垃圾回收器清理</p>
</li>
</ul>
<h3 id="2-4创建新的数据类型，类"><a href="#2-4创建新的数据类型，类" class="headerlink" title="2.4	创建新的数据类型，类"></a>2.4	创建新的数据类型，类</h3><ul>
<li><p><strong>类的元素</strong>：字段（数据成员）和方法（成员函数）</p>
</li>
<li><p>基本成员默认值</p>
<table>
<thead>
<tr>
<th align="center">基本类型</th>
<th align="center">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>boolean</strong></td>
<td align="center"><strong>false</strong></td>
</tr>
<tr>
<td align="center"><strong>char</strong></td>
<td align="center"><strong>‘\u0000’(null)</strong></td>
</tr>
<tr>
<td align="center"><strong>byte</strong></td>
<td align="center"><strong>(byte)0</strong></td>
</tr>
<tr>
<td align="center"><strong>short</strong></td>
<td align="center"><strong>(short)0</strong></td>
</tr>
<tr>
<td align="center"><strong>int</strong></td>
<td align="center"><strong>0</strong></td>
</tr>
<tr>
<td align="center"><strong>long</strong></td>
<td align="center"><strong>0L</strong></td>
</tr>
<tr>
<td align="center"><strong>float</strong></td>
<td align="center"><strong>0.0f</strong></td>
</tr>
<tr>
<td align="center"><strong>double</strong></td>
<td align="center"><strong>0.0d</strong></td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="2-5方法，参数与返回值"><a href="#2-5方法，参数与返回值" class="headerlink" title="2.5	方法，参数与返回值"></a>2.5	方法，参数与返回值</h3><ul>
<li><p><strong>方法的基本组成部分</strong>：名称，参数，返回值和方法体</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ReturnType <span class="title function_">methodName</span><span class="params">(<span class="comment">/* Argument list */</span>)</span>&#123;</span><br><span class="line">	<span class="comment">/* Method body */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>参数列表</strong>：指定传递给方法的信息，采用对象引用的形式</p>
</li>
</ul>
<h3 id="2-6构建一个Java程序"><a href="#2-6构建一个Java程序" class="headerlink" title="2.6	构建一个Java程序"></a>2.6	构建一个Java程序</h3><ul>
<li><strong>名字可见性</strong>：使用反转域名来命名类库，避免名称的重复</li>
<li><strong>运用其他构件</strong>：使用<strong>import</strong>语句指示编译器导入一个包</li>
<li><strong>static关键字</strong>：使域或方法不与任何对象实例关联到一起，在未创建对象时，也可以访问其对象或访问其域</li>
</ul>
<h3 id="2-7你的第一个Java程序"><a href="#2-7你的第一个Java程序" class="headerlink" title="2.7	你的第一个Java程序"></a>2.7	你的第一个Java程序</h3><ul>
<li><strong>args</strong>：存储命令行参数</li>
</ul>
<h3 id="2-8注释与嵌入文档"><a href="#2-8注释与嵌入文档" class="headerlink" title="2.8	注释与嵌入文档"></a>2.8	注释与嵌入文档</h3><ul>
<li><p><strong>注释风格</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单行注释</span></span><br><span class="line"><span class="comment">//this is a Java program</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//多行注释</span></span><br><span class="line"><span class="comment">/* this is</span></span><br><span class="line"><span class="comment">* a Java program</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>注释文档</strong>：使用<strong>javadoc</strong>提取注释，输出一个HTML文件</p>
</li>
<li><p><strong>一些标签示例</strong></p>
<ul>
<li><code>@see</code>：引用其他类的文档，生成一个超链接</li>
<li><code>&#123;@link package.class#emmber label&#125;</code>：引用其他类</li>
<li><code>&#123;@docRoot&#125;</code>：产生到根目录的相对路径，用于文档树页面的显式超链接</li>
<li><code>&#123;@inheritRoot&#125;</code>：从基类中继承相关文档到该注释中</li>
<li><code>@version (version-information)</code>：<strong>javadoc</strong>命令行使用**-version**命令，提取出版本信息</li>
<li><code>@author (author-information)</code>：<strong>javadoc</strong>命令行使用**-author**命令，提取出作者信息</li>
<li><code>@since</code>：指定程序代码最早使用的版本</li>
<li><code>@param (para-name description)</code>：生成参数列表</li>
<li><code>@return (description)</code>：生成返回值信息</li>
<li><code>@throws (fully-qualified-class-name description)</code>：生成抛出异常信息</li>
<li><code>@deprecated</code>：弃用文本，指名一个过期的类或成员，表明该类或方法不建议使用</li>
</ul>
</li>
</ul>
<h3 id="2-9编程风格"><a href="#2-9编程风格" class="headerlink" title="2.9	编程风格"></a>2.9	编程风格</h3><ul>
<li><strong>编程风格</strong><ul>
<li>类的首字母要大写</li>
<li><strong>驼峰风格</strong>：将单词拼接在一起，内部的每一个单词首字母大写</li>
</ul>
</li>
</ul>
<h2 id="第三章操作符"><a href="#第三章操作符" class="headerlink" title="第三章	操作符"></a>第三章	操作符</h2><h3 id="3-1更简单的打印语句"><a href="#3-1更简单的打印语句" class="headerlink" title="3.1	更简单的打印语句"></a>3.1	更简单的打印语句</h3><ul>
<li>静态导入类库，简化打印语句</li>
</ul>
<h3 id="3-2使用Java操作符"><a href="#3-2使用Java操作符" class="headerlink" title="3.2	使用Java操作符"></a>3.2	使用Java操作符</h3><ul>
<li><strong>操作符</strong>：接受一个或多个参数，并生成一个新值，除<strong>String</strong>外只能操作基本类型</li>
</ul>
<h3 id="3-3优先级"><a href="#3-3优先级" class="headerlink" title="3.3	优先级"></a>3.3	优先级</h3><ul>
<li><strong>优先级</strong>：计算顺序，使用括号明确</li>
</ul>
<h3 id="3-4赋值"><a href="#3-4赋值" class="headerlink" title="3.4	赋值"></a>3.4	赋值</h3><ul>
<li><p><strong>别名现象</strong>：当使用对象进行赋值时，真正操作的是对象的引用，若改变其中任何一个对象，会导致其余对象也发生变化</p>
</li>
<li><p><strong>方法中的别名问题</strong>：方法不会复制参数的副本，实际上只是传递一个引用</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        B b=<span class="keyword">new</span> <span class="title class_">B</span>(<span class="number">1</span>);</span><br><span class="line">        B.f(b);</span><br><span class="line">        System.out.println(b.value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">B</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">(B b2)</span>&#123;</span><br><span class="line">        b2.value=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-5算术操作符"><a href="#3-5算术操作符" class="headerlink" title="3.5	算术操作符"></a>3.5	算术操作符</h3><ul>
<li><strong>Random类</strong>：将当前时间作为随机数生成器的种子，生成随机数</li>
</ul>
<h3 id="3-6自动递增和递减"><a href="#3-6自动递增和递减" class="headerlink" title="3.6	自动递增和递减"></a>3.6	自动递增和递减</h3><ul>
<li><strong>前缀式</strong>：操作符位于变量或表达式的前面，先执行运算后生成值</li>
<li><strong>后缀式</strong>：操作符位于变量或表达式的后面，先生成值后执行运算</li>
</ul>
<h3 id="3-7关系操作符"><a href="#3-7关系操作符" class="headerlink" title="3.7	关系操作符"></a>3.7	关系操作符</h3><ul>
<li><strong>&#x3D;&#x3D; 和 equals</strong>：**&#x3D;&#x3D;<strong>比较的是两个操作数的引用，可以根据需要重写</strong>equals**方法来判断两个对象是否相等</li>
</ul>
<h3 id="3-8逻辑操作符"><a href="#3-8逻辑操作符" class="headerlink" title="3.8	逻辑操作符"></a>3.8	逻辑操作符</h3><ul>
<li>不可以将非布尔值当做布尔值用在逻辑表达式中</li>
<li>在应该使用<strong>String</strong>值的地方使用了布尔值，会自动转换成文本文档</li>
<li><strong>短路</strong>：一旦能够明确无误地确定整个表达式的值，就不会计算表达式余下部分</li>
</ul>
<h3 id="3-9直接常量"><a href="#3-9直接常量" class="headerlink" title="3.9	直接常量"></a>3.9	直接常量</h3><ul>
<li><strong>long</strong>等数据类型标明后缀类型，以避免编译器混淆类型</li>
<li><strong>进制转换</strong><ul>
<li>10进制转2进制：<code>Integer.toBinaryString(n);</code></li>
<li>10进制转8进制： <code>Integer.toOctalString(n);</code></li>
<li>10进制转16进制：<code>Integer.toHexString(n);</code></li>
<li>10进制转r进制：<code>Integer.toString(100, r);</code></li>
<li>r进制转10进制： <code>Integer.parseInt((String) s,(int) r);</code></li>
</ul>
</li>
<li><strong>指数计数法</strong>：<code>a.be^x=a.b*10^x</code></li>
</ul>
<h3 id="3-10按位操作符"><a href="#3-10按位操作符" class="headerlink" title="3.10	按位操作符"></a>3.10	按位操作符</h3><table>
<thead>
<tr>
<th align="center">操作符</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>&amp;</strong></td>
<td align="center"><strong>按位与</strong></td>
</tr>
<tr>
<td align="center"><strong>|</strong></td>
<td align="center"><strong>按位或</strong></td>
</tr>
<tr>
<td align="center"><strong>^</strong></td>
<td align="center"><strong>按位异或</strong></td>
</tr>
<tr>
<td align="center"><strong>~</strong></td>
<td align="center"><strong>按位非</strong></td>
</tr>
</tbody></table>
<h3 id="3-11移位操作符"><a href="#3-11移位操作符" class="headerlink" title="3.11	移位操作符"></a>3.11	移位操作符</h3><ul>
<li><strong>左移位操作符</strong><code>&lt;&lt;</code>：按照操作符右侧指定位数将操作符左边的操作数向左移动（低位补0）</li>
<li><strong>有符号右移位操作符</strong><code>&gt;&gt;</code>：按照操作符右侧指定位数将操作符左边的操作数向右移动，正数高位补0，负数高位补1</li>
<li><strong>无符号右移位操作符</strong><code>&gt;&gt;&gt;</code>：同有符号右移，高位始终补0</li>
</ul>
<h3 id="3-12三元操作符if-else"><a href="#3-12三元操作符if-else" class="headerlink" title="3.12	三元操作符if-else"></a>3.12	三元操作符if-else</h3><ul>
<li><strong>条件操作符</strong><code>boolean-exp ? value0 : value1</code>：如果布尔值为<strong>true</strong>，表达式值为<strong>value0</strong>，否则为<strong>value1</strong></li>
</ul>
<h3 id="3-13字符串操作符-和"><a href="#3-13字符串操作符-和" class="headerlink" title="3.13	字符串操作符+和+&#x3D;"></a>3.13	字符串操作符+和+&#x3D;</h3><ul>
<li>**+<strong>和</strong>+&#x3D;**用于字符串时，会将所有操作数转换成字符串类型</li>
</ul>
<h3 id="3-14使用操作符时常犯的错误"><a href="#3-14使用操作符时常犯的错误" class="headerlink" title="3.14	使用操作符时常犯的错误"></a>3.14	使用操作符时常犯的错误</h3><ul>
<li>Java编译器避免将一种类型当成另一种类型使用</li>
</ul>
<h3 id="3-15类型转换操作符"><a href="#3-15类型转换操作符" class="headerlink" title="3.15	类型转换操作符"></a>3.15	类型转换操作符</h3><ul>
<li><strong>窄化转换</strong>：将能容纳更多信息的数据类型转换成无法容纳那么多信息的类型，有可能面临信息丢失的危险</li>
<li><strong>扩展转换</strong>：与窄化转换相反，不必显式进行转换，不会造成任何信息的丢失</li>
<li><strong>截尾和舍入</strong>：窄化转换时会对数字执行截尾操作，可以使用**Math.round()**方法获得舍入结果</li>
<li><strong>提升</strong>：表达式结果的类型取决于表达式中最大的数据类型</li>
</ul>
<h3 id="3-16Java没有sizeof"><a href="#3-16Java没有sizeof" class="headerlink" title="3.16	Java没有sizeof"></a>3.16	Java没有sizeof</h3><ul>
<li><strong>Java</strong>运行在虚拟机上，所有的数据类型大小都相等，不会产生移植问题</li>
</ul>
<h2 id="第四章控制执行流程"><a href="#第四章控制执行流程" class="headerlink" title="第四章	控制执行流程"></a>第四章	控制执行流程</h2><h3 id="4-1true和false"><a href="#4-1true和false" class="headerlink" title="4.1	true和false"></a>4.1	true和false</h3><ul>
<li>条件语句利用条件表达式的值决定执行路径，不允许使用非布尔值</li>
</ul>
<h3 id="4-2if-else"><a href="#4-2if-else" class="headerlink" title="4.2	if-else"></a>4.2	if-else</h3><ul>
<li><p><strong>if-else语句</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(Boolean-expression)</span><br><span class="line">    statement</span><br><span class="line">或</span><br><span class="line">    <span class="keyword">if</span>(Boolean-expression)</span><br><span class="line">	    statement</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        statement</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-3迭代"><a href="#4-3迭代" class="headerlink" title="4.3	迭代"></a>4.3	迭代</h3><ul>
<li><p><strong>do-while语句</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">    statement</span><br><span class="line"><span class="title function_">while</span><span class="params">(Boolean-expression)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>for语句</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(initialization;Boolean-expression;step)</span><br><span class="line">    statement</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>逗号操作符</strong>：用于<strong>for</strong>语句的初始化和步进控制部分，被分割的语句均会独立执行</p>
</li>
</ul>
<h3 id="4-4Foreach语法"><a href="#4-4Foreach语法" class="headerlink" title="4.4	Foreach语法"></a>4.4	Foreach语法</h3><ul>
<li><p><strong>foreach用于数组和容器</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> num : nums)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-5return"><a href="#4-5return" class="headerlink" title="4.5	return"></a>4.5	return</h3><ul>
<li><strong>return关键字</strong><ul>
<li>指定一个方法返回什么值</li>
<li>导致当前方法退出，并返回值</li>
</ul>
</li>
</ul>
<h3 id="4-6break和continue"><a href="#4-6break和continue" class="headerlink" title="4.6	break和continue"></a>4.6	break和continue</h3><ul>
<li><strong>break关键字</strong>：强制退出循环，不执行循环中剩余语句</li>
<li><strong>continue关键字</strong>：停止执行当前的迭代，退出循环起始处，开始下一次迭代</li>
</ul>
<h3 id="4-7臭名昭著的goto"><a href="#4-7臭名昭著的goto" class="headerlink" title="4.7	臭名昭著的goto"></a>4.7	臭名昭著的goto</h3><ul>
<li><p><strong>goto语句</strong>：源码级的跳转导致程序的控制流程的混乱</p>
</li>
<li><p><strong>标签</strong>：用于迭代语句之前，<strong>break</strong>和<strong>continue</strong>会中断循环，直到标签所在的地方</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">label1:</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span> label1;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">label2:</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span> label2;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-8switch"><a href="#4-8switch" class="headerlink" title="4.8	switch"></a>4.8	switch</h3><ul>
<li><p><strong>switch选择语句</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(integral-selector)&#123;</span><br><span class="line">    <span class="keyword">case</span> integral-value1 : statement; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> integral-value1 : statement; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> integral-value1 : statement; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> integral-value1 : statement; <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">default</span> : statement; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第五章初始化与清理"><a href="#第五章初始化与清理" class="headerlink" title="第五章	初始化与清理"></a>第五章	初始化与清理</h2><h3 id="5-1用构造器确保初始化"><a href="#5-1用构造器确保初始化" class="headerlink" title="5.1	用构造器确保初始化"></a>5.1	用构造器确保初始化</h3><ul>
<li><p><strong>构造器</strong>：名称与类名相同，不返回任何值</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rock</span>&#123;</span><br><span class="line">	Rock()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Rock&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-2方法重载"><a href="#5-2方法重载" class="headerlink" title="5.2	方法重载"></a>5.2	方法重载</h3><ul>
<li><strong>区别重载的方法</strong>：通过参数列表的不同区别重载方法，包括参数列表的顺序</li>
<li><strong>涉及基本类型的重载</strong>：如果传入的实际参数大于形式参数，会提升参数数据类型，反之编译器会报错</li>
<li><strong>以返回值区分重载方法</strong>：返回值重载会产生歧义，导致编译器报错</li>
</ul>
<h3 id="5-3默认构造器"><a href="#5-3默认构造器" class="headerlink" title="5.3	默认构造器"></a>5.3	默认构造器</h3><ul>
<li><strong>默认构造器</strong>：当且仅当在未创建任何构造器的情况下，编译器会自动生成一个无参构造器</li>
</ul>
<h3 id="5-4this关键字"><a href="#5-4this关键字" class="headerlink" title="5.4	this关键字"></a>5.4	this关键字</h3><ul>
<li><strong>在构造器中调用构造器</strong>：使用<strong>this</strong>关键字，只能使用一个<strong>this</strong>语句，并且只能用于构造器开头</li>
</ul>
<h3 id="5-5清理：终结处理和垃圾回收"><a href="#5-5清理：终结处理和垃圾回收" class="headerlink" title="5.5	清理：终结处理和垃圾回收"></a>5.5	清理：终结处理和垃圾回收</h3><ul>
<li>**finalize()**：在垃圾回收器准备释放对象占用空间前被调用，在下一次回收动作发生时，才会真正地回收内存空间，常常用于确保某些非内存资源的释放</li>
</ul>
<h3 id="5-6成员初始化"><a href="#5-6成员初始化" class="headerlink" title="5.6	成员初始化"></a>5.6	成员初始化</h3><ul>
<li><strong>Java</strong>要求方法的局部变量必须初始化，否则产生编译时错误，但如果是基本数据类型，则会赋予初始值</li>
</ul>
<h3 id="5-7构造器初始化"><a href="#5-7构造器初始化" class="headerlink" title="5.7	构造器初始化"></a>5.7	构造器初始化</h3><ul>
<li><strong>初始化顺序</strong>：按照变量定义时的顺序决定变量初始化的顺序</li>
<li><strong>静态对象的初始化</strong>：只有在第一个对象被创建或者第一次访问时，才会初始化静态对象，并且此后不会再次被初始化，静态对象的初始化优先于非静态对象</li>
</ul>
<h3 id="5-8数组初始化"><a href="#5-8数组初始化" class="headerlink" title="5.8	数组初始化"></a>5.8	数组初始化</h3><ul>
<li><p><strong>数组的两种初始化方式</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer[] a=<span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">2</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Integer[] b=&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">2</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>可变参数列表</strong>：一种特殊的形参类型，能够让方法接受不定数量的参数，且必须是方法定义中的最后一个参数</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String ... strings)</span>&#123;</span><br><span class="line">    <span class="type">int</span> index=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(String string : strings)&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;the Num.&quot;</span>+index+++<span class="string">&quot; string: &quot;</span>+string);</span><br><span class="line">        System.out.print(<span class="string">&quot;  &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    print(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">    print(<span class="string">&quot;one&quot;</span>,<span class="string">&quot;two&quot;</span>);</span><br><span class="line">    print(<span class="string">&quot;one&quot;</span>,<span class="string">&quot;two&quot;</span>,<span class="string">&quot;three&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-9枚举类型"><a href="#5-9枚举类型" class="headerlink" title="5.9	枚举类型"></a>5.9	枚举类型</h3><ul>
<li><strong>枚举</strong>：一种特殊的数据类型，它定义了一个有限的值集合，使程序更具可读性和易用性</li>
</ul>
<h2 id="第六章访问权限控制"><a href="#第六章访问权限控制" class="headerlink" title="第六章	访问权限控制"></a>第六章	访问权限控制</h2><h3 id="6-1包：库单元"><a href="#6-1包：库单元" class="headerlink" title="6.1	包：库单元"></a>6.1	包：库单元</h3><ul>
<li><p><strong>编译单元</strong>：一个后缀名为**.java<strong>的源代码文件，一个编译单元只能拥有一个公开的</strong>public class**，且类名与文件名相同</p>
</li>
<li><p><strong>package关键字</strong>：<strong>package</strong>是用来组织和管理类的一种机制，一个<strong>package</strong>可以包含多个类和子包，它们可以帮助开发人员更加有效地组织和管理自己的代码，文件中除注释外必须是<strong>package语句</strong></p>
</li>
<li><p><strong>包的命名规则</strong></p>
<ul>
<li><p>包名全部为小写字母</p>
</li>
<li><p>包名使用点分隔符（.）将各个单词连接在一起</p>
</li>
<li><p>包名应该基于域名的倒置命名法来命名</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置环境变量CLASSPATH以包含多个可供查询的路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//例如:</span></span><br><span class="line"><span class="comment">//路径C:\DOC\JavaT\net\mindview\simple</span></span><br><span class="line"><span class="comment">//CLASSPATH=.;D:\JAVA\LIB;C:\DOC\JavaT</span></span><br><span class="line"><span class="keyword">import</span> net.mindview.simple.*;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>当发生类名冲突时，编译器会报错以要求指明类的全名</p>
</li>
</ul>
<h3 id="6-2Java访问权限修饰词"><a href="#6-2Java访问权限修饰词" class="headerlink" title="6.2	Java访问权限修饰词"></a>6.2	Java访问权限修饰词</h3><ul>
<li><p><strong>访问权限修饰词</strong></p>
<table>
<thead>
<tr>
<th align="center">修饰词</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>public</strong></td>
<td align="center">最大权限，修饰的成员可以被任何类访问，在同一个包下的类和不同包下的类都可以访问</td>
</tr>
<tr>
<td align="center"><strong>protected</strong></td>
<td align="center">能够被同一个包下的类以及不同包下的子类访问，但是不能被不同包下的非子类访问</td>
</tr>
<tr>
<td align="center"><strong>默认</strong></td>
<td align="center">当没有任何访问修饰符时，即为默认访问权限，只能被同一个包下的类访问，无法被其他包下的类访问</td>
</tr>
<tr>
<td align="center"><strong>private</strong></td>
<td align="center">最小权限，只能被定义该成员的类访问，不能被同一包下的其他类或者不同包下的类访问</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="6-3接口和实现"><a href="#6-3接口和实现" class="headerlink" title="6.3	接口和实现"></a>6.3	接口和实现</h3><ul>
<li>访问权限的控制常被称为具体实现的隐藏，用于设定客户端程序员可以使用和不可以使用的界限，和接口与实现的分离</li>
</ul>
<h3 id="6-4类的访问权限"><a href="#6-4类的访问权限" class="headerlink" title="6.4	类的访问权限"></a>6.4	类的访问权限</h3><ul>
<li><strong>修饰词限制</strong><ul>
<li>每个编译单元只能拥有一个<strong>public</strong>类，且类名与文件名相同</li>
<li>如果不含有<strong>public</strong>类，可随意对文件命名</li>
</ul>
</li>
<li>类不可以使用<strong>private</strong>修饰，只能使用<strong>package-private</strong>或<strong>public</strong>，如果不希望任何其它类拥有访问权限，可以将构造器指定为<strong>private</strong></li>
</ul>
<h2 id="第七章复用类"><a href="#第七章复用类" class="headerlink" title="第七章	复用类"></a>第七章	复用类</h2><h3 id="7-1组合语法"><a href="#7-1组合语法" class="headerlink" title="7.1	组合语法"></a>7.1	组合语法</h3><ul>
<li><strong>组合技术</strong>：将所需要的对象引用置于新类之中</li>
</ul>
<h3 id="7-2继承语法"><a href="#7-2继承语法" class="headerlink" title="7.2	继承语法"></a>7.2	继承语法</h3><ul>
<li><strong>extends语句</strong>：导出类继承基类，并自动得到基类中所有的域和方法</li>
<li><strong>初始化基类</strong>：在生成导出类对象时，总会调用基类构造器，且基类构造器先于导出类构造器被调用</li>
<li><strong>super关键字</strong>：带参数构造器必须显式地使用<strong>super</strong>语句调用基类的构造器，且必须写在构造器的第一行</li>
</ul>
<h3 id="7-3代理"><a href="#7-3代理" class="headerlink" title="7.3	代理"></a>7.3	代理</h3><ul>
<li><p><strong>代理</strong>：一个类代表另一个类的功能，并控制对该类的访问，从而实现为其他对象提供一种代理控制对目标对象的访问的功能</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 目标接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Image</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 目标对象：实现目标接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RealImage</span> <span class="keyword">implements</span> <span class="title class_">Image</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String fileName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RealImage</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fileName = fileName;</span><br><span class="line">        loadFromDisk(fileName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Displaying &quot;</span> + fileName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">loadFromDisk</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Loading &quot;</span> + fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理对象：实现与目标对象相同的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImageProxy</span> <span class="keyword">implements</span> <span class="title class_">Image</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RealImage realImage;</span><br><span class="line">    <span class="keyword">private</span> String fileName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ImageProxy</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fileName = fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (realImage == <span class="literal">null</span>) &#123;</span><br><span class="line">            realImage = <span class="keyword">new</span> <span class="title class_">RealImage</span>(fileName);</span><br><span class="line">        &#125;</span><br><span class="line">        realImage.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="7-4结合实用组合和继承"><a href="#7-4结合实用组合和继承" class="headerlink" title="7.4	结合实用组合和继承"></a>7.4	结合实用组合和继承</h3><ul>
<li><strong>名称屏蔽</strong>：在导出类中重新定义方法，不会屏蔽其在基类中的任何版本</li>
</ul>
<h3 id="7-5在组合与继承之间选择"><a href="#7-5在组合与继承之间选择" class="headerlink" title="7.5	在组合与继承之间选择"></a>7.5	在组合与继承之间选择</h3><ul>
<li><strong>is-a</strong>（是一个）用继承表达关系，<strong>has-a</strong>（有一个）用组合表达关系</li>
</ul>
<h3 id="7-6protected关键字"><a href="#7-6protected关键字" class="headerlink" title="7.6	protected关键字"></a>7.6	protected关键字</h3><ul>
<li><strong>protect关键字</strong>：对于类用户而言<strong>private</strong>，对于任何继承自此类的导出类或其他任何位于同一个包内的内而言，是可以访问的</li>
</ul>
<h3 id="7-7向上转型"><a href="#7-7向上转型" class="headerlink" title="7.7	向上转型"></a>7.7	向上转型</h3><ul>
<li><strong>向上转型</strong>：将一个子类对象转换成其父类对象的过程，由于面向对象编程的特性，每个子类对象都可以被当作父类对象使用，可以将一个子类对象赋值给一个父类引用变量，以实现向上转型</li>
</ul>
<h3 id="7-8final关键字"><a href="#7-8final关键字" class="headerlink" title="7.8	final关键字"></a>7.8	final关键字</h3><ul>
<li><strong>final数据</strong><ul>
<li>修饰基本类型时，数值恒定不变；修饰引用类型时，引用恒定不变</li>
<li><strong>空白final</strong>：被声明为<strong>final</strong>但又未给初值的域，在使用前必须在构造器中进行初始化</li>
<li><strong>final参数</strong>：在参数列表中以声明的方式将参数指明为<strong>final</strong>，表示无法在方法中更改参数引用所指向的对象</li>
</ul>
</li>
<li><strong>final方法</strong><ul>
<li>将方法锁定，以防任何继承类修改它的含义</li>
<li>类中所有的<strong>private</strong>方法都隐式地指定为是<strong>final</strong>的</li>
</ul>
</li>
<li><strong>final</strong>类：不允许继承该类</li>
</ul>
<h3 id="7-9初始化及类的加载"><a href="#7-9初始化及类的加载" class="headerlink" title="7.9	初始化及类的加载"></a>7.9	初始化及类的加载</h3><ul>
<li><strong>类的加载顺序</strong><ul>
<li>优先加载加载类的基类，无论是否需要产生基类的对象</li>
<li>按照继承关系依次执行<strong>static</strong>的初始化</li>
<li>创建对象后，对象中所有基本类型被设为默认值，然后执行对象的构造器</li>
</ul>
</li>
</ul>
<h2 id="第八章多态"><a href="#第八章多态" class="headerlink" title="第八章	多态"></a>第八章	多态</h2><h3 id="8-1再论向上转型"><a href="#8-1再论向上转型" class="headerlink" title="8.1	再论向上转型"></a>8.1	再论向上转型</h3><ul>
<li>向上转型避免了继承后，需要更多重载的编程过程，如果仅接收基类作为参数，可以简化代码的结构</li>
</ul>
<h3 id="8-2转机"><a href="#8-2转机" class="headerlink" title="8.2	转机"></a>8.2	转机</h3><ul>
<li><strong>绑定</strong>：讲一个方法调用同一个方法主体关联起来<ul>
<li><strong>前期绑定</strong>：在程序执行前绑定</li>
<li><strong>后期绑定</strong>：在运行时根据对象的类型进行绑定</li>
</ul>
</li>
<li><strong>注意事项</strong><ul>
<li>私有方法的覆盖不会产生多态现象</li>
<li>域和静态方法不具备多态性</li>
</ul>
</li>
</ul>
<h3 id="8-3构造器和多态"><a href="#8-3构造器和多态" class="headerlink" title="8.3	构造器和多态"></a>8.3	构造器和多态</h3><ul>
<li><strong>构造器的调用顺序</strong><ul>
<li>调用基类构造器</li>
<li>按声明顺序调用成员的初始化方法</li>
<li>调用导出类构造器的主体</li>
</ul>
</li>
<li><strong>构造器内部的多态方法的行为</strong><ul>
<li>在其他任何事物发生之前，将分配给对象的存储空间初始化成二进制的零</li>
<li>如前所述那样调用基类构造器</li>
<li>按照声明的顺序调用成员的初始化方法</li>
<li>调用导出类的构造器主体</li>
</ul>
</li>
</ul>
<h3 id="8-4协变返回类型"><a href="#8-4协变返回类型" class="headerlink" title="8.4	协变返回类型"></a>8.4	协变返回类型</h3><ul>
<li><strong>协变返回类型</strong>：在导出类中的被覆盖方法可以返回基类方法的返回基类的某种导出类型</li>
</ul>
<h3 id="8-5用继承进行设计"><a href="#8-5用继承进行设计" class="headerlink" title="8.5	用继承进行设计"></a>8.5	用继承进行设计</h3><ul>
<li><strong>纯继承与拓展</strong>：采用<strong>纯粹</strong>的方式来创建继承层次结构，只有在基类中已经建立的方法才可以在导出类中被覆盖，基类与导出类拥有完全相同的接口</li>
<li><strong>向下转型与运行时类型识别</strong>：向下转型时会进行<strong>运行时类型识别</strong>，如果不是希望的类型会报错</li>
</ul>
<h2 id="第九章接口"><a href="#第九章接口" class="headerlink" title="第九章	接口"></a>第九章	接口</h2><h3 id="9-1抽象类和抽象方法"><a href="#9-1抽象类和抽象方法" class="headerlink" title="9.1	抽象类和抽象方法"></a>9.1	抽象类和抽象方法</h3><ul>
<li><strong>抽象方法</strong>：只有方法声明，没有具体实现的方法，只能在抽象类或者接口中存在，不能被直接调用，需要由子类进行实现</li>
<li><strong>抽象类</strong>：在类的声明中包含抽象方法的类，不能被实例化，必须被子类继承并实现其中的抽象方法才能被使用</li>
<li><strong>使用场合</strong><ul>
<li><strong>定义通用接口</strong>：通过定义抽象方法和抽象类，使得多个具体的子类可以共享这些接口和基础实现逻辑，提高了代码的复用性和效率</li>
<li><strong>约束子类行为</strong>：抽象类可以定义一些基础的方法和属性，但是对于某些具体的属性和方法，需要等到子类中具体实现之后才可以使用，从而达到约束子类行为的目的</li>
<li><strong>提高代码可读性和可维护性</strong>：通过抽象类将某些具体的实现逻辑封装起来，有助于提高代码的可读性和可维护性</li>
</ul>
</li>
</ul>
<h3 id="9-2接口"><a href="#9-2接口" class="headerlink" title="9.2	接口"></a>9.2	接口</h3><ul>
<li><strong>interface关键字</strong>：产生完全抽象的类，只提供形式，不提供任何具体实现</li>
<li><strong>接口方法</strong>：默认为<strong>public</strong>且必须被定义为<strong>public</strong>，否则在方法继承过程中会导致其访问权限降低（在高版本Java中，接口中的普通方法也是被允许的，此类方法为静态方法，可以使用<strong>private</strong>来实现工具函数）</li>
</ul>
<h3 id="9-3完全解耦"><a href="#9-3完全解耦" class="headerlink" title="9.3	完全解耦"></a>9.3	完全解耦</h3><ul>
<li><strong>策略设计模式</strong>：根据所传递参数对象不同，而具有不同行为的方法</li>
<li><strong>解耦</strong>：将接口从具体实现中解耦，使得接口可以用于多种不同的具体实现，代码更具可复用性</li>
</ul>
<h3 id="9-4Java中的多重继承"><a href="#9-4Java中的多重继承" class="headerlink" title="9.4	Java中的多重继承"></a>9.4	Java中的多重继承</h3><ul>
<li><strong>多重继承</strong>：继承任意多个接口来实现多重继承，接口没有任何具体实现，不会产生类继承所面临的问题</li>
</ul>
<h3 id="9-5通过继承来拓展接口"><a href="#9-5通过继承来拓展接口" class="headerlink" title="9.5	通过继承来拓展接口"></a>9.5	通过继承来拓展接口</h3><ul>
<li><strong>拓展接口</strong>：通过继承多个接口，或者在接口中添加新的声明，来实现接口的拓展</li>
<li><strong>多重继承的名字冲突</strong>：返回类型或方法签名不同的相同方法，不允许被同时继承</li>
</ul>
<h3 id="9-6适配接口"><a href="#9-6适配接口" class="headerlink" title="9.6	适配接口"></a>9.6	适配接口</h3><ul>
<li><strong>适配接口</strong>：使用<strong>策略设计模式</strong>和<strong>适配器模式</strong>，来实现任何类对方法进行适配</li>
</ul>
<h3 id="9-7接口中的域"><a href="#9-7接口中的域" class="headerlink" title="9.7	接口中的域"></a>9.7	接口中的域</h3><ul>
<li>接口中的任何域都是<strong>static</strong>和<strong>final</strong>的，可以用来实现与<strong>enum</strong>类似的功能</li>
<li>接口中的域不允许空<strong>final</strong>，必须进行初始化</li>
</ul>
<h3 id="9-8嵌套接口"><a href="#9-8嵌套接口" class="headerlink" title="9.8	嵌套接口"></a>9.8	嵌套接口</h3><ul>
<li>接口可以嵌套在其他接口或类当中</li>
</ul>
<h3 id="9-9接口与工厂"><a href="#9-9接口与工厂" class="headerlink" title="9.9	接口与工厂"></a>9.9	接口与工厂</h3><ul>
<li><strong>工厂方法设计模式</strong>：在工厂对象上调用创建方法，生成接口的某个实现对象</li>
</ul>
<h2 id="第十章内部类"><a href="#第十章内部类" class="headerlink" title="第十章	内部类"></a>第十章	内部类</h2><h3 id="10-1创建内部类"><a href="#10-1创建内部类" class="headerlink" title="10.1	创建内部类"></a>10.1	创建内部类</h3><ul>
<li><strong>内部类</strong>：将一个类的定义放在另一个类的定义内部，使用时需要指明其类型<strong>OuterClassName.InnerClassName</strong></li>
</ul>
<h3 id="10-2链接到外部类"><a href="#10-2链接到外部类" class="headerlink" title="10.2	链接到外部类"></a>10.2	链接到外部类</h3><ul>
<li>内部类能够访问其外围对象的所有成员，拥有其外围类所有元素的访问权</li>
</ul>
<h3 id="10-3使用-this与-new"><a href="#10-3使用-this与-new" class="headerlink" title="10.3	使用.this与.new"></a>10.3	使用.this与.new</h3><ul>
<li><p><strong>.this关键字</strong>：生成对外部类对象的引用</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DotThis</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;DotThis.f()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> DotThis <span class="title function_">outer</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> DotThis.<span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Inner <span class="title function_">inner</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        DotThis dt=<span class="keyword">new</span> <span class="title class_">DotThis</span>();</span><br><span class="line">        DotThis.Inner dti= dt.inner();</span><br><span class="line">        dti.outer().f();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>.new关键字</strong>：提供对其他外部类对象的引用</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DotNew</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        DotNew dn=<span class="keyword">new</span> <span class="title class_">DotNew</span>();</span><br><span class="line">        DotNew.Inner dni=dn.<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="10-4内部类与向上转型"><a href="#10-4内部类与向上转型" class="headerlink" title="10.4	内部类与向上转型"></a>10.4	内部类与向上转型</h3><ul>
<li>外围类中添加实现接口的私有内部类，隐藏了实现的细节，有助于生成更高效的代码</li>
</ul>
<h3 id="10-5在方法和作用域内的内部类"><a href="#10-5在方法和作用域内的内部类" class="headerlink" title="10.5	在方法和作用域内的内部类"></a>10.5	在方法和作用域内的内部类</h3><ul>
<li><strong>内部类的作用</strong><ul>
<li>实现某类型的接口，创建并返回对其的引用</li>
<li>使用私有内部类辅助解决外围类的复杂问题</li>
</ul>
</li>
<li><strong>内部类的分类</strong><ul>
<li><strong>成员内部类</strong>：定义在一个类的内部，且在类的成员位置上。它可以访问外部类的所有成员变量和方法，包括私有的。创建成员内部类的实例时，必须先创建外部类的实例，通过外部类的引用来创建内部类的对象。</li>
<li><strong>静态内部类</strong>：定义在一个类的内部，且在类的成员位置上，并使用 static 修饰。它不能访问外部类的非静态成员变量和方法，只能访问外部类的静态成员变量和方法。创建静态内部类的实例时，不需要先创建外部类的实例。</li>
<li><strong>局部内部类</strong>：定义在一个方法或语句块的内部。它只能在定义它的方法或语句块中使用，并且不能被 public、protected、private 和 static 修饰。局部内部类可以访问外部类的所有成员变量和方法，但是要求这些变量和方法必须是 final 类型的。</li>
<li><strong>匿名内部类</strong>：没有类名的内部类。它通常用于创建临时的、只使用一次的类对象。匿名内部类通常作为参数传递给方法或构造函数，也可以直接创建它的实例。匿名内部类可以继承一个父类或实现一个接口，但是不能同时进行。</li>
</ul>
</li>
</ul>
<h3 id="10-6匿名内部类"><a href="#10-6匿名内部类" class="headerlink" title="10.6	匿名内部类"></a>10.6	匿名内部类</h3><ul>
<li><p><strong>匿名内部类</strong>：一个接口&#x2F;类的方法的某个实现方式在程序中只会执行一次，但为了使用它，我们需要创建它的实现类&#x2F;子类去实现&#x2F;重写，此时可以使用匿名内部类的方式，可以无需创建新的类，减少代码冗余</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Greeting</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Greeting</span> <span class="variable">greeting</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Greeting</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        greeting.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="10-7嵌套类"><a href="#10-7嵌套类" class="headerlink" title="10.7	嵌套类"></a>10.7	嵌套类</h3><ul>
<li><p><strong>嵌套类</strong></p>
<ul>
<li><p>不需要其外围类的对象</p>
</li>
<li><p>不能从嵌套类的对象中访问非静态的外围类对象</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Greeting</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Greet</span> <span class="keyword">implements</span> <span class="title class_">Greeting</span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Greet greet=<span class="keyword">new</span> <span class="title class_">Greet</span>();</span><br><span class="line">        greet.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>接口内部的类</strong>：嵌套类可以作为接口的一部分</p>
</li>
<li><p><strong>多层嵌套</strong>：无论被嵌套多少层，嵌套类都可以透明地访问它所嵌入的外围类的所有成员</p>
</li>
</ul>
<h3 id="10-8为什么需要内部类"><a href="#10-8为什么需要内部类" class="headerlink" title="10.8	为什么需要内部类"></a>10.8	为什么需要内部类</h3><ul>
<li><strong>内部类的作用</strong>：每个内部类都能够独立地继承自一个（接口的）实现，所以无论外围类是否已经继承了某个（接口的）实现，对于内部类都没有影响</li>
<li><strong>内部类的特性</strong><ul>
<li>内部类可以有多个实例，每个实例都有自己的状态信息，并且与其外围类对象的信息相互独立</li>
<li>在单个外围类中，可以让多个内部类以不同的方式实现同一个接口，或继承同一个类</li>
<li>创建内部类对象的时刻并不依赖于外围类对象的创建</li>
<li>内部类并没有令人迷惑的<strong>is-a</strong>关系，它就是一个独立的实体</li>
</ul>
</li>
<li><strong>闭包</strong>：一个可调用的对象，记录了来自于创建它的作用域的信息，内部类是面向对象的闭包</li>
<li><strong>回调</strong>：对象携带一些信息，允许它在稍后的某个时刻调用初始的对象</li>
</ul>
<h3 id="10-9内部类的继承"><a href="#10-9内部类的继承" class="headerlink" title="10.9	内部类的继承"></a>10.9	内部类的继承</h3><ul>
<li><p>内部类的继承需要使用**.super**，用于进行初始化操作</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WithInner</span>&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InheritInner</span> <span class="keyword">extends</span> <span class="title class_">WithInner</span>.Inner&#123;</span><br><span class="line">    InheritInner(WithInner wi)&#123;</span><br><span class="line">        wi.<span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        WithInner wi=<span class="keyword">new</span> <span class="title class_">WithInner</span>();</span><br><span class="line">        InheritInner ii=<span class="keyword">new</span> <span class="title class_">InheritInner</span>(wi);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="10-10内部类可以被覆盖吗"><a href="#10-10内部类可以被覆盖吗" class="headerlink" title="10.10	内部类可以被覆盖吗"></a>10.10	内部类可以被覆盖吗</h3><ul>
<li>内部类可以被覆盖，但是仅继承外围类不会产生影响，因为它们位于两个不同的命名空间</li>
</ul>
<h3 id="10-11局部内部类"><a href="#10-11局部内部类" class="headerlink" title="10.11	局部内部类"></a>10.11	局部内部类</h3><ul>
<li>局部内部类不是外围类的一部分，但是它可以访问当前代码块的常量以及外围类的所有成员，与匿名内部类不同的是，局部内部类的对象可以被多次声明</li>
</ul>
<h3 id="10-12内部类标识符"><a href="#10-12内部类标识符" class="headerlink" title="10.12	内部类标识符"></a>10.12	内部类标识符</h3><ul>
<li>内部类会产生一个**.class<strong>文件以及包含它们的</strong>Class**对象信息，它们使用外围类名称 + $ + 内部类名称来命名</li>
</ul>
<h2 id="第十一章持有对象"><a href="#第十一章持有对象" class="headerlink" title="第十一章	持有对象"></a>第十一章	持有对象</h2><h3 id="11-1泛型和类型安全的容器"><a href="#11-1泛型和类型安全的容器" class="headerlink" title="11.1	泛型和类型安全的容器"></a>11.1	泛型和类型安全的容器</h3><ul>
<li>通过使用预定义的泛型，可以在编译期避免将错误类型的对象放置到容器中，同时也优化了后续的类型转换过程</li>
</ul>
<h3 id="11-2基本概念"><a href="#11-2基本概念" class="headerlink" title="11.2	基本概念"></a>11.2	基本概念</h3><ul>
<li><strong>Java</strong>容器类类库的用途为保存对象，可分为两类<ul>
<li><strong>Collection</strong>：一个独立元素的序列，服从一条或多条规则</li>
<li><strong>Map</strong>：一组成对的键值对对象，可以通过键来查找值</li>
</ul>
</li>
</ul>
<h3 id="11-3添加一组元素"><a href="#11-3添加一组元素" class="headerlink" title="11.3	添加一组元素"></a>11.3	添加一组元素</h3><ul>
<li><p><strong>添加元素</strong></p>
<ul>
<li><p>数组转换成集合<strong>asList</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collection&lt;Integer&gt; collection=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;(Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>));</span><br></pre></td></tr></table></figure>
</li>
<li><p>向集合中添加多个元素<strong>addAll</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collections.addAll(collection,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>向集合中添加逐个元素<strong>add</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">collection.add(<span class="number">4</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="11-4容器的打印"><a href="#11-4容器的打印" class="headerlink" title="11.4	容器的打印"></a>11.4	容器的打印</h3><ul>
<li><strong>容器打印</strong>：使用<strong>Arrays.toString</strong>来打印容器中的对象</li>
</ul>
<h3 id="11-5List"><a href="#11-5List" class="headerlink" title="11.5	List"></a>11.5	List</h3><ul>
<li><strong>List</strong>接口在<strong>Collection</strong>的基础上添加方法，使得它可以插入元素和移除元素<ul>
<li><strong>ArrayList</strong>：基于数组的容器，随机访问元素速度快，但是插入和移除元素较慢</li>
<li><strong>LinkedList</strong>：基于链表的容器，插入和删除操作较快，但随机访问能力低</li>
</ul>
</li>
</ul>
<h3 id="11-6迭代器"><a href="#11-6迭代器" class="headerlink" title="11.6	迭代器"></a>11.6	迭代器</h3><ul>
<li><strong>迭代器</strong>：一个对象，用于遍历并选择序列中的对象，不必关心序列底层的结构</li>
<li><strong>Iterator</strong>迭代器<ul>
<li>使用方法**iterator()**要求容器返回一个迭代器，将准备好返回序列的第一个元素</li>
<li>使用**next()**获得序列中的下一个元素</li>
<li>使用**hasNext()**检查序列中是否还有其他元素</li>
<li>使用**remove()**将迭代器新近返回的元素删除</li>
</ul>
</li>
<li><strong>ListIterator</strong>迭代器：<strong>Iterator</strong>迭代器的子类，允许双向移动</li>
</ul>
<h3 id="11-7LinkedList"><a href="#11-7LinkedList" class="headerlink" title="11.7	LinkedList"></a>11.7	LinkedList</h3><ul>
<li><strong>LinkedList</strong>：相对于<strong>ArrayList</strong>接口，性能上有所差异，同时添加了用作栈，队列或双端队列的方法</li>
</ul>
<h3 id="11-8Stack"><a href="#11-8Stack" class="headerlink" title="11.8	Stack"></a>11.8	Stack</h3><ul>
<li><strong>栈</strong>：后进先出的容器，可以通过<strong>LinkedList</strong>接口来实现</li>
</ul>
<h3 id="11-9Set"><a href="#11-9Set" class="headerlink" title="11.9	Set"></a>11.9	Set</h3><ul>
<li><strong>集合</strong>：不保存重复的元素，通常使用<strong>HashSet</strong>实现，在快速查找方面的性能较强</li>
</ul>
<h3 id="11-10Map"><a href="#11-10Map" class="headerlink" title="11.10	Map"></a>11.10	Map</h3><ul>
<li><strong>映射</strong>：将键对象映射到值对象，其中<strong>HashMap</strong>无序，而<strong>LinkedHashMap</strong>有序</li>
</ul>
<h3 id="11-11Queue"><a href="#11-11Queue" class="headerlink" title="11.11	Queue"></a>11.11	Queue</h3><ul>
<li><strong>队列</strong>：先进先出的容器，<strong>LinkedList</strong>是队列的一种实现</li>
<li><strong>PriorityQueue</strong>：优先级队列，确定元素的优先级，按照一定顺序弹出元素</li>
</ul>
<h3 id="11-12Collection和Iterator"><a href="#11-12Collection和Iterator" class="headerlink" title="11.12	Collection和Iterator"></a>11.12	Collection和Iterator</h3><ul>
<li><strong>Collection</strong>是描述所有序列容器的共性的根接口，但是，当我们需要实现一个不是<strong>Collection</strong>的类时，可以选择使用<strong>Iterator</strong>，在序列类上的约束也更少</li>
</ul>
<h3 id="11-13Foreach与迭代器"><a href="#11-13Foreach与迭代器" class="headerlink" title="11.13	Foreach与迭代器"></a>11.13	Foreach与迭代器</h3><ul>
<li><strong>foreach</strong>语法可用于任何<strong>Collection</strong>对象，它使用<strong>Iterator</strong>接口来返回序列中的元素</li>
<li><strong>适配器方法</strong>：添加一个用于生成迭代器的方法，提供接口以满足<strong>foreach</strong>语句</li>
</ul>
<h2 id="第十二章通过异常处理错误"><a href="#第十二章通过异常处理错误" class="headerlink" title="第十二章	通过异常处理错误"></a>第十二章	通过异常处理错误</h2><h3 id="12-1概念"><a href="#12-1概念" class="headerlink" title="12.1	概念"></a>12.1	概念</h3><ul>
<li><strong>异常处理的必要性</strong><ul>
<li>编译期间并不能找出所有的错误，余下的问题必须在运行期间解决</li>
<li>对于构造大型，健壮，可维护的程序而言，错误处理模式已经成为主要障碍</li>
<li>使用异常往往可以降低错误代码处理的复杂度</li>
</ul>
</li>
</ul>
<h3 id="12-2基本异常"><a href="#12-2基本异常" class="headerlink" title="12.2	基本异常"></a>12.2	基本异常</h3><ul>
<li><strong>异常情形</strong>：阻止当前方法或作用域据需执行的问题</li>
<li><strong>抛出异常的流程</strong><ul>
<li>使用<strong>new</strong>在堆上创建异常对象</li>
<li>当前执行路径被终止，并且从当前环境中弹出对异常对象的引用</li>
<li>异常处理机制接管程序，并寻找下一个合适的地方来继续执行程序</li>
</ul>
</li>
</ul>
<h3 id="12-3捕获异常"><a href="#12-3捕获异常" class="headerlink" title="12.3	捕获异常"></a>12.3	捕获异常</h3><ul>
<li><p><strong>try块</strong>：在块内设置监控区域，用于捕获可能出现的异常</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">	<span class="comment">//Code that might generate exceptions</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>异常处理程序</strong>：使用<strong>catch</strong>关键字，用于处理抛出的异常</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">	<span class="comment">//Code that might generate exceptions</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(Type1 id1)&#123;</span><br><span class="line">	<span class="comment">//Handle exceptions of type1</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(Type2 id2)&#123;</span><br><span class="line">	<span class="comment">//Handle exceptions of type2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//etc</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>终止与恢复</strong>：异常处理的两种基本模型，<strong>Java</strong>支持终止模型，一旦被抛出，程序无法返回继续执行；另一种为恢复模型，异常处理程序修正错误，重新尝试出问题的方法</p>
</li>
</ul>
<h3 id="12-4创建自定义异常"><a href="#12-4创建自定义异常" class="headerlink" title="12.4	创建自定义异常"></a>12.4	创建自定义异常</h3><ul>
<li><strong>自定义异常类</strong>：选择意思相近的异常类进行继承</li>
<li><strong>异常与记录日志</strong>：将异常信息记录到<strong>Logger</strong>对象中</li>
</ul>
<h3 id="12-5异常说明"><a href="#12-5异常说明" class="headerlink" title="12.5	异常说明"></a>12.5	异常说明</h3><ul>
<li><strong>throw语句</strong>：将方法可能产生的异常抛出，并告知客户端程序员</li>
</ul>
<h3 id="12-6捕获所有异常"><a href="#12-6捕获所有异常" class="headerlink" title="12.6	捕获所有异常"></a>12.6	捕获所有异常</h3><ul>
<li><strong>Exception类</strong>：异常类型的基类，可以使用它捕获所有的异常，然后根据它的类型判断异常的原因</li>
<li><strong>栈轨迹</strong>：**printStackTree()<strong>和</strong>getStacktree()**可以将元素压入和取出栈</li>
<li><strong>重新抛出异常</strong>：使用<strong>throw</strong>语句重新抛出异常，将异常交给上一级异常处理程序，同一个<strong>try</strong>块的后续<strong>catch</strong>子句将被忽略</li>
<li><strong>异常链</strong>：在捕获一个异常后抛出另一个异常，并把原始异常的信息保存下来</li>
</ul>
<h3 id="12-7Java标准异常"><a href="#12-7Java标准异常" class="headerlink" title="12.7	Java标准异常"></a>12.7	Java标准异常</h3><ul>
<li><strong>Throwable类</strong>：表示任何可以作为异常被抛出的类，可分为编译时和系统错误<strong>Error</strong>和运行时错误<strong>Exception</strong></li>
<li><strong>RuntimeException类</strong>：运行时异常类，代表着编程错误</li>
</ul>
<h3 id="12-8使用finally进行清理"><a href="#12-8使用finally进行清理" class="headerlink" title="12.8	使用finally进行清理"></a>12.8	使用finally进行清理</h3><ul>
<li><strong>finally子句</strong>：无论<strong>try</strong>是否抛出异常，都能得到执行的子句，可以用来把除内存外的资源恢复到它们的初始状态，包括网络连接，图形和外部开关等</li>
<li>在<strong>return</strong>语句中使用<strong>finally</strong>：<strong>finally</strong>子句一定会执行，即使<strong>return</strong>先进行了返回操作，<strong>finally</strong>中的代码也会被执行</li>
</ul>
<h3 id="12-9异常的限制"><a href="#12-9异常的限制" class="headerlink" title="12.9	异常的限制"></a>12.9	异常的限制</h3><ul>
<li>在覆盖方法时，只能抛出在基类方法的异常说明中列出的异常，但是这种限制对构造器不起作用，且派生类构造器不能接收基类构造器抛出的异常</li>
</ul>
<h3 id="12-10构造器"><a href="#12-10构造器" class="headerlink" title="12.10	构造器"></a>12.10	构造器</h3><ul>
<li>当构造器抛出异常时，除内存外其他资源的清理工作不会进行，编写构造器时要格外小心</li>
</ul>
<h3 id="12-11异常匹配"><a href="#12-11异常匹配" class="headerlink" title="12.11	异常匹配"></a>12.11	异常匹配</h3><ul>
<li>抛出异常时，异常处理系统会按照代码的书写顺序找出最近的处理程序，匹配后就不再查找</li>
</ul>
<h3 id="12-12其他可选方式"><a href="#12-12其他可选方式" class="headerlink" title="12.12	其他可选方式"></a>12.12	其他可选方式</h3><ul>
<li><strong>异常处理历史</strong><ul>
<li>起源于<strong>Pl&#x2F;1</strong>和<strong>Mesa</strong>之类的系统</li>
<li>借鉴于<strong>CLU</strong>的做法，异常处理机制加入到**C++**标准化过程</li>
<li><strong>Java</strong>设计者去掉了一些<strong>C+<strong>中不好的地方，将异常处理机制加入到</strong>Java</strong>中</li>
</ul>
</li>
<li><strong>Java被检查的异常</strong><ul>
<li>一致的，使用异常来报告错误的模型</li>
<li>一定的类型检查，强制程序使用正确的类型</li>
</ul>
</li>
</ul>
<h3 id="12-13异常使用指南"><a href="#12-13异常使用指南" class="headerlink" title="12.13	异常使用指南"></a>12.13	异常使用指南</h3><ul>
<li><strong>使用异常的情况</strong><ul>
<li>在恰当的级别处理问题</li>
<li>解决问题并且重新调用产生异常的方法</li>
<li>进行少许修补，然后绕过异常发生的地方继续执行</li>
<li>用别的数据进行计算，用代替方法预计会返回的值</li>
<li>把当前环境能做的事情尽量做完，然后把相同的异常重抛到更高层</li>
<li>把当前环境能做的事情尽量做完，然后把不同的异常抛到更高层</li>
<li>终止程序</li>
<li>进行简化</li>
<li>让类库和程序更安全</li>
</ul>
</li>
</ul>
<h2 id="第十三章字符串"><a href="#第十三章字符串" class="headerlink" title="第十三章	字符串"></a>第十三章	字符串</h2><h3 id="13-1不可变String"><a href="#13-1不可变String" class="headerlink" title="13.1	不可变String"></a>13.1	不可变String</h3><ul>
<li><strong>String</strong>对象是不可改变的，任何修改<strong>String</strong>值的行为都是创建全新的<strong>String</strong>对象</li>
</ul>
<h3 id="13-2重载“-”与StringBuilder"><a href="#13-2重载“-”与StringBuilder" class="headerlink" title="13.2	重载“+”与StringBuilder"></a>13.2	重载“+”与StringBuilder</h3><ul>
<li><strong>Java</strong>重载了 <strong>+</strong> 和 <strong>+&#x3D;</strong> 运算符，用于字符串的连接，原理为重新生成所需的<strong>String</strong>对象</li>
<li>当循环修改<strong>String</strong>对象时，可以使用<strong>StringBuilder</strong>类来提高代码运行效率</li>
</ul>
<h3 id="13-3无意识的递归"><a href="#13-3无意识的递归" class="headerlink" title="13.3	无意识的递归"></a>13.3	无意识的递归</h3><ul>
<li>在代码中使用 <strong>+</strong> 时，可能会自动调用<strong>Object</strong>的<strong>toString</strong>方法而转化为<strong>String</strong>对象</li>
</ul>
<h3 id="13-4String上的操作"><a href="#13-4String上的操作" class="headerlink" title="13.4	String上的操作"></a>13.4	String上的操作</h3><table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">参数，重载版本</th>
<th align="center">应用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">构造器</td>
<td align="center">默认版本，<strong>String</strong>，<strong>StringBuilder</strong>，<strong>StringBuffer</strong>，<strong>char</strong>数组，<strong>byte</strong>数组</td>
<td align="center">创建<strong>String</strong>对象</td>
</tr>
<tr>
<td align="center"><strong>length()</strong></td>
<td align="center"></td>
<td align="center"><strong>String</strong>中字符的个数</td>
</tr>
<tr>
<td align="center"><strong>charAt()</strong></td>
<td align="center"><strong>int</strong>索引</td>
<td align="center">取得<strong>String</strong>中该索引位置上的<strong>char</strong></td>
</tr>
<tr>
<td align="center"><strong>getChars(),getBytes()</strong></td>
<td align="center">复制部分起点终点的索引，目标数组，目标数组的起始索引</td>
<td align="center">复制<strong>char</strong>或<strong>byte</strong>到一个目标数组中</td>
</tr>
<tr>
<td align="center"><strong>toCharArray()</strong></td>
<td align="center"></td>
<td align="center">生成一个<strong>char[]<strong>，包含</strong>String</strong>的所有字符</td>
</tr>
<tr>
<td align="center"><strong>equals()</strong></td>
<td align="center">要比较的<strong>String</strong></td>
<td align="center">比较两个<strong>String</strong>的内容是否相同</td>
</tr>
<tr>
<td align="center"><strong>compareTo()</strong></td>
<td align="center">要比较的<strong>String</strong></td>
<td align="center">按词典顺序比较<strong>String</strong>的内容</td>
</tr>
<tr>
<td align="center"><strong>contains()</strong></td>
<td align="center">要搜索的<strong>CharSequence</strong></td>
<td align="center">判断<strong>String</strong>对象是否包含参数的内容</td>
</tr>
<tr>
<td align="center"><strong>contentEquals()</strong></td>
<td align="center">要比较的<strong>CharSequence</strong>或<strong>StringBuffer</strong></td>
<td align="center">判断<strong>String</strong>对象是否与参数的内容完全一致</td>
</tr>
<tr>
<td align="center"><strong>equalsIgnoreCase()</strong></td>
<td align="center">要比较的<strong>String</strong></td>
<td align="center">忽略大小写，判断<strong>String</strong>内容是否相同</td>
</tr>
<tr>
<td align="center"><strong>regionMatcher()</strong></td>
<td align="center">两个<strong>String</strong>的索引偏移量，要比较的长度，重载版本可以忽略大小写</td>
<td align="center">判断所选区域是否相等</td>
</tr>
<tr>
<td align="center"><strong>startsWith</strong></td>
<td align="center">起始<strong>String</strong>，重载版本增加了偏移量</td>
<td align="center">判断此参数是否为字符串的前缀</td>
</tr>
<tr>
<td align="center"><strong>endsWith</strong></td>
<td align="center">后缀<strong>String</strong></td>
<td align="center">判断此参数是否为字符串的后缀</td>
</tr>
<tr>
<td align="center"><strong>indexOf(),lastIndexOf()</strong></td>
<td align="center">重载版本有<strong>char</strong>，<strong>char</strong>与起始索引，<strong>String</strong>，<strong>String</strong>与起始索引</td>
<td align="center">返回此参数在<strong>String</strong>中的起始索引，不包含则返回-1,**lastIndexOf()**是从后向前搜索</td>
</tr>
<tr>
<td align="center"><strong>substring(),(subSequence())</strong></td>
<td align="center">重载版本有起始索引，起始索引 + 终点坐标</td>
<td align="center">返回包含参数的子字符串</td>
</tr>
<tr>
<td align="center"><strong>concat()</strong></td>
<td align="center">要连接的<strong>String</strong></td>
<td align="center">连接后的新的<strong>String</strong>对象</td>
</tr>
<tr>
<td align="center"><strong>replace()</strong></td>
<td align="center">要替换掉的<strong>char</strong>或<strong>charSequence</strong>，用来替换的<strong>char</strong>或<strong>charSequence</strong></td>
<td align="center">替换字符后的新<strong>String</strong>对象</td>
</tr>
<tr>
<td align="center"><strong>toLowerCase(),toUpperCase()</strong></td>
<td align="center"></td>
<td align="center">大小写转换后的新<strong>String</strong>对象</td>
</tr>
<tr>
<td align="center"><strong>trim()</strong></td>
<td align="center"></td>
<td align="center">删除两端空白符后的新<strong>String</strong>对象</td>
</tr>
<tr>
<td align="center"><strong>valueOf()</strong></td>
<td align="center">重载版本有<strong>Object</strong>，<strong>char[]<strong>，</strong>char[]<strong>和偏移量和字符个数，</strong>boolean</strong>,<strong>char</strong>,<strong>int</strong>，<strong>long</strong>，<strong>float</strong>，<strong>double</strong></td>
<td align="center">表示参数内容的<strong>String</strong></td>
</tr>
<tr>
<td align="center"><strong>intern()</strong></td>
<td align="center"></td>
<td align="center">为每一个唯一的字符序列生成一个且仅生成一个<strong>String</strong>引用</td>
</tr>
</tbody></table>
<h3 id="13-5格式化输出"><a href="#13-5格式化输出" class="headerlink" title="13.5	格式化输出"></a>13.5	格式化输出</h3><ul>
<li>**printf()**：格式化修饰符 + 参数</li>
<li><strong>System.out.format()<strong>：与C语言的</strong>printf()<strong>和</strong>Java</strong>中的**System.out.printf()**等价</li>
<li><strong>Formatter</strong>类：<strong>Java</strong>中的所有的格式化功能都由该类实现</li>
<li><strong>格式化说明符</strong>：**%[argument_index$][flags][width][.precision]conversion**<ul>
<li>**[width]**：指定一个域的最小尺寸，默认添加空格右对齐</li>
<li>**[.precision]**：指定最大尺寸</li>
</ul>
</li>
<li><strong>Formatter转换</strong></li>
</ul>
<table>
<thead>
<tr>
<th align="center">类型转换字符</th>
<th align="center">字符含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">d</td>
<td align="center">整数型（十进制）</td>
</tr>
<tr>
<td align="center">c</td>
<td align="center">Unicode字符</td>
</tr>
<tr>
<td align="center">b</td>
<td align="center">Boolean值</td>
</tr>
<tr>
<td align="center">s</td>
<td align="center">String</td>
</tr>
<tr>
<td align="center">f</td>
<td align="center">浮点数（十进制）</td>
</tr>
<tr>
<td align="center">e</td>
<td align="center">浮点数（科学计数法）</td>
</tr>
<tr>
<td align="center">x</td>
<td align="center">整数（十六进制）</td>
</tr>
<tr>
<td align="center">h</td>
<td align="center">散列码（十六进制）</td>
</tr>
<tr>
<td align="center">%</td>
<td align="center">字符%</td>
</tr>
</tbody></table>
<h3 id="13-6正则表达式"><a href="#13-6正则表达式" class="headerlink" title="13.6	正则表达式"></a>13.6	正则表达式</h3><ul>
<li><p><strong>正则表达式</strong>：一种强大而灵活的文本处理工具，以编程的方式，构造复杂的文本模式，并对输入的字符串进行搜索</p>
</li>
<li><p><strong>创建正则表达式</strong></p>
<ul>
<li><p>字符</p>
<table>
<thead>
<tr>
<th align="center">正则表达式</th>
<th align="center">匹配内容</th>
</tr>
</thead>
<tbody><tr>
<td align="center">B</td>
<td align="center">指定字符B</td>
</tr>
<tr>
<td align="center">\xhh</td>
<td align="center">十六进制中值为0xhh的字符</td>
</tr>
<tr>
<td align="center">\uhhhh</td>
<td align="center">十六进制表示0xhhhh的Unicode字符</td>
</tr>
<tr>
<td align="center">\t</td>
<td align="center">制表符Tab</td>
</tr>
<tr>
<td align="center">\n</td>
<td align="center">换行符</td>
</tr>
<tr>
<td align="center">\r</td>
<td align="center">回车</td>
</tr>
<tr>
<td align="center">\f</td>
<td align="center">换页</td>
</tr>
<tr>
<td align="center">\e</td>
<td align="center">转义</td>
</tr>
</tbody></table>
</li>
<li><p>字符类</p>
<table>
<thead>
<tr>
<th align="center">正则表达式</th>
<th align="center">匹配内容</th>
</tr>
</thead>
<tbody><tr>
<td align="center">.</td>
<td align="center">任意字符</td>
</tr>
<tr>
<td align="center">[abc]</td>
<td align="center">包含a，b和c的任意字符</td>
</tr>
<tr>
<td align="center">[^abc]</td>
<td align="center">除了a，b，c外的任何字符</td>
</tr>
<tr>
<td align="center">[a-zA-Z]</td>
<td align="center">从a到z或从A到Z的任意字符</td>
</tr>
<tr>
<td align="center">[abc[hij]]</td>
<td align="center">任意a，b，c，h，i，j字符</td>
</tr>
<tr>
<td align="center">[a-z&amp;&amp;[hij]]</td>
<td align="center">任意h，i，j字符</td>
</tr>
<tr>
<td align="center">\s</td>
<td align="center">空白符</td>
</tr>
<tr>
<td align="center">\S</td>
<td align="center">非空白符</td>
</tr>
<tr>
<td align="center">\d</td>
<td align="center">数字0-9</td>
</tr>
<tr>
<td align="center">\D</td>
<td align="center">非数字</td>
</tr>
<tr>
<td align="center">\w</td>
<td align="center">词字符（大小写字母，数字）</td>
</tr>
<tr>
<td align="center">\W</td>
<td align="center">非词字符</td>
</tr>
</tbody></table>
</li>
<li><p>逻辑操作符</p>
<table>
<thead>
<tr>
<th align="center">正则表达式</th>
<th align="center">匹配内容</th>
</tr>
</thead>
<tbody><tr>
<td align="center">XY</td>
<td align="center">Y在X后面</td>
</tr>
<tr>
<td align="center">X|Y</td>
<td align="center">X或Y</td>
</tr>
<tr>
<td align="center">（X）</td>
<td align="center">捕获组，使用\i引用第i个捕获组</td>
</tr>
</tbody></table>
</li>
<li><p>边界匹配符</p>
<table>
<thead>
<tr>
<th align="center">正则表达式</th>
<th align="center">匹配内容</th>
</tr>
</thead>
<tbody><tr>
<td align="center">^</td>
<td align="center">一行的起始</td>
</tr>
<tr>
<td align="center">$</td>
<td align="center">一行的结束</td>
</tr>
<tr>
<td align="center">\b</td>
<td align="center">词的边界</td>
</tr>
<tr>
<td align="center">\B</td>
<td align="center">非词的边界</td>
</tr>
<tr>
<td align="center">\G</td>
<td align="center">前一个匹配的结束</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p><strong>量词</strong>：描述一个模式吸收输入文本的方式</p>
<ul>
<li><strong>贪婪型</strong>：为所有可能的模式发现尽可能多的匹配</li>
<li><strong>勉强型</strong>：匹配满足模式所需的最少字符数</li>
<li><strong>占有型</strong>：仅用于<strong>Java</strong>语言，不保存中间状态，防止回溯，常用于防止正则表达式失控</li>
</ul>
<table>
<thead>
<tr>
<th align="center">贪婪型</th>
<th align="center">勉强型</th>
<th align="center">占有型</th>
<th align="center">如何匹配</th>
</tr>
</thead>
<tbody><tr>
<td align="center">X?</td>
<td align="center">X??</td>
<td align="center">X?+</td>
<td align="center">一个或零个X</td>
</tr>
<tr>
<td align="center">X*</td>
<td align="center">X*?</td>
<td align="center">X*+</td>
<td align="center">零个或多个X</td>
</tr>
<tr>
<td align="center">X+</td>
<td align="center">X+?</td>
<td align="center">X++</td>
<td align="center">一个或多个X</td>
</tr>
<tr>
<td align="center">X{n}</td>
<td align="center">X{n}?</td>
<td align="center">X{n}+</td>
<td align="center">恰好n次X</td>
</tr>
<tr>
<td align="center">X{n,}</td>
<td align="center">X{n,}?</td>
<td align="center">X{n,}+</td>
<td align="center">至少n次X</td>
</tr>
<tr>
<td align="center">X{n,m}</td>
<td align="center">X{n,m}?</td>
<td align="center">X{n,m}+</td>
<td align="center">X至少n次，且不超过mci</td>
</tr>
</tbody></table>
</li>
<li><p><strong>Pattern和Matcher</strong>：<strong>Pattern</strong>类表示一个正则表达式，可以通过<strong>Pattern.compile()<strong>方法将一个字符串编译成一个</strong>Pattern</strong>对象，<strong>Matcher</strong>类则是用于匹配字符串的工具类，可以通过<strong>Pattern.matcher()<strong>方法将一个字符串与一个</strong>Pattern</strong>对象进行匹配</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String regex=<span class="string">&quot;x+&quot;</span>;</span><br><span class="line">String input=<span class="string">&quot;xxx&quot;</span>;</span><br><span class="line">Pattern pattern=Pattern.compile(regex);</span><br><span class="line">Matcher matcher=pattern.matcher(input);</span><br><span class="line">System.out.println(matcher);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="13-7扫描输入"><a href="#13-7扫描输入" class="headerlink" title="13.7	扫描输入"></a>13.7	扫描输入</h3><ul>
<li><strong>扫描输入</strong>：使用<strong>Scanner</strong>类，接受任何类型的输入对象，通过正则表达式扫描，获取所需输入</li>
</ul>
<h2 id="第十四章类型信息"><a href="#第十四章类型信息" class="headerlink" title="第十四章	类型信息"></a>第十四章	类型信息</h2><h3 id="14-1为什么需要RTTI"><a href="#14-1为什么需要RTTI" class="headerlink" title="14.1	为什么需要RTTI"></a>14.1	为什么需要RTTI</h3><ul>
<li><strong>RTTI</strong>：在运行时，识别一个对象的类型</li>
</ul>
<h3 id="14-2Class对象"><a href="#14-2Class对象" class="headerlink" title="14.2	Class对象"></a>14.2	Class对象</h3><ul>
<li><p><strong>Class对象</strong>：一种特殊的对象，包含了与类有关的信息，每当编译一个新类，<strong>JVM</strong>使用类加载器生成一个<strong>Class</strong>对象</p>
</li>
<li><p><strong>动态加载</strong></p>
<ul>
<li>当程序创建第一个对类的静态成员的引用时，就会加载这个类</li>
<li><strong>Java</strong>程序在它运行之前并未被完全加载，各部分只有在必需的时候才会被加载</li>
<li>类加载器首先检查<strong>Class</strong>对象是否已经被加载，如果没有，类加载器根据类名查找**.class<strong>文件加载</strong>.Class**对象</li>
</ul>
</li>
<li><p><strong>类字面量</strong>：生成对**.Class**对象的引用</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FancyToy.class</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用类的准备工作</strong></p>
<ul>
<li><strong>加载</strong>，由类加载器执行，查找字节码并创建 <strong>Class</strong>对象</li>
<li><strong>链接</strong>，验证类中的字节码，为静态域分配空间，解析在该类创建的对其他类的引用</li>
<li><strong>初始化</strong>，执行静态初始化器和静态初始化块</li>
</ul>
</li>
</ul>
<h3 id="14-3类型转换前先做检查"><a href="#14-3类型转换前先做检查" class="headerlink" title="14.3	类型转换前先做检查"></a>14.3	类型转换前先做检查</h3><ul>
<li><p><strong>instanceof关键字</strong>：返回一个布尔值，表示对象是不是某个特定类型的实例</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(x <span class="keyword">instanceof</span> Dog) ((Dog)x).bark();</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="14-4注册工厂"><a href="#14-4注册工厂" class="headerlink" title="14.4	注册工厂"></a>14.4	注册工厂</h3><ul>
<li>使用工厂设计模式，将对象的创建工作交由类来完成，工厂被多态地调用而创建恰当的对象</li>
</ul>
<h3 id="14-5instanceof与Class的等价性"><a href="#14-5instanceof与Class的等价性" class="headerlink" title="14.5	instanceof与Class的等价性"></a>14.5	instanceof与Class的等价性</h3><ul>
<li><strong>instance</strong>和<strong>Class</strong>：<strong>instance</strong>判断是否为比较类或者比较类的基类，<strong>Class</strong>仅仅判断是否为比较类</li>
</ul>
<h3 id="14-6反射：运行时的类信息"><a href="#14-6反射：运行时的类信息" class="headerlink" title="14.6	反射：运行时的类信息"></a>14.6	反射：运行时的类信息</h3><ul>
<li><strong>反射机制</strong>：当某个对象的类型在编译时未知，需要在程序运行时获取对象的类型时，传统的<strong>RTTI</strong>无法识别，可以通过在<strong>JVM</strong>创建的<strong>Class</strong>对象和<strong>Java.lang.reflect</strong>类库的反射类获知对象的类型，并进行相关的操作</li>
<li><strong>类方法提取器</strong>：使用<strong>Class</strong>的<strong>getMethods()<strong>和</strong>getConstructors()<strong>方法来得到</strong>Method</strong>对象的数组和<strong>Constructor</strong>对象的数组，分别解析对象的方法和构造器，包括其名字，输入参数以及返回值</li>
</ul>
<h3 id="14-7动态代理"><a href="#14-7动态代理" class="headerlink" title="14.7	动态代理"></a>14.7	动态代理</h3><ul>
<li><strong>代理</strong>：基本的设计模式之一，为了提供额外的或不同的操作，而插入用来替代实际对象的对象，通常涉及与实际对象的通信，代理起到中间人的角色</li>
</ul>
<h3 id="14-8空对象"><a href="#14-8空对象" class="headerlink" title="14.8	空对象"></a>14.8	空对象</h3><ul>
<li>使用空对象<strong>null</strong>表示缺少对象</li>
</ul>
<h3 id="14-9接口与类型信息"><a href="#14-9接口与类型信息" class="headerlink" title="14.9	接口与类型信息"></a>14.9	接口与类型信息</h3><ul>
<li><strong>instance</strong>关键字允许程序员隔离构件，从而减低代码的耦合度，可以被应用到接口中</li>
</ul>
<h2 id="第十五章泛型"><a href="#第十五章泛型" class="headerlink" title="第十五章	泛型"></a>第十五章	泛型</h2><h3 id="15-1与C-的比较"><a href="#15-1与C-的比较" class="headerlink" title="15.1	与C++的比较"></a>15.1	与C++的比较</h3><ul>
<li><strong>泛型</strong>：实现了参数化的概念，使得代码可以应用于更多的类型，类和方法能够具备更广泛的表达能力</li>
</ul>
<h3 id="15-2简单泛型"><a href="#15-2简单泛型" class="headerlink" title="15.2	简单泛型"></a>15.2	简单泛型</h3><ul>
<li><p>创造容器类，指定容器要持有特定类型对象，并且由编译器来保证类型的安全</p>
</li>
<li><p><strong>元组</strong>：将一组对象打包存储于其中的一个单一对象，可以具有任意长度，存储任意类型</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Tuple&lt;String, Integer&gt; tuple = <span class="keyword">new</span> <span class="title class_">Tuple</span>&lt;&gt;(<span class="string">&quot;Hello&quot;</span>, <span class="number">123</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="15-3泛型接口"><a href="#15-3泛型接口" class="headerlink" title="15.3	泛型接口"></a>15.3	泛型接口</h3><ul>
<li>泛型可以应用于接口，例如工厂方法设计模式中专门负责创建对象的生成器</li>
</ul>
<h3 id="15-4泛型方法"><a href="#15-4泛型方法" class="headerlink" title="15.4	泛型方法"></a>15.4	泛型方法</h3><ul>
<li><p><strong>泛型方法</strong>：一种类型安全的方法，它可以在声明方法时使用一个或多个参数来占位符，这些占位符称为<strong>类型形参</strong>，可代表任何<strong>Java</strong>数据类型，在调用方法时需要指定实际类型的参数</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">f</span><span class="params">(T x)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>杠杆</p>
</li>
</ul>
<h3 id="15-5匿名内部类"><a href="#15-5匿名内部类" class="headerlink" title="15.5	匿名内部类"></a>15.5	匿名内部类</h3><h3 id="15-6构建复杂模型"><a href="#15-6构建复杂模型" class="headerlink" title="15.6	构建复杂模型"></a>15.6	构建复杂模型</h3><h3 id="15-7擦出的神秘之处"><a href="#15-7擦出的神秘之处" class="headerlink" title="15.7	擦出的神秘之处"></a>15.7	擦出的神秘之处</h3><h3 id="15-8擦除的补偿"><a href="#15-8擦除的补偿" class="headerlink" title="15.8	擦除的补偿"></a>15.8	擦除的补偿</h3><h3 id="15-9边界"><a href="#15-9边界" class="headerlink" title="15.9	边界"></a>15.9	边界</h3><h3 id="15-10通配符"><a href="#15-10通配符" class="headerlink" title="15.10	通配符"></a>15.10	通配符</h3><h3 id="15-11问题"><a href="#15-11问题" class="headerlink" title="15.11	问题"></a>15.11	问题</h3><h3 id="15-12自限定的类型"><a href="#15-12自限定的类型" class="headerlink" title="15.12	自限定的类型"></a>15.12	自限定的类型</h3><h3 id="15-13动态类型安全"><a href="#15-13动态类型安全" class="headerlink" title="15.13	动态类型安全"></a>15.13	动态类型安全</h3><h3 id="15-14异常"><a href="#15-14异常" class="headerlink" title="15.14	异常"></a>15.14	异常</h3><h3 id="15-15混型"><a href="#15-15混型" class="headerlink" title="15.15	混型"></a>15.15	混型</h3><h3 id="15-16潜在类型机制"><a href="#15-16潜在类型机制" class="headerlink" title="15.16	潜在类型机制"></a>15.16	潜在类型机制</h3><h3 id="15-17对缺乏潜在类型机制的补偿"><a href="#15-17对缺乏潜在类型机制的补偿" class="headerlink" title="15.17	对缺乏潜在类型机制的补偿"></a>15.17	对缺乏潜在类型机制的补偿</h3><h3 id="15-18将函数对象用作策略"><a href="#15-18将函数对象用作策略" class="headerlink" title="15.18	将函数对象用作策略"></a>15.18	将函数对象用作策略</h3><h3 id="15-19总结：转型真的如此之糟吗？"><a href="#15-19总结：转型真的如此之糟吗？" class="headerlink" title="15.19	总结：转型真的如此之糟吗？"></a>15.19	总结：转型真的如此之糟吗？</h3><h2 id="第十六章数组"><a href="#第十六章数组" class="headerlink" title="第十六章	数组"></a>第十六章	数组</h2><h3 id="16-1数组为什么特殊"><a href="#16-1数组为什么特殊" class="headerlink" title="16.1	数组为什么特殊"></a>16.1	数组为什么特殊</h3><ul>
<li><strong>数组的特殊</strong><ul>
<li>效率最高的存储和随机访问对象引用序列的方式，简单的线性结构使得元素访问十分迅速</li>
<li>在不使用泛型的情况下，数组只能持有某特定类型的对象，错误的类型无法通过编译器检查</li>
<li>数组可以持有基本类型</li>
</ul>
</li>
</ul>
<h3 id="16-2数组是第一级对象"><a href="#16-2数组是第一级对象" class="headerlink" title="16.2	数组是第一级对象"></a>16.2	数组是第一级对象</h3><ul>
<li><p>数组标识符只有一个引用，指向在堆中创建的一个真实的对象，用于保存指向其他对象的引用</p>
</li>
<li><p><strong>初始化数组</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] a;</span><br><span class="line"><span class="type">int</span>[] b = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span>[] c = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="16-3返回一个数组"><a href="#16-3返回一个数组" class="headerlink" title="16.3	返回一个数组"></a>16.3	返回一个数组</h3><ul>
<li>在<strong>c&#x2F;c++<strong>中，只能返回指向数组的指针，而</strong>Java</strong>可以直接返回数组本身，类似于普通的对象</li>
</ul>
<h3 id="16-4多维数组"><a href="#16-4多维数组" class="headerlink" title="16.4	多维数组"></a>16.4	多维数组</h3><ul>
<li><p><strong>创建多维数组</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] a = &#123;</span><br><span class="line">	&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">	&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span>[][] b = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][];</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>粗糙数组</strong>：数组中构成矩阵的每个向量都可以具有任意的长度</p>
</li>
<li><p>**Arrays.deepTostring()**：将多维数组转化为字符串</p>
</li>
</ul>
<h3 id="16-5数组与泛型"><a href="#16-5数组与泛型" class="headerlink" title="16.5	数组与泛型"></a>16.5	数组与泛型</h3><ul>
<li>数组与泛型不能很好地结合，但是可以参数化数组本身的类型</li>
</ul>
<h3 id="16-6创建测试数据"><a href="#16-6创建测试数据" class="headerlink" title="16.6	创建测试数据"></a>16.6	创建测试数据</h3><ul>
<li>**Arrays.fill()**：复制同一个值填充整个数组</li>
<li><strong>数据生成器</strong>：使用<strong>Generator</strong>类，以更灵活的方式创建数组</li>
</ul>
<h3 id="16-7Arrays实用功能"><a href="#16-7Arrays实用功能" class="headerlink" title="16.7	Arrays实用功能"></a>16.7	Arrays实用功能</h3><ul>
<li><strong>复制数组</strong>：相对于<strong>for</strong>语句，**System.arraycopy()**可以更快地进行浅复制</li>
<li><strong>数组的比较</strong>：使用重载后的**equals()**方法比较整个数组</li>
<li><strong>数组元素的比较</strong>：通过实现了<strong>Comparable</strong>接口的<strong>compareTo</strong>方法比较元素，或者编写自己的<strong>Comparator</strong>方法进行比较</li>
<li><strong>数组排序</strong>：使用内置的排序方法对基本类型的数组进行排序，或者对实现了<strong>Comparable</strong>接口的对象进行排序</li>
<li><strong>在已排序的数组中查找</strong>：使用**Arrays.binarySearch()**方法进行快速的二分查找</li>
</ul>
<h2 id="第十七章容器深入研究"><a href="#第十七章容器深入研究" class="headerlink" title="第十七章	容器深入研究"></a>第十七章	容器深入研究</h2><h3 id="17-1完整的容器分类法"><a href="#17-1完整的容器分类法" class="headerlink" title="17.1	完整的容器分类法"></a>17.1	完整的容器分类法</h3><h3 id="17-2填充容器"><a href="#17-2填充容器" class="headerlink" title="17.2	填充容器"></a>17.2	填充容器</h3><ul>
<li>**fill()**：复制同一个对象引用来填充整个容器</li>
<li><strong>Generator类</strong>：适配器设计模式，使用该类来填充容器</li>
</ul>
<h3 id="17-3Collection的功能方法"><a href="#17-3Collection的功能方法" class="headerlink" title="17.3	Collection的功能方法"></a>17.3	Collection的功能方法</h3><table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>boolean add(T)</strong></td>
<td align="center">将参数添加进容器</td>
</tr>
<tr>
<td align="center"><strong>boolean addAll(Collections&lt;? extends T&gt;)</strong></td>
<td align="center">添加参数中的所有元素</td>
</tr>
<tr>
<td align="center"><strong>void clear()</strong></td>
<td align="center">移除容器中的所有元素</td>
</tr>
<tr>
<td align="center"><strong>boolean contains(T)</strong></td>
<td align="center">判断容器是否持有特定类型</td>
</tr>
<tr>
<td align="center"><strong>boolean containsAll(Collection&lt;?&gt;)</strong></td>
<td align="center">判断容器是否持有此类型的所有元素</td>
</tr>
<tr>
<td align="center"><strong>boolean isEmpty()</strong></td>
<td align="center">判断容器是否为空</td>
</tr>
<tr>
<td align="center"><strong>Iterator&lt;T&gt; iterator()</strong></td>
<td align="center">返回容器的迭代器</td>
</tr>
<tr>
<td align="center"><strong>boolean remove(Object)</strong></td>
<td align="center">移除一个元素</td>
</tr>
<tr>
<td align="center"><strong>boolean removeAll(Collection&lt;?&gt;)</strong></td>
<td align="center">移除参数中的所有元素</td>
</tr>
<tr>
<td align="center"><strong>boolean containsAll(Collection&lt;?&gt;)</strong></td>
<td align="center">只保存参数中的元素</td>
</tr>
<tr>
<td align="center"><strong>int size()</strong></td>
<td align="center">容器中元素数目</td>
</tr>
<tr>
<td align="center"><strong>Object[] toArray()</strong></td>
<td align="center">返回容器元素转化的数组</td>
</tr>
<tr>
<td align="center"><strong>&lt;T&gt; T[] toArray(T[] a)</strong></td>
<td align="center">返回容器元素转化的指定类型的数组</td>
</tr>
</tbody></table>
<h3 id="17-4可选操作"><a href="#17-4可选操作" class="headerlink" title="17.4	可选操作"></a>17.4	可选操作</h3><ul>
<li><strong>可选操作</strong>：在<strong>Collection</strong>接口中执行各种不同的添加和移除的方法是可选的，实现类并不需要为这些方法提供功能定义</li>
<li><strong>未获支持的操作</strong>：<strong>Java</strong>程序中使用了一些不被支持或不被推荐的操作或语法</li>
</ul>
<h3 id="17-5List的功能方法"><a href="#17-5List的功能方法" class="headerlink" title="17.5	List的功能方法"></a>17.5	List的功能方法</h3><ul>
<li><strong>List</strong>类基本方法<ul>
<li>**add()**：添加元素</li>
<li>**get()**：获取元素</li>
<li>**iterator()**：返回迭代器</li>
</ul>
</li>
</ul>
<h3 id="17-6Set和存储顺序"><a href="#17-6Set和存储顺序" class="headerlink" title="17.6	Set和存储顺序"></a>17.6	Set和存储顺序</h3><ul>
<li><p><strong>Set类的分类</strong></p>
<table>
<thead>
<tr>
<th align="center">类名</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>Set</strong></td>
<td align="center">元素具有唯一性，不保证维护元素的次序</td>
</tr>
<tr>
<td align="center"><strong>HashSet</strong></td>
<td align="center">适用于快速查找，存入元素必须定义**hashCode()**方法</td>
</tr>
<tr>
<td align="center"><strong>TreeSet</strong></td>
<td align="center">保持元素的次序，底层为树结构，存入元素必须实现<strong>Comparable</strong>接口</td>
</tr>
<tr>
<td align="center"><strong>LinkedHashSet</strong></td>
<td align="center">具有<strong>HashSet</strong>的查找速度，且底层使用链表维护元素的次序，存入元素必须定义**hashCode()**方法</td>
</tr>
</tbody></table>
</li>
<li><p><strong>SortedSet</strong>：元素保证处于排序状态，按对象的比较函数对元素排序</p>
<ul>
<li><strong>Comparator comparator()<strong>：返回当前</strong>Set</strong>使用的<strong>Comparator</strong></li>
<li>**Object first()**：返回容器中第一个元素</li>
<li>**Object last()**：返回容器中最末的元素</li>
<li><strong>SortedSet subSet(fromElement, toElement)<strong>：生成此</strong>Set</strong>的子集，从<strong>fromElement</strong>到<strong>toElement</strong></li>
<li><strong>SortedSet headSet(toElement)<strong>：生成此</strong>Set</strong>的子集，从开始到<strong>toElement</strong></li>
<li><strong>SortedSet tailSet(fromElement)<strong>：生成此</strong>Set</strong>的子集，从<strong>fromElement</strong>到末尾</li>
</ul>
</li>
</ul>
<h3 id="17-7队列"><a href="#17-7队列" class="headerlink" title="17.7	队列"></a>17.7	队列</h3><ul>
<li><strong>优先级队列PriorityQueue</strong>：通过实现<strong>Comparable</strong>对元素进行排序</li>
<li><strong>双向队列</strong>：创建<strong>Deque</strong>类，基于<strong>LinkedList</strong>添加支持双向队列的相关方法</li>
</ul>
<h3 id="17-8理解Map"><a href="#17-8理解Map" class="headerlink" title="17.8	理解Map"></a>17.8	理解Map</h3><ul>
<li><p>映射表的思想是维护它的键-值对关联，基本方法是**put()<strong>和</strong>get()**，用于添加和取出键-值</p>
</li>
<li><p><strong>性能</strong></p>
<table>
<thead>
<tr>
<th align="center">类名</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>HashMap</strong></td>
<td align="center">基于散列表的实现，插入和查询的开销是固定的</td>
</tr>
<tr>
<td align="center"><strong>LinkedHashMap</strong></td>
<td align="center">类似于<strong>HashMap</strong>，使用链表维护内部次序，迭代遍历的速度更快，使用插入次序或<strong>LRU</strong>算法取得键值对</td>
</tr>
<tr>
<td align="center"><strong>TreeMap</strong></td>
<td align="center">基于红黑树的实现，查询是得到的结果会被经过排序</td>
</tr>
<tr>
<td align="center"><strong>WeakHashMap</strong></td>
<td align="center">弱键映射，允许释放映射所指向的对象</td>
</tr>
<tr>
<td align="center"><strong>ConcurrentHashMap</strong></td>
<td align="center">线程安全，不涉及同步加锁</td>
</tr>
<tr>
<td align="center"><strong>IdentityHashMap</strong></td>
<td align="center">使用**&#x3D;&#x3D;<strong>代替</strong>equals()**对键进行比较的散列映射</td>
</tr>
</tbody></table>
</li>
<li><p><strong>SortedMap</strong>：实现<strong>Comparable</strong>，确保键处于排序状态</p>
</li>
<li><p><strong>LinkedHashMap</strong>：散列化所有元素，提高速度，在遍历键值对时，以元素插入顺序返回</p>
</li>
</ul>
<h3 id="17-9散列与散列码"><a href="#17-9散列与散列码" class="headerlink" title="17.9	散列与散列码"></a>17.9	散列与散列码</h3><ul>
<li><p>**hashCode()**：返回对象的散列码，用于确定对象的存储位置，它根据对象的属性计算出一个整数值，尽可能地唯一标识对象</p>
</li>
<li><p><strong>为速度而散列</strong>：线性查询是最慢的查询方式，散列通过键对象生成散列码，使用散列码查询数组，使得查询得以快速进行</p>
</li>
<li><p><strong>计算散列码</strong></p>
<table>
<thead>
<tr>
<th align="center">域类型</th>
<th align="center">计算</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>boolean</strong></td>
<td align="center"><strong>c &#x3D; (f ? 0 : 1)</strong></td>
</tr>
<tr>
<td align="center"><strong>byte</strong>，<strong>char</strong>，<strong>short</strong>或<strong>int</strong></td>
<td align="center"><strong>c &#x3D; (int) f</strong></td>
</tr>
<tr>
<td align="center"><strong>long</strong></td>
<td align="center"><strong>c &#x3D; (int)(f ^ (f &gt;&gt;&gt; 32))</strong></td>
</tr>
<tr>
<td align="center"><strong>float</strong></td>
<td align="center"><strong>c &#x3D; Float.floatToIntBits(f)</strong></td>
</tr>
<tr>
<td align="center"><strong>double</strong></td>
<td align="center"><strong>long l &#x3D; Double.doubleToLongBits(f) ;</strong><br><strong>c &#x3D; (int)(l ^ (l &gt;&gt;&gt; 32))</strong></td>
</tr>
<tr>
<td align="center"><strong>Object</strong></td>
<td align="center"><strong>c &#x3D; f.hashCode()</strong></td>
</tr>
<tr>
<td align="center"><strong>数组</strong></td>
<td align="center"><strong>对每个元素应用上述规则</strong></td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="17-10选择接口的不同实现"><a href="#17-10选择接口的不同实现" class="headerlink" title="17.10	选择接口的不同实现"></a>17.10	选择接口的不同实现</h3><ul>
<li><strong>性能测试框架</strong>：编写测试框架，使用基类嵌套 多个测试匿名内部类的方式，对各个子程序进行性能测试</li>
<li><strong>微基准测试的危险</strong>：不能做太多的假设，并且要把测试窄化，同时考虑测试时间和测试环境对结果的影响</li>
</ul>
<h3 id="17-11实用方法"><a href="#17-11实用方法" class="headerlink" title="17.11	实用方法"></a>17.11	实用方法</h3><ul>
<li><strong>List的排序和查询</strong>：与数组类似，可以使用<strong>Collection</strong>的**sort()<strong>和</strong>binarysearch()<strong>分别进行排序和查询，此外，还可以使用</strong>shuffle()**打乱顺序</li>
<li><strong>设置Collection或Map为不可修改</strong>：设置只读类，参数为原本的容器，但返回值为容器的只读版本</li>
<li><strong>Collection或Map的同步控制</strong>：使用<strong>synchronize</strong>关键字自动同步整个容器，<strong>Java</strong>容器类使用快速报错机制，防止多线程产生的内容不一致问题</li>
</ul>
<h3 id="17-12持有引用"><a href="#17-12持有引用" class="headerlink" title="17.12	持有引用"></a>17.12	持有引用</h3><ul>
<li><strong>Reference类</strong>：作为与普通引用之间的代理，持有对某个对象的引用，避免被垃圾回收器回收后无法访问到该对象</li>
<li><strong>WeakHashMap类</strong>：用于保存<strong>WeakReference</strong>，使得规范映射更易于使用，每个值只保存一份实例以节省存储空间</li>
</ul>
<h3 id="17-13Java-1-0-1-1的容器"><a href="#17-13Java-1-0-1-1的容器" class="headerlink" title="17.13	Java 1.0&#x2F;1.1的容器"></a>17.13	Java 1.0&#x2F;1.1的容器</h3><ul>
<li><strong>Vector类</strong>：类似于<strong>ArrayList</strong>，但是缺点较多，建议使用<strong>ArrayList</strong>替代</li>
<li><strong>Enumeration接口</strong>：类似于<strong>Iterator</strong>接口，只有两个方法</li>
<li><strong>Hashtable类</strong>：与<strong>HashMap</strong>很相似，建议使用<strong>HashMap</strong>替代</li>
<li><strong>Stack类</strong>：继承<strong>Vector</strong>而实现栈的功能，建议使用或继承<strong>ArrayList</strong>替代</li>
<li><strong>BitSet类</strong>：可以高效率地存储大量开&#x2F;关信息，它的空间性能优秀，但是时间性能稍逊于数组，可以使用<strong>EnumSet</strong>替代</li>
</ul>
<h2 id="第十八章Java-I-O系统"><a href="#第十八章Java-I-O系统" class="headerlink" title="第十八章	Java I&#x2F;O系统"></a>第十八章	Java I&#x2F;O系统</h2><h3 id="18-1File类"><a href="#18-1File类" class="headerlink" title="18.1	File类"></a>18.1	File类</h3><ul>
<li><strong>目录列表器</strong>：调用<strong>list()<strong>方法获得此</strong>File</strong>对象包含的全部列表，或者编写目录过滤器生成一个受限列表</li>
<li><strong>目录的检查及创建</strong>：使用**exists()<strong>方法判断指定目录是否存在，使用</strong>mkdirs()**方法创建目录</li>
</ul>
<h3 id="18-2输入和输出"><a href="#18-2输入和输出" class="headerlink" title="18.2	输入和输出"></a>18.2	输入和输出</h3><ul>
<li><p><strong>流</strong>：代表任何有能力产出数据的数据源对象或者是有能力接收数据的接收端对象，它屏蔽了实际的<strong>I&#x2F;O</strong>设备中处理数据的细节</p>
</li>
<li><p><strong>InputStream类型</strong>：表示那些从不同数据源产生输入的类，包括字节数组，<strong>String</strong>对象，文件，管道和其他数据源</p>
<table>
<thead>
<tr>
<th align="center">类</th>
<th align="center">功能</th>
<th align="center">构造器参数以及用途</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>ByteArrayInputStream</strong></td>
<td align="center">允许将内存的缓冲区当做<strong>InputStream</strong>使用</td>
<td align="center">缓冲区，字节将从中取出<br>作为一种数据源，将其与<strong>FilterInputStream</strong>对象相连以提供有用的接口</td>
</tr>
<tr>
<td align="center"><strong>StringBufferInputStream</strong></td>
<td align="center">将<strong>String</strong>转换为<strong>InputStream</strong></td>
<td align="center">字符串，底层实现使用<strong>StringBuffer</strong><br/>作为一种数据源，将其与<strong>FilterInputStream</strong>对象相连以提供有用的接口</td>
</tr>
<tr>
<td align="center"><strong>FileInputStream</strong></td>
<td align="center">从文件中读取信息</td>
<td align="center">字符串，表示文件名，文件或<strong>FileDescriptor</strong>对象<br/>作为一种数据源，将其与<strong>FilterInputStream</strong>对象相连以提供有用的接口</td>
</tr>
<tr>
<td align="center"><strong>PipedInputStream</strong></td>
<td align="center">产生用于写入<strong>PipedInputStream</strong>的数据，实现管道化概念</td>
<td align="center"><strong>PipedOutputStream</strong><br/>作为多线程中的数据源，将其与<strong>FilterInputStream</strong>对象相连以提供有用的接口</td>
</tr>
<tr>
<td align="center"><strong>SequenceInputStream</strong></td>
<td align="center">将两个或多个<strong>InputStream</strong>对象转换为单个<strong>InputStream</strong></td>
<td align="center">两个<strong>InputStream</strong>对象或一个容纳<strong>InputStream</strong>对象的容器<br/>作为一种数据源，将其与<strong>FilterInputStream</strong>对象相连以提供有用的接口</td>
</tr>
<tr>
<td align="center"><strong>FilterInputStream</strong></td>
<td align="center">抽象类，作为装饰器的接口</td>
<td align="center">&#x2F;</td>
</tr>
</tbody></table>
</li>
<li><p><strong>OutputStream类型</strong></p>
<table>
<thead>
<tr>
<th align="center">类</th>
<th align="center">功能</th>
<th align="center">构造器参数以及用途</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>ByteArrayOutputStream</strong></td>
<td align="center">在内存中创建缓冲区，存放要送入流的数据</td>
<td align="center">缓冲区初始尺寸<br/>指定数据的目的地，将其与<strong>FilterOutputStream</strong>对象相连以提供有用的接口</td>
</tr>
<tr>
<td align="center"><strong>FileOutputStream</strong></td>
<td align="center">将信息写入文件</td>
<td align="center">字符串，表示文件名，文件或<strong>FileDescriptor</strong>对象<br/>指定数据的目的地，将其与<strong>FilterOutputStream</strong>对象相连以提供有用的接口</td>
</tr>
<tr>
<td align="center"><strong>PipedOutputStream</strong></td>
<td align="center">作为相关<strong>PipedInputStream</strong>的输出，实现管道化概念</td>
<td align="center"><strong>PipedInputStream</strong><br/>指定用于多线程的数据目的地，将其与<strong>FilterOutputStream</strong>对象相连以提供有用的接口</td>
</tr>
<tr>
<td align="center"><strong>FilterOutputStream</strong></td>
<td align="center">抽象类，作为装饰器的接口</td>
<td align="center">&#x2F;</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="18-3添加类型和有用的接口"><a href="#18-3添加类型和有用的接口" class="headerlink" title="18.3	添加类型和有用的接口"></a>18.3	添加类型和有用的接口</h3><ul>
<li><p><strong>通过FilterInputStream从InputStream中读取数据</strong></p>
<table>
<thead>
<tr>
<th align="center">类</th>
<th align="center">功能</th>
<th align="center">构造器参数以及用途</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>DataInputStream</strong></td>
<td align="center">按照可移植的方式从数据流中读取基本数据类型</td>
<td align="center"><strong>InputStream</strong><br>包含基本数据类型的全部接口</td>
</tr>
<tr>
<td align="center"><strong>BufferedInputStream</strong></td>
<td align="center">使用缓冲区，防止每次读取都进行写操作</td>
<td align="center"><strong>InputStream</strong><br/>与接口对象搭配，向进程中添加缓冲区</td>
</tr>
<tr>
<td align="center"><strong>LineNumberInputStream</strong></td>
<td align="center">跟踪输入流中的行号</td>
<td align="center"><strong>InputStream</strong><br/>与接口对象搭配使用，添加了行号</td>
</tr>
<tr>
<td align="center"><strong>PushbackInputStream</strong></td>
<td align="center">能弹出一个字节的缓冲区，可以将独到的最后一个字符回退</td>
<td align="center"><strong>InputStream</strong><br/>作为编译器的扫描器</td>
</tr>
</tbody></table>
</li>
<li><p><strong>通过FilterOutputStream向OutputStream写入</strong></p>
<table>
<thead>
<tr>
<th align="center">类</th>
<th align="center">功能</th>
<th align="center">构造器参数以及用途</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>DataOutputStream</strong></td>
<td align="center">按照可移植的方式写入基本数据类型</td>
<td align="center"><strong>OutputStream</strong><br>包含基本数据类型的全部接口</td>
</tr>
<tr>
<td align="center"><strong>PrintStream</strong></td>
<td align="center">用于产生格式化输出</td>
<td align="center"><strong>OutputStream</strong><br/>对<strong>OutputStream</strong>对象进行最后的封装</td>
</tr>
<tr>
<td align="center"><strong>BufferedOutputStream</strong></td>
<td align="center">代表缓冲区，避免每次发送数据进行实际的写操作</td>
<td align="center"><strong>OutputStream</strong><br/>与接口对象搭配，向接口中添加缓冲区</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="18-4Reader和Writer"><a href="#18-4Reader和Writer" class="headerlink" title="18.4	Reader和Writer"></a>18.4	Reader和Writer</h3><ul>
<li>设计<strong>Reader</strong>和<strong>Writer</strong>继承层次结构主要是为了国际化，用于支持<strong>Unicode</strong>的<strong>I&#x2F;O</strong>操作</li>
</ul>
<h3 id="18-5自我独立的类：RandomAccessFile"><a href="#18-5自我独立的类：RandomAccessFile" class="headerlink" title="18.5	自我独立的类：RandomAccessFile"></a>18.5	自我独立的类：RandomAccessFile</h3><ul>
<li><strong>RandomAccessFile类</strong>：适用于由大小已知的记录组成的文件，它不是继承层次结构的一部分</li>
</ul>
<h3 id="18-6I-O流的典型使用方式"><a href="#18-6I-O流的典型使用方式" class="headerlink" title="18.6	I&#x2F;O流的典型使用方式"></a>18.6	I&#x2F;O流的典型使用方式</h3><ul>
<li><strong>缓冲输入文件</strong>：使用以<strong>String</strong>或<strong>File</strong>对象作为文件名的<strong>FileInputStream</strong>，将产生的引用传入<strong>BufferedReader</strong>构造器</li>
<li><strong>从内存输入</strong>：从<strong>BufferedInputFile.read()<strong>读入的</strong>String</strong>结果被用来创建<strong>StringReader</strong></li>
<li><strong>格式化的内存输入</strong>：为<strong>ByteArrayInputStream</strong>提供字节数组，产生的对象传递给<strong>DataInputStream</strong></li>
<li><strong>基本的文件输出</strong>：创建一个与指定文件连接的<strong>FileWriter</strong>，使用<strong>BufferedWriter</strong>包装以缓冲输出</li>
<li><strong>存储和恢复数据</strong>：使用<strong>DataOutputStream</strong>写入数据，用<strong>DataInputStream</strong>恢复数据</li>
<li><strong>读写随机访问文件</strong>：使用<strong>RandomAccessFile</strong>类，利用**seek()**方法在文件中移动并修改值</li>
<li><strong>管道流</strong>：在多线程中，用于任务之间的通信</li>
</ul>
<h3 id="18-7文件读写的实用工具"><a href="#18-7文件读写的实用工具" class="headerlink" title="18.7	文件读写的实用工具"></a>18.7	文件读写的实用工具</h3><ul>
<li>自定义文件读写类，以消除与这些任务相关联的重复代码</li>
</ul>
<h3 id="18-8标准I-O"><a href="#18-8标准I-O" class="headerlink" title="18.8	标准I&#x2F;O"></a>18.8	标准I&#x2F;O</h3><ul>
<li><strong>标准I&#x2F;O</strong>：程序的所有输入都可以来自<strong>标准输入</strong>，所有的输出可以发送到<strong>标准输出</strong>，以及所有的错误信息都可以发送的<strong>标准错误</strong>，标准I&#x2F;O参考了<strong>Unix</strong>操作系统的概念，使得我们可以很容易地把程序串联起来</li>
<li><strong>从标准输入中读取</strong>：使用<strong>System.in</strong>的<strong>readLine()<strong>方法读取一行输入，它是一个未经包装的</strong>PrintStream</strong>对象</li>
<li><strong>标准I&#x2F;O重定向</strong>：<strong>Java</strong>的<strong>System</strong>类提供了**setIn()<strong>，</strong>setOut()<strong>，</strong>setErr()**方法分别对输入，输出和错误流进行重定向</li>
</ul>
<h3 id="18-9进程控制"><a href="#18-9进程控制" class="headerlink" title="18.9	进程控制"></a>18.9	进程控制</h3><ul>
<li>向<strong>OSExcute.command()<strong>传递一个</strong>command</strong>字符串，与控制台上运行该程序的命令相同</li>
</ul>
<h3 id="18-10新I-O"><a href="#18-10新I-O" class="headerlink" title="18.10	新I&#x2F;O"></a>18.10	新I&#x2F;O</h3><ul>
<li><strong>新I&#x2F;O</strong>：<strong>java.nio.*<strong>包引入的新的</strong>JavaI&#x2F;O</strong>类库，使用通道和缓冲器方式，更为接近操作系统处理<strong>I&#x2F;O</strong>的方式</li>
<li><strong>转换数据</strong>：每次输入读取一个数据，然后将之转换为特定类型，对缓冲区的字节进行编码和解码</li>
<li><strong>获取基本类型</strong>：利用<strong>ByteBuffer</strong>类的**asCharBuffer()<strong>和</strong>asShortBuffer()<strong>获得缓冲器上的视图，然后使用视图的</strong>put()**方法插入基本类型数据</li>
<li><strong>视图缓冲器</strong>：通过某个特定的基本数据类型的视图查看其底层的<strong>ByteBuffer</strong></li>
<li><strong>用缓冲器操纵数据</strong>：使用<strong>ByteBuffer</strong>包装字节数组，在<strong>FileOutputStream</strong>中打开一个通道，将数据写入到通道中</li>
<li><strong>内存映射文件</strong>：允许我们创建和修改那些因为太大而不能放入内存的文件</li>
<li><strong>文件加锁</strong>：通过调用<strong>lock()<strong>获得</strong>FileLock</strong>对象</li>
</ul>
<h3 id="18-11压缩"><a href="#18-11压缩" class="headerlink" title="18.11	压缩"></a>18.11	压缩</h3><ul>
<li><p><strong>压缩类</strong></p>
<table>
<thead>
<tr>
<th align="center">压缩类</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>CheckedInputStream</strong></td>
<td align="center">为输入流产生校验和</td>
</tr>
<tr>
<td align="center"><strong>CheckedOutputStream</strong></td>
<td align="center">为输出流产生校验和</td>
</tr>
<tr>
<td align="center"><strong>DeflaterOutputStream</strong></td>
<td align="center">压缩类的基类</td>
</tr>
<tr>
<td align="center"><strong>ZipOutputStream</strong></td>
<td align="center">将数据压缩成<strong>Zip</strong>文件格式</td>
</tr>
<tr>
<td align="center"><strong>GZIPOutputStream</strong></td>
<td align="center">将数据压缩成<strong>GZIP</strong>文件格式</td>
</tr>
<tr>
<td align="center"><strong>InflaterInputStream</strong></td>
<td align="center">解压缩类的基类</td>
</tr>
<tr>
<td align="center"><strong>ZipInputStream</strong></td>
<td align="center">解压缩<strong>Zip</strong>文件格式的数据</td>
</tr>
<tr>
<td align="center"><strong>GZIPInputStream</strong></td>
<td align="center">解压缩<strong>GZIP</strong>文件格式的数据</td>
</tr>
</tbody></table>
</li>
<li><p><strong>用GZIP进行简单压缩</strong>：将输出流封装成<strong>GZIPOutputStream</strong>，再将输入流封装成<strong>GZIPINputStream</strong>，可以对单个数据流进行压缩</p>
</li>
<li><p><strong>用Zip进行多文件保存</strong>：进文件传递给<strong>ZipEntry</strong>对象，使用该对象的接口对压缩文件进行读写处理</p>
</li>
<li><p><strong>Java档案文件</strong>：<strong>JAR</strong>类似于<strong>Zip</strong>，可以合并所有需要的文件，同时含有一张描述这些文件的文件清单</p>
</li>
</ul>
<h3 id="18-12对象序列化"><a href="#18-12对象序列化" class="headerlink" title="18.12	对象序列化"></a>18.12	对象序列化</h3><ul>
<li><strong>对象序列化</strong>：将实现了<strong>Serializable</strong>接口的对象转换成一个字节序列，并能够在以后将这个字节序列恢复为原来的对象</li>
<li><strong>寻找类</strong>：必须保证<strong>Java</strong>虚拟机能够找到相关的**.class**文件</li>
<li><strong>序列化的控制</strong>：实现<strong>Externalizable</strong>而不是<strong>Serializable</strong>接口，来对序列化的过程进行控制</li>
<li><strong>transient关键字</strong>：对指定字段关闭序列化</li>
</ul>
<h3 id="18-13XML"><a href="#18-13XML" class="headerlink" title="18.13	XML"></a>18.13	XML</h3><ul>
<li><strong>XML</strong>：一种描述数据的标记语言，采用类似<strong>HTML</strong>标签的方式来表示数据的结构和属性，并支持自定义的标签和属性</li>
</ul>
<h3 id="18-14Preferences"><a href="#18-14Preferences" class="headerlink" title="18.14	Preferences"></a>18.14	Preferences</h3><ul>
<li><strong>Preferences</strong>：键-值集合，存储在一个节点层次结构</li>
</ul>
<h2 id="第十九章枚举类型"><a href="#第十九章枚举类型" class="headerlink" title="第十九章	枚举类型"></a>第十九章	枚举类型</h2><h3 id="19-1基本enum类型"><a href="#19-1基本enum类型" class="headerlink" title="19.1	基本enum类型"></a>19.1	基本enum类型</h3><ul>
<li><strong>enum关键字</strong>：将一组具名的值的有限集合创建为一种新的类型，而这些具名的值可以作为常规的程序组件使用</li>
<li><strong>values()方法</strong>：返回枚举实例按声明顺序排列的数组，可以用于遍历枚举类型</li>
<li>创建枚举类型是，编译器会自动生成一个相关的类，继承自<strong>java.lang.Enum</strong></li>
<li><strong>将静态导入用于enum</strong>：使用<strong>import static</strong>可以将<strong>enum</strong>实例带入当前命名空间</li>
</ul>
<h3 id="19-2向enum中添加新方法"><a href="#19-2向enum中添加新方法" class="headerlink" title="19.2	向enum中添加新方法"></a>19.2	向enum中添加新方法</h3><ul>
<li>可以将枚举看成一个不能继承的普通类，可以向枚举中添加新的方法，需要在枚举实例序列中添加分号</li>
<li><strong>覆盖enum的方法</strong>：覆盖**toString()**方法，为枚举实例生成不同的字符串描述信息</li>
</ul>
<h3 id="19-3switch语句中的enum"><a href="#19-3switch语句中的enum" class="headerlink" title="19.3	switch语句中的enum"></a>19.3	switch语句中的enum</h3><ul>
<li>在<strong>switch</strong>语句中使用<strong>enum</strong>非常便利，它具备整数值的次序，并且可以通过**ordinal()**方法取得其次序</li>
</ul>
<h3 id="19-4values-的神秘之处"><a href="#19-4values-的神秘之处" class="headerlink" title="19.4	values()的神秘之处"></a>19.4	values()的神秘之处</h3><ul>
<li><strong>Enum</strong>类中并没有<strong>values()<strong>方法，它是由编译器添加的</strong>static</strong>方法</li>
</ul>
<h3 id="19-5实现，而非继承"><a href="#19-5实现，而非继承" class="headerlink" title="19.5	实现，而非继承"></a>19.5	实现，而非继承</h3><ul>
<li><strong>enum</strong>不能够继承其他类，但是可以同时实现一个或多个接口</li>
</ul>
<h3 id="19-6随机选取"><a href="#19-6随机选取" class="headerlink" title="19.6	随机选取"></a>19.6	随机选取</h3><ul>
<li>利用泛型从枚举类中随机选取值</li>
</ul>
<h3 id="19-7使用接口组织枚举"><a href="#19-7使用接口组织枚举" class="headerlink" title="19.7	使用接口组织枚举"></a>19.7	使用接口组织枚举</h3><ul>
<li>在一个接口创建枚举，实现接口以使其子类化</li>
</ul>
<h3 id="19-8使用EnumSet替代标志"><a href="#19-8使用EnumSet替代标志" class="headerlink" title="19.8	使用EnumSet替代标志"></a>19.8	使用EnumSet替代标志</h3><ul>
<li><strong>EnumSet</strong>：通过<strong>enum</strong>创建的一种替代品，具有良好的速度性能</li>
</ul>
<h3 id="19-9使用EnumMap"><a href="#19-9使用EnumMap" class="headerlink" title="19.9	使用EnumMap"></a>19.9	使用EnumMap</h3><ul>
<li><strong>EnumMap</strong>：一种特殊的<strong>Map</strong>，要求其中的键必须来自一个<strong>enum</strong></li>
</ul>
<h3 id="19-10常量相关方法"><a href="#19-10常量相关方法" class="headerlink" title="19.10	常量相关方法"></a>19.10	常量相关方法</h3><ul>
<li><strong>实现常量相关方法</strong>：定义一个或多个抽象方法，为每一个枚举实例实现该抽象方法</li>
<li><strong>使用enum的职责链</strong>：以多种不同的方式来解决一个问题，然后将它们链接在一起，当请求到来时，遍历这个链，直到找到问题的解决方案</li>
<li><strong>使用enum的状态机</strong>：一个状态机可以具有有限个特定的状态，它会根据输入进行状态的转移</li>
</ul>
<h3 id="19-11多路分发"><a href="#19-11多路分发" class="headerlink" title="19.11	多路分发"></a>19.11	多路分发</h3><ul>
<li><strong>多路分发</strong>：操作多个类型未知的对象，多个方法一同工作，产生多个结果，以解决<strong>Java</strong>绑定机制只支持单路并发的缺陷</li>
<li><strong>使用enum分发</strong>：结合<strong>switch</strong>语句，遍历参数类型</li>
<li><strong>使用常量相关的方法</strong>：为每个实例提供方法的不同实现</li>
<li><strong>使用EnumMap分发</strong>：实现两路分发</li>
<li><strong>使用二维数组</strong>：最简洁，最直接的方案，表达能力更强</li>
</ul>
<h2 id="第二十章注解"><a href="#第二十章注解" class="headerlink" title="第二十章	注解"></a>第二十章	注解</h2><h3 id="20-1基本语法"><a href="#20-1基本语法" class="headerlink" title="20.1	基本语法"></a>20.1	基本语法</h3><ul>
<li><p><strong>注解</strong>：又被称为元数据，为程序员在代码中添加信息提供了一种形式化方法，在稍后的某个时刻可以非常方便地使用这些数据</p>
</li>
<li><p><strong>注解的优点</strong></p>
<ul>
<li>完整地描述程序所需的信息</li>
<li>由编译器来测试和验证的格式，存储有关程序的额外信息</li>
<li>生成描述符文件，有助于减轻样板代码的负担</li>
<li>更加干净易读的代码以及编译期类型检查</li>
</ul>
</li>
<li><p><strong>定义注解</strong>：使用**@<strong>符号，类似于接口，也会被编译成</strong>.Class**文件</p>
</li>
<li><p><strong>元注解</strong>：专职负责注解其他的注解</p>
<table>
<thead>
<tr>
<th align="center">注解</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>@Target</strong></td>
<td align="center">表示注解可以用于什么地方，参数包括<br><strong>CONSTRUCTOR</strong>构造器<br><strong>FIELD</strong>域<br><strong>LOCAL_VARIABLE</strong>局部变量<br/><strong>METHOD</strong>方法<br/><strong>PACKAGE</strong>包<br/><strong>PARAMETER</strong>参数<br/><strong>TYPE</strong>类，接口，枚举等</td>
</tr>
<tr>
<td align="center"><strong>@Retention</strong></td>
<td align="center">表示在什么级别保存该注解信息，参数包括<br/><strong>SOURCE</strong>会被编译器丢弃<br/><strong>CLASS</strong>在<strong>class</strong>文件可用，但会被虚拟机丢弃<br/><strong>RUNTIME</strong>运行期保留，可以通过反射机制读取该注解</td>
</tr>
<tr>
<td align="center"><strong>@Document</strong></td>
<td align="center">将注解保存在<strong>Javadoc</strong>中</td>
</tr>
<tr>
<td align="center"><strong>@Inherited</strong></td>
<td align="center">允许子类继承父类的注解</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="20-2编写注解处理器"><a href="#20-2编写注解处理器" class="headerlink" title="20.2	编写注解处理器"></a>20.2	编写注解处理器</h3><ul>
<li><strong>注解处理器</strong>：运用反射机制，使用**getDeclearMethods()<strong>和</strong>getAnnotation()**提取对象中的方法和注解并进行适当的处理</li>
<li><strong>注解元素</strong>：<strong>Java</strong>注解中可以使用到的元素，包括所有的基本类型，<strong>String</strong>，<strong>Class</strong>，<strong>enum</strong>，<strong>Annotation</strong>和以上类型的数组</li>
<li><strong>默认值限制</strong>：对于非基本类型的元素，不能使用<strong>null</strong>，可以定义一些特殊值表示元素不存在</li>
<li><strong>生成外部文件</strong>：使用注解，可以将所有的信息保存在<strong>Java</strong>源文件中，不必重复地提供有关文件的相关信息</li>
<li><strong>注解不支持继承</strong>：不能使用<strong>extends</strong>继承注解，不过可以在<strong>Spring</strong>框架中使用反射机制进行注解的继承</li>
</ul>
<h3 id="20-3使用apt处理注解"><a href="#20-3使用apt处理注解" class="headerlink" title="20.3	使用apt处理注解"></a>20.3	使用apt处理注解</h3><ul>
<li><strong>注解处理工具apt</strong>：<strong>Sun</strong>公司为了帮助注解的处理过程而提供的工具，它可以在编译期间扫描和处理<strong>Java</strong>源代码中的注解，并生成新的<strong>Java</strong>代码、<strong>XML</strong>文件或其他形式的文件</li>
</ul>
<h3 id="20-4将观察者模式用于apt"><a href="#20-4将观察者模式用于apt" class="headerlink" title="20.4	将观察者模式用于apt"></a>20.4	将观察者模式用于apt</h3><ul>
<li><strong>访问者模式</strong>：一个访问者遍历某个数据类型或一个对象的集合，对其中的每一个对象执行一个操作</li>
</ul>
<h3 id="20-5基于注解的单元测试"><a href="#20-5基于注解的单元测试" class="headerlink" title="20.5	基于注解的单元测试"></a>20.5	基于注解的单元测试</h3><ul>
<li><strong>单元测试</strong>：对类中每个方法提供一个或多个测试的一种实践，用于有规律地测是一个类的各个部分是否具备正确的行为</li>
<li><strong>将@Unit用于泛型</strong>：让测试类继承自泛型类的一个特定版本</li>
<li><strong>移除测试代码</strong>：删除字节码中的**@Test**注解</li>
</ul>
<h2 id="第二十一章并发"><a href="#第二十一章并发" class="headerlink" title="第二十一章	并发"></a>第二十一章	并发</h2><h3 id="21-1并发的多面性"><a href="#21-1并发的多面性" class="headerlink" title="21.1	并发的多面性"></a>21.1	并发的多面性</h3><ul>
<li><strong>并发编程的难题</strong>：并发编程时需要解决的问题与实现并发的方式之间，没有明显的映射关系，需要有效地使用并发，以理解这些问题和特例</li>
<li><strong>更快的执行</strong>：违背直觉的是，并发编程可以提高程序在单处理器上的运行速度，因为并发编程会避免阻塞问题对程序运行速度的影响</li>
<li><strong>改进代码设计</strong>：极大地简化了相关问题的解决，<strong>Java</strong>采用协作多线程机制，在处理大量的仿真元素的问题是是一种你想的解决方案</li>
</ul>
<h3 id="21-2基本的线程机制"><a href="#21-2基本的线程机制" class="headerlink" title="21.2	基本的线程机制"></a>21.2	基本的线程机制</h3><ul>
<li><strong>线程机制</strong>：将程序分为多个分离的，独立运行的任务，这些任务中的每一个都将由执行流程来驱动，一个线程就是在进程中的一个单一的顺序控制流</li>
<li><strong>定义任务</strong>：实现<strong>Runnable</strong>接口并编写**run()**方法</li>
<li><strong>Thread类</strong>：将<strong>Runnable</strong>对象交由<strong>Thread</strong>构造器以驱动，调用<strong>start()<strong>方法为该线程执行必需的初始化操作，然后调用</strong>Runnable</strong>对象的**run()**方法，在新线程中启动该任务</li>
<li><strong>使用Executor</strong>：使用<strong>java.util.concurrent</strong>中的<strong>Executor</strong>，管理<strong>Thread</strong>对象，简化并发编程</li>
<li><strong>从任务中产生返回值</strong>：实现<strong>Callable</strong>类而不是<strong>Runnable</strong>接口</li>
<li><strong>休眠</strong>：调用**sleep()**方法，使任务中止执行给定的时间</li>
<li><strong>优先级</strong>：使用**getPriority()<strong>方法来读取现有进程的优先级，使用</strong>setPriority()**方法修改优先级</li>
<li><strong>让步</strong>：调用**yield()**方法，可以提出建议为同优先级的进程让步</li>
<li><strong>后台进程</strong>：在程序运行的时候在后台提供的一种通用服务的线程，并且不属于程序中不可或缺的一部分，使用**setDaemon()<strong>方法将方法设置为后台进程，使用</strong>isDaemon()**方法判断进程是否为后台进程</li>
<li><strong>编码的变体</strong>：直接从<strong>Thread</strong>类继承以简化并发过程</li>
<li><strong>加入一个线程</strong>：调用**join()**方法，等待一段时间知道第二个线程结束继续执行</li>
<li><strong>捕获异常</strong>：使用<strong>Execute</strong>修改产生线程的方式，在<strong>Thread</strong>对象上附着一个异常处理器</li>
</ul>
<h3 id="21-3共享受限资源"><a href="#21-3共享受限资源" class="headerlink" title="21.3	共享受限资源"></a>21.3	共享受限资源</h3><ul>
<li><strong>解决共享资源竞争</strong>：在资源被访问时，给资源加锁以避免其他线程访问，使用<strong>synchronized</strong>关键字对资源上锁</li>
<li><strong>原子性与易变性</strong>：原子操作是不能被线程调度机制中断的操作，使用<strong>volatile</strong>关键字确保应用中的可视性</li>
<li><strong>原子类</strong>：<strong>AtomicInteger</strong>，<strong>AtomicLong</strong>，<strong>AtomicReference</strong>等原子性变量类，可以在机器级别获得原子性</li>
<li><strong>临界区</strong>：访问多个线程同时访问方法内部的部分代码而不是防止访问整个方法，分离出来的代码段称为临界区</li>
<li><strong>在其他对象上同步</strong>：使用其方法正在被调用的当前对象<strong>synchronize(this)</strong></li>
<li><strong>线程本地存储</strong>：使用<strong>ThreadLocal</strong>类，为使用相同变量的每个不同的线程都创建不同的存储</li>
</ul>
<h3 id="21-4终结任务"><a href="#21-4终结任务" class="headerlink" title="21.4	终结任务"></a>21.4	终结任务</h3><ul>
<li><strong>线程状态</strong><ul>
<li><strong>新建</strong>：当线程被创建时短暂的状态，分配必需的资源并初始化</li>
<li><strong>就绪</strong>：在任意时刻，只要被调度器分配时间片，就可以运行</li>
<li><strong>阻塞</strong>：某个条件阻止线程的运行，调度器将忽略线程，不分配<strong>CPU</strong>时间，直至重新进入就绪状态</li>
<li><strong>死亡</strong>：任务已结束或者不再是可运行</li>
</ul>
</li>
<li><strong>进入阻塞状态</strong><ul>
<li>调用**sleep()**方法进入休眠状态</li>
<li>调用**wait()**使线程挂起</li>
<li>任务在等待某个输入&#x2F;输出完成</li>
<li>任务试图在某个对象上调用其同步控制方法，但对象锁不可用，因为另一个任务已经获取了该锁</li>
</ul>
</li>
<li><strong>中断</strong>：调用<strong>Thread</strong>对象的**interrupt()**方法，设置线程的中断状态</li>
<li><strong>检查中断</strong>：调用**interrupted()**来检查中断状态</li>
</ul>
<h3 id="21-5线程之间的协作"><a href="#21-5线程之间的协作" class="headerlink" title="21.5	线程之间的协作"></a>21.5	线程之间的协作</h3><ul>
<li>**wait()和notifyAll()<strong>：</strong>wait()**使得程序等待某个条件发生变化，而改变这个条件超出了当前方法的控制能力</li>
<li><strong>notify()和notifyAll()<strong>：当程序的结构只会有一个任务实际处于</strong>wait()<strong>状态，可以使用</strong>notify()<strong>替代</strong>notifyAll()</strong></li>
<li><strong>生产者–消费者与队列</strong>：使用同步队列来解决任务协作问题，同步队列在任何时刻只允许一个任务插入或移除元素</li>
<li><strong>任务间适应管道进行输入&#x2F;输出</strong>：使用<strong>PipedWriter</strong>和<strong>PipedReader</strong>类实现管道概念</li>
</ul>
<h3 id="21-6死锁"><a href="#21-6死锁" class="headerlink" title="21.6	死锁"></a>21.6	死锁</h3><ul>
<li><strong>死锁</strong>：某个任务在等待另一个任务，而后者又等待别的任务，这样一直下去，直到这个任务上的任务又在等待第一个任务释放锁，构成了一个相互等待的连续循环，没有哪个线程能继续</li>
<li><strong>死锁产生的原因</strong><ul>
<li>互斥条件，任务使用的资源至少有一个是不能共享的</li>
<li>至少有一个任务它必须持有一个资源且正在等待获取一个当前被别的任务持有的资源</li>
<li>资源不能被任务抢占，任务必须把资源释放当做普通事件</li>
<li>必须有循环等待</li>
</ul>
</li>
</ul>
<h3 id="21-7新类库中的构件"><a href="#21-7新类库中的构件" class="headerlink" title="21.7	新类库中的构件"></a>21.7	新类库中的构件</h3><ul>
<li><strong>CountDownLatch</strong>：同步一个或多个任务，强制它们等待由其他任务执行的操作完成</li>
<li><strong>CyclicBarrier</strong>：多次重用的<strong>CountDownLatch</strong></li>
<li><strong>DelayQueue</strong>：用于放置实现了<strong>Delayed</strong>接口的对象，其中的对象只能在其到期时才能从队列中取走</li>
<li><strong>PriorityBlockingQueue</strong>：基础的优先级队列，具有可阻塞的读取操作</li>
<li><strong>Semaphore</strong>：允许多个任务同时访问这个资源，信号量可以被看作是在向外分发使用资源的许可证</li>
<li><strong>Exchanger</strong>：两个任务之间交换对象的栅栏</li>
</ul>
<h3 id="21-8仿真"><a href="#21-8仿真" class="headerlink" title="21.8	仿真"></a>21.8	仿真</h3><ul>
<li><strong>银行出纳员仿真</strong></li>
<li><strong>饭店仿真</strong></li>
<li><strong>分发工作</strong></li>
</ul>
<h3 id="21-9性能调优"><a href="#21-9性能调优" class="headerlink" title="21.9	性能调优"></a>21.9	性能调优</h3><ul>
<li><strong>免锁容器</strong>：对容器的修改可以与读取操作同时发生，只要读取者只能看到完成修改的结果即可</li>
</ul>
<h3 id="21-10活动对象"><a href="#21-10活动对象" class="headerlink" title="21.10	活动对象"></a>21.10	活动对象</h3><ul>
<li><strong>活动对象</strong>：每个对象都维护着它自己的工作器线程和消息队列，所有对这种对象的请求都将进入队列排队，任何时刻只能运行其中一个</li>
<li><strong>活动对象的特点</strong><ul>
<li>每个活动对象都可以拥有自己的工作器线程</li>
<li>每个对象都将维护对它自己的域的全部控制权</li>
<li>所有在活动对象之间的通信都将以在这些对象之间的消息形式发生</li>
<li>活动对象之间的所有消息都要排队</li>
</ul>
</li>
</ul>
<h2 id="第二十二章图形用户界面"><a href="#第二十二章图形用户界面" class="headerlink" title="第二十二章	图形用户界面"></a>第二十二章	图形用户界面</h2><h3 id="22-1applet"><a href="#22-1applet" class="headerlink" title="22.1	applet"></a>22.1	applet</h3><ul>
<li><strong>applet</strong>：一种可以在<strong>Internet</strong>上传递，并在<strong>Web</strong>浏览器中运行的程序</li>
<li><strong>applet的失败</strong>：大多数机器上并没有运行<strong>applet</strong>所必需的<strong>Java</strong>软件，为了某次特定的使用去下载和安装软件包比较麻烦</li>
</ul>
<h3 id="22-2Swing基础"><a href="#22-2Swing基础" class="headerlink" title="22.2	Swing基础"></a>22.2	Swing基础</h3><ul>
<li><strong>JFrame</strong>：大多数<strong>Swing</strong>应用被构建于此，可以在任何操作系统上创建视图应用</li>
<li><strong>一个显示框架</strong>：创建显示框架，以降低冗余代码</li>
</ul>
<h3 id="22-3创建按钮"><a href="#22-3创建按钮" class="headerlink" title="22.3	创建按钮"></a>22.3	创建按钮</h3><ul>
<li><strong>创建按钮</strong>：在标签上调用<strong>JButton</strong>构造器</li>
</ul>
<h3 id="22-4捕获事件"><a href="#22-4捕获事件" class="headerlink" title="22.4	捕获事件"></a>22.4	捕获事件</h3><ul>
<li>调用<strong>JButton</strong>的<strong>addActionListener()<strong>方法，并在类中实现</strong>ActionListener</strong>接口</li>
<li><strong>JTextField</strong>：支持用户输入文本，并放置在画布上</li>
</ul>
<h3 id="22-5文本区域"><a href="#22-5文本区域" class="headerlink" title="22.5	文本区域"></a>22.5	文本区域</h3><ul>
<li><strong>JTextArea</strong>：与<strong>JTextField</strong>类似，其中的**append()**方法可以用来添加文本</li>
</ul>
<h3 id="22-6控制布局"><a href="#22-6控制布局" class="headerlink" title="22.6	控制布局"></a>22.6	控制布局</h3><ul>
<li><p><strong>BorderLayout</strong>：默认的布局模式，接收**add()**方法加入组件</p>
<table>
<thead>
<tr>
<th align="center">常量值</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>BorderLayout.NORTH</strong></td>
<td align="center"><strong>顶端</strong></td>
</tr>
<tr>
<td align="center"><strong>BorderLayout.SOUTH</strong></td>
<td align="center"><strong>底端</strong></td>
</tr>
<tr>
<td align="center"><strong>BorderLayout.EAST</strong></td>
<td align="center"><strong>右端</strong></td>
</tr>
<tr>
<td align="center"><strong>BorderLayout.WEST</strong></td>
<td align="center"><strong>左端</strong></td>
</tr>
<tr>
<td align="center"><strong>BorderLayout.CENTER</strong></td>
<td align="center"><strong>中央</strong></td>
</tr>
</tbody></table>
</li>
<li><p><strong>FlowLayout</strong>：从左到右流动到窗体，直到占满上方的空间，然后下移一行继续流动</p>
</li>
<li><p><strong>GridLayout</strong>：允许构建放置组件的表格，按照从左到右，从上到下的顺序加入组件</p>
</li>
<li><p><strong>GridBagLayout</strong>：精确判断视窗区域如何布局，以及视窗大小变化的时候如何放置组件</p>
</li>
</ul>
<h3 id="22-7Swing事件模型"><a href="#22-7Swing事件模型" class="headerlink" title="22.7	Swing事件模型"></a>22.7	Swing事件模型</h3><ul>
<li><strong>事件与监听器的模型</strong>：所有的<strong>Swing</strong>组件都具有**addXXXListener()<strong>和</strong>removeXXXListener()**方法，用于添加和移除相应类型的监听器</li>
</ul>
<h3 id="22-8Swing组件一览"><a href="#22-8Swing组件一览" class="headerlink" title="22.8	Swing组件一览"></a>22.8	Swing组件一览</h3><ul>
<li><strong>按钮</strong>：从<strong>AbstractButton</strong>类继承各种类型的按钮类</li>
<li><strong>图标</strong>：在<strong>JLable</strong>或者从<strong>AbstractButtton</strong>类继承的组件中使用<strong>Icon</strong></li>
<li><strong>工具提示</strong>：用来创建用户接口的类，绝大多数继承自<strong>JComponent</strong>类</li>
<li><strong>文本域</strong>：<strong>JTextField</strong>组件</li>
<li><strong>边框</strong>：<strong>JComponent</strong>的**setBorder()**方法，可以为任何可视组件设置各种边框</li>
<li><strong>复选框</strong>：接收标签作为参数创建<strong>JCheckBox</strong></li>
<li><strong>单选按钮</strong>：设置一组关联的<strong>JRadioButton</strong></li>
<li><strong>组合框</strong>：使用<strong>JComboBox</strong>组合框</li>
<li><strong>列表框</strong>：使用<strong>JList</strong>在屏幕上生成列表</li>
<li><strong>页签面板</strong>：<strong>JTabbedPane</strong>允许创建页签式对话框</li>
<li><strong>消息框</strong>：<strong>JOptionPane</strong>组件，可以提供包括消息对话框和确认对话框在内的很多选择</li>
<li><strong>菜单</strong>：每个持有菜单地子类，包括<strong>JApplet</strong>，<strong>JFrame</strong>，<strong>JDialog</strong>以及它们的子类，都具有**setJMenuBar()**方法用于接收参数对象</li>
<li><strong>弹出式菜单</strong>：创建一个继承自<strong>MouseAdapter</strong>的内部类</li>
<li><strong>绘图</strong>：从<strong>JPanel</strong>继承，并覆盖<strong>paintComponent</strong>方法</li>
<li><strong>对话框</strong>：继承<strong>JDialog</strong>，添加事件监听器来处理事件</li>
<li><strong>文件对话框</strong>：使用<strong>JFileChooser</strong></li>
<li><strong>Swing组件上的HTML</strong>：任何<strong>Swing</strong>组件都可以接受<strong>HTML</strong>文本，并且重新格式化文本</li>
</ul>
<h3 id="22-9JNLP与Java-Web-Start"><a href="#22-9JNLP与Java-Web-Start" class="headerlink" title="22.9	JNLP与Java Web Start"></a>22.9	JNLP与Java Web Start</h3><ul>
<li><strong>JNLP</strong>：<strong>Java</strong>网络发布协议，在保持<strong>applet</strong>的优点的前提下，解决了<strong>applet</strong>只能在浏览器上运行等问题</li>
<li><strong>Java Web Start</strong>：由<strong>Sun</strong>免费提供的<strong>JNLP</strong>的官方参考实现</li>
</ul>
<h3 id="22-10Swing与并发"><a href="#22-10Swing与并发" class="headerlink" title="22.10	Swing与并发"></a>22.10	Swing与并发</h3><ul>
<li><strong>长期运行的任务</strong>：在单独的线程中执行长期运行的任务</li>
</ul>
<h3 id="22-11可视化编程与JavaBean"><a href="#22-11可视化编程与JavaBean" class="headerlink" title="22.11	可视化编程与JavaBean"></a>22.11	可视化编程与JavaBean</h3><ul>
<li><strong>可视化编程</strong>：<strong>IDE</strong>构建工具通过反射机制来动态地向组件查询，以找出组件具有的属性和支持的事件</li>
<li><strong>JavaBean</strong>：一种符合特定规范的Java类，常用于图形用户界面编程、数据持久化和<strong>Web</strong>应用程序开发中<ul>
<li>对于一个名称为<strong>xxx</strong>的属性，通常具有两个方法：<strong>getXxx()<strong>和</strong>setXxx()</strong></li>
<li>对于布尔型属性，可以使用上述方法，也可以将<strong>get</strong>替换为<strong>is</strong></li>
<li><strong>Bean</strong>的普通方法不必遵循以上的命名规则，不过它们必须是<strong>public</strong>的</li>
<li>对于事件，要是用<strong>Swing</strong>中处理监听器的方式</li>
</ul>
</li>
<li><strong>JavaBean与同步</strong>：尽可能让<strong>Bean</strong>中的所有公共方法都是<strong>synchronize</strong>的；当一个多路事件触发了一组对该事件感兴趣的监听器时，必须假定在遍历列表进行通知的同时监听器可能被移除或添加</li>
</ul>
<h2 id="第二十三章Java8新特性"><a href="#第二十三章Java8新特性" class="headerlink" title="第二十三章	Java8新特性"></a>第二十三章	Java8新特性</h2><h3 id="第一节为什么要关心Java8"><a href="#第一节为什么要关心Java8" class="headerlink" title="第一节	为什么要关心Java8"></a>第一节	为什么要关心Java8</h3><h4 id="1-1Java怎么还在变"><a href="#1-1Java怎么还在变" class="headerlink" title="1.1	Java怎么还在变"></a>1.1	Java怎么还在变</h4><h4 id="1-2Java中的函数"><a href="#1-2Java中的函数" class="headerlink" title="1.2	Java中的函数"></a>1.2	Java中的函数</h4><h4 id="1-3流"><a href="#1-3流" class="headerlink" title="1.3	流"></a>1.3	流</h4><h4 id="1-4默认方法"><a href="#1-4默认方法" class="headerlink" title="1.4	默认方法"></a>1.4	默认方法</h4><h4 id="1-5来自函数式编程的其他好思想"><a href="#1-5来自函数式编程的其他好思想" class="headerlink" title="1.5	来自函数式编程的其他好思想"></a>1.5	来自函数式编程的其他好思想</h4><h3 id="第二节通过行为参数化传递代码"><a href="#第二节通过行为参数化传递代码" class="headerlink" title="第二节	通过行为参数化传递代码"></a>第二节	通过行为参数化传递代码</h3><h4 id="2-1应对不断变化的需求"><a href="#2-1应对不断变化的需求" class="headerlink" title="2.1	应对不断变化的需求"></a>2.1	应对不断变化的需求</h4><h4 id="2-2行为参数化"><a href="#2-2行为参数化" class="headerlink" title="2.2	行为参数化"></a>2.2	行为参数化</h4><h4 id="2-3对付啰嗦"><a href="#2-3对付啰嗦" class="headerlink" title="2.3	对付啰嗦"></a>2.3	对付啰嗦</h4><h4 id="2-4真实的例子"><a href="#2-4真实的例子" class="headerlink" title="2.4	真实的例子"></a>2.4	真实的例子</h4><h3 id="第三节Lambda表达式"><a href="#第三节Lambda表达式" class="headerlink" title="第三节	Lambda表达式"></a>第三节	Lambda表达式</h3><h4 id="3-1Lambda管中窥豹"><a href="#3-1Lambda管中窥豹" class="headerlink" title="3.1	Lambda管中窥豹"></a>3.1	Lambda管中窥豹</h4><h4 id="3-2在哪里以及如何使用Lambda"><a href="#3-2在哪里以及如何使用Lambda" class="headerlink" title="3.2	在哪里以及如何使用Lambda"></a>3.2	在哪里以及如何使用Lambda</h4><h4 id="3-3把Lambda付诸实践：环绕执行模式"><a href="#3-3把Lambda付诸实践：环绕执行模式" class="headerlink" title="3.3	把Lambda付诸实践：环绕执行模式"></a>3.3	把Lambda付诸实践：环绕执行模式</h4><h4 id="3-4使用函数式接口"><a href="#3-4使用函数式接口" class="headerlink" title="3.4	使用函数式接口"></a>3.4	使用函数式接口</h4><h4 id="3-5类型检查，类型推断以及限制"><a href="#3-5类型检查，类型推断以及限制" class="headerlink" title="3.5	类型检查，类型推断以及限制"></a>3.5	类型检查，类型推断以及限制</h4><h4 id="3-6方法引用"><a href="#3-6方法引用" class="headerlink" title="3.6	方法引用"></a>3.6	方法引用</h4><h4 id="3-7Lambda的方法引用实践"><a href="#3-7Lambda的方法引用实践" class="headerlink" title="3.7	Lambda的方法引用实践"></a>3.7	Lambda的方法引用实践</h4><h4 id="3-8复合Lambda表达式的有用方法"><a href="#3-8复合Lambda表达式的有用方法" class="headerlink" title="3.8	复合Lambda表达式的有用方法"></a>3.8	复合Lambda表达式的有用方法</h4><h4 id="3-9数学中的类似思想"><a href="#3-9数学中的类似思想" class="headerlink" title="3.9	数学中的类似思想"></a>3.9	数学中的类似思想</h4><h3 id="第四节引入流"><a href="#第四节引入流" class="headerlink" title="第四节	引入流"></a>第四节	引入流</h3><h4 id="4-1流是什么"><a href="#4-1流是什么" class="headerlink" title="4.1	流是什么"></a>4.1	流是什么</h4><h4 id="4-2流简介"><a href="#4-2流简介" class="headerlink" title="4.2	流简介"></a>4.2	流简介</h4><h4 id="4-3流与集合"><a href="#4-3流与集合" class="headerlink" title="4.3	流与集合"></a>4.3	流与集合</h4><h4 id="4-4流操作"><a href="#4-4流操作" class="headerlink" title="4.4	流操作"></a>4.4	流操作</h4><h3 id="第五节使用流"><a href="#第五节使用流" class="headerlink" title="第五节	使用流"></a>第五节	使用流</h3><h4 id="5-1筛选和切片"><a href="#5-1筛选和切片" class="headerlink" title="5.1	筛选和切片"></a>5.1	筛选和切片</h4><h4 id="5-2映射"><a href="#5-2映射" class="headerlink" title="5.2	映射"></a>5.2	映射</h4><h4 id="5-3查找和匹配"><a href="#5-3查找和匹配" class="headerlink" title="5.3	查找和匹配"></a>5.3	查找和匹配</h4><h4 id="5-4归约"><a href="#5-4归约" class="headerlink" title="5.4	归约"></a>5.4	归约</h4><h4 id="5-5付诸实践"><a href="#5-5付诸实践" class="headerlink" title="5.5	付诸实践"></a>5.5	付诸实践</h4><h4 id="5-6数值流"><a href="#5-6数值流" class="headerlink" title="5.6	数值流"></a>5.6	数值流</h4><h4 id="5-7构建流"><a href="#5-7构建流" class="headerlink" title="5.7	构建流"></a>5.7	构建流</h4><h3 id="第六节用流收集数据"><a href="#第六节用流收集数据" class="headerlink" title="第六节	用流收集数据"></a>第六节	用流收集数据</h3><h4 id="6-1收集器简介"><a href="#6-1收集器简介" class="headerlink" title="6.1	收集器简介"></a>6.1	收集器简介</h4><h4 id="6-2归约和汇总"><a href="#6-2归约和汇总" class="headerlink" title="6.2	归约和汇总"></a>6.2	归约和汇总</h4><h4 id="6-3分组"><a href="#6-3分组" class="headerlink" title="6.3	分组"></a>6.3	分组</h4><h4 id="6-4分区"><a href="#6-4分区" class="headerlink" title="6.4	分区"></a>6.4	分区</h4><h4 id="6-5收集器接口"><a href="#6-5收集器接口" class="headerlink" title="6.5	收集器接口"></a>6.5	收集器接口</h4><h4 id="6-6开发你自己的收集器以获得更好的性能"><a href="#6-6开发你自己的收集器以获得更好的性能" class="headerlink" title="6.6	开发你自己的收集器以获得更好的性能"></a>6.6	开发你自己的收集器以获得更好的性能</h4><h3 id="第七节并行数据处理与性能"><a href="#第七节并行数据处理与性能" class="headerlink" title="第七节	并行数据处理与性能"></a>第七节	并行数据处理与性能</h3><h4 id="7-1并行流"><a href="#7-1并行流" class="headerlink" title="7.1	并行流"></a>7.1	并行流</h4><h4 id="7-2分支-合并框架"><a href="#7-2分支-合并框架" class="headerlink" title="7.2	分支&#x2F;合并框架"></a>7.2	分支&#x2F;合并框架</h4><h4 id="7-3Spliterator"><a href="#7-3Spliterator" class="headerlink" title="7.3	Spliterator"></a>7.3	Spliterator</h4><h3 id="第八节重构，测试和调试"><a href="#第八节重构，测试和调试" class="headerlink" title="第八节	重构，测试和调试"></a>第八节	重构，测试和调试</h3><h4 id="8-1为改善可读性和灵活性重构代码"><a href="#8-1为改善可读性和灵活性重构代码" class="headerlink" title="8.1	为改善可读性和灵活性重构代码"></a>8.1	为改善可读性和灵活性重构代码</h4><h4 id="8-2使用Lambda重构面向对象的设计模式"><a href="#8-2使用Lambda重构面向对象的设计模式" class="headerlink" title="8.2	使用Lambda重构面向对象的设计模式"></a>8.2	使用Lambda重构面向对象的设计模式</h4><h4 id="8-3测试Lambda表达式"><a href="#8-3测试Lambda表达式" class="headerlink" title="8.3	测试Lambda表达式"></a>8.3	测试Lambda表达式</h4><h4 id="8-4调试"><a href="#8-4调试" class="headerlink" title="8.4	调试"></a>8.4	调试</h4><h3 id="第九节默认方法"><a href="#第九节默认方法" class="headerlink" title="第九节	默认方法"></a>第九节	默认方法</h3><h4 id="9-1不断演进的API"><a href="#9-1不断演进的API" class="headerlink" title="9.1	不断演进的API"></a>9.1	不断演进的API</h4><h4 id="9-2概述默认方法"><a href="#9-2概述默认方法" class="headerlink" title="9.2	概述默认方法"></a>9.2	概述默认方法</h4><h4 id="9-3默认方法的使用模式"><a href="#9-3默认方法的使用模式" class="headerlink" title="9.3	默认方法的使用模式"></a>9.3	默认方法的使用模式</h4><h4 id="9-4解决冲突的规则"><a href="#9-4解决冲突的规则" class="headerlink" title="9.4	解决冲突的规则"></a>9.4	解决冲突的规则</h4><h3 id="第十节用optional替代null"><a href="#第十节用optional替代null" class="headerlink" title="第十节	用optional替代null"></a>第十节	用optional替代null</h3><h4 id="10-1如何为缺失的值建模"><a href="#10-1如何为缺失的值建模" class="headerlink" title="10.1	如何为缺失的值建模"></a>10.1	如何为缺失的值建模</h4><h4 id="10-2Optional类入门"><a href="#10-2Optional类入门" class="headerlink" title="10.2	Optional类入门"></a>10.2	Optional类入门</h4><h4 id="10-3应用Optional的几种模式"><a href="#10-3应用Optional的几种模式" class="headerlink" title="10.3	应用Optional的几种模式"></a>10.3	应用Optional的几种模式</h4><h4 id="10-4使用Optional的实战示例"><a href="#10-4使用Optional的实战示例" class="headerlink" title="10.4	使用Optional的实战示例"></a>10.4	使用Optional的实战示例</h4><h3 id="第十一节CompletableFuture：组合式异步编程"><a href="#第十一节CompletableFuture：组合式异步编程" class="headerlink" title="第十一节	CompletableFuture：组合式异步编程"></a>第十一节	CompletableFuture：组合式异步编程</h3><h4 id="11-1Future接口"><a href="#11-1Future接口" class="headerlink" title="11.1	Future接口"></a>11.1	Future接口</h4><h4 id="11-2实现异步API"><a href="#11-2实现异步API" class="headerlink" title="11.2	实现异步API"></a>11.2	实现异步API</h4><h4 id="11-3让你的代码免受阻塞之苦"><a href="#11-3让你的代码免受阻塞之苦" class="headerlink" title="11.3	让你的代码免受阻塞之苦"></a>11.3	让你的代码免受阻塞之苦</h4><h4 id="11-4对多个异步任务进行流水线操作"><a href="#11-4对多个异步任务进行流水线操作" class="headerlink" title="11.4	对多个异步任务进行流水线操作"></a>11.4	对多个异步任务进行流水线操作</h4><h4 id="11-5响应CompletableFuture的completion事件"><a href="#11-5响应CompletableFuture的completion事件" class="headerlink" title="11.5	响应CompletableFuture的completion事件"></a>11.5	响应CompletableFuture的completion事件</h4><h3 id="第十二节新的日期和时间API"><a href="#第十二节新的日期和时间API" class="headerlink" title="第十二节	新的日期和时间API"></a>第十二节	新的日期和时间API</h3><h4 id="12-1LocalDate，LocalTime，Instant，Duration以及Period"><a href="#12-1LocalDate，LocalTime，Instant，Duration以及Period" class="headerlink" title="12.1	LocalDate，LocalTime，Instant，Duration以及Period"></a>12.1	LocalDate，LocalTime，Instant，Duration以及Period</h4><h4 id="12-2操纵，解析和格式化日期"><a href="#12-2操纵，解析和格式化日期" class="headerlink" title="12.2	操纵，解析和格式化日期"></a>12.2	操纵，解析和格式化日期</h4><h4 id="12-3处理不同的时区和历法"><a href="#12-3处理不同的时区和历法" class="headerlink" title="12.3	处理不同的时区和历法"></a>12.3	处理不同的时区和历法</h4><h3 id="第十三节函数式的思考"><a href="#第十三节函数式的思考" class="headerlink" title="第十三节	函数式的思考"></a>第十三节	函数式的思考</h3><h4 id="13-1实现和维护系统"><a href="#13-1实现和维护系统" class="headerlink" title="13.1	实现和维护系统"></a>13.1	实现和维护系统</h4><h4 id="13-2什么是函数式编程"><a href="#13-2什么是函数式编程" class="headerlink" title="13.2	什么是函数式编程"></a>13.2	什么是函数式编程</h4><h4 id="13-3递归和迭代"><a href="#13-3递归和迭代" class="headerlink" title="13.3	递归和迭代"></a>13.3	递归和迭代</h4><h3 id="第十四节函数式编程的技巧"><a href="#第十四节函数式编程的技巧" class="headerlink" title="第十四节	函数式编程的技巧"></a>第十四节	函数式编程的技巧</h3><h4 id="14-1无处不在的函数"><a href="#14-1无处不在的函数" class="headerlink" title="14.1	无处不在的函数"></a>14.1	无处不在的函数</h4><h4 id="14-2持久化数据结构"><a href="#14-2持久化数据结构" class="headerlink" title="14.2	持久化数据结构"></a>14.2	持久化数据结构</h4><h4 id="14-3Stream的延迟计算"><a href="#14-3Stream的延迟计算" class="headerlink" title="14.3	Stream的延迟计算"></a>14.3	Stream的延迟计算</h4><h4 id="14-4模式匹配"><a href="#14-4模式匹配" class="headerlink" title="14.4	模式匹配"></a>14.4	模式匹配</h4><h4 id="14-5杂项"><a href="#14-5杂项" class="headerlink" title="14.5	杂项"></a>14.5	杂项</h4><h3 id="第十五节面向对象和函数式编程的混合：Java8和Scala的比较"><a href="#第十五节面向对象和函数式编程的混合：Java8和Scala的比较" class="headerlink" title="第十五节	面向对象和函数式编程的混合：Java8和Scala的比较"></a>第十五节	面向对象和函数式编程的混合：Java8和Scala的比较</h3><h4 id="15-1Scala简介"><a href="#15-1Scala简介" class="headerlink" title="15.1	Scala简介"></a>15.1	Scala简介</h4><h4 id="15-2函数"><a href="#15-2函数" class="headerlink" title="15.2	函数"></a>15.2	函数</h4><h4 id="15-3类和trait"><a href="#15-3类和trait" class="headerlink" title="15.3	类和trait"></a>15.3	类和trait</h4>]]></content>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/2024/01/28/Docker/</url>
    <content><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h3 id="第一节Docker简介"><a href="#第一节Docker简介" class="headerlink" title="第一节	Docker简介"></a>第一节	Docker简介</h3><ul>
<li><strong>Docker 与传统虚拟化</strong><ul>
<li>传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程</li>
<li>容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便</li>
<li>每个容器之间互相隔离，每个容器有自己的文件系统 ，容器之间进程不会相互影响，能区分计算资源</li>
</ul>
</li>
<li><strong>Docker 三要素</strong><ul>
<li><strong>镜像</strong>：应用程序和配置依赖打包好形成一个可交付的运行环境，可以用来创建 <strong>Docker</strong> 容器，一个镜像可以创建很多容器</li>
<li><strong>容器</strong>：容器为镜像提供了一个标准的和隔离的运行环境，它可以被启动、开始、停止、删除，每个容器都是相互隔离的、保证安全的平台</li>
<li><strong>仓库</strong>：集中存放镜像文件的场所</li>
</ul>
</li>
<li><strong>Docker 工作架构</strong><ul>
<li>守护进程运行在主机上，通过 <strong>Socket</strong> 连接从客户端访问，守护进程从客户端接收命令并管理运行在主机上的容器</li>
<li>本地寻找镜像，如果不存在，通过远程仓库获取镜像</li>
<li>如果存在镜像，直接依据本地的镜像生成容器实例</li>
</ul>
</li>
</ul>
<h3 id="第二节Docker常用命令"><a href="#第二节Docker常用命令" class="headerlink" title="第二节	Docker常用命令"></a>第二节	Docker常用命令</h3><h3 id="2-1Docker帮助命令"><a href="#2-1Docker帮助命令" class="headerlink" title="2.1	Docker帮助命令"></a>2.1	Docker帮助命令</h3><ul>
<li><p><strong>常用帮助命令</strong></p>
<table>
<thead>
<tr>
<th align="center">操作</th>
<th align="center">命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">启动</td>
<td align="center">systemctl start docker</td>
</tr>
<tr>
<td align="center">停止</td>
<td align="center">systemctl stop docker</td>
</tr>
<tr>
<td align="center">重启</td>
<td align="center">systemctl restart docker</td>
</tr>
<tr>
<td align="center">查看状态</td>
<td align="center">systemctl status docker</td>
</tr>
<tr>
<td align="center">开机启动</td>
<td align="center">systemctl enable docker</td>
</tr>
<tr>
<td align="center">查看版本</td>
<td align="center">docker version</td>
</tr>
<tr>
<td align="center">查看信息</td>
<td align="center">docker info</td>
</tr>
<tr>
<td align="center">帮助命令</td>
<td align="center">docker [command] –help</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="2-2Docker镜像命令"><a href="#2-2Docker镜像命令" class="headerlink" title="2.2	Docker镜像命令"></a>2.2	Docker镜像命令</h3><ul>
<li><p><strong>常用镜像操作</strong></p>
<table>
<thead>
<tr>
<th align="center">镜像操作</th>
<th align="center">镜像命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">列出本地主机镜像</td>
<td align="center">docker images</td>
</tr>
<tr>
<td align="center">搜索镜像</td>
<td align="center">docker search [image]</td>
</tr>
<tr>
<td align="center">下载镜像</td>
<td align="center">docker pull [image:TAG]</td>
</tr>
</tbody></table>
</li>
<li><p><strong>删除镜像</strong></p>
<table>
<thead>
<tr>
<th align="center">镜像操作</th>
<th align="center">镜像命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">强制删除</td>
<td align="center">docker rmi -f</td>
</tr>
<tr>
<td align="center">根据名称删除</td>
<td align="center">docker rmi [image:TAG]</td>
</tr>
<tr>
<td align="center">根据 <strong>ID</strong> 删除</td>
<td align="center">docker rmi [imageID]</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="2-3Docker容器命令"><a href="#2-3Docker容器命令" class="headerlink" title="2.3	Docker容器命令"></a>2.3	Docker容器命令</h3><ul>
<li><p><strong>新建并启动容器</strong></p>
<table>
<thead>
<tr>
<th align="center">镜像操作</th>
<th align="center">镜像命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">指定容器名称</td>
<td align="center">docker run –name&#x3D;”hello” [container]</td>
</tr>
<tr>
<td align="center">后台启动容器</td>
<td align="center">docker run -d [container]</td>
</tr>
<tr>
<td align="center">前台启动容器</td>
<td align="center">docker run -it [container]</td>
</tr>
<tr>
<td align="center">指定端口映射</td>
<td align="center">docker run -p 8080:80 [container]</td>
</tr>
</tbody></table>
</li>
<li><p><strong>列举容器</strong></p>
<table>
<thead>
<tr>
<th align="center">镜像操作</th>
<th align="center">镜像命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">列举所有容器</td>
<td align="center">docker ps -a</td>
</tr>
<tr>
<td align="center">列举运行中的容器</td>
<td align="center">docker ps</td>
</tr>
</tbody></table>
</li>
<li><p><strong>启停容器</strong></p>
<table>
<thead>
<tr>
<th align="center">镜像操作</th>
<th align="center">镜像命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">启动容器</td>
<td align="center">docker start [container]</td>
</tr>
<tr>
<td align="center">重启容器</td>
<td align="center">docker restart [container]</td>
</tr>
<tr>
<td align="center">停止并退出容器</td>
<td align="center">exit</td>
</tr>
<tr>
<td align="center">退出不停止容器</td>
<td align="center">ctrl + p + q</td>
</tr>
<tr>
<td align="center">停止容器</td>
<td align="center">docker stop [container]</td>
</tr>
<tr>
<td align="center">前置停止容器</td>
<td align="center">docker kill [container]</td>
</tr>
</tbody></table>
</li>
<li><p><strong>删除容器</strong></p>
<table>
<thead>
<tr>
<th align="center">镜像操作</th>
<th align="center">镜像命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">强制删除</td>
<td align="center">docker rmi -f</td>
</tr>
<tr>
<td align="center">根据名称删除</td>
<td align="center">docker rm [container:TAG]</td>
</tr>
<tr>
<td align="center">根据 <strong>ID</strong> 删除</td>
<td align="center">docker rm [containerID]</td>
</tr>
</tbody></table>
</li>
<li><p><strong>容器进程</strong></p>
<table>
<thead>
<tr>
<th align="center">镜像操作</th>
<th align="center">镜像命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">查看日志</td>
<td align="center">docker logs [container]</td>
</tr>
<tr>
<td align="center">查看运行的进程</td>
<td align="center">docker top [container]</td>
</tr>
<tr>
<td align="center">查看内部细节</td>
<td align="center">docker inspect [container]</td>
</tr>
<tr>
<td align="center">进入运行的容器</td>
<td align="center">docker exec -it [container] &#x2F;bin&#x2F;bash</td>
</tr>
</tbody></table>
</li>
<li><p><strong>文件操作</strong></p>
<table>
<thead>
<tr>
<th align="center">镜像操作</th>
<th align="center">镜像命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">拷贝文件到容器</td>
<td align="center">docker cp [path] [container:path]</td>
</tr>
<tr>
<td align="center">拷贝文件到主机</td>
<td align="center">docker cp [container:path] [path]</td>
</tr>
<tr>
<td align="center">导入容器文件</td>
<td align="center">cat [file] | docker import - [container:TAG]</td>
</tr>
<tr>
<td align="center">导出容器文件</td>
<td align="center">docker export [container] &gt; [file]</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="第三节Docker镜像"><a href="#第三节Docker镜像" class="headerlink" title="第三节	Docker镜像"></a>第三节	Docker镜像</h3><h3 id="3-1镜像简介"><a href="#3-1镜像简介" class="headerlink" title="3.1	镜像简介"></a>3.1	镜像简介</h3><ul>
<li><p><strong>镜像简介</strong>：一种轻量级、可执行的独立软件包，把应用程序和配置依赖打包好形成一个可交付的运行环境，它包含运行某个软件所需的所有内容</p>
</li>
<li><p><strong>联合文件系统</strong>：<strong>Union</strong> 文件系统是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下，<strong>Union</strong> 文件系统是 <strong>Docker</strong> 镜像的基础，镜像可以通过分层来进行继承，基于基础镜像，可以制作各种具体的应用镜像</p>
</li>
<li><p><strong>docker 镜像加载原理</strong>：<strong>bootfs</strong> 主要包含 <strong>bootloader</strong> 和 <strong>kernel</strong>，<strong>bootloader</strong> 主要是引导加载 <strong>kernel</strong>，<strong>Linux</strong> 刚启动时会加载 <strong>bootfs</strong> 文件系统，在 <strong>Docker</strong> 镜像的最底层是引导文件系统 <strong>bootfs</strong>，包含 <strong>boot</strong> 加载器和内核，当 <strong>boot</strong> 加载完成之后整个内核就都在内存中了，此时内存的使用权已由 <strong>bootfs</strong> 转交给内核，此时系统也会卸载 <strong>bootfs</strong>，其中 <strong>rootfs</strong> 在 <strong>bootfs</strong> 之上，包含标准目录和文件</p>
</li>
<li><p><strong>分层结构的优点</strong>：共享资源，方便复用，多个镜像都从相同的 <strong>base</strong> 镜像构建而来，只需在磁盘上保存一份 <strong>base</strong> 镜像，内存中也只需加载一份 <strong>base</strong> 镜像，就可以为所有容器服务了，而且镜像的每一层都可以被共享</p>
</li>
</ul>
<h3 id="3-2镜像提交"><a href="#3-2镜像提交" class="headerlink" title="3.2	镜像提交"></a>3.2	镜像提交</h3><ul>
<li><p><strong>本地登录</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker login</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>提交容器到本地镜像</strong></p>
<ul>
<li><p><strong>添加作者名称</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker commit -a [author] [containerID] [image:TAG]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>添加描述信息</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker commit -m [message] [containerID] [image:TAG]</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>重新定义标签</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker tag [imageID] [username/repository:TAG]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>本地镜像发布到云服务器</strong></p>
<ul>
<li><p><strong>拉取镜像</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull [username/repository:TAG]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>推送镜像</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker push [username/repository:TAG]</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="第四节容器数据卷"><a href="#第四节容器数据卷" class="headerlink" title="第四节	容器数据卷"></a>第四节	容器数据卷</h3><h3 id="4-1容器数据卷"><a href="#4-1容器数据卷" class="headerlink" title="4.1	容器数据卷"></a>4.1	容器数据卷</h3><ul>
<li><strong>容器数据卷</strong>：将 <strong>docker</strong> 容器内的数据保存进宿主机的磁盘中，进行数据的持久化，完全独立于容器的生存周期，在容器删除时删除其挂载的数据卷</li>
<li><strong>容器数据卷的特点</strong><ul>
<li>数据卷可在容器之间共享或重用数据</li>
<li>卷中的更改可以直接实时生效</li>
<li>数据卷中的更改不会包含在镜像的更新中</li>
<li>数据卷的生命周期一直持续到没有容器使用它为止</li>
</ul>
</li>
</ul>
<h3 id="4-2添加数据卷"><a href="#4-2添加数据卷" class="headerlink" title="4.2	添加数据卷"></a>4.2	添加数据卷</h3><ul>
<li><p><strong>添加容器卷</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --privileged=<span class="literal">true</span> -v [hostPath:containerPath] [image]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查看挂载情况</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect [containerID]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>容器共享</strong></p>
<ul>
<li><strong>docker</strong> 容器修改，主机同步获得</li>
<li>主机修改，<strong>docker</strong> 容器同步获得</li>
<li><strong>docker</strong> 容器 <strong>stop</strong>，主机修改，<strong>docker</strong> 容器重启数据仍然同步</li>
</ul>
</li>
</ul>
<h3 id="4-3读写规则映射"><a href="#4-3读写规则映射" class="headerlink" title="4.3	读写规则映射"></a>4.3	读写规则映射</h3><ul>
<li><p><strong>读写规则</strong>：默认规则，既允许读文件，也允许写文件</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --privileged=<span class="literal">true</span> -v [hostPath:containerPath:rw] [image]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>只读规则</strong>：只允许读文件，不允许写文件</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --privileged=<span class="literal">true</span> -v [hostPath:containerPath:ro] [image]</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-4卷的继承和共享"><a href="#4-4卷的继承和共享" class="headerlink" title="4.4	卷的继承和共享"></a>4.4	卷的继承和共享</h3><ul>
<li><p><strong>卷的继承</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --privileged=<span class="literal">true</span> --volumes-from [fatherVolumes] --name=[childVolumes] [image]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>卷的共享</strong></p>
<ul>
<li>父子容器之间数据共享，删除父容器后，修改某一子容器会响应其兄弟元素</li>
<li>容器之间配置信息的传递，数据卷生命周期一直持续到没有容器使用它为止</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>JDBC</title>
    <url>/2024/01/28/JDBC/</url>
    <content><![CDATA[<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><h2 id="第一章JDBC技术概述"><a href="#第一章JDBC技术概述" class="headerlink" title="第一章	JDBC技术概述"></a>第一章	JDBC技术概述</h2><h3 id="1-1JDBC技术概念和理解"><a href="#1-1JDBC技术概念和理解" class="headerlink" title="1.1	JDBC技术概念和理解"></a>1.1	JDBC技术概念和理解</h3><ul>
<li><p><strong>JDBC概述</strong>：全称为 <strong>Java Database Connectivity</strong> 即 <strong>Java</strong> 连接数据库，<strong>JDBC</strong> 由 <strong>Java</strong> 语言的规范和各个数据库厂商的实现驱动(组成，是一种典型的面向接口编程，只需学习 <strong>JDBC</strong> 规范接口的方法，即可操作所有的数据库软件</p>
</li>
<li><p><strong>JDBC技术理解</strong></p>
<ul>
<li><strong>JDBC</strong> 是 <strong>Java</strong> 语言中访问关系型数据库的标准接口，它定义了一组 <strong>API</strong>，使得 <strong>Java</strong> 程序可以通过统一的方式连接、访问、操作不同的关系型数据库，<strong>JDBC API</strong> 提供了一套标准的接口，使得开发者可以使用 <strong>Java</strong> 语言来访问关系型数据库，而不必关心不同数据库之间的差异</li>
<li><strong>JDBC</strong> 有两个核心组件：<strong>JDBC</strong> 驱动程序和 <strong>JDBC API</strong>，<strong>JDBC</strong> 驱动程序通过提供特定数据库的实现，将 <strong>JDBC API</strong> 转换成数据库可以理解的命令，<strong>JDBC API</strong> 包括了一系列 <strong>Java</strong> 类和接口，使得开发者可以使用 <strong>Java</strong> 语言来执行 <strong>SQL</strong> 查询、更新和管理数据库连接等操作</li>
</ul>
</li>
<li><p><strong>JDBC连接数据库步骤</strong></p>
<ul>
<li>加载 <strong>JDBC</strong> 驱动程序：使用 <strong>Class.forName()</strong> 方法加载特定数据库的 <strong>JDBC</strong> 驱动程序</li>
<li>创建数据库连接：使用 <strong>DriverManager.getConnection()</strong> 方法创建一个数据库连接对象，该方法需要指定数据库的连接字符串、用户名和密码等信息</li>
<li>创建 <strong>Statement</strong> 对象：使用数据库连接对象创建一个 <strong>Statement</strong> 对象，用于执行 <strong>SQL</strong> 查询和更新操作</li>
<li>执行 <strong>SQL</strong> 语句：使用 <strong>Statement</strong> 对象执行 <strong>SQL</strong> 语句，包括查询、更新和删除等操作</li>
<li>处理结果集：如果执行查询操作，则需要使用 <strong>ResultSet</strong> 对象处理查询结果</li>
<li>关闭数据库连接：使用数据库连接对象的 <strong>close()</strong> 方法关闭数据库连接</li>
</ul>
</li>
</ul>
<h3 id="1-2JDBC核心API和使用路线"><a href="#1-2JDBC核心API和使用路线" class="headerlink" title="1.2	JDBC核心API和使用路线"></a>1.2	JDBC核心API和使用路线</h3><ul>
<li><p><strong>JDBC 技术组成</strong></p>
<ul>
<li><strong>JDK</strong> 下 <strong>JDBC</strong> 规范接口, 存储在 <strong>java.sql</strong> 和 <strong>javax.sql</strong> 包中的 <strong>API</strong>：为了项目代码的可移植性，可维护性，<strong>SUN</strong> 公司从最初就制定了 <strong>Java</strong> 程序连接各种数据库的统一接口规范，不管是连接哪一种 <strong>DBMS</strong> 软件，<strong>Java</strong> 代码可以保持一致性</li>
<li>各个数据库厂商提供的驱动 <strong>jar</strong> 包：因为各个数据库厂商的 <strong>DBMS</strong> 软件各有不同，那么内部如何通过 <strong>sql</strong> 实现增、删、改、查等管理数据，只有这个数据库厂商自己更清楚，因此把接口规范的实现交给各个数据库厂商自己实现</li>
</ul>
</li>
<li><p><strong>涉及具体核心类和接口</strong></p>
<ul>
<li><strong>DriverManager</strong>：将第三方数据库厂商的实现驱动 <strong>jar</strong> 注册到程序中，可以根据数据库连接信息获取 <strong>connection</strong></li>
<li><strong>Connection</strong>：和数据库建立的连接,在连接对象上,可以多次执行数据库 <strong>CURD</strong> 动作，可以获取 <strong>statement</strong> 和 <strong>preparedstatement</strong>，<strong>callablestatement</strong> 对象</li>
<li><strong>Statement</strong> 、 <strong>PreparedStatement</strong> 、 <strong>CallableStatement</strong>：具体发送 <strong>SQL</strong> 语句到数据库管理软件的对象，不同发送方式稍有不同</li>
<li><strong>Result</strong>：抽象成数据库的查询结果表，存储 <strong>DQL</strong> 查询数据库结果的对象，需要我们进行解析，获取具体的数据库数据</li>
</ul>
</li>
<li><p><strong>JDBC API 使用路线</strong></p>
<ul>
<li>静态 <strong>SQL</strong> 路线：DriverManager，Connection，Statement，Result</li>
<li>预编译 <strong>SQL</strong> 路线：DriverManager，Connection，PreparedStatement，Result</li>
<li>执行标准存储过 <strong>SQL</strong> 路线：DriverManager，Collection，CallableStatement，Result</li>
</ul>
</li>
</ul>
<h2 id="第二章JDBC核心API"><a href="#第二章JDBC核心API" class="headerlink" title="第二章	JDBC核心API"></a>第二章	JDBC核心API</h2><h3 id="2-1基于statement使用方式"><a href="#2-1基于statement使用方式" class="headerlink" title="2.1	基于statement使用方式"></a>2.1	基于statement使用方式</h3><ul>
<li><p><strong>基本步骤</strong></p>
<ul>
<li><p>注册驱动</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DriverManager.registerDriver(<span class="keyword">new</span> <span class="title class_">Driver</span>());       </span><br></pre></td></tr></table></figure>
</li>
<li><p>获取连接</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/my_jdbc&quot;</span>, <span class="string">&quot;MYXH&quot;</span>,<span class="string">&quot;520.ILY!&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建发送 <strong>SQL</strong> 语句对象</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();        </span><br></pre></td></tr></table></figure>
</li>
<li><p>发送 <strong>SQL</strong> 语句，并获取返回结果</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_user;&quot;</span>;</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br></pre></td></tr></table></figure>
</li>
<li><p>结果集解析</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">account</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;account&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">nickname</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;nickname&quot;</span>);</span><br><span class="line">    System.out.println(id + <span class="string">&quot;--&quot;</span> + account + <span class="string">&quot;--&quot;</span> + password + <span class="string">&quot;--&quot;</span> + nickname);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>资源关闭</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resultSet.close();</span><br><span class="line">statement.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>方式缺陷</strong></p>
<ul>
<li><strong>SQL</strong> 语句需要字符串拼接，比较麻烦</li>
<li>只能拼接字符串类型，其他的数据库类型无法处理</li>
<li>可能发生注入攻击</li>
</ul>
</li>
</ul>
<h3 id="2-2基于preparedStatement使用方式"><a href="#2-2基于preparedStatement使用方式" class="headerlink" title="2.2	基于preparedStatement使用方式"></a>2.2	基于preparedStatement使用方式</h3><ul>
<li><p><strong>基本步骤</strong></p>
<ul>
<li><p>注册驱动</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取连接</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql:///my_jdbc&quot;</span>, <span class="string">&quot;MYXH&quot;</span>, <span class="string">&quot;520.ILY!&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建 <strong>Statement</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 静态</span></span><br><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement(<span class="string">&quot;insert into t_user(account, password, nickname) values(&quot;</span>test<span class="string">&quot;, &quot;</span>test<span class="string">&quot;, &quot;</span>测试<span class="string">&quot;);&quot;</span>);</span><br><span class="line"><span class="comment">// 预编译</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">preparedstatement</span> <span class="operator">=</span> connection.preparedStatement(<span class="string">&quot;insert into t_user(account, password, nickname) values(?, ?, ?);&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>占位符赋值</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">preparedStatement.setObject(<span class="number">1</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">preparedStatement.setObject(<span class="number">2</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">preparedStatement.setObject(<span class="number">3</span>, <span class="string">&quot;测试&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>发送 <strong>SQL</strong> 语句获取结果</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> executeUpdate();    <span class="comment">//非 DQL</span></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> executeQuery();    <span class="comment">// DQL</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>查询结果集解析</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 移动光标指向行数据: next();</span></span><br><span class="line"><span class="comment">// if(next()) &#123;&#125; 或 while(next()) &#123;&#125;</span></span><br><span class="line"><span class="comment">// 获取列的数据即可, get类型(int 列的下角标 从1开始 或 int 列的label (别名或者列名))</span></span><br><span class="line"><span class="comment">// 获取列的信息: getMetadata();</span></span><br><span class="line"><span class="comment">// ResultsetMetaData 对象包含的就是列的信息</span></span><br><span class="line"><span class="comment">// getColumnCount(); 或 getCloumnLebal(index)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭资源</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resultSet.close();</span><br><span class="line">preparedStatement.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第三章JDBC拓展提升"><a href="#第三章JDBC拓展提升" class="headerlink" title="第三章	JDBC拓展提升"></a>第三章	JDBC拓展提升</h2><h3 id="3-1自增长主键回显显示"><a href="#3-1自增长主键回显显示" class="headerlink" title="3.1	自增长主键回显显示"></a>3.1	自增长主键回显显示</h3><ul>
<li><p><strong>功能需求</strong></p>
<ul>
<li><strong>主键回显</strong>：<strong>Java</strong> 程序获取插入数据时 <strong>MySQL</strong> 维护自增长维护的主键 <strong>id</strong> 值</li>
<li><strong>作用</strong>：在多表关联插入数据时，一般主表的主键都是自动生成的，所以在插入数据之前无法知道这条数据的主键，但是从表需要在插入数据之前就绑定主表的主键，这是可以使用主键回显技术</li>
</ul>
</li>
<li><p><strong>功能实现</strong></p>
<ul>
<li><p>注册驱动</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取连接</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql:///my_jdbc?user=MYXH&amp;password=520.ILY!&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 <strong>SQL</strong> 语句</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_user(account, password, nickname) values (?, ?, ?);&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建 <strong>PreparebdStatement</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql,PreparedStatement.RETURN_GENERATED_KEYS);</span><br></pre></td></tr></table></figure>
</li>
<li><p>占位符赋值</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">preparedStatement.setObject(<span class="number">1</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">preparedStatement.setObject(<span class="number">2</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">preparedStatement.setObject(<span class="number">3</span>, <span class="string">&quot;测试员&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>发送 <strong>SQL</strong> 语句,并且获取结果</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> preparedStatement.executeUpdate();</span><br></pre></td></tr></table></figure>
</li>
<li><p>结果解析</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (rows &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;数据插入成功！&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以获取回显的主键</span></span><br><span class="line">    <span class="comment">// 获取 PrepareStatement 装主键的结果集对象, 一行一列, id = 值</span></span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">generatedKeys</span> <span class="operator">=</span> preparedStatement.getGeneratedKeys();</span><br><span class="line">    generatedKeys.next();   <span class="comment">// 移动下光标</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> generatedKeys.getInt(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;id = &quot;</span> + id);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;数据插入失败！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭资源</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">preparedStatement.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="3-2批量数据插入性能提升"><a href="#3-2批量数据插入性能提升" class="headerlink" title="3.2	批量数据插入性能提升"></a>3.2	批量数据插入性能提升</h3><ul>
<li><p><strong>功能需求</strong></p>
<ul>
<li>批量数据插入优化</li>
<li>提升大量数据插入效率</li>
</ul>
</li>
<li><p><strong>功能实现</strong></p>
<ul>
<li><p>注册驱动</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取连接</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql:///my_jdbcrewriteBatchedStatements=true&quot;</span>, <span class="string">&quot;MYXH&quot;</span>, <span class="string">&quot;520.ILY!&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 <strong>SQL</strong> 语句</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_user(account, password, nickname) values (?, ?, ?)&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建 <strong>PreparedStatement</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br></pre></td></tr></table></figure>
</li>
<li><p>占位符赋值</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10000</span>; i++)&#123;</span><br><span class="line">    preparedStatement.setObject(<span class="number">1</span>, <span class="string">&quot;BatchTest&quot;</span> + i);</span><br><span class="line">    preparedStatement.setObject(<span class="number">2</span>, <span class="string">&quot;BatchTest&quot;</span> + i);</span><br><span class="line">    preparedStatement.setObject(<span class="number">3</span>, <span class="string">&quot;批量测试员&quot;</span> + i);</span><br><span class="line">    preparedStatement.addBatch();   <span class="comment">// 不执行, 追加到values后面</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>发送 <strong>SQL</strong> 语句，并且获取结果</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">preparedStatement.executeBatch();   <span class="comment">// 执行批量操作</span></span><br><span class="line"><span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br></pre></td></tr></table></figure>
</li>
<li><p>结果解析</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;执行 10000 次数据插入消耗的时间：&quot;</span> + (endTime - startTime) + <span class="string">&quot;ms&quot;</span>);       </span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭资源</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">preparedStatement.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="3-3JDBC中数据库事务实现"><a href="#3-3JDBC中数据库事务实现" class="headerlink" title="3.3	JDBC中数据库事务实现"></a>3.3	JDBC中数据库事务实现</h3><ul>
<li><p><strong>事务概念</strong></p>
<ul>
<li>数据库事务就是一种 <strong>SQL</strong> 语句执行的缓存机制，不会单条执行完毕就更新数据库数据，最终根据缓存内的多条语句执行结果统一判定</li>
<li>一个事务内所有语句都成功及事务成功，我们可以触发 <strong>commit</strong> 提交事务来结束事务，更新数据</li>
<li>一个事务内任意一条语句失败，及事务失败，我们可以触发 <strong>rollback</strong> 回滚结束事务，数据回到事务之前状态</li>
</ul>
</li>
<li><p><strong>事务特性</strong></p>
<ul>
<li><strong>原子性</strong>：事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生</li>
<li><strong>一致性</strong>：事务必须使数据库从一个一致性状态变换到另外一个一致性状态</li>
<li><strong>隔离性</strong>：一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰</li>
<li><strong>持久性</strong>：一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响</li>
</ul>
</li>
<li><p><strong>JDBC事务管理</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    connection.setAutoCommit(<span class="literal">false</span>);    <span class="comment">//关闭自动提交</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据库动作</span></span><br><span class="line">    <span class="comment">//statement, 单一的数据库动作 CURD</span></span><br><span class="line"></span><br><span class="line">    connection.commit();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span>(Execption e)&#123;</span><br><span class="line">    connection.rollback();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>JDBC事务实现示例</strong></p>
<ul>
<li><p><strong>BankService</strong> 类</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BankDao</span> <span class="variable">bankDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BankDao</span>();</span><br><span class="line"><span class="comment">// 一个事务的最基本要求, 必须是同一个连接对象 connection</span></span><br><span class="line"><span class="comment">// 一个转账方法属于一个事务〔存钱、取钱)</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql:///my_jdbc?user=MYXH&amp;password=520.ILY!&quot;</span>);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    connection.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">    </span><br><span class="line">    bankDao.add(addAccount, money, connection);</span><br><span class="line">    System.out.println(<span class="string">&quot;----------&quot;</span>);</span><br><span class="line">    bankDao.sub(subAccount, money, connection);</span><br><span class="line"></span><br><span class="line">    connection.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">    connection.rollback();</span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">&#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>BankDao</strong> 类</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_bank set money = money + ? where account = ? ;&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">preparedStatement.setObject(<span class="number">1</span>, money);</span><br><span class="line">preparedStatement.setObject(<span class="number">2</span>, account);</span><br><span class="line">preparedStatement.executeUpdate();</span><br><span class="line"></span><br><span class="line">preparedStatement.close();</span><br><span class="line">System.out.println(<span class="string">&quot;存钱成功！&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第四章Druid连接池技术使用"><a href="#第四章Druid连接池技术使用" class="headerlink" title="第四章	Druid连接池技术使用"></a>第四章	Druid连接池技术使用</h2><h3 id="4-1数据库连接池作用"><a href="#4-1数据库连接池作用" class="headerlink" title="4.1	数据库连接池作用"></a>4.1	数据库连接池作用</h3><ul>
<li><p><strong>不使用连接池的缺点</strong></p>
<ul>
<li>不使用数据库连接池，每次都通过 <strong>DriverManager</strong> 获取新连接，用完直接抛弃断开，连接的利用率太低，太浪费</li>
<li>对于数据库服务器来说，压力太大，我们数据库服务器和 <strong>Java</strong> 程序对连接数也无法控制，很容易导致数据库服务器崩溃</li>
</ul>
</li>
<li><p><strong>管理连接</strong></p>
<ul>
<li>可以建立一个连接池以容纳一定数量的连接对象，一开始我们可以先替用户先创建好一些连接对象，等用户要拿连接对象时，就直接从池中拿，不用新建了，这样也可以节省时间，然后用户用完后，放回去，别人可以接着用</li>
<li>可以提高连接的使用率，当池中的现有的连接都用完了，那么连接池可以向服务器申请新的连接放到池中</li>
<li>直到池中的连接达到最大连接数，就不能在申请新的连接了，如果没有拿到连接的用户只能等待</li>
</ul>
</li>
</ul>
<h3 id="4-2常见数据库连接池产品和对比"><a href="#4-2常见数据库连接池产品和对比" class="headerlink" title="4.2	常见数据库连接池产品和对比"></a>4.2	常见数据库连接池产品和对比</h3><ul>
<li><p><strong>数据库连接池</strong>：使用 <strong>javax.sql.DataSource</strong> 接口进行规范，所有的第三方连接池都实现此接口，自行添加具体实现，所有连接池获取连接的和回收连接方法都一样，不同的只有性能和扩展功能</p>
</li>
<li><p><strong>数据库连接池产品对比</strong></p>
<table>
<thead>
<tr>
<th align="center">数据库连接池</th>
<th align="center">特点</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>DBCP</strong></td>
<td align="center">依赖于 <strong>common-pool</strong></td>
<td align="center"><strong>Apache</strong> 提供的数据库连接池，速度相对 <strong>c3p0</strong> 较快，但因自身存在 <strong>BUG</strong></td>
</tr>
<tr>
<td align="center"><strong>C3P0</strong></td>
<td align="center">历史久远，代码逻辑复杂，且不易维护</td>
<td align="center">一个开源组织提供的一个数据库连接池，速度相对较慢，稳定性还可以</td>
</tr>
<tr>
<td align="center"><strong>Proxool</strong></td>
<td align="center">非常简单的移植到现存的代码中，可以透明地为你现存的 <strong>JDBC</strong> 驱动程序增加连接池功能</td>
<td align="center"><strong>sourceforge</strong> 下的一个开源项目数据库连接池，有监控连接池状态的功能，稳定性较 <strong>c3p0</strong> 差一点</td>
</tr>
<tr>
<td align="center"><strong>Druid</strong></td>
<td align="center">阿里开源，功能全面</td>
<td align="center">阿里提供的数据库连接池，据说是集 <strong>DBCP</strong> 、<strong>C3P0</strong> 、<strong>Proxool</strong> 优点于一身 的数据库连接池</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="4-3Druid连接池使用"><a href="#4-3Druid连接池使用" class="headerlink" title="4.3	Druid连接池使用"></a>4.3	Druid连接池使用</h3><ul>
<li><p><strong>硬编码方式</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 连接池对象</span></span><br><span class="line"><span class="type">DruidDataSource</span> <span class="variable">druidDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line"><span class="comment">// 设置参数</span></span><br><span class="line">druidDataSource.setDriverClassName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">druidDataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/my_jdbc&quot;</span>);</span><br><span class="line">druidDataSource.setUsername(<span class="string">&quot;MYXH&quot;</span>);</span><br><span class="line">druidDataSource.setPassword(<span class="string">&quot;520.ILY!&quot;</span>);</span><br><span class="line">druidDataSource.setInitialSize(<span class="number">5</span>);    <span class="comment">// 初始化的连接数量</span></span><br><span class="line">druidDataSource.setMaxActive(<span class="number">10</span>);    <span class="comment">// 最大的连接数量</span></span><br><span class="line"><span class="comment">// 获取连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> druidDataSource.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据库 CURD</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 回收连接</span></span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>软编码方式</strong></p>
<ul>
<li><p>配置文件</p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># key = value =&gt; java Properties 读取 (key 和 value)</span></span><br><span class="line"><span class="comment"># druid 配置 的key 固定命名</span></span><br><span class="line"><span class="comment"># druid 连接池需要的配置参数, key固定命名</span></span><br><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql:///my_jdbc</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">MYXH</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">520.ILY!</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">10</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>声明代码</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读取外部配置的文件 Properties</span></span><br><span class="line"><span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"><span class="comment">//使用类加载器提供的方法</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> DruidUsePart.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>);</span><br><span class="line">properties.load(inputStream);</span><br><span class="line"><span class="comment">//使用连接池的工具类的工场模式, 创建连接池</span></span><br><span class="line"><span class="type">DataSource</span> <span class="variable">druidDataSource</span> <span class="operator">=</span> DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> druidDataSource.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据库 CURD</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 回收连接</span></span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>Druid配置信息</strong></p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>name</strong></td>
<td align="center">如果存在多个数据源，监控的时候可以通过名字来区分开来，如果没有配置，将会生成一个名字，格式为 <strong>DataSource-” + System.identityHashCode(this)</strong></td>
</tr>
<tr>
<td align="center"><strong>jdbcUrl</strong></td>
<td align="center">连接数据库的 <strong>url</strong>，不同数据库不一样，例如：mysql : jdbc:mysql:&#x2F;&#x2F;10.20.153.104:3306&#x2F;druid2 oracle : jdbc:oracle:thin:@10.20.149.85:1521:ocnauto</td>
</tr>
<tr>
<td align="center"><strong>username</strong></td>
<td align="center">连接数据库的用户名</td>
</tr>
<tr>
<td align="center"><strong>password</strong></td>
<td align="center">连接数据库的密码，如果你不希望密码直接写在配置文件中，可以使用 <strong>ConfigFilter</strong></td>
</tr>
<tr>
<td align="center"><strong>initialSize</strong></td>
<td align="center">初始化时建立物理连接的个数，初始化发生在显示调用 <strong>init</strong> 方法，或者第一次 <strong>getConnection</strong> 时</td>
</tr>
<tr>
<td align="center"><strong>maxActive</strong></td>
<td align="center">最大连接池数量</td>
</tr>
<tr>
<td align="center"><strong>minIdle</strong></td>
<td align="center">最小连接池数量</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="第五章JDBC使用优化以及工具类封装"><a href="#第五章JDBC使用优化以及工具类封装" class="headerlink" title="第五章	JDBC使用优化以及工具类封装"></a>第五章	JDBC使用优化以及工具类封装</h3><h3 id="5-1JDBC工具类封装Version1-0"><a href="#5-1JDBC工具类封装Version1-0" class="headerlink" title="5.1	JDBC工具类封装Version1.0"></a>5.1	JDBC工具类封装Version1.0</h3><ul>
<li><p><strong>工具类封装</strong>：封装一个工具类，内部包含连接池对象，同时对外提供连接的方法和回收连接的方法</p>
<ul>
<li><p>配置文件</p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># key = value =&gt; java Properties 读取 (key 和 value)</span></span><br><span class="line"><span class="comment"># druid 配置 的key 固定命名</span></span><br><span class="line"><span class="comment"># druid 连接池需要的配置参数, key固定命名</span></span><br><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql:///my_jdbc</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">MYXH</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">520.ILY!</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">10</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>声明代码</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcUtilsVersion1</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DataSource dataSource;    <span class="comment">// 连接池对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">// 初始化连接池对象</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> JdbcUtilsVersion1.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>);</span><br><span class="line">        properties.load(inputStream);</span><br><span class="line">        dataSource = DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException&#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">freeConnection</span><span class="params">(Connection connection)</span> <span class="keyword">throws</span> SQLException&#123;</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="5-2JDBC工具类封装Version2-0"><a href="#5-2JDBC工具类封装Version2-0" class="headerlink" title="5.2	JDBC工具类封装Version2.0"></a>5.2	JDBC工具类封装Version2.0</h3><ul>
<li><p><strong>工具类封装</strong>：优化工具类，考虑事务的情况下，如何一个线程的不同方法获取同一个连接</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcUtilsVersion2</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DataSource dataSource;    <span class="comment">// 连接池对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Connection&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">// 初始化连接池对象</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> JdbcUtilsVersion2.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>);</span><br><span class="line">        properties.load(inputStream);</span><br><span class="line">        dataSource = DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException&#123;</span><br><span class="line">        <span class="comment">// 线程本地变量中是否存在</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> threadLocal.get();</span><br><span class="line">        <span class="comment">// 第一次没有</span></span><br><span class="line">        <span class="keyword">if</span> (connection == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 线程本地变量没有, 连接池获取</span></span><br><span class="line">            connection = dataSource.getConnection();</span><br><span class="line">            threadLocal.set(connection);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">freeConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> threadLocal.get();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="literal">null</span>)&#123;</span><br><span class="line">            threadLocal.remove();    <span class="comment">// 清空线程本地变量数据</span></span><br><span class="line">            connection.setAutoCommit(<span class="literal">true</span>);    <span class="comment">// 事务状态回归 false</span></span><br><span class="line">            connection.close();    <span class="comment">// 回收到连接池</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-3高级应用层封装BaseDao"><a href="#5-3高级应用层封装BaseDao" class="headerlink" title="5.3	高级应用层封装BaseDao"></a>5.3	高级应用层封装BaseDao</h3><ul>
<li><p><strong>应用层封装</strong>：每一个数据表都应该有一个对应的 <strong>DAO</strong> 接口及其实现类，发现对所有表的操作（增、删、改、查）代码重复度很高，所以可以抽取公共代码，给这些 <strong>DAO</strong> 的实现类可以抽取一个公共的父类，我们称为 <strong>BaseDao</strong></p>
</li>
<li><p><strong>代码示例</strong></p>
<ul>
<li><p><strong>BaseDao</strong> 类</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseDao</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">executeUpdate</span><span class="params">(String sql, Object... params)</span> <span class="keyword">throws</span> SQLException&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JdbcUtilsVersion2.getConnection();</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= params.length; i++)&#123;</span><br><span class="line">            preparedStatement.setObject(i, params[i - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> preparedStatement.executeUpdate();</span><br><span class="line">        preparedStatement.close();</span><br><span class="line">        <span class="keyword">if</span> (connection.getAutoCommit())&#123;</span><br><span class="line">            JdbcUtilsVersion2.freeConnection();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rows;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">executeQuery</span><span class="params">(Class&lt;T&gt; clazz, String sql, Object... params)</span> <span class="keyword">throws</span> SQLException, InstantiationException, IllegalAccessException, NoSuchFieldException, NoSuchMethodException, InvocationTargetException&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JdbcUtilsVersion2.getConnection();</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">        <span class="keyword">if</span> (params != <span class="literal">null</span> &amp;&amp; params.length != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= params.length; i++)&#123;</span><br><span class="line">                preparedStatement.setObject(i, params[i - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> preparedStatement.executeQuery();</span><br><span class="line">        List&lt;T&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">ResultSetMetaData</span> <span class="variable">metaData</span> <span class="operator">=</span> resultSet.getMetaData();</span><br><span class="line">        String[] columnNames = <span class="keyword">new</span> <span class="title class_">String</span>[metaData.getColumnCount()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= columnNames.length; i++)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">columnName</span> <span class="operator">=</span> metaData.getColumnLabel(i);</span><br><span class="line">            Field field;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                field = clazz.getDeclaredField(columnName);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (NoSuchFieldException e)&#123;</span><br><span class="line">                <span class="comment">// 如果找不到同名属性, 则尝试将列名转换成驼峰命名法格式的属性名</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">propertyName</span> <span class="operator">=</span> StringUtils.toCamelCase(columnName);</span><br><span class="line">                field = clazz.getDeclaredField(propertyName);</span><br><span class="line">            &#125;</span><br><span class="line">            columnNames[i - <span class="number">1</span>] = field.getName();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">            <span class="comment">// 一行数据对应一个 T 类型的对象</span></span><br><span class="line">            <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> clazz.getDeclaredConstructor().newInstance();    <span class="comment">// 调用类的无参构造函数实例化对象</span></span><br><span class="line">            <span class="comment">// 自动遍历列: 注意, 要从 1 开始, 并且小于等于总列数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= columnNames.length; i++)&#123;</span><br><span class="line">                <span class="comment">// 对象的属性值</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> resultSet.getObject(i);</span><br><span class="line">                <span class="comment">// 获取属性名称</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">propertyName</span> <span class="operator">=</span> metaData.getColumnLabel(i);</span><br><span class="line">                <span class="comment">// 反射给对象的属性值赋值</span></span><br><span class="line">                Field field;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    field = clazz.getDeclaredField(propertyName);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (NoSuchFieldException e)&#123;</span><br><span class="line">                    <span class="comment">// 如果找不到同名属性, 则尝试将属性名转换成下划线分隔符格式的列名</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">columnName</span> <span class="operator">=</span> StringUtils.toUnderscoreCase(propertyName);</span><br><span class="line">                    field = clazz.getDeclaredField(columnName);</span><br><span class="line">                &#125;</span><br><span class="line">                field.setAccessible(<span class="literal">true</span>);    <span class="comment">// 属性可以设置, 取消 private 的修饰限制</span></span><br><span class="line">                field.set(t, value);</span><br><span class="line">            &#125;</span><br><span class="line">            list.add(t);</span><br><span class="line">        &#125;</span><br><span class="line">        resultSet.close();</span><br><span class="line">        preparedStatement.close();</span><br><span class="line">        <span class="keyword">if</span> (connection.getAutoCommit())&#123;</span><br><span class="line">            <span class="comment">// 没有事务, 可以关闭</span></span><br><span class="line">            JdbcUtilsVersion2.freeConnection();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>User</strong> 类</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String account;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String nickname;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, account=&#x27;&quot;</span> + account + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, nickname=&#x27;&quot;</span> + nickname + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>PreparedStatementCurdPart</strong> 类</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PreparedStatementCurdPart</span> <span class="keyword">extends</span> <span class="title class_">BaseDao</span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span> <span class="keyword">throws</span> SQLException&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_user(account, password, nickname) values(?, ?, ?);&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> executeUpdate(sql, <span class="string">&quot;DaoTest1&quot;</span>, <span class="string">&quot;test1&quot;</span>, <span class="string">&quot;Dao测试员1&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;rows = &quot;</span> + rows);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span> <span class="keyword">throws</span> SQLException&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_user set nickname = ? where id = ?;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> executeUpdate(sql, <span class="string">&quot;新的测试员&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;rows = &quot;</span> + rows);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span> <span class="keyword">throws</span> SQLException&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from t_user where id = ?;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> executeUpdate(sql, <span class="number">20004</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;rows = &quot;</span> + rows);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelect</span><span class="params">()</span> <span class="keyword">throws</span> SQLException, NoSuchFieldException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchMethodException&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id, account, password, nickname from t_user;&quot;</span>;</span><br><span class="line">        List&lt;User&gt; list = executeQuery(User.class, sql);</span><br><span class="line">        System.out.println(<span class="string">&quot;list = &quot;</span> + list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Bank</strong> 类</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bank</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String account;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal money;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Bank&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, account=&#x27;&quot;</span> + account + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, money=&quot;</span> + money +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>JavaWeb</title>
    <url>/2024/01/28/JavaWeb/</url>
    <content><![CDATA[<h1 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h1><h2 id="第一节Servlet简介"><a href="#第一节Servlet简介" class="headerlink" title="第一节	Servlet简介"></a>第一节	Servlet简介</h2><ul>
<li><strong>Servlet简介</strong>：<strong>Server Applet</strong> 的简称，即服务程序，它是由 <strong>Sun</strong> 公司提供的一门用于开发动态 <strong>Web</strong> 资源的技术，用 <strong>Java</strong> 编写的服务器端程序，其主要功能在于交互式地浏览和修改数据，生成动态 <strong>Web</strong> 内容，从实现上讲，<strong>Servlet</strong> 可以响应任何类型的请求，但绝大多数情况下 <strong>Servlet</strong> 只用来扩展基于 <strong>HTTP</strong> 协议的 <strong>Web</strong> 服务器</li>
<li><strong>Idea 创建 Servlet项目流程</strong><ul>
<li>创建 <strong>Java</strong> 项目</li>
<li>添加 <strong>Web Application</strong> 框架支持</li>
<li>在 <strong>WEB-INF</strong> 目录下添加 <strong>classes</strong> 目录和 <strong>lib</strong> 目录，并在项目结构中配置为输出路径</li>
<li>复制 <strong>servelet-api.jar</strong>包 和 <strong>Tomcat-api.jar</strong> 包到 <strong>lib</strong> 目录，并在项目结构中导入</li>
<li>在构建配置中配置 <strong>Tomcat</strong> 服务器，并部署项目</li>
</ul>
</li>
</ul>
<h2 id="第二节Servlet-API概述"><a href="#第二节Servlet-API概述" class="headerlink" title="第二节	Servlet API概述"></a>第二节	Servlet API概述</h2><ul>
<li><p><strong>Servlet API</strong> 主要包括</p>
<ul>
<li><strong>jakarta.servlet.Servlet</strong>：其中包含定义 <strong>servlet</strong> 和 <strong>servlet</strong> 容器之间契约的类和接口</li>
<li>**jakarta.servlet.http.***：其中包含定义 <strong>HTTP Servlet</strong> 和 <strong>Servlet</strong> 容器之间的关系</li>
<li><em>*jakarta.servlet.annotation.<em><strong>：其中包含标注</strong>servlet</em>*，</em>*Filter<strong>，</strong>Listener**的标注</li>
<li>**jakarta.servlet.descriptor.**：其中包含提供程序化登录 <strong>Web</strong> 应用程序的配置信息的类型</li>
</ul>
</li>
<li><p><strong>Servlet</strong>：核心接口，被具体的类实现以达到不同的功能</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>init()</strong></td>
<td align="center">初始化 <strong>Servlet</strong> 类</td>
</tr>
<tr>
<td align="center"><strong>getServletConfig()</strong></td>
<td align="center">返回 <strong>Servlet</strong> 配置类</td>
</tr>
<tr>
<td align="center"><strong>service()</strong></td>
<td align="center">向对象提供服务</td>
</tr>
<tr>
<td align="center"><strong>getServletInfo()</strong></td>
<td align="center">返回一个描述字符串</td>
</tr>
<tr>
<td align="center"><strong>destroy()</strong></td>
<td align="center">在对象销毁前关闭资源</td>
</tr>
</tbody></table>
</li>
<li><p><strong>ServletConfig</strong>：在<strong>Web</strong> 服务器在加载 <strong>Servlet</strong> 时，用于获取 <strong>Servlet</strong> 的初始化参数，以及获取 <strong>Servlet</strong> 的配置信息，侧重于某个 <strong>Servlet</strong> 实例</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>getInitParameter()</strong></td>
<td align="center">根据参数名获取 <strong>Servlet</strong> 的初始化参数值</td>
</tr>
<tr>
<td align="center"><strong>getInitParameterNames()</strong></td>
<td align="center">获取所有初始化参数的参数名的枚举</td>
</tr>
<tr>
<td align="center"><strong>getServletContext()</strong></td>
<td align="center">获取 <strong>Servlet</strong> 上下文对象，可以用于获取更全局的配置信息</td>
</tr>
<tr>
<td align="center"><strong>getServletName()</strong></td>
<td align="center">获取 <strong>Servlet</strong> 的名称</td>
</tr>
</tbody></table>
</li>
<li><p><strong>ServletRequest</strong>：定义了与 <strong>HTTP</strong> 请求相关的属性和方法，可以用于获取请求的信息和数据</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>getParameter()</strong></td>
<td align="center">根据参数名获取请求的参数值</td>
</tr>
<tr>
<td align="center"><strong>getParameterNames()</strong></td>
<td align="center">获取所有请求参数的参数名的枚举</td>
</tr>
<tr>
<td align="center"><strong>getParameterValues()</strong></td>
<td align="center">根据参数名获取请求参数的多个值</td>
</tr>
<tr>
<td align="center"><strong>getParameterMap()</strong></td>
<td align="center">获取所有请求参数的 <strong>Map</strong>，其中键为参数名，值为参数值数组</td>
</tr>
<tr>
<td align="center"><strong>getReader()</strong></td>
<td align="center">获取请求体的字符输入流，可以用于读取 <strong>POST</strong> 请求的内容</td>
</tr>
<tr>
<td align="center"><strong>getContentLength()</strong></td>
<td align="center">获取请求体的字节数</td>
</tr>
<tr>
<td align="center"><strong>getContentType()</strong></td>
<td align="center">获取请求体的内容类型</td>
</tr>
<tr>
<td align="center"><strong>getMethod()</strong></td>
<td align="center">获取 <strong>HTTP</strong> 请求的方法（<strong>GET</strong>、<strong>POST</strong>等）</td>
</tr>
<tr>
<td align="center"><strong>getProtocol()</strong></td>
<td align="center">获取请求的协议（例如，<strong>HTTP&#x2F;1.1</strong>）</td>
</tr>
<tr>
<td align="center"><strong>getRemoteAddr()</strong></td>
<td align="center">获取客户端的 <strong>IP</strong> 地址</td>
</tr>
<tr>
<td align="center"><strong>getSession()</strong></td>
<td align="center">获取与该请求关联的会话对象</td>
</tr>
<tr>
<td align="center"><strong>getInputStream()</strong></td>
<td align="center">获取请求体的字节输入流，可以用于读取 <strong>POST</strong> 请求的内容</td>
</tr>
<tr>
<td align="center"><strong>getRequestDispatcher()</strong></td>
<td align="center">获取请求分派器，用于在服务器内部转发请求</td>
</tr>
<tr>
<td align="center"><strong>setAttribute()</strong></td>
<td align="center">设置请求属性</td>
</tr>
<tr>
<td align="center"><strong>getAttribute()</strong></td>
<td align="center">根据属性名获取请求属性的值</td>
</tr>
</tbody></table>
</li>
<li><p><strong>ServletResponse</strong>：定义了与 <strong>HTTP</strong> 响应相关的属性和方法，可以用于设置响应的状态和内容</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>setContentType()</strong></td>
<td align="center">设置响应的内容类型</td>
</tr>
<tr>
<td align="center"><strong>getContentType()</strong></td>
<td align="center">获取响应的内容类型</td>
</tr>
<tr>
<td align="center"><strong>setContentLength()</strong></td>
<td align="center">设置响应体的长度</td>
</tr>
<tr>
<td align="center"><strong>getWriter()</strong></td>
<td align="center">获取用于向客户端发送字符数据的 <strong>PrintWriter</strong> 对象</td>
</tr>
<tr>
<td align="center"><strong>getOutputStream()</strong></td>
<td align="center">获取用于向客户端发送字节数据的 <strong>ServletOutputStream</strong> 对象</td>
</tr>
<tr>
<td align="center"><strong>setStatus()</strong></td>
<td align="center">设置响应的状态码</td>
</tr>
<tr>
<td align="center"><strong>sendRedirect()</strong></td>
<td align="center">将请求重定向到指定的 <strong>URL</strong></td>
</tr>
<tr>
<td align="center"><strong>addHeader()</strong></td>
<td align="center">添加一个响应头</td>
</tr>
<tr>
<td align="center"><strong>setHeader()</strong></td>
<td align="center">设置一个响应头</td>
</tr>
<tr>
<td align="center"><strong>addCookie()</strong></td>
<td align="center">添加一个 <strong>Cookie</strong> 到响应中</td>
</tr>
<tr>
<td align="center"><strong>setDateHeader()</strong></td>
<td align="center">设置一个响应头的日期值</td>
</tr>
<tr>
<td align="center"><strong>setIntHeader()</strong></td>
<td align="center">设置一个响应头的整数值</td>
</tr>
<tr>
<td align="center"><strong>setCharacterEncoding()</strong></td>
<td align="center">设置响应的字符编码</td>
</tr>
</tbody></table>
</li>
<li><p><strong>ServletContext</strong>：代表着整个 <strong>Web</strong> 应用程序，并提供了访问 <strong>Web</strong> 应用程序的上下文信息、共享数据和其他服务的方法，侧重于全局的配置，多个 <strong>ServletConfig</strong> 对应一个 <strong>ServletContext</strong>*</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>getInitParameter()</strong></td>
<td align="center">获取指定名称的初始化参数的值</td>
</tr>
<tr>
<td align="center"><strong>getInitParameterNames()</strong></td>
<td align="center">获取所有初始化参数的名称的枚举</td>
</tr>
<tr>
<td align="center"><strong>getAttribute()</strong></td>
<td align="center">获取指定名称的属性值</td>
</tr>
<tr>
<td align="center"><strong>setAttribute()</strong></td>
<td align="center">设置指定名称的属性值</td>
</tr>
<tr>
<td align="center"><strong>getAttributeNames()</strong></td>
<td align="center">获取所有属性的名称的枚举</td>
</tr>
<tr>
<td align="center"><strong>getServletContextName()</strong></td>
<td align="center">获取 <strong>Web</strong> 应用程序的名称</td>
</tr>
<tr>
<td align="center"><strong>getServerInfo()</strong></td>
<td align="center">获取 <strong>Web</strong> 容器的服务器信息</td>
</tr>
<tr>
<td align="center"><strong>getContextPath()</strong></td>
<td align="center">获取 <strong>Web</strong> 应用程序的上下文路径</td>
</tr>
<tr>
<td align="center"><strong>getResource()</strong></td>
<td align="center">获取指定路径的资源 <strong>URL</strong></td>
</tr>
<tr>
<td align="center"><strong>getRealPath()</strong></td>
<td align="center">获取指定路径在服务器上的实际路径</td>
</tr>
<tr>
<td align="center"><strong>getRequestDispatcher()</strong></td>
<td align="center">获取用于将请求转发到指定路径的请求调度器</td>
</tr>
<tr>
<td align="center"><strong>log()</strong></td>
<td align="center">将日志消息写入 <strong>ServletContext</strong> 日志文件</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="第三节Servlet的生命周期"><a href="#第三节Servlet的生命周期" class="headerlink" title="第三节	Servlet的生命周期"></a>第三节	Servlet的生命周期</h2><ul>
<li><p><strong>生命周期方法</strong></p>
<ul>
<li><strong>无参构造器</strong>：只会被调用一次，用于创建对象</li>
<li>**init()**：只在第一次创建时被调用一次，用于初始化数据，这些数据将被用于 <strong>Servlet</strong> 的整个生命周期</li>
<li><strong>service()<strong>：执行实际任务的主要方法，</strong>Web</strong> 服务器调用 <strong>service()</strong> 方法来处理来自客户端（浏览器）的请求，并把格式化的响应写回给客户端</li>
<li><strong>destroy()<strong>：只会在 <strong>Servlet</strong> 生命周期结束时被调用一次，</strong>destroy()</strong> 方法可以让 <strong>Servlet</strong> 关闭数据库连接、停止后台线程、把 <strong>Cookie</strong> 列表或点击计数器写入到磁盘，并执行其他类似的清理活动</li>
</ul>
</li>
<li><p><strong>示例图</strong></p>
<p>  <img src="C:\Users\86172\Pictures\Markdown\JavaWeb\生命周期.jpg"></p>
</li>
</ul>
<h2 id="第三节Servlet详解"><a href="#第三节Servlet详解" class="headerlink" title="第三节	Servlet详解"></a>第三节	Servlet详解</h2><ul>
<li><p><strong>web.xml 文件</strong></p>
<ul>
<li><p>添加映射使浏览器可以访问到 <strong>Servlet</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.baidu.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加初始化信息，可以用 <strong>ServletConfig</strong> 类中的方法访问</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>映射注解</strong>：使用 <strong>@WebServlet()</strong> 注解代替 <strong>web.xml</strong> 文件进行映射，括号内的参数即为映射路径</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo2&quot;)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Servlet</strong> 的层次结构：<strong>GenericServlet</strong> 实现 <strong>Servlet</strong> 接口，同时 <strong>HttpServlet</strong> 继承 <strong>GenericServlet</strong>，主要用于处理 <strong>HTTP</strong> 请求信息，主要包括 <strong>doGet</strong> 方法和 <strong>doPost</strong> 方法，分别用于处理 <strong>Get</strong> 请求和 <strong>Post</strong> 请求</p>
</li>
</ul>
<h2 id="第四节JSP介绍"><a href="#第四节JSP介绍" class="headerlink" title="第四节	JSP介绍"></a>第四节	JSP介绍</h2><ul>
<li><p><strong>JSP介绍</strong>：全称为<strong>Java Server Pages</strong>，是一种动态网页开发技术，本质上就是一个 <strong>Servlet</strong>，主要负责与用户交互，将最终的界面呈现给用户，是 <strong>HTML</strong>，<strong>CSS</strong> 和 <strong>JavaScript</strong> 的混合文件</p>
</li>
<li><p><strong>嵌入代码方式</strong></p>
<ul>
<li><p>直接嵌入 <strong>Java</strong> 代码</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    System.out.ln(<span class="string">&quot;hello,world&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用声明的方式定义 <strong>Java</strong> 的方法</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="string">&quot;hello,world&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>JSP</strong> 表达式直接在页面输出 <strong>Java</strong> 对象</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%=</span><br><span class="line">    str</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第五章JSP内置对象"><a href="#第五章JSP内置对象" class="headerlink" title="第五章	JSP内置对象"></a>第五章	JSP内置对象</h2><ul>
<li><p><strong>JSP 内置对象</strong></p>
<table>
<thead>
<tr>
<th align="center">内置对象</th>
<th align="center">产生类</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>request</strong></td>
<td align="center"><strong>HttpServletRequest</strong></td>
<td align="center">表示一次请求</td>
</tr>
<tr>
<td align="center"><strong>response</strong></td>
<td align="center"><strong>HttpServletResponse</strong></td>
<td align="center">表示一次响应</td>
</tr>
<tr>
<td align="center"><strong>pageContext</strong></td>
<td align="center"><strong>PageContext</strong></td>
<td align="center">表示页面上下文，用于获取页面信息</td>
</tr>
<tr>
<td align="center"><strong>session</strong></td>
<td align="center"><strong>HttpSession</strong></td>
<td align="center">表示一次会话，用于保存用户信息</td>
</tr>
<tr>
<td align="center"><strong>application</strong></td>
<td align="center"><strong>ServletContext</strong></td>
<td align="center">表示当前 <strong>Web</strong> 应用，用于保存所有用户共享信息</td>
</tr>
<tr>
<td align="center"><strong>config</strong></td>
<td align="center"><strong>ServletConfig</strong></td>
<td align="center">表示当前 <strong>JSP</strong> 的 <strong>ServletConfig</strong> 对象，用于获取当前 <strong>Servlet</strong> 的信息</td>
</tr>
<tr>
<td align="center"><strong>out</strong></td>
<td align="center"><strong>JspWriter</strong></td>
<td align="center">向页面输出内容</td>
</tr>
<tr>
<td align="center"><strong>page</strong></td>
<td align="center"><strong>Servlet</strong></td>
<td align="center">当前 <strong>JSP</strong> 对应的 <strong>Servlet</strong> 对象</td>
</tr>
<tr>
<td align="center"><strong>excerption</strong></td>
<td align="center"><strong>Exception</strong></td>
<td align="center"><strong>JSP</strong> 页面发生的异常</td>
</tr>
</tbody></table>
</li>
<li><p><strong>request对象常用方法</strong></p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>getParameter()</strong></td>
<td align="center">获取客户端传来的参数</td>
</tr>
<tr>
<td align="center"><strong>setAttribute()</strong></td>
<td align="center">通过键值对的形式保存数据</td>
</tr>
<tr>
<td align="center"><strong>getAttritube()</strong></td>
<td align="center">通过键取出值</td>
</tr>
<tr>
<td align="center"><strong>getRequestDispatcher()</strong></td>
<td align="center">返回一个对象，用于请求转发(转发是服务器端进行跳转，地址栏不会转换，数据不会丢失)</td>
</tr>
<tr>
<td align="center"><strong>getParameterValues()</strong></td>
<td align="center">获取客户端传来的多个同名参数</td>
</tr>
<tr>
<td align="center"><strong>setCharacterEncoding()</strong></td>
<td align="center">指定字符编码</td>
</tr>
</tbody></table>
</li>
<li><p><strong>response对象常用方法</strong></p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>setContentType()</strong></td>
<td align="center">设置响应的内容类型</td>
</tr>
<tr>
<td align="center"><strong>setStatus()</strong></td>
<td align="center">设置响应的状态码</td>
</tr>
<tr>
<td align="center"><strong>sendRedirect()</strong></td>
<td align="center">重定向到指定的 <strong>URL</strong>(重定向是浏览器端进行跳转，地址栏会发生转换，数据会丢失)</td>
</tr>
<tr>
<td align="center"><strong>setHeader()</strong></td>
<td align="center">设置响应头的指定名称的值</td>
</tr>
<tr>
<td align="center"><strong>addHeader()</strong></td>
<td align="center">添加响应头的指定名称和值</td>
</tr>
<tr>
<td align="center"><strong>getWriter()</strong></td>
<td align="center">获取一个 <strong>PrintWriter</strong> 对象，用于向客户端输出文本</td>
</tr>
<tr>
<td align="center"><strong>getOutputStream()</strong></td>
<td align="center">获取一个 <strong>ServletOutputStream</strong> 对象，用于向客户端输出二进制数据</td>
</tr>
</tbody></table>
</li>
<li><p><strong>session对象常用方法</strong></p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>getId()</strong></td>
<td align="center">获取 <strong>session ID</strong></td>
</tr>
<tr>
<td align="center"><strong>setMaxInactiveInterval()</strong></td>
<td align="center">设置最大 <strong>session</strong> 失效时间</td>
</tr>
<tr>
<td align="center"><strong>getMaxInactiveInterval()</strong></td>
<td align="center">获取最大 <strong>session</strong> 失效时间</td>
</tr>
<tr>
<td align="center"><strong>invalidate()</strong></td>
<td align="center">设置 <strong>session</strong> 立即失效</td>
</tr>
<tr>
<td align="center"><strong>setAttribute()</strong></td>
<td align="center">通过键值对的形式保存数据</td>
</tr>
<tr>
<td align="center"><strong>getAttribute()</strong></td>
<td align="center">通过键取出值</td>
</tr>
<tr>
<td align="center"><strong>removeAttribute()</strong></td>
<td align="center">通过键删除对应的数据</td>
</tr>
</tbody></table>
</li>
<li><p><strong>内置对象的作用域</strong></p>
<ul>
<li><strong>page</strong>：只在当前页面有效</li>
<li><strong>request</strong>：在一次请求内有效</li>
<li><strong>session</strong>：在一次会话内有效</li>
<li><strong>application</strong>：在整个 <strong>Web</strong> 应用内都有效</li>
</ul>
</li>
</ul>
<h2 id="第六章Cookie简介"><a href="#第六章Cookie简介" class="headerlink" title="第六章	Cookie简介"></a>第六章	Cookie简介</h2><ul>
<li><p><strong>创建 Cookie</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>读取 Cookie</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie[] cookies = request.getCookies();</span><br><span class="line"><span class="keyword">for</span>(Cookie cookie : cookies)&#123;</span><br><span class="line">    <span class="keyword">if</span>(cookie.getName().equals(<span class="string">&quot;name&quot;</span>))&#123;</span><br><span class="line">        out.write(cookie.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Cookie常用方法</strong></p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>setMaxAge()</strong></td>
<td align="center">设置 <strong>Cookie</strong> 有效时间</td>
</tr>
<tr>
<td align="center"><strong>getMaxAge()</strong></td>
<td align="center">获取 <strong>Cookie</strong> 有效时间，默认时间为 -1</td>
</tr>
<tr>
<td align="center"><strong>getName()</strong></td>
<td align="center">获取 <strong>Cookie</strong> 的 <strong>name</strong></td>
</tr>
<tr>
<td align="center"><strong>setValue()</strong></td>
<td align="center">获取 <strong>Cookie</strong> 的 <strong>value</strong></td>
</tr>
</tbody></table>
</li>
<li><p><strong>Cookie</strong> 和 <strong>Session</strong> 的区别</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">存储位置</th>
<th align="center">数据类型</th>
<th align="center">存储时间</th>
<th align="center">信息类型</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>Cookie</strong></td>
<td align="center">浏览器</td>
<td align="center"><strong>String</strong></td>
<td align="center">长期保存在浏览器中</td>
<td align="center">保存不重要信息</td>
</tr>
<tr>
<td align="center"><strong>Session</strong></td>
<td align="center">服务器</td>
<td align="center"><strong>Object</strong></td>
<td align="center">随着绘画的结束而销毁</td>
<td align="center">可以保存重要信息</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="第七章EL表达式"><a href="#第七章EL表达式" class="headerlink" title="第七章	EL表达式"></a>第七章	EL表达式</h2><ul>
<li><p><strong>EL表达式简介</strong>：全称为 <strong>Expression Language</strong>，即 <strong>JSP</strong> 表达式语言，用来更方便的读取对象</p>
</li>
<li><p><strong>EL表达式基本语法</strong>：可以非常便捷地读取对象的数据</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$&#123;变量名&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>读取优先级</strong></p>
<ul>
<li><p><strong>默认查找</strong>：<strong>EL</strong> 表达式读取数据的优先级正好与对象的作用域相反，<strong>page</strong> &gt; <strong>request</strong> &gt; <strong>session</strong> &gt; <strong>application</strong></p>
</li>
<li><p><strong>指定查找</strong>：添加前缀对象名</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$&#123;sessionScope.name&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第八章JSTL简介"><a href="#第八章JSTL简介" class="headerlink" title="第八章	JSTL简介"></a>第八章	JSTL简介</h2><ul>
<li><p><strong>JSTL简介</strong>：全称为 <strong>JSP Standard Tag Library</strong>，即 <strong>JSP</strong> 标准标签库，是一个 <strong>JSP</strong> 标签集合，它封装了 <strong>JSP</strong> 应用的通用核心功能，为开发者提供一系列的可以完成逻辑处理的标签，使代码更加简洁</p>
</li>
<li><p><strong>JSTL 的使用步骤</strong></p>
<ul>
<li><p>导入两个 <strong>jar</strong> 包（<strong>standard.jar</strong> 和 <strong>jstl.jar</strong>）</p>
</li>
<li><p>在 <strong>JSP</strong> 页面开始处导入标签库</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>JSTL 标签的使用</strong></p>
<ul>
<li><p>循环遍历，类似于增强 <strong>for</strong> 循环语句</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123;list&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;user&quot;</span>&gt;&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加和修改数据，类似于 <strong>setAttribute()</strong> 方法</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;Tom&quot;</span>&gt;&lt;/c:set&gt;</span><br><span class="line">&lt;c:set target=<span class="string">&quot;$&#123;user&#125;&quot;</span> property=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;Jack&quot;</span>&gt;&lt;/c:set&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>输出数据</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;c:out value=<span class="string">&quot;$&#123;name&#125;&quot;</span> <span class="keyword">default</span>=<span class="string">&quot;未定义&quot;</span>&gt;&lt;/c:out&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除数据</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;c:remove <span class="keyword">var</span>=<span class="string">&quot;name&quot;</span> scope=<span class="string">&quot;request&quot;</span>&gt;&lt;/c:remove&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第九章Filter过滤器"><a href="#第九章Filter过滤器" class="headerlink" title="第九章	Filter过滤器"></a>第九章	Filter过滤器</h2><ul>
<li><p><strong>Filter简介</strong>：<strong>Servlet</strong> 中的一项使用的技术，通过 <strong>Filter</strong> 技术，对 <strong>Web</strong> 服务器管理的所有资源进行拦截，从而实现一些特殊的功能</p>
</li>
<li><p><strong>过滤器的使用</strong>：实现 <strong>Filter</strong> 接口并实现其中的 <strong>doFilter</strong> 方法</p>
</li>
<li><p><strong>过滤器映射</strong></p>
<ul>
<li><p><strong>web.xml 文件映射</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.baidu.servlet.HelloFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>注解映射</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebFilter(&quot;/demo&quot;)</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>filterChain类</strong>：表示过滤器链，实现 <strong>doFilter</strong> 方法时需要将 <strong>ServletRequest</strong> 和 <strong>ServletResponse</strong> 添加到 <strong>filterChain</strong> 中，否则会导致整个过滤器无法使用</p>
</li>
</ul>
<h2 id="第十章文件的上传与下载"><a href="#第十章文件的上传与下载" class="headerlink" title="第十章	文件的上传与下载"></a>第十章	文件的上传与下载</h2><ul>
<li><strong>文件上传步骤</strong><ul>
<li>设置类型为 <strong>file</strong> 的 <strong>input</strong> 标签，使用 <strong>post</strong> 的请求方式</li>
<li>将表单的 <strong>enctype</strong> 属性设置为 <strong>multipart&#x2F;form-data</strong>，使用二进制的形式传输</li>
<li>使用 <strong>getInputSream()</strong> 将上传的文件转换为字节流，根据需要再转换为字符流</li>
<li>在 <strong>out</strong> 文件夹新建路径，并使用 <strong>getServletContext()</strong> 方法和 <strong>getRealPath()</strong> 获取绝对路径</li>
<li>使用输出流将得到的字符流写入服务端指定的文件夹中</li>
</ul>
</li>
<li><strong>fileupload组件的使用</strong><ul>
<li>导入两个 <strong>jar</strong> 包</li>
<li>使用 <strong>fileupload</strong> 组件将所有的请求信息都构建为 <strong>FileItem</strong> 对象，再根据需要来操作文件完成上传</li>
</ul>
</li>
<li><strong>文件下载的步骤</strong><ul>
<li>在 <strong>Servlet</strong> 中设置响应方式和下载后的文件名</li>
<li>获取输出流，将文件下载到客户端中</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Jakarta</title>
    <url>/2024/01/28/Jakarta/</url>
    <content><![CDATA[<h1 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h1><h2 id="第一章Tomcat服务器"><a href="#第一章Tomcat服务器" class="headerlink" title="第一章	Tomcat服务器"></a>第一章	Tomcat服务器</h2><ul>
<li><strong>Tomcat简介</strong>：<strong>Apache</strong> 软件基金会 <strong>Apache Software Foundation</strong> 的 <strong>Jakarta</strong> 项目中的一个核心项目，由<strong>Apache</strong>、<strong>Sun</strong> 和其他一些公司及个人共同开发而成，最新的 <strong>Servlet</strong> 和 <strong>JSP</strong> 规范能在 <strong>Tomcat</strong> 中得到体现，因为 <strong>Tomcat</strong> 技术先进、性能稳定，而且免费，因而深受 <strong>Java</strong> 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的 <strong>Web</strong> 应用服务器</li>
<li><strong>Tomcat文件夹信息</strong><ul>
<li><strong>bin</strong>：二进制可执行文件，<strong>startup.bat</strong>用来启动 <strong>Tomcat</strong>，<strong>shutdawn.bat</strong> 用来停止 <strong>Tomcat</strong></li>
<li><strong>conf</strong>：配置文件目录<ul>
<li><strong>server.xml</strong>：配置整个服务器信息，例如修改端口号</li>
<li><strong>tomcat-users.xml</strong>：存储 <strong>tomcat</strong> 用户的文件，例如用户名，密码，以及用户的角色信息</li>
<li><strong>web.xml</strong>：部署描述符文件，这个文件中注册了文档类型，用来说明文档的内容是什么类型的</li>
<li><strong>context.xml</strong>：对所有应用的统一配置</li>
</ul>
</li>
<li><strong>lib</strong>：<strong>Tomcat</strong>的类库，里面是 <strong>jar</strong> 文件</li>
<li><strong>logs</strong>：这个目录中都是日志文件，记录了 <strong>Tomcat</strong> 启动，关闭和错误的信息</li>
<li><strong>temp</strong>：存放 <strong>Tomcat</strong> 的临时文件，这个目录下的东西可以在停止 <strong>Tomcat</strong> 后删除</li>
<li><strong>webapps</strong>：存放 <strong>web</strong> 项目的目录，其中 <strong>ROOT</strong> 是一个特殊的默认项目</li>
<li><strong>work</strong>：运行时生成的文件，最终运行的文件都在这里</li>
<li><strong>LICENSE</strong>：许可证</li>
<li><strong>NOTICE</strong>：说明文件</li>
</ul>
</li>
<li><strong>开发项目目录结构说明</strong><ul>
<li><strong>src</strong>：存放 <strong>Java</strong> 源代码的目录</li>
<li><strong>web</strong>：存放的是需要部署到服务器的文件</li>
<li><strong>WEB-INF</strong>：这个目录下的文件，是不能被客户端直接访问的<ul>
<li><strong>lib</strong>：用于存放该工程用到的库</li>
<li><strong>web.xml</strong>：<strong>web</strong> 工程的配置文件，完成用户请求的逻辑名称到真正的 <strong>servlet</strong> 类的映射</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="第二章Servlet组件"><a href="#第二章Servlet组件" class="headerlink" title="第二章	Servlet组件"></a>第二章	Servlet组件</h2><h2 id="2-1Servlet简介"><a href="#2-1Servlet简介" class="headerlink" title="2.1	Servlet简介"></a>2.1	Servlet简介</h2><ul>
<li><p><strong>操作步骤</strong></p>
<ul>
<li><p>搭建 <strong>Web</strong> 开发环境，创建动态 <strong>Web</strong> 工程</p>
</li>
<li><p>创建 <strong>javax.servlet.Servlet</strong> 接口的实现类</p>
</li>
<li><p>在 <strong>service()</strong> 方法中编写代码输出响应信息</p>
</li>
<li><p>在 <strong>web.xml</strong> 配置文件中注册</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 声明一个Servlet，配置的是Servlet的类信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 这是Servlet的别名，一个名字对应一个Servlet。相当于变量名 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyFirstServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- Servlet的全类名，服务器会根据全类名找到这个Servlet --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.atguigu.servlet.MyFirstServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 建立Servlet的请求映射信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- Servlet的别名，说明这个Servlet将会响应下面url-pattern的请求 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyFirstServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- Servlet响应的请求路径。如果访问这个路径，这个Servlet就会响应 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/MyFirstServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="2-2Servlet生命周期"><a href="#2-2Servlet生命周期" class="headerlink" title="2.2	Servlet生命周期"></a>2.2	Servlet生命周期</h2><ul>
<li><p><strong>Servlet 生命周期的主要过程</strong></p>
<ul>
<li><strong>Servlet</strong> 对象的创建：默认情况下，<strong>Servlet</strong> 容器第一次收到 <strong>HTTP</strong> 请求时使用反射技术创建对应 <strong>Servlet</strong> 对象</li>
<li><strong>Servlet</strong> 对象初始化：<strong>Servlet</strong> 容器创建 <strong>Servlet</strong> 对象之后，会调用 <strong>init()</strong> 方法执行一些初始化操作，例如读取一些资源文件、配置文件，或建立某种连接</li>
<li>处理请求：在 <strong>javax.servlet.Servlet</strong> 接口中，定义了 **service()**方法处理 <strong>HTTP</strong> 请求，在每次接到请求后都会执行</li>
<li><strong>Servlet</strong> 对象销毁：服务器重启、服务器停止执行或 <strong>Web</strong> 应用卸载时会销毁 <strong>Servlet</strong> 对象，会调用 <strong>destroy()</strong> 方法用于销毁之前执行一些诸如释放缓存、关闭连接、保存内存数据持久化等操作</li>
</ul>
</li>
<li><p><strong>Servlet请求过程</strong></p>
<ul>
<li>第一次请求：调用构造器，创建对象，执行 <strong>init()</strong> 方法，执行 <strong>service()</strong> 方法</li>
<li>后面请求：执行 <strong>service()</strong> 方法，对象销毁前，执行 <strong>destroy()</strong> 方法</li>
</ul>
</li>
</ul>
<h2 id="2-3Servlet接口"><a href="#2-3Servlet接口" class="headerlink" title="2.3	Servlet接口"></a>2.3	Servlet接口</h2><ul>
<li><p><strong>ServletConfig接口</strong>：封装了 <strong>Servlet</strong> 配置信息，每一个 <strong>Servlet</strong> 都有一个唯一对应的 <strong>ServletConfig</strong> 对象，代表当前 <strong>Web</strong> 应用的<strong>ServletContext</strong> 对象也封装到了 <strong>ServletConfig</strong> 对象中，使 <strong>ServletConfig</strong> 对象成为了获取 <strong>ServletContext</strong> 对象的一座桥梁</p>
</li>
<li><p><strong>ServletConfig对象的主要功能</strong></p>
<ul>
<li>获取 <strong>Servlet</strong> 名称：<strong>getServletName()</strong></li>
<li>获取全局上下文 <strong>ServletContext</strong> 对象：<strong>getServletContext()</strong></li>
<li>获取 <strong>Servlet</strong> 初始化参数：<strong>getInitParameter(String) &#x2F; getInitParameterNames()</strong></li>
</ul>
</li>
<li><p><strong>ServletContext接口</strong>：<strong>Web</strong> 容器在启动时为每个 <strong>Web</strong> 应用程序创建唯一对应的 <strong>ServletContext</strong> 对象，代表当前 <strong>Web</strong> 应用，一个<strong>Web</strong> 应用程序中的所有 <strong>Servlet</strong> 都共享同一个 <strong>ServletContext</strong> 对象，对象由 <strong>Servlet</strong> 容器在项目启动时创建，通过 <strong>ServletConfig</strong> 对象的 <strong>getServletContext()</strong> 方法获取，在项目卸载时销毁</p>
</li>
<li><p><strong>ServletContext对象的主要功能</strong></p>
<ul>
<li><p>获取项目的上下文路径(带&#x2F;的项目名): <strong>getContextPath()</strong></p>
</li>
<li><p>获取虚拟路径所映射的本地真实路径：<strong>getRealPath(String path)</strong></p>
</li>
<li><p>作为域对象共享数据</p>
</li>
</ul>
</li>
</ul>
<h2 id="2-4Servlet技术体系"><a href="#2-4Servlet技术体系" class="headerlink" title="2.4	Servlet技术体系"></a>2.4	Servlet技术体系</h2><ul>
<li><p><strong>GenericServlet抽象类</strong>：<strong>GenericServlet</strong> 对 <strong>Servlet</strong> 功能进行了封装和完善，重写了 <strong>init()</strong> 方法，用来获取 <strong>ServletConfig</strong> 对象，<br>  如果想要进行初始化操作，可以重写 <strong>GenericServlet</strong> 提供的无参的 <strong>init()</strong> 方法，这样就不会影响 <strong>ServletConfig</strong> 对象的获取</p>
</li>
<li><p><strong>HttpServlet抽象类</strong>：专门用来处理 <strong>Http</strong> 请求的 <strong>Servlet</strong>，对 <strong>GenericServlet</strong> 进行进一步的封装和扩展，在 <strong>service()</strong> 方法中，将<strong>ServletRequest</strong> 和 <strong>ServletResponse</strong> 转换为 <strong>HttpServletRequest</strong> 和 <strong>HttpServletResponse</strong>，根据不同 <strong>HTTP</strong> 请求类型调用专门的方法进行处理，重写 <strong>doGet()</strong> 和 <strong>doPost()</strong> 方法实现请求处理</p>
</li>
</ul>
<h2 id="2-5处理请求响应"><a href="#2-5处理请求响应" class="headerlink" title="2.5	处理请求响应"></a>2.5	处理请求响应</h2><ul>
<li><p><strong>HttpServletRequest接口</strong>：该接口是 <strong>ServletRequest</strong> 接口的子接口，封装了 <strong>HTTP</strong> 请求的相关信息</p>
</li>
<li><p><strong>HttpServletRequest对象的主要功能</strong></p>
<ul>
<li><p>获取请求参数</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] soccerTeams = request.getParameterValues(<span class="string">&quot;soccerTeam&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; soccerTeams.length; i++)&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;team &quot;</span>+i+<span class="string">&quot;=&quot;</span>+soccerTeams[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取 <strong>url</strong> 地址参数</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getContextPath();</span><br><span class="line">System.out.println(<span class="string">&quot;上下文路径：&quot;</span>+path);</span><br><span class="line">System.out.println(<span class="string">&quot;端口号：&quot;</span>+request.getServerPort());</span><br><span class="line">System.out.println(<span class="string">&quot;主机名：&quot;</span>+request.getServerName());</span><br><span class="line">System.out.println(<span class="string">&quot;协议：&quot;</span>+request.getScheme());</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取请求头信息</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">header</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;User-Agent&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;user-agent:&quot;</span>+header);</span><br><span class="line"><span class="type">String</span> <span class="variable">referer</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Referer&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;上个页面的地址：&quot;</span>+referer);</span><br></pre></td></tr></table></figure>
</li>
<li><p>请求的转发：将请求转发给另外一个 <strong>URL</strong> 地址</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RequestDispatcher</span> <span class="variable">dispatcher</span> <span class="operator">=</span> request.getRequestDispatcher(<span class="string">&quot;success.html&quot;</span>);</span><br><span class="line">dispatcher.forward(request, response);</span><br></pre></td></tr></table></figure>
</li>
<li><p>向请求域中保存数据</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.setAttribute(<span class="string">&quot;attrName&quot;</span>, <span class="string">&quot;attrValueInRequest&quot;</span>);</span><br><span class="line">request.getRequestDispatcher(<span class="string">&quot;/ReceiveServlet&quot;</span>).forward(request, response);</span><br><span class="line"><span class="type">Object</span> <span class="variable">attribute</span> <span class="operator">=</span> request.getAttribute(<span class="string">&quot;attrName&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;attrValue=&quot;</span>+attribute);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>HttpServletResponse接口</strong>：该接口是 <strong>ServletResponse</strong> 接口的子接口，封装了服务器针对于HTTP响应的相关信息</p>
</li>
<li><p><strong>HttpServletResponse对象的主要功能</strong></p>
<ul>
<li><p>使用 <strong>PrintWriter</strong> 对象向浏览器输出数据</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> res.getWriter();</span><br><span class="line">writer.write(<span class="string">&quot;Servlet response&quot;</span>);</span><br><span class="line">writer.close();</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置响应头：响应头就是浏览器解析页面的配置</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>重定向请求：实现请求重定向</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.sendRedirect(“success.html”);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="2-6请求的转发与重定向"><a href="#2-6请求的转发与重定向" class="headerlink" title="2.6	请求的转发与重定向"></a>2.6	请求的转发与重定向</h2><ul>
<li><p><strong>请求的转发</strong>：在服务器内部将请求交给其它组件继续处理</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RequestDispatcher</span> <span class="variable">dispatcher</span> <span class="operator">=</span> request.getRequestDispatcher(<span class="string">&quot;/index.html&quot;</span>);</span><br><span class="line">dispatcher.forward(request, response);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>请求的重定向</strong>：浏览器访问另外一个资源，整个过程中浏览器端会发出两次请求，且在浏览器地址栏里面能够看到地址的改变</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.sendRedirect(<span class="string">&quot;index.html&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>转发和重定向的对比</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>转发</th>
<th>重定向</th>
</tr>
</thead>
<tbody><tr>
<td><strong>浏览器感知</strong></td>
<td>在服务器内部完成，浏览器感知不到</td>
<td>服务器以302状态码通知浏览器访问新地址，浏览器有感知</td>
</tr>
<tr>
<td><strong>浏览器地址栏</strong></td>
<td>不改变</td>
<td>改变</td>
</tr>
<tr>
<td><strong>整个过程发送请求次数</strong></td>
<td>一次</td>
<td>两次</td>
</tr>
<tr>
<td><strong>能否共享request对象数据</strong></td>
<td>能</td>
<td>否</td>
</tr>
<tr>
<td><strong>WEB-INF下的资源</strong></td>
<td>能访问</td>
<td>不能访问</td>
</tr>
<tr>
<td><strong>目标资源</strong></td>
<td>必须是当前 <strong>web</strong> 应用中的资源</td>
<td>不局限于当前 <strong>web</strong> 应用</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="2-7请求与响应中的字符编码设置"><a href="#2-7请求与响应中的字符编码设置" class="headerlink" title="2.7	请求与响应中的字符编码设置"></a>2.7	请求与响应中的字符编码设置</h2><ul>
<li><p><strong>请求乱码</strong></p>
<ul>
<li><p><strong>GET</strong> 请求：在 <strong>server.xml</strong> 文件修改 <strong>Connector</strong> 标签，添加 <strong>URIEncoding&#x3D;”utf-8”</strong> 属性</p>
</li>
<li><p><strong>POST</strong> 请求</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>响应乱码</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第三章Thymeleaf"><a href="#第三章Thymeleaf" class="headerlink" title="第三章	Thymeleaf"></a>第三章	Thymeleaf</h2><h2 id="3-1Thymeleaf基本语法"><a href="#3-1Thymeleaf基本语法" class="headerlink" title="3.1	Thymeleaf基本语法"></a>3.1	Thymeleaf基本语法</h2><ul>
<li><p><strong>MVC概念</strong>：在表述层开发中运用的一种设计理念，主张把封装数据的<strong>模型</strong>、显示用户界面的<strong>视图</strong>、协调调度的<strong>控制器</strong>分开</p>
<ul>
<li><strong>M</strong>：<strong>Model</strong> 模型（<strong>javabean</strong>）</li>
<li><strong>V</strong>：<strong>View</strong>视图（<strong>html</strong> + 动态数据）</li>
<li><strong>C</strong>：<strong>Controller</strong>控制器（<strong>servlet</strong>）</li>
</ul>
</li>
<li><p><strong>Thymeleaf概念</strong>：一款用于渲染 <strong>XML&#x2F;XHTML&#x2F;HTML5</strong> 内容的模板引擎，类似 <strong>JSP</strong>，<strong>Velocity</strong>，<strong>FreeMaker</strong> 等， 它可以轻易的与<strong>Spring MVC</strong> 等 <strong>Web</strong> 框架进行集成作为 <strong>Web</strong> 应用的模板引擎，它的主要作用是在静态页面上渲染显示动态数据</p>
</li>
<li><p><strong>视图</strong></p>
<ul>
<li>物理视图：请求转发时使用的完整的转发路径，例如 <strong>&#x2F;pages&#x2F;user&#x2F;login_success.html</strong></li>
<li>逻辑视图：物理视图去除视图前缀和视图后缀后的路径 <strong>login_success</strong></li>
</ul>
</li>
<li><p><strong>Thymeleaf基本步骤</strong></p>
<ul>
<li><p>导入 <strong>jar</strong> 包</p>
</li>
<li><p>配置上下文参数</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在上下文参数中配置视图前缀和视图后缀 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>view-prefix<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/view/<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>view-suffix<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>.html<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建 <strong>Servlet</strong> 基类</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ViewBaseServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> TemplateEngine templateEngine;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="comment">// 1.获取ServletContext对象</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        <span class="comment">// 2.创建Thymeleaf解析器对象</span></span><br><span class="line">        <span class="type">ServletContextTemplateResolver</span> <span class="variable">templateResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletContextTemplateResolver</span>(servletContext);</span><br><span class="line">        <span class="comment">// 3.给解析器对象设置参数</span></span><br><span class="line">        <span class="comment">// ①HTML是默认模式，明确设置是为了代码更容易理解</span></span><br><span class="line">        templateResolver.setTemplateMode(TemplateMode.HTML);</span><br><span class="line">        <span class="comment">// ②设置前缀</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">viewPrefix</span> <span class="operator">=</span> servletContext.getInitParameter(<span class="string">&quot;view-prefix&quot;</span>);</span><br><span class="line">        templateResolver.setPrefix(viewPrefix);</span><br><span class="line">        <span class="comment">// ③设置后缀</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">viewSuffix</span> <span class="operator">=</span> servletContext.getInitParameter(<span class="string">&quot;view-suffix&quot;</span>);</span><br><span class="line">        templateResolver.setSuffix(viewSuffix);</span><br><span class="line">        <span class="comment">// ④设置缓存过期时间（毫秒）</span></span><br><span class="line">        templateResolver.setCacheTTLMs(<span class="number">60000L</span>);</span><br><span class="line">        <span class="comment">// ⑤设置是否缓存</span></span><br><span class="line">        templateResolver.setCacheable(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// ⑥设置服务器端编码方式</span></span><br><span class="line">        templateResolver.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 4.创建模板引擎对象</span></span><br><span class="line">        templateEngine = <span class="keyword">new</span> <span class="title class_">TemplateEngine</span>();</span><br><span class="line">        <span class="comment">// 5.给模板引擎对象设置模板解析器</span></span><br><span class="line">        templateEngine.setTemplateResolver(templateResolver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">processTemplate</span><span class="params">(String templateName, HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1.设置响应体内容类型和字符集</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.创建WebContext对象</span></span><br><span class="line">        <span class="type">WebContext</span> <span class="variable">webContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebContext</span>(req, resp, getServletContext());</span><br><span class="line">        <span class="comment">// 3.处理模板数据</span></span><br><span class="line">        templateEngine.process(templateName, webContext, resp.getWriter());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>页面代码示例</p>
</li>
<li><p>服务端代码示例</p>
</li>
</ul>
</li>
<li><p><strong>Thymeleaf基本语法</strong></p>
<ul>
<li>th名称空间</li>
<li>表达式语法</li>
<li>域对象</li>
<li>获取请求参数</li>
<li>内置对象</li>
<li>OGNL</li>
<li>分支与迭代</li>
<li>其他模板文件</li>
</ul>
</li>
</ul>
<h2 id="3-2Thymeleaf增删改查操作"><a href="#3-2Thymeleaf增删改查操作" class="headerlink" title="3.2	Thymeleaf增删改查操作"></a>3.2	Thymeleaf增删改查操作</h2><ul>
<li>数据建模</li>
<li>总体架构</li>
<li>搭建环境</li>
<li>需要实现的功能列表</li>
<li>显示首页功能</li>
<li>显示列表</li>
<li>删除功能</li>
<li>前往新增信息的表单页面</li>
<li>执行保存</li>
<li>前往修改信息的表单页面</li>
<li>执行更新</li>
</ul>
<h2 id="第四章会话"><a href="#第四章会话" class="headerlink" title="第四章	会话"></a>第四章	会话</h2><h2 id="4-1会话"><a href="#4-1会话" class="headerlink" title="4.1	会话"></a>4.1	会话</h2><h2 id="4-2Cookie"><a href="#4-2Cookie" class="headerlink" title="4.2	Cookie"></a>4.2	Cookie</h2><h2 id="4-3Session"><a href="#4-3Session" class="headerlink" title="4.3	Session"></a>4.3	Session</h2><h1 id="第五章异步请求"><a href="#第五章异步请求" class="headerlink" title="第五章	异步请求"></a>第五章	异步请求</h1><h2 id="5-1Ajax"><a href="#5-1Ajax" class="headerlink" title="5.1	Ajax"></a>5.1	Ajax</h2><h2 id="5-2Axios"><a href="#5-2Axios" class="headerlink" title="5.2	Axios"></a>5.2	Axios</h2><h1 id="第六章Filter"><a href="#第六章Filter" class="headerlink" title="第六章	Filter"></a>第六章	Filter</h1><h2 id="6-1Filter"><a href="#6-1Filter" class="headerlink" title="6.1	Filter"></a>6.1	Filter</h2><h2 id="6-2Listener"><a href="#6-2Listener" class="headerlink" title="6.2	Listener"></a>6.2	Listener</h2>]]></content>
  </entry>
  <entry>
    <title>MyBatis</title>
    <url>/2024/01/28/MyBatis/</url>
    <content><![CDATA[<h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><h2 id="第一节Mybatis简介"><a href="#第一节Mybatis简介" class="headerlink" title="第一节	Mybatis简介"></a>第一节	Mybatis简介</h2><ul>
<li><strong>Mybatis简介</strong>：<strong>MyBatis</strong> 最初是 <strong>Apache</strong> 的一个开源项目 <strong>iBatis</strong>, 后迁移到了 <strong>Google</strong> <strong>Code</strong>，正式更名为<strong>MyBatis</strong>，<strong>Mybatis</strong> 是一个基于 <strong>Java</strong> 的持久层框架，提供的持久层框架包括 <strong>SQL Maps</strong> 和 <strong>Data Access Objects</strong></li>
<li><strong>MyBatis的特性</strong><ul>
<li>支持定制化 <strong>SQL</strong>、存储过程以及高级映射的优秀的持久层框架</li>
<li>避免了几乎所有的 <strong>JDBC</strong> 代码和手动设置参数以及获取结果集</li>
<li>可以使用简单的 <strong>XML</strong> 或注解用于配置和原始映射，将接口和 <strong>Java</strong> 的 <strong>POJO</strong> 映射成数据库中的记录</li>
<li>半自动的  <strong>ORM</strong> 框架</li>
</ul>
</li>
<li><strong>技术优势</strong><ul>
<li><strong>JDBC</strong> 的特点：<ul>
<li><strong>SQL</strong> 夹杂在 <strong>Java</strong> 代码中耦合度高，导致硬编码内伤  </li>
<li>维护不易且实际开发需求中 <strong>SQL</strong> 有变化，频繁修改的情况多见  </li>
<li>代码冗长，开发效率低</li>
</ul>
</li>
<li><strong>Hibernate</strong> 和 <strong>JPA</strong> 的特点：<ul>
<li>操作简便，开发效率高  </li>
<li>程序中的长难复杂 <strong>SQL</strong> 需要绕过框架  </li>
<li>内部自动生产的 <strong>SQL</strong>，不容易做特殊优化  </li>
<li>基于全映射的全自动框架，大量字段的 <strong>POJO</strong> 进行部分映射时比较困难</li>
<li>反射操作太多，导致数据库性能下降</li>
</ul>
</li>
<li><strong>MyBatis</strong> 的特点：<ul>
<li>轻量级，性能出色  </li>
<li><strong>SQL</strong> 和 <strong>Java</strong> 编码分开，功能边界清晰，<strong>Java</strong> 代码专注业务、<strong>SQL</strong> 语句专注数据  </li>
<li>开发效率稍逊于 <strong>HIbernate</strong>，但是完全能够接受</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="第二节Mybatis的搭建"><a href="#第二节Mybatis的搭建" class="headerlink" title="第二节	Mybatis的搭建"></a>第二节	Mybatis的搭建</h2><h3 id="2-1搭建项目"><a href="#2-1搭建项目" class="headerlink" title="2.1	搭建项目"></a>2.1	搭建项目</h3><ul>
<li><p><strong>创建 Maven 工程</strong></p>
<ul>
<li><p><strong>添加依赖</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Mybatis核心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.33<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>设置打包方式</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>创建配置文件</strong></p>
<ul>
<li><p><strong>创建 mybatis-config.xml 核心配置文件</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span>  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span>  </span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span>  </span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">	<span class="comment">&lt;!--设置连接数据库的环境--&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span>  </span><br><span class="line">		<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span>  </span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span>  </span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/MyBatis&quot;</span>/&gt;</span>  </span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span>  </span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span>  </span><br><span class="line">		<span class="tag">&lt;/<span class="name">environment</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;/<span class="name">environments</span>&gt;</span>  </span><br><span class="line">	<span class="comment">&lt;!--引入映射文件--&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">mappers</span>&gt;</span>  </span><br><span class="line">		<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/UserMapper.xml&quot;</span>/&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;/<span class="name">mappers</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建 mapper 接口</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;  </span><br><span class="line">	<span class="comment">/**  </span></span><br><span class="line"><span class="comment">	* 添加用户信息  </span></span><br><span class="line"><span class="comment">	*/</span>  </span><br><span class="line">	<span class="type">int</span> <span class="title function_">insertUser</span><span class="params">()</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建映射文件</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span>  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span>  </span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>  </span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.UserMapper&quot;</span>&gt;</span>  </span><br><span class="line">	<span class="comment">&lt;!--int insertUser();--&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span>  </span><br><span class="line">		insert into t_user values(null,&#x27;张三&#x27;,&#x27;123&#x27;,23,&#x27;女&#x27;)  </span><br><span class="line">	<span class="tag">&lt;/<span class="name">insert</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>添加测试功能</strong></p>
<ul>
<li><p><strong>测试数据库功能</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsertUser</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">    <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.insertUser();</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    System.out.println(<span class="string">&quot;result:&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>开启自动提交</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>添加日志功能</strong></p>
<ul>
<li><p><strong>添加依赖</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- log4j日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>添加 log4j.xml 配置文件</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">log4j</span>:configuration <span class="keyword">SYSTEM</span> <span class="string">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span> <span class="attr">xmlns:log4j</span>=<span class="string">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;Encoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125; %m (%F:%L) \n&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;java.sql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.ibatis&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;info&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-2配置文件详解"><a href="#2-2配置文件详解" class="headerlink" title="2.2	配置文件详解"></a>2.2	配置文件详解</h3><ul>
<li><p><strong>映射文件规则</strong></p>
<ul>
<li><p><strong>命名规则</strong>：实体类的类名 + <strong>Mapper.xml</strong></p>
</li>
<li><p><strong>一致性保证</strong>：<strong>Mapper</strong> 接口的全类名和映射文件的命名空间保持一致，<strong>Mapper</strong> 接口中方法的方法名和映射文件中的 <strong>id</strong> 属性保持一致</p>
</li>
</ul>
</li>
<li><p><strong>核心配置文件详解</strong></p>
<ul>
<li><p><strong>标签顺序</strong>：<strong>properties</strong>、<strong>settings</strong>、<strong>typeAliases</strong>、<strong>typeHandlers</strong>、<strong>objectFactory</strong>、<strong>objectWrapperFactory</strong>、<strong>reflectorFactory</strong>、<strong>plugins</strong>、<strong>environments</strong>、<strong>databaseIdProvider</strong>、<strong>mappers</strong></p>
</li>
<li><p><strong>properties 标签</strong>：引入 <strong>properties</strong> 配置文件</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>settings 标签</strong>：配置相关设置</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--将表中字段的下划线自动转换为驼峰--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启延迟加载--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>typeAliases 标签</strong>：设置某个具体的类型的别名</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置某个具体的类型的别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.atguigu.mybatis.bean.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAlias</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--以包为单位，设置改包下所有的类型都拥有默认的别名，即类名且不区分大小写--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.mybatis.bean&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>environments 标签</strong>：设置多个连接数据库的环境</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql_test&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql_test&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--transactionManager：设置事务管理方式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--dataSource：设置数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--设置驱动类的全类名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--设置连接数据库的连接地址--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--设置连接数据库的用户名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--设置连接数据库的密码--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>mappers 标签</strong>：引入映射文件</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--以包为单位，将包下所有的映射文件引入核心配置文件--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mapper接口和mapper映射文件必须在相同的包下且名称一致--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>数据库操作</strong></p>
<ul>
<li><p><strong>添加数据</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">	insert into t_user values(null,&#x27;admin&#x27;,&#x27;123456&#x27;,23,&#x27;男&#x27;,&#x27;12345@qq.com&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>删除数据</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span>&gt;</span></span><br><span class="line">	delete from t_user where id = 6</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>修改数据</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span>&gt;</span></span><br><span class="line">	update t_user set username = &#x27;张三&#x27; where id = 5</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查询数据</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.bean.User&quot;</span>&gt;</span>  </span><br><span class="line">	select * from t_user where id = 2  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查询数据集合</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.bean.User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第三节Mybatis获取参数"><a href="#第三节Mybatis获取参数" class="headerlink" title="第三节	Mybatis获取参数"></a>第三节	Mybatis获取参数</h2><ul>
<li><p><strong>获取参数值的方式</strong></p>
<ul>
<li>**${}**：本质为字符串拼接，若为字符串类型或日期类型的字段进行赋值时，需要手动加单引号</li>
<li>**#{}**：本质为占位符赋值，若为字符串类型或日期类型的字段进行赋值时，会自动加单引号</li>
</ul>
</li>
<li><p><strong>单个字面量参数</strong>：可以使用 <strong>${}</strong> 和 <strong>#{}</strong> 以任意的名称（最好见名识意）获取参数的值</p>
<ul>
<li><p>使用 <strong>${}</strong> 获取参数</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span>  </span><br><span class="line">	select * from t_user where username = &#x27;$&#123;username&#125;&#x27;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 <strong>#{}</strong> 获取参数</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user where username = #&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>多个字面量参数</strong>：<strong>MyBatis</strong> 会自动将参数放在 <strong>Map</strong> 集合当中，可以使用 <strong>arg</strong> 从0开始或者 <strong>param</strong> 从1开始获取集合里面的参数</p>
<ul>
<li><p>使用 <strong>${}</strong> 获取参数</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLogin&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user where username = &#x27;$&#123;param1&#125;&#x27; and password = &#x27;$&#123;param2&#125;&#x27;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 <strong>#{}</strong> 获取参数</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLogin&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span>  </span><br><span class="line">	select * from t_user where username = #&#123;arg0&#125; and password = #&#123;arg1&#125;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>Map集合类型参数</strong>：可以手动创建 <strong>Map</strong> 集合来传递多个参数</p>
<ul>
<li><p>将参数放入创建的 <strong>Map</strong> 集合当中</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;usermane&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.checkLoginByMap(map);</span><br><span class="line">System.out.println(user);</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 <strong>#{}</strong> 获取参数</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLoginByMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user where username = #&#123;username&#125; and password = #&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>实体类类型参数</strong>：通过访问实体类对象中的属性名获取属性值</p>
<ul>
<li><p>通过实体类对象传递参数</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">User user = new User(null,&quot;Tom&quot;,&quot;123456&quot;,12,&quot;男&quot;,&quot;123@321.com&quot;);</span><br><span class="line">mapper.insertUser(user);</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 <strong>#{}</strong> 获取参数</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">	insert into t_user values(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>使用 @Param 标识参数</strong>：设置 <strong>value</strong> 属性，可以通过键名获取相对应的值</p>
<ul>
<li><p>使用 <strong>@param</strong> 注解标识方法参数</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User <span class="title function_">CheckLoginByParam</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username, <span class="meta">@Param(&quot;password&quot;)</span> String password)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 <strong>#{}</strong> 获取参数</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;CheckLoginByParam&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user where username = #&#123;username&#125; and password = #&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第四节Mybatis查询功能"><a href="#第四节Mybatis查询功能" class="headerlink" title="第四节	Mybatis查询功能"></a>第四节	Mybatis查询功能</h2><ul>
<li><p><strong>查询实体类对象</strong>：直接使用实体类对象接受查询结果</p>
<ul>
<li><p><strong>方法信息</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>映射文件信息</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查询结果</strong></p>
  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">user</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>查询实体类对象集合</strong>：使用 <strong>List</strong> 集合接受多条实体类对象查询结果</p>
<ul>
<li><p><strong>方法信息</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">getUserList</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>映射文件信息</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查询结果</strong></p>
  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">userList</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>查询单个数据</strong>：使用常用类型的别名接受查询结果</p>
<ul>
<li><p><strong>方法信息</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>映射文件信息</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getCount&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">	select count(id) from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查询结果</strong></p>
  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>查询单条 Map 集合数据</strong>：使用 <strong>Map</strong> 集合来接受非实体类对象查询结果</p>
<ul>
<li><p><strong>方法信息</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Object&gt; <span class="title function_">getUserToMap</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>映射文件信息</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查询结果</strong></p>
  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>name<span class="punctuation">:</span>&#x27;张三&#x27;<span class="punctuation">,</span>age<span class="punctuation">:</span><span class="number">18</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>查询多条 Map 集合数据</strong>：使用 <strong>Map</strong> 集合来接受多条非实体类对象查询结果</p>
<ul>
<li><p><strong>使用 List&lt;Map&lt;&gt;&gt; 类型接受查询结果</strong></p>
<ul>
<li><p><strong>方法信息</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>映射文件信息</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span>  </span><br><span class="line">	select * from t_user  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查询结果</strong></p>
  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="punctuation">&#123;</span>name<span class="punctuation">:</span>&#x27;张三&#x27;<span class="punctuation">,</span>age<span class="punctuation">:</span><span class="number">18</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span>name<span class="punctuation">:</span>&#x27;李四&#x27;<span class="punctuation">,</span>age<span class="punctuation">:</span><span class="number">28</span><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>使用 @MapKey 标识数据主键</strong></p>
<ul>
<li><p><strong>方法信息</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapKey(&quot;id&quot;)</span></span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>映射文件信息</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查询结果</strong></p>
  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="number">1</span>=name<span class="punctuation">:</span>&#x27;张三&#x27;<span class="punctuation">,</span>age<span class="punctuation">:</span><span class="number">18</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="number">2</span>=name<span class="punctuation">:</span>&#x27;李四&#x27;<span class="punctuation">,</span>age<span class="punctuation">:</span><span class="number">28</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="第五节特殊SQL的执行"><a href="#第五节特殊SQL的执行" class="headerlink" title="第五节	特殊SQL的执行"></a>第五节	特殊SQL的执行</h2><ul>
<li><p><strong>模糊查询</strong>：查询满足一定条件的数据</p>
<ul>
<li><p><strong>方法信息</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">getUserByLike</span><span class="params">(<span class="meta">@Param(&quot;mohu&quot;)</span> String mohu)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>映射文件信息</strong></p>
<ul>
<li><p>使用 <strong>${}</strong> 和 单引号综合查询</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user where username like &#x27;%$&#123;mohu&#125;%&#x27;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 <strong>concat</strong> 函数查询</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user where username like concat(&#x27;%&#x27;,#&#123;mohu&#125;,&#x27;%&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 <strong>#{}</strong> 和双引号综合查询</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user where username like &quot;%&quot;#&#123;mohu&#125;&quot;%&quot;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>批量删除</strong>：删除满足一定条件的数据</p>
<ul>
<li><p><strong>方法信息</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">deleteMore</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> String ids)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>映射文件信息</strong>：使用 <strong>${}</strong> 删除</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMore&quot;</span>&gt;</span></span><br><span class="line">	delete from t_user where id in ($&#123;ids&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>动态设置表名</strong>：通过参数来设置表名</p>
<ul>
<li><p><strong>方法信息</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">getUserByTable</span><span class="params">(<span class="meta">@Param(&quot;tableName&quot;)</span> String tableName)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>映射文件信息</strong>：使用 <strong>${}</strong> 设置表名</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByTable&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from $&#123;tableName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>添加功能获取自增的主键</strong>：为数据自动设置自增的主键</p>
<ul>
<li><p><strong>方法信息</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>映射文件信息</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">	insert into t_user values (null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查询结果</strong></p>
  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="punctuation">&#123;</span>id=<span class="number">1</span><span class="punctuation">,</span>name<span class="punctuation">:</span>&#x27;张三&#x27;<span class="punctuation">,</span>age<span class="punctuation">:</span><span class="number">18</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span>id=<span class="number">2</span><span class="punctuation">,</span>name<span class="punctuation">:</span>&#x27;李四&#x27;<span class="punctuation">,</span>age<span class="punctuation">:</span><span class="number">28</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span>id=<span class="number">3</span><span class="punctuation">,</span>name<span class="punctuation">:</span>&#x27;王五&#x27;<span class="punctuation">,</span>age<span class="punctuation">:</span><span class="number">38</span><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第六节自定义映射resultMap"><a href="#第六节自定义映射resultMap" class="headerlink" title="第六节	自定义映射resultMap"></a>第六节	自定义映射resultMap</h2><h3 id="6-1字段和属性的映射关系"><a href="#6-1字段和属性的映射关系" class="headerlink" title="6.1	字段和属性的映射关系"></a>6.1	字段和属性的映射关系</h3><ul>
<li><p><strong>resultMap 自定义映射</strong></p>
<ul>
<li><strong>id 属性</strong>：表示不可重复的自定义映射标识</li>
<li><strong>type 属性</strong>：查询数据映射的实体类类型</li>
<li><strong>子标签</strong><ul>
<li><strong>id 标签</strong>：设置主键的映射关系，<strong>property</strong> 属性表示实体类的主键名，<strong>column</strong> 属性表示数据库的主键名</li>
<li><strong>result 标签</strong>：设置普通字段的字段关系，<strong>property</strong> 属性表示实体类的属性名，<strong>column</strong> 属性表示数据库的字段名</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>字段名和属性名映射</strong></p>
<ul>
<li><p><strong>属性名不一致</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>属性名不一致但符合驼峰和下划线规则</strong></p>
<ul>
<li><p><strong>为字段起别名</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllEmp&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select eid,emp_name empName,age,sex,email from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>设置全局配置信息</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="6-2多对一映射处理"><a href="#6-2多对一映射处理" class="headerlink" title="6.2	多对一映射处理"></a>6.2	多对一映射处理</h3><ul>
<li><p><strong>级联方式处理映射关系</strong></p>
<ul>
<li><p><strong>映射关系</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptResultMapOne&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dept.did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dept.deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查询语句</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDept&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptResultMapOne&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp left join t_dept on t_emp.eid = t_dept.did where t_emp.eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>使用 association 处理映射关系</strong></p>
<ul>
<li><p><strong>association 标签</strong>：处理多对一的映射关系</p>
<ul>
<li><strong>property 属性</strong>：需要处理多对一的映射关系的属性名</li>
<li><strong>javaType 属性</strong>：该属性的类型</li>
</ul>
</li>
<li><p><strong>映射关系</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptResultMapTwo&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查询语句</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDept&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptResultMapTwo&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp left join t_dept on t_emp.eid = t_dept.did where t_emp.eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>分步查询</strong></p>
<ul>
<li><p><strong>查询员工信息</strong></p>
<ul>
<li><p><strong>方法信息</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Emp <span class="title function_">getEmpAndDeptByStepOne</span><span class="params">(<span class="meta">@Param(&quot;eid&quot;)</span> Integer eid)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>映射关系</strong>：使用 <strong>select</strong> 属性设置下一步分步查询的方法全引用，使用 <strong>column</strong> 属性设置分步查询的条件</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span></span></span><br><span class="line"><span class="tag">				 <span class="attr">select</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag">				 <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查询语句</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByStepOne&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp where eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>查询部门信息</strong></p>
<ul>
<li><p><strong>方法信息</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Dept <span class="title function_">getEmpAndDeptByStepTwo</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> Integer did)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>映射关系</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;EmpAndDeptByStepTwoResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查询语句</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByStepTwo&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;EmpAndDeptByStepTwoResultMap&quot;</span>&gt;</span></span><br><span class="line">	select * from t_dept where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>延迟加载</strong></p>
<ul>
<li><p><strong>开启延迟加载</strong>：分步查询时，非必要不会查询所有关联对象</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--开启延迟加载--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>单独设置立即加载</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">fetchType</span>=<span class="string">&quot;eager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="6-3一对多映射处理"><a href="#6-3一对多映射处理" class="headerlink" title="6.3	一对多映射处理"></a>6.3	一对多映射处理</h3><ul>
<li><p><strong>使用 collection 处理映射关系</strong></p>
<ul>
<li><p><strong>collection标签</strong></p>
<ul>
<li><strong>property 属性</strong>：需要处理一对多的映射关系的属性名</li>
<li><strong>ofType 属性</strong>：表示该属性对象的集合中存储的数据的类型</li>
</ul>
</li>
<li><p><strong>映射关系</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;DeptAndEmpResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查询语句</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmp&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;DeptAndEmpResultMap&quot;</span>&gt;</span></span><br><span class="line">	select * from t_dept left join t_emp on t_dept.did = t_emp.did where t_dept.did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>分步查询</strong></p>
<ul>
<li><p><strong>查询部门信息</strong></p>
<ul>
<li><p><strong>方法信息</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Dept <span class="title function_">getDeptAndEmpByStepOne</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> Integer did)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>映射关系</strong>：使用 <strong>select</strong> 属性设置下一步分步查询的方法全引用，使用 <strong>column</strong> 属性设置分步查询的条件</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;DeptAndEmpByStepOneResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span></span></span><br><span class="line"><span class="tag">				<span class="attr">select</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.EmpMapper.getDeptAndEmpByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag">				<span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查询语句</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmpByStepOne&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;DeptAndEmpByStepOneResultMap&quot;</span>&gt;</span></span><br><span class="line">	select * from t_dept where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>查询员工信息</strong></p>
<ul>
<li><p><strong>方法信息</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Emp&gt; <span class="title function_">getDeptAndEmpByStepTwo</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> Integer did)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查询语句</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmpByStepTwo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="第七节动态SQL"><a href="#第七节动态SQL" class="headerlink" title="第七节	动态SQL"></a>第七节	动态SQL</h2><ul>
<li><p><strong>if 标签</strong></p>
<ul>
<li><p><strong>test 属性</strong>：通过判断表达式的布尔值决定标签内语句是否执行</p>
</li>
<li><p><strong>注意事项</strong>：在 <strong>where</strong> 后添加恒等条件以避免语法错误</p>
</li>
<li><p><strong>标签示例</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp where 1=1</span><br><span class="line">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">		and emp_name = #&#123;empName&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">		and age = #&#123;age&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>where 标签</strong></p>
<ul>
<li><p><strong>结合使用 if 标签</strong>：与 <strong>if</strong> 标签结合使用，动态生成 <strong>where</strong> 关键字并清除多余的连接词</p>
</li>
<li><p><strong>标签示例</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp</span><br><span class="line">	<span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">			emp_name = #&#123;empName&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">			and age = #&#123;age&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>trim 标签</strong></p>
<ul>
<li><p><strong>prefix|suffix 属性</strong>：在 <strong>trim</strong> 标签中的内容的前面&#x2F;后面添加某些内容  </p>
</li>
<li><p><strong>prefixOverrides|suffixOverrides 属性</strong>：在 <strong>trim</strong> 标签中的内容的前面&#x2F;后面去掉某些内容</p>
</li>
<li><p><strong>标签示例</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp</span><br><span class="line">	<span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;and|or&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">			emp_name = #&#123;empName&#125; and</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">			age = #&#123;age&#125; and</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>choose、when、otherwise 标签</strong></p>
<ul>
<li><p><strong>分支选择标签</strong>：相当于 <strong>if…else if…else if…else</strong>，按照顺序只在分支·中选择一个结果</p>
</li>
<li><p><strong>标签示例</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByChoose&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp</span><br><span class="line">	<span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">				emp_name = #&#123;empName&#125;</span><br><span class="line">			<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">				age = #&#123;age&#125;</span><br><span class="line">			<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">				did = 1</span><br><span class="line">			<span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>foreach 标签</strong></p>
<ul>
<li><p><strong>标签属性</strong></p>
<ul>
<li><strong>collection 属性</strong>：设置要循环的数组或集合  </li>
<li><strong>itm 属性</strong>：表示集合或数组中的每一个数据  </li>
<li><strong>separator 属性</strong>：设置循环体之间的分隔符，分隔符前后默认有一个空格</li>
<li><strong>open 属性</strong>：设置 <strong>foreach</strong> 标签中的内容的开始符  </li>
<li><strong>close 属性</strong>：设置 <strong>foreach</strong> 标签中的内容的结束符</li>
</ul>
</li>
<li><p><strong>批量删除</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMoreByArray&quot;</span>&gt;</span></span><br><span class="line">	delete from t_emp where eid in</span><br><span class="line">	<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;eids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">		#&#123;eid&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>批量添加</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertMoreByList&quot;</span>&gt;</span></span><br><span class="line">	insert into t_emp values</span><br><span class="line">	<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">		(null,#&#123;emp.empName&#125;,#&#123;emp.age&#125;,#&#123;emp.sex&#125;,#&#123;emp.email&#125;,null)</span><br><span class="line">	<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>sql 标签</strong>：可以记录一段公共 <strong>sql</strong> 片段，在使用的地方通过 <strong>include</strong> 标签进行引入</p>
<ul>
<li><p><strong>声明 sql 片段</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;empColumns&quot;</span>&gt;</span>eid,emp_name,age,sex,email<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>引用 sql 片段</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;empColumns&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span> from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第八节Mybatis缓存"><a href="#第八节Mybatis缓存" class="headerlink" title="第八节	Mybatis缓存"></a>第八节	Mybatis缓存</h2><h3 id="8-1一级缓存"><a href="#8-1一级缓存" class="headerlink" title="8.1	一级缓存"></a>8.1	一级缓存</h3><ul>
<li><p><strong>一级缓存</strong></p>
<ul>
<li>默认开启</li>
<li>通过同一个 <strong>SqlSession</strong> 查询的数据会被缓存，下次查询相同的数据，就会从缓存中直接获取，否则从数据库重新访问</li>
</ul>
</li>
<li><p><strong>失效的情况</strong></p>
<ul>
<li>不同的 <strong>SqlSession</strong> 对应不同的一级缓存</li>
</ul>
<ol start="2">
<li>同一个 <strong>SqlSession</strong> 但是查询条件不同</li>
<li>同一个 <strong>SqlSession</strong> 两次查询期间执行了任何一次增删改操作</li>
<li>同一个 <strong>SqlSession</strong> 两次查询期间使用 <strong>sqlSession.clearCache()方法</strong> 手动清空了缓存</li>
</ol>
</li>
</ul>
<h3 id="8-2二级缓存"><a href="#8-2二级缓存" class="headerlink" title="8.2	二级缓存"></a>8.2	二级缓存</h3><ul>
<li><p><strong>二级缓存</strong></p>
<ul>
<li>需要手动开启</li>
<li>二级缓存是 <strong>SqlSessionFactory</strong> 级别，通过同一个 <strong>SqlSessionFactory</strong> 创建的 <strong>SqlSession</strong> 查询的结果会被缓存，此后若再次执行相同的查询语句，结果就会从缓存中获取</li>
</ul>
</li>
<li><p><strong>开启二级缓存</strong></p>
<ul>
<li><p>在映射文件中设置 <strong>cache</strong> 标签</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>二级缓存必须在 <strong>SqlSession</strong> 关闭或提交之后有效</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sqlSession.close();</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询的数据所转换的实体类类型必须实现序列化的接口</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>失效的情况</strong>：两次查询之间执行了任意的增删改，会使一级和二级缓存同时失效</p>
</li>
<li><p><strong>二级缓存相关配置</strong></p>
<ul>
<li><strong>eviction</strong> 属性：缓存回收策略  <ul>
<li><strong>LRU</strong>：最近最少使用的：移除最长时间不被使用的对象</li>
<li><strong>FIFO</strong>：先进先出：按对象进入缓存的顺序来移除它们</li>
<li><strong>SOFT</strong>：软引用：移除基于垃圾回收器状态和软引用规则的对象</li>
<li><strong>WEAK</strong>：弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象</li>
</ul>
</li>
<li><strong>flushInterval</strong> 属性：刷新间隔，单位毫秒，默认情况是不设置</li>
<li><strong>size</strong> 属性：引用数目，正整数，代表缓存最多可以存储多少个对象，太大容易导致内存溢出</li>
<li><strong>readOnly</strong> 属性：只读属性，默认 <strong>false</strong> 读写缓存</li>
</ul>
</li>
<li><p><strong>缓存查询顺序</strong></p>
<ul>
<li>先查询二级缓存，因为二级缓存中可能会有其他程序已经查出来的数据，可以拿来直接使用  </li>
<li>如果二级缓存没有命中，再查询一级缓存  </li>
<li>如果一级缓存也没有命中，则查询数据库  </li>
<li><strong>SqlSession</strong> 关闭之后，一级缓存中的数据会写入二级缓存</li>
</ul>
</li>
</ul>
<h3 id="8-3整合第三方缓存"><a href="#8-3整合第三方缓存" class="headerlink" title="8.3	整合第三方缓存"></a>8.3	整合第三方缓存</h3><ul>
<li><p><strong>整合第三方缓存步骤</strong></p>
<ul>
<li><p><strong>添加依赖</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Mybatis EHCache整合包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- slf4j日志门面的一个具体实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建 ehcache.xml 配置文件</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;../config/ehcache.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 磁盘保存路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;D:\atguigu\ehcache&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;1000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsOnDisk</span>=<span class="string">&quot;10000000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">defaultCache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>设置二级缓存类型</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建 logback 配置文件</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定日志输出的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志输出的格式 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 按照顺序分别是：时间、日志级别、线程名称、打印日志的类、日志主体内容、换行 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger] [%msg]%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置全局日志级别。日志级别按顺序分别是：DEBUG、INFO、WARN、ERROR --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 根据特殊需求指定局部日志级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.crowd.mapper&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第九节Mybatis逆向工程"><a href="#第九节Mybatis逆向工程" class="headerlink" title="第九节	Mybatis逆向工程"></a>第九节	Mybatis逆向工程</h2><h3 id="9-1创建逆向工程"><a href="#9-1创建逆向工程" class="headerlink" title="9.1	创建逆向工程"></a>9.1	创建逆向工程</h3><ul>
<li><p><strong>逆向工程</strong>：先创建数据库表，由框架负责根据数据库表，反向生成 <strong>Java</strong> 实体类，<strong>Mapper</strong> 接口，<strong>Mapper</strong> 映射文件等</p>
</li>
<li><p><strong>创建逆向工程的步骤</strong></p>
<ul>
<li><p><strong>添加插件</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 插件的依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 逆向工程的核心依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.33<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建 generatorConfig.xml 逆向工程配置文件</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    targetRuntime: 执行生成的逆向工程的版本</span></span><br><span class="line"><span class="comment">    MyBatis3Simple: 生成基本的CRUD（清新简洁版）</span></span><br><span class="line"><span class="comment">    MyBatis3: 生成带条件的CRUD（奢华尊享版）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DB2Tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3Simple&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库的连接信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- javaBean的生成策略--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.pojo&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SQL映射文件的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\resources&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Mapper接口的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 逆向分析的表 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- domainObjectName属性指定生成出来的实体类的类名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_emp&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Emp&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_dept&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Dept&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="9-2QBC"><a href="#9-2QBC" class="headerlink" title="9.2	QBC"></a>9.2	QBC</h3><ul>
<li><p><strong>按条件查询</strong></p>
<ul>
<li><p><strong>selectByExample</strong>：按条件查询，需要传入一个 <strong>example</strong> 对象或者 <strong>null</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">EmpExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpExample</span>();</span><br><span class="line">List&lt;Emp&gt; emps = mapper.selectByExample(example);</span><br><span class="line">emps.forEach(System.out::println);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>example.createCriteria().xxx</strong>：创建条件对象，通过 <strong>andXXX</strong> 方法为 <strong>SQL</strong> 添加查询添加，每个条件之间是 <strong>and</strong> 关系</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">example.createCriteria().andEmpNameEqualTo(<span class="string">&quot;张三&quot;</span>).andAgeGreaterThanOrEqualTo(<span class="number">20</span>);	</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>example.or().xxx</strong>：将之前添加的条件通过 <strong>or</strong> 拼接其他条件</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">example.or().andDidIsNotNull();</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>按条件增改</strong></p>
<ul>
<li><p>**updateByPrimaryKey()**：通过主键进行数据修改，如果某一个值为 <strong>null</strong>，也会将对应的字段改为 <strong>null</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mapper.updateByPrimaryKey(<span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="number">1</span>,<span class="string">&quot;admin&quot;</span>,<span class="number">22</span>,<span class="literal">null</span>,<span class="string">&quot;456@qq.com&quot;</span>,<span class="number">3</span>));</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>updateByPrimaryKeySelective</strong>()：通过主键进行选择性数据修改，如果某个值为 <strong>null</strong>，则不修改这个字段</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mapper.updateByPrimaryKeySelective(<span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="number">2</span>,<span class="string">&quot;admin2&quot;</span>,<span class="number">22</span>,<span class="literal">null</span>,<span class="string">&quot;456@qq.com&quot;</span>,<span class="number">3</span>));</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第十节分页插件"><a href="#第十节分页插件" class="headerlink" title="第十节	分页插件"></a>第十节	分页插件</h2><h3 id="10-1分页插件配置步骤"><a href="#10-1分页插件配置步骤" class="headerlink" title="10.1	分页插件配置步骤"></a>10.1	分页插件配置步骤</h3><ul>
<li><p><strong>创建分页插件</strong></p>
<ul>
<li><p><strong>添加依赖</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>	</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>在 mybatis-config,xml 中配置插件</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--设置分页插件--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="10-2分页插件的使用"><a href="#10-2分页插件的使用" class="headerlink" title="10.2	分页插件的使用"></a>10.2	分页插件的使用</h3><ul>
<li><p><strong>开启分页功能</strong></p>
<ul>
<li><p><strong>pageNum 属性</strong>：当前页的页码  </p>
</li>
<li><p><strong>pageSize 属性</strong>：每页显示的条数</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PageHelper.startPage(<span class="number">1</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>分页相关数据</strong></p>
<ul>
<li><p><strong>直接输出</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Page&lt;Object&gt; page = PageHelper.startPage(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">List&lt;Emp&gt; emps = mapper.selectByExample(<span class="literal">null</span>);</span><br><span class="line">System.out.println(page);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用 PageInfo</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PageHelper.startPage(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">List&lt;Emp&gt; emps = mapper.selectByExample(<span class="literal">null</span>);</span><br><span class="line">PageInfo&lt;Emp&gt; page = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(emps,<span class="number">5</span>);</span><br><span class="line">System.out.println(page);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Spring</title>
    <url>/2024/01/28/Spring/</url>
    <content><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="第一节Spring概述"><a href="#第一节Spring概述" class="headerlink" title="第一节	Spring概述"></a>第一节	Spring概述</h2><ul>
<li><p><strong>Spring简介</strong>：<strong>Spring</strong> 是最受欢迎的企业级 <strong>Java</strong> 应用程序开发框架，最初是由 <strong>Rod Johnson</strong> 编写的，并且于 2003 年 6 月首次发布</p>
<p>  ，其核心特性是可以用于开发任何 <strong>Java</strong> 应用程序，目标是使 <strong>J2EE</strong> 开发变得更容易使用</p>
</li>
<li><p><strong>Spring的特点</strong></p>
<ul>
<li><p><strong>非侵入式</strong>：使用 <strong>Spring Framework</strong> 开发应用程序时，Spring 对应用程序本身的结构影响非常小。对领域模型可以做到零污染；对功能性组件也只需要使用几个简单的注解进行标记，完全不会破坏原有结构，反而能将组件结构进一步简化。这就使得基于 <strong>Spring Framework</strong> 开发应用程序时结构清晰、简洁优雅</p>
</li>
<li><p><strong>控制反转</strong>：翻转资源获取方向，把自己创建资源、向环境索取资源变成环境将资源准备好，我们享受资源注入</p>
</li>
<li><p><strong>面向切面编程</strong>：在不修改源代码的基础上增强代码功能</p>
</li>
<li><p><strong>容器</strong>：<strong>Spring IoC</strong> 是一个容器，因为它包含并且管理组件对象的生命周期。组件享受到了容器化的管理，替程序员屏蔽了组件创建过程中的大量细节，极大的降低了使用门槛，大幅度提高了开发效率</p>
</li>
<li><p><strong>组件化</strong>：<strong>Spring</strong> 实现了使用简单的组件配置组合成一个复杂的应用。在 <strong>Spring</strong> 中可以使用 <strong>XML</strong> 和 <strong>Java</strong> 注解组合这些对象。这使得我们可以基于一个个功能明确、边界清晰的组件有条不紊的搭建超大型复杂应用系统</p>
</li>
<li><p><strong>一站式</strong>：在 <strong>IoC</strong> 和 <strong>AOP</strong> 的基础上可以整合各种企业应用的开源框架和优秀的第三方类库。而且 <strong>Spring</strong> 旗下的项目已经覆盖了广泛领域，很多方面的功能性需求可以在 <strong>Spring Framework</strong> 的基础上全部使用 <strong>Spring</strong> 来实现</p>
</li>
</ul>
</li>
</ul>
<h2 id="第二节容器：IOC"><a href="#第二节容器：IOC" class="headerlink" title="第二节	容器：IOC"></a>第二节	容器：IOC</h2><h3 id="2-1控制反转IOC"><a href="#2-1控制反转IOC" class="headerlink" title="2.1	控制反转IOC"></a>2.1	控制反转IOC</h3><ul>
<li><strong>控制反转 IOC</strong>：即将对象的创建权利和对象与对象之间关系的维护权交出去，交给第三方容器负责，是为了降低程序耦合度，提高程序扩展力</li>
</ul>
<ul>
<li><strong>依赖注入 DI</strong>：指 <strong>Spring</strong> 创建对象的过程中，将对象依赖属性通过配置进行注入，实现了控制反转的思想</li>
</ul>
<h3 id="2-2基于XML获取Bean对象"><a href="#2-2基于XML获取Bean对象" class="headerlink" title="2.2	基于XML获取Bean对象"></a>2.2	基于XML获取Bean对象</h3><ul>
<li><p><strong>添加依赖</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>获取 Bean</strong></p>
<ul>
<li><p><strong>根据 id 获取</strong>：根据 <strong>Bean</strong> 标签的 <strong>id</strong> 属性可以精确获取到一个组件对象</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"><span class="type">HelloWorld</span> <span class="variable">helloworld</span> <span class="operator">=</span> (HelloWorld) ac.getBean(<span class="string">&quot;helloWorld&quot;</span>);</span><br><span class="line">helloworld.sayHello();</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>根据类型获取</strong>：要求 <strong>IOC</strong> 容器中指定类型的 <strong>Bean</strong> 有且只能有一个</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"><span class="type">HelloWorld</span> <span class="variable">bean</span> <span class="operator">=</span> ac.getBean(HelloWorld.class);</span><br><span class="line">bean.sayHello()</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>根据 id 和类型获取</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"><span class="type">HelloWorld</span> <span class="variable">bean</span> <span class="operator">=</span> ac.getBean(<span class="string">&quot;helloworld&quot;</span>, HelloWorld.class);</span><br><span class="line">bean.sayHello();</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-3基于XML管理Bean对象"><a href="#2-3基于XML管理Bean对象" class="headerlink" title="2.3	基于XML管理Bean对象"></a>2.3	基于XML管理Bean对象</h3><ul>
<li><p><strong>依赖注入</strong></p>
<ul>
<li><p><strong>setter 依赖注入</strong>：为变量创建 <strong>setter</strong> 方法，提供依赖注入的接口</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- property标签：通过组件类的setXxx()方法给组件对象设置属性 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- name属性：指定属性名（这个属性名是getXxx()、setXxx()方法定义的，和成员变量无关） --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- value属性：指定属性值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;23&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>构造器依赖注入</strong>：在类的有参构造器中提供依赖注入的接口</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;1002&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;33&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>特殊值处理</strong></p>
<ul>
<li><p><strong>null</strong> 值</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>xml</strong> 实体：小于号在 <strong>XML</strong> 文档中用来定义标签的开始，不能随便使用，可以使用 <strong>xml</strong> 实体替代</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;expression&quot;</span> <span class="attr">value</span>=<span class="string">&quot;a <span class="symbol">&amp;lt;</span> b&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>CDATA</strong> 节：<strong>CDATA</strong> 中的 <strong>C</strong> 代表 <strong>Character</strong>，是文本、字符的含义，<strong>CDATA</strong> 就表示纯文本数据</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;expression&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[a &lt; b]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>特殊类型处理</strong></p>
<ul>
<li><p><strong>为对象类型属性赋值</strong></p>
<ul>
<li><p><strong>引入外部 Bean</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>内部 Bean</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在一个bean中再声明一个bean就是内部bean --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 内部bean只能用于给属性赋值，不能在外部通过IOC容器获取，因此可以省略id属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzInner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Clazz&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2222&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;远大前程班&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>级联属性赋值</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz.clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3333&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz.clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;最强王者班&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>为数组类型属性赋值</strong>：使用 <strong>array</strong> 标签为数组赋值</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>抽烟<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>喝酒<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>烫头<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>为集合类型属性赋值</strong></p>
<ul>
<li><p><strong>List</strong> 类型集合：使用 <strong>list</strong> 标签</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;salaryList&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span> <span class="attr">value-type</span>=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Map</strong> 类型集合：使用 <strong>map</strong> 标签</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span> <span class="attr">key-type</span>=<span class="string">&quot;java.lang.Integer&quot;</span> <span class="attr">value-type</span>=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;11&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;22&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Bean 命名空间</strong></p>
<ul>
<li><p><strong>引入命名空间</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/util</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/util/spring-util.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>命名空间赋值</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentSix&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Student&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">p:id</span>=<span class="string">&quot;1006&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;小明&quot;</span> <span class="attr">p:clazz-ref</span>=<span class="string">&quot;clazzOne&quot;</span> <span class="attr">p:teacherMap-ref</span>=<span class="string">&quot;teacherMap&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>Bean 的作用域</strong></p>
<table>
<thead>
<tr>
<th align="center">scope属性</th>
<th align="center">描述</th>
<th align="center">创建对象的时机</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>singleton</strong>（默认）</td>
<td align="center">在 <strong>IOC</strong> 容器中，这个 <strong>bean</strong> 的对象始终为单实例</td>
<td align="center"><strong>IOC</strong> 容器初始化时</td>
</tr>
<tr>
<td align="center"><strong>prototype</strong></td>
<td align="center">这个 <strong>bean</strong> 在 <strong>IOC</strong> 容器中有多个实例</td>
<td align="center">获取 <strong>bean</strong> 时</td>
</tr>
</tbody></table>
</li>
<li><p><strong>Bean 的生命周期</strong></p>
<ul>
<li><p><strong>Bean</strong> 对象创建（调用无参构造器）</p>
</li>
<li><p>给 <strong>Bean</strong> 对象设置属性</p>
</li>
<li><p><strong>Bean</strong> 的后置处理器（初始化之前）</p>
</li>
<li><p><strong>Bean</strong> 对象初始化（需在配置 <strong>Bean</strong> 时指定初始化方法）</p>
</li>
<li><p><strong>Bean</strong> 的后置处理器（初始化之后）</p>
</li>
<li><p><strong>Bean</strong> 对象就绪可以使用</p>
</li>
<li><p><strong>Bean</strong> 对象销毁（需在配置  <strong>Bean</strong> 时指定销毁方法）</p>
</li>
<li><p><strong>IOC</strong>  容器关闭</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- bean的后置处理器要放入IOC容器才能生效 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBeanProcessor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.process.MyBeanProcessor&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>基于 XML 自动装配</strong></p>
<ul>
<li><p><strong>根据类型匹配</strong>：根据类型匹配 <strong>IOC</strong> 容器中的某个兼容类型的 <strong>Bean</strong>，为属性自动赋值</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userController&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.autowire.controller.UserController&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.autowire.service.impl.UserServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.autowire.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>根据名称匹配</strong>：将自动装配的属性的属性名，作为 <strong>Bean</strong> 的 <strong>id</strong> 在 <strong>IOC</strong> 容器中匹配相对应的 <strong>Bean</strong> 进行赋值</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userController&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.autowire.controller.UserController&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.autowire.service.impl.UserServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.autowire.service.impl.UserServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.autowire.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.autowire.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-4基于注解获取Bean对象"><a href="#2-4基于注解获取Bean对象" class="headerlink" title="2.4	基于注解获取Bean对象"></a>2.4	基于注解获取Bean对象</h3><ul>
<li><p><strong>获取 Bean</strong></p>
<ul>
<li><p><strong>根据 id 获取</strong>：根据 <strong>bean</strong> 标签的 <strong>id</strong> 属性可以精确获取到一个组件对象</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(springConfig.class);</span><br><span class="line"><span class="type">HelloWorld</span> <span class="variable">helloworld</span> <span class="operator">=</span> (HelloWorld) ac.getBean(<span class="string">&quot;helloWorld&quot;</span>);</span><br><span class="line">helloworld.sayHello();</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>根据类型获取</strong>：要求 <strong>IOC</strong> 容器中指定类型的 <strong>bean</strong> 有且只能有一个</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(springConfig.class);</span><br><span class="line"><span class="type">HelloWorld</span> <span class="variable">bean</span> <span class="operator">=</span> ac.getBean(HelloWorld.class);</span><br><span class="line">bean.sayHello()</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>根据 id 和类型获取</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(springConfig.class);</span><br><span class="line"><span class="type">HelloWorld</span> <span class="variable">bean</span> <span class="operator">=</span> ac.getBean(<span class="string">&quot;helloworld&quot;</span>, HelloWorld.class);</span><br><span class="line">bean.sayHello();</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-5基于注解管理Bean对象"><a href="#2-5基于注解管理Bean对象" class="headerlink" title="2.5	基于注解管理Bean对象"></a>2.5	基于注解管理Bean对象</h3><ul>
<li><p><strong>开启组件扫描</strong></p>
<ul>
<li><p><strong>基于 XML 文件配置</strong></p>
<ul>
<li><p><strong>基本扫描</strong>：指定 <strong>back-package</strong> 属性</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.spring6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>指定排除组件</strong>：<strong>annotation</strong> 根据注解排除，<strong>assignable</strong> 根据类型排除</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.spring6&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>指定扫描组件</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>基于配置类配置</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 配置类</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;Control&quot;,&quot;Service&quot;,&quot;Dao&quot;,&quot;Config&quot;&#125;)</span> <span class="comment">// 扫描路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Spring6Config</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>使用注解定义</strong> <strong>Bean</strong></p>
<table>
<thead>
<tr>
<th align="center">注解</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>@Component</strong></td>
<td align="center">该注解用于描述 <strong>Spring</strong> 中的 <strong>Bean</strong>，它是一个泛化的概念，仅仅表示容器中的一个组件，并且可以作用在应用的任何层次</td>
</tr>
<tr>
<td align="center"><strong>@Repository</strong></td>
<td align="center">该注解用于将数据访问层 <strong>Dao</strong> 的类标识为 <strong>Spring</strong> 中的 <strong>Bean</strong>，其功能与 <strong>@Component</strong> 相同</td>
</tr>
<tr>
<td align="center"><strong>@Service</strong></td>
<td align="center">该注解通常作用在业务层 <strong>Service</strong>，用于将业务层的类标识为 <strong>Spring</strong> 中的 <strong>Bean</strong>，其功能与 <strong>@Component</strong> 相同</td>
</tr>
<tr>
<td align="center"><strong>@Controller</strong></td>
<td align="center">该注解通常作用在控制层 <strong>Controller</strong>，用于将控制层的类标识为 <strong>Spring</strong> 中的 <strong>Bean</strong>，其功能与 <strong>@Component</strong> 相同</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="2-6依赖注入——Autowired注解"><a href="#2-6依赖注入——Autowired注解" class="headerlink" title="2.6	依赖注入——Autowired注解"></a>2.6	依赖注入——Autowired注解</h3><ul>
<li><p><strong>依赖注入</strong></p>
<ul>
<li><p><strong>属性注入</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserServiceImpl userServiceImpl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>setter 注入</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p><strong>构造器注入</strong>：当有参数的构造方法只有一个时，**@Autowired** 注解可以省略</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserServiceImpl</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p><strong>形参注入</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserServiceImpl</span><span class="params">(<span class="meta">@Autowired</span> UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>联合注解</strong>：配合 <strong>@Qualifier</strong> 注解一起使用，表示根据名称注入</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;userDaoImpl&quot;)</span> <span class="comment">// 指定bean的名字</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-7依赖注入——Resource注解"><a href="#2-7依赖注入——Resource注解" class="headerlink" title="2.7	依赖注入——Resource注解"></a>2.7	依赖注入——Resource注解</h3><ul>
<li><p><strong>Resource注解</strong>：<strong>JDK</strong> 扩展包注解，更具有通用性，默认根据名称注入，但是只适用于属性和 <strong>setter</strong> 方法</p>
</li>
<li><p><strong>依赖注入</strong></p>
<ul>
<li><p><strong>添加依赖</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>根据名称注入</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;myUserDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserDao myUserDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>未知名称注入</strong>：当没有指定 <strong>name</strong> 的时候，会将变量名称作为 <strong>name</strong> 进行查找</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserDao myUserDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第三节面向切片：AOP"><a href="#第三节面向切片：AOP" class="headerlink" title="第三节	面向切片：AOP"></a>第三节	面向切片：AOP</h2><h3 id="3-1AOP概述"><a href="#3-1AOP概述" class="headerlink" title="3.1	AOP概述"></a>3.1	AOP概述</h3><ul>
<li><strong>AOP</strong>：全称 <strong>Aspect Oriented Programming</strong>，即面向切面编程，它是面向对象编程的一种补充和完善，通过预编译方式和运行期动态代理方式实现，在不修改源代码的情况下，给程序动态统一添加额外功能的一种技术，利用 <strong>AOP</strong> 可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率</li>
<li><strong>相关术语</strong><ul>
<li><strong>横切关注点</strong>：分散在每个各个模块中解决同一样的问题，如用户验证、日志管理、事务处理、数据缓存都属于横切关注点</li>
<li><strong>通知</strong>：每个横切关注点上需要增强的功能，比如 安全，事务，日志等</li>
<li><strong>切面</strong>：封装通知方法的类</li>
<li><strong>目标</strong>：被代理的目标对象</li>
<li><strong>代理</strong>：向目标对象应用通知之后创建的代理对象</li>
<li><strong>连接点</strong>：允许使用通知的地方</li>
<li><strong>切入点</strong>：定位连接点的方式</li>
</ul>
</li>
<li><strong>动态代理</strong><ul>
<li><strong>JDK</strong> 代理：目标类有接口，使用 <strong>proxy</strong> 类和目标类实现相同的接口</li>
<li><strong>cglib</strong> 代理：目标类没有接口，继承目标类，位于相同的包下</li>
</ul>
</li>
</ul>
<h3 id="3-2AOP配置流程"><a href="#3-2AOP配置流程" class="headerlink" title="3.2	AOP配置流程"></a>3.2	AOP配置流程</h3><ul>
<li><p><strong>添加依赖</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建切面类</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span> <span class="comment">// 切面类</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">// 依赖注入</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line">    <span class="meta">@Before(&quot;execution(public int com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;)</span> <span class="comment">// 通知标识</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置文件</strong></p>
<ul>
<li><p><strong>XML 文件配置</strong>：使用 <strong>aop</strong> 标签和 <strong>component-scan</strong> 标签配置代理</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.aop.annotation&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置类配置</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.atguigu.aop.annotation&quot;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AOPConfig</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="3-3通知"><a href="#3-3通知" class="headerlink" title="3.3	通知"></a>3.3	通知</h3><ul>
<li><p><strong>通知分类</strong></p>
<table>
<thead>
<tr>
<th align="center">通知</th>
<th align="center">注解</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>前置通知</strong></td>
<td align="center"><strong>@Before</strong></td>
<td align="center">在被代理的目标方法前执行</td>
</tr>
<tr>
<td align="center"><strong>返回通知</strong></td>
<td align="center"><strong>@AfterReturning</strong></td>
<td align="center">在被代理的目标方法成功结束后执行</td>
</tr>
<tr>
<td align="center"><strong>异常通知</strong></td>
<td align="center"><strong>@AfterThrowing</strong></td>
<td align="center">在被代理的目标方法异常结束后执行</td>
</tr>
<tr>
<td align="center"><strong>后置通知</strong></td>
<td align="center"><strong>@After</strong></td>
<td align="center">在被代理的目标方法最终结束后执行</td>
</tr>
<tr>
<td align="center"><strong>环绕通知</strong></td>
<td align="center"><strong>@Around</strong></td>
<td align="center">使用 <strong>try…catch…finally</strong> 结构围绕整个被代理的目标方法，包括所有位置都可以执行</td>
</tr>
</tbody></table>
</li>
<li><p><strong>获取通知的相关信息</strong></p>
<ul>
<li><p><strong>获取连接点信息</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取连接点的签名信息</span></span><br><span class="line"><span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line"><span class="comment">//获取目标方法到的实参信息</span></span><br><span class="line"><span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> Arrays.toString(joinPoint.getArgs());</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>获取目标方法返回值</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturningMethod</span><span class="params">(JoinPoint joinPoint, Object result)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">    System.out.println(<span class="string">&quot;Logger--&gt;返回通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，结果：&quot;</span>+result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>获取目标方法的异常</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowingMethod</span><span class="params">(JoinPoint joinPoint, Throwable ex)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">    System.out.println(<span class="string">&quot;Logger--&gt;异常通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，异常：&quot;</span>+ex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>环绕通知</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">aroundMethod</span><span class="params">(ProceedingJoinPoint joinPoint)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">    <span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class="line">    <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        result = joinPoint.proceed();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">        throwable.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-4切入表达式"><a href="#3-4切入表达式" class="headerlink" title="3.4	切入表达式"></a>3.4	切入表达式</h3><ul>
<li><p><strong>切入表达式语法</strong>：示例 <strong>execution(public int com.atguigu.aop.annotation.CalculatorImpl.*(..))</strong></p>
<ul>
<li><strong>excution</strong>：固定格式</li>
<li><strong>权限修饰符</strong>：例如 <strong>public</strong>，<strong>private</strong> 等，***** 号表示任意修饰符</li>
<li><strong>返回值类型</strong>：例如 <strong>int</strong>，<strong>void</strong> 等，***** 号表示任意类型</li>
<li><strong>方法全类名</strong>：例如 <strong>com.example.spring.Utils.<strong>，</strong></strong>* 号表示任意包名或类名，类名部分使用 ***** 号使可以匹配符合条件的类，例如 *<strong>Service</strong></li>
<li><strong>方法名</strong>：例如 <strong>add</strong>，***** 号表示任意方法，方法名部分使用 ***** 号可以匹配符合条件的方法，例如 <strong>get</strong>*</li>
<li><strong>参数列表</strong>：例如 <strong>(int,int)<strong>，</strong>…</strong> 表示任意参数列表</li>
</ul>
</li>
<li><p><strong>切入表达式的重用</strong></p>
<ul>
<li><p><strong>声明表达式</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(* com.atguigu.aop.annotation.*.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>同一切面的使用</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>不同切面的使用</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;com.atguigu.aop.CommonPointCut.pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>切面的优先级</strong></p>
<ul>
<li><p>切面的优先级控制切面的内外嵌套顺序</p>
<ul>
<li>优先级高的切面：外面</li>
<li>优先级低的切面：里面</li>
</ul>
</li>
<li><p>使用 <strong>@Order</strong> 注解可以控制切面的优先级</p>
<ul>
<li><strong>@Order</strong>(较小的数)：优先级高</li>
<li><strong>@Order</strong>(较大的数)：优先级低</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="第四节单元测试：JUnit"><a href="#第四节单元测试：JUnit" class="headerlink" title="第四节	单元测试：JUnit"></a>第四节	单元测试：JUnit</h2><h3 id="4-1JUnit4单元测试"><a href="#4-1JUnit4单元测试" class="headerlink" title="4.1	JUnit4单元测试"></a>4.1	JUnit4单元测试</h3><ul>
<li><p><strong>添加依赖</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>测试类示例</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:beans.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringJUnit4Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUser</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-2Junit5单元测试"><a href="#4-2Junit5单元测试" class="headerlink" title="4.2	Junit5单元测试"></a>4.2	Junit5单元测试</h3><ul>
<li><p><strong>添加依赖</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 <strong>XML</strong> 文件</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.spring6.bean&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>测试类示例</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringJUnitConfig(Config.springConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringJUnit5Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUser</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第五节事务"><a href="#第五节事务" class="headerlink" title="第五节	事务"></a>第五节	事务</h2><h3 id="5-1JDBCTemplate"><a href="#5-1JDBCTemplate" class="headerlink" title="5.1	JDBCTemplate"></a>5.1	JDBCTemplate</h3><ul>
<li><p><strong>JDBCTemplate概念</strong>：<strong>Spring JDBC</strong> 核心包中的核心类，它可以通过配置文件、注解、<strong>Java</strong> 配置类等形式获取数据库的相关信息，实现了对 <strong>JDBC</strong> 开发过程中的驱动加载、连接的开启和关闭、SQL 语句的创建与执行、异常处理、事务处理、数据类型转换等操作的封装</p>
</li>
<li><p><strong>配置数据库文件</strong></p>
<ul>
<li><p><strong>添加依赖</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建jdbc.properties配置文件</strong></p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/spring?characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置spring文件</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入外部属性文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置 JdbcTemplate --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 装配数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>数据库操作</strong></p>
<ul>
<li><p><strong>测试类配置</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringJUnitConfig(locations = &quot;classpath:beans.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTemplateTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>增加数据</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_emp values(null,?,?,?)&quot;</span>;</span><br><span class="line">	<span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> jdbcTemplate.update(sql, <span class="string">&quot;张三&quot;</span>, <span class="number">23</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>删除数据</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from t_emp where id=?&quot;</span>;</span><br><span class="line">	<span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> jdbcTemplate.update(sql, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>修改数据</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_emp set name=? where id=?&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> jdbcTemplate.update(sql, <span class="string">&quot;张三atguigu&quot;</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查询数据</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectCount</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select count(id) from t_emp&quot;</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, Integer.class);</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="5-2声明式事务"><a href="#5-2声明式事务" class="headerlink" title="5.2	声明式事务"></a>5.2	声明式事务</h3><ul>
<li><strong>事务</strong>：数据库事务 <strong>transaction</strong> 是访问并可能操作各种数据项的一个数据库操作序列，这些操作要么全部执行,要么全部不执行，是一个不可分割的工作单位，事务由事务开始与事务结束之间执行的全部数据库操作组成</li>
<li><strong>事务的特性</strong><ul>
<li><strong>原子性</strong>：一个事务中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚到事务开始前的状态，就像这个事务从来没有执行过一样</li>
<li><strong>一致性</strong>：在一个事务执行之前和执行之后数据库都必须处于一致性状态。如果事务成功地完成，那么系统中所有变化将正确地应用，系统处于有效状态；如果在事务中出现错误，那么系统中的所有变化将自动地回滚，系统返回到原始状态</li>
<li><strong>隔离性</strong>：在并发环境中，当不同的事务同时操纵相同的数据时，每个事务都有各自的完整数据空间。由并发事务所做的修改必须与任何其他并发事务所做的修改隔离。事务查看数据更新时，数据所处的状态要么是另一事务修改它之前的状态，要么是另一事务修改它之后的状态，事务不会查看到中间状态的数据</li>
<li><strong>持久性</strong>：只要事务成功结束，它对数据库所做的更新就必须保存下来。即使发生系统崩溃，重新启动数据库系统后，数据库还能恢复到事务成功结束时的状态</li>
</ul>
</li>
<li><strong>声明式事务</strong>：代码框架将固定模式的代码抽取出来，进行相关的封装，只需要在配置文件中进行简单的配置即可完成数据库操作</li>
<li><strong>声明式事务的优点</strong><ul>
<li>提高开发效率</li>
<li>消除了冗余的代码</li>
<li>框架会综合考虑相关领域中在实际开发环境下有可能遇到的各种问题，进行了健壮性、性能等各个方面的优化</li>
</ul>
</li>
</ul>
<h3 id="5-3基于注解的声明式事务"><a href="#5-3基于注解的声明式事务" class="headerlink" title="5.3	基于注解的声明式事务"></a>5.3	基于注解的声明式事务</h3><ul>
<li><p><strong>配置数据库文件</strong></p>
<ul>
<li><p><strong>添加spring配置</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.spring6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建数据访问层组件</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getPriceByBookId</span><span class="params">(Integer bookId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select price from t_book where book_id = ?&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.queryForObject(sql, Integer.class, bookId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateStock</span><span class="params">(Integer bookId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_book set stock = stock - 1 where book_id = ?&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql, bookId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateBalance</span><span class="params">(Integer userId, Integer price)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_user set balance = balance - ? where user_id = ?&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql, price, userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建服务层组件</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">price</span> <span class="operator">=</span> bookDao.getPriceByBookId(bookId);</span><br><span class="line">        bookDao.updateStock(bookId);</span><br><span class="line">        bookDao.updateBalance(userId, price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建控制层组件</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span>&#123;</span><br><span class="line">        bookService.buyBook(bookId, userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>加入事务测试</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-4事务属性"><a href="#5-4事务属性" class="headerlink" title="5.4	事务属性"></a>5.4	事务属性</h3><ul>
<li><p><strong>@Transactional注解</strong>：事务属性注解</p>
<ul>
<li>标识在方法上，则只会影响该方法</li>
<li>标识的类上，则会影响类中所有的方法</li>
</ul>
</li>
<li><p><strong>事务属性：只读</strong></p>
<ul>
<li><p><strong>简述</strong>：不涉及写操作，这样数据库就能够针对查询操作来进行优化</p>
</li>
<li><p><strong>注解</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(readOnly = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>事务属性：超时</strong></p>
<ul>
<li><p><strong>简述</strong>：事务在执行过程中，有可能因为遇到某些问题，导致程序卡住，这个程序应该被回滚，撤销它已做的操作，事务结束，把资源让出来，让其他正常程序可以执行</p>
</li>
<li><p><strong>注解</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(timeout = 3)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>事务属性：回滚策略</strong></p>
<ul>
<li><p><strong>简述</strong>：默认只针对运行时异常回滚，编译时异常不回滚</p>
</li>
<li><p><strong>属性值</strong></p>
<ul>
<li><strong>rollbackFor</strong> 属性：需要设置一个 <strong>Class</strong> 类型的对象</li>
<li><strong>rollbackForClassName</strong> 属性：需要设置一个字符串类型的全类名</li>
<li><strong>noRollbackFor</strong> 属性：需要设置一个 <strong>Class</strong> 类型的对象</li>
<li><strong>noRollbackForClassName</strong> 属性：需要设置一个字符串类型的全类名</li>
</ul>
</li>
<li><p><strong>注解</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(noRollbackFor = ArithmeticException.class)</span></span><br><span class="line"><span class="comment">//@Transactional(noRollbackForClassName = &quot;java.lang.ArithmeticException&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>事务属性：隔离级别</strong></p>
<ul>
<li><p><strong>简述</strong>：一个事务与其他事务隔离的程度称为隔离级别，不同隔离级别对应不同的干扰程度，隔离级别越高，数据一致性就越好，但并发性越弱</p>
</li>
<li><p><strong>属性值</strong></p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>描述</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td><strong>READ UNCOMMITTED</strong></td>
<td>读未提交</td>
<td>有</td>
<td>有</td>
<td>有</td>
</tr>
<tr>
<td><strong>READ COMMITTED</strong></td>
<td>读已提交</td>
<td>无</td>
<td>有</td>
<td>有</td>
</tr>
<tr>
<td><strong>REPEATABLE READ</strong></td>
<td>可重复读</td>
<td>无</td>
<td>无</td>
<td>有</td>
</tr>
<tr>
<td><strong>SERIALIZABLE</strong></td>
<td>串行化</td>
<td>无</td>
<td>无</td>
<td>无</td>
</tr>
</tbody></table>
</li>
<li><p><strong>注解</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(isolation = Isolation.DEFAULT)</span><span class="comment">//使用数据库默认的隔离级别</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.READ_UNCOMMITTED)</span><span class="comment">//读未提交</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.READ_COMMITTED)</span><span class="comment">//读已提交</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.REPEATABLE_READ)</span><span class="comment">//可重复读</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.SERIALIZABLE)</span><span class="comment">//串行化</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>事务属性：传播行为</strong></p>
<ul>
<li><p><strong>简述</strong>：在一个事务中开启另一个事务，表示事务的传递模式</p>
</li>
<li><p><strong>属性值</strong></p>
<ul>
<li><strong>REQUIRED</strong>：支持当前事务，如果不存在就新建一个</li>
<li><strong>SUPPORTS</strong>：支持当前事务，如果当前没有事务，就以非事务方式执行</li>
<li><strong>MANDATORY</strong>：必须运行在一个事务中，如果当前没有事务正在发生，将抛出一个异常</li>
<li><strong>REQUIRES_NEW</strong>：开启一个新的事务，如果一个事务已经存在，则将这个存在的事务挂起</li>
<li><strong>NOT_SUPPORTED</strong>：以非事务方式运行，如果有事务存在，挂起当前事务</li>
<li><strong>NEVER</strong>：以非事务方式运行，如果有事务存在，抛出异常</li>
<li><strong>NESTED</strong>：如果当前正有一个事务在进行中，则该方法应当运行在一个嵌套式事务中，被嵌套的事务可以独立于外层事务进行提交或回滚；如果外层事务不存在，行为就像 <strong>REQUIRED</strong> 一样</li>
</ul>
</li>
<li><p><strong>注解</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="5-5全注解开发事务"><a href="#5-5全注解开发事务" class="headerlink" title="5.5	全注解开发事务"></a>5.5	全注解开发事务</h3><ul>
<li><p><strong>全注解开发事务配置类</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.atguigu.spring6&quot;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">getDataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring?characterEncoding=utf8&amp;useSSL=false&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;jdbcTemplate&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JdbcTemplate <span class="title function_">getJdbcTemplate</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line">        jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSourceTransactionManager <span class="title function_">getDataSourceTransactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">DataSourceTransactionManager</span> <span class="variable">dataSourceTransactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">        dataSourceTransactionManager.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> dataSourceTransactionManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第六节资源操作：Resources"><a href="#第六节资源操作：Resources" class="headerlink" title="第六节	资源操作：Resources"></a>第六节	资源操作：Resources</h2><h3 id="6-1Spring-Resource概述"><a href="#6-1Spring-Resource概述" class="headerlink" title="6.1	Spring Resource概述"></a>6.1	Spring Resource概述</h3><ul>
<li><strong>Spring Resource</strong>：<strong>Java</strong> 的标准 <strong>URL</strong> 类和各种 <strong>URL</strong> 前缀的标准处理程序无法满足所有对 <strong>low-level</strong> 资源的访问，并且缺少某些<strong>Spring</strong> 所需要的功能，而 <strong>Spring</strong> 的 <strong>Resource</strong> 声明了访问 <strong>low-level</strong> 资源的能力</li>
</ul>
<h3 id="6-2Resource接口"><a href="#6-2Resource接口" class="headerlink" title="6.2	Resource接口"></a>6.2	Resource接口</h3><ul>
<li><p><strong>Resource接口</strong>：位于 <strong>org.springframework.core.io</strong> 中，旨在成为一个更强大的接口，用于抽象对低级资源的访问，<strong>Resource</strong> 接口继承了 <strong>InputStreamSource</strong> 接口，提供了很多 <strong>InputStreamSource</strong> 所没有的方法</p>
</li>
<li><p><strong>常用方法</strong></p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>getInputStream()</strong></td>
<td align="center">找到并打开资源，返回一个 <strong>InputStream</strong> 以从资源中读取</td>
</tr>
<tr>
<td align="center"><strong>exists()</strong></td>
<td align="center">返回一个布尔值，表明某个资源是否以物理形式存在</td>
</tr>
<tr>
<td align="center"><strong>isOpen()</strong></td>
<td align="center">返回一个布尔值，指示此资源是否具有开放流的句柄</td>
</tr>
<tr>
<td align="center"><strong>getDescription()</strong></td>
<td align="center">返回资源的描述，用来输出错误的日志</td>
</tr>
<tr>
<td align="center"><strong>isReadable()</strong></td>
<td align="center">表明资源的目录读取是否通过 <strong>getInputStream()</strong> 进行读取</td>
</tr>
<tr>
<td align="center"><strong>isFile()</strong></td>
<td align="center">表明这个资源是否代表了一个文件系统的文件</td>
</tr>
<tr>
<td align="center"><strong>getURL()</strong></td>
<td align="center">返回一个 <strong>URL</strong> 句柄，如果资源不能够被解析为 <strong>URL</strong>，将抛出 <strong>IOException</strong></td>
</tr>
<tr>
<td align="center"><strong>getURI()</strong></td>
<td align="center">返回一个资源的 <strong>URI</strong> 句柄</td>
</tr>
<tr>
<td align="center"><strong>getFile()</strong></td>
<td align="center">返回某个文件，如果资源不能够被解析称为绝对路径，将会抛出 **FileNotFoundException **</td>
</tr>
<tr>
<td align="center"><strong>lastModified()</strong></td>
<td align="center">资源最后一次修改的时间戳</td>
</tr>
<tr>
<td align="center"><strong>createRelative()</strong></td>
<td align="center">创建此资源的相关资源</td>
</tr>
<tr>
<td align="center"><strong>getFilename()</strong></td>
<td align="center">返回资源的文件名</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="6-3Resource实现类"><a href="#6-3Resource实现类" class="headerlink" title="6.3	Resource实现类"></a>6.3	Resource实现类</h3><ul>
<li><p><strong>Resource实现类</strong>：<strong>Resource</strong> 接口是 <strong>Spring</strong> 资源访问策略的抽象，它本身并不提供任何资源访问实现，具体的资源访问由该接口的实现类完成，每个实现类代表一种资源访问策略</p>
</li>
<li><p><strong>实现类汇总</strong></p>
<table>
<thead>
<tr>
<th align="center">类名</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>UrlResource</strong></td>
<td align="center">用来访问网络资源，它支持 <strong>URL</strong> 的绝对路径</td>
</tr>
<tr>
<td align="center"><strong>ClassPathResource</strong></td>
<td align="center">用来访问类加载路径下的资源，可自动搜索位于 <strong>classes</strong> 下的资源文件，无须使用绝对路径访问</td>
</tr>
<tr>
<td align="center"><strong>FileSystemResource</strong></td>
<td align="center">用于访问文件系统资源</td>
</tr>
<tr>
<td align="center"><strong>ServletContextResource</strong></td>
<td align="center">解释相关 <strong>Web</strong> 应用程序根目录中的相对路径，始终支持流访问和 <strong>URL</strong> 访问</td>
</tr>
<tr>
<td align="center"><strong>InputStreamResource</strong></td>
<td align="center">给定的输入流的 <strong>Resource</strong> 实现，在没有特定的资源实现的时候使用，如果需要将资源描述符保留在某处或者需要多次读取流，请不要使用</td>
</tr>
<tr>
<td align="center"><strong>ByteArrayResource</strong></td>
<td align="center">通过给定的数组创建了，对于从任何给定的字节数组加载内容非常有用，而无需求助于单次使用的 <strong>InputStreamResource</strong></td>
</tr>
</tbody></table>
</li>
<li><p><strong>URLResource类</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loadAndReadUrlResource</span><span class="params">(String path)</span>&#123;</span><br><span class="line">    <span class="type">UrlResource</span> <span class="variable">url</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        url = <span class="keyword">new</span> <span class="title class_">UrlResource</span>(path);</span><br><span class="line">        System.out.println(url.getFilename());</span><br><span class="line">        System.out.println(url.getURI());</span><br><span class="line">        System.out.println(url.getDescription());</span><br><span class="line">        System.out.println(url.getInputStream().read());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>ClassPathResource类</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loadAndReadUrlResource</span><span class="params">(String path)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">ClassPathResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(path);</span><br><span class="line">    System.out.println(<span class="string">&quot;resource.getFileName = &quot;</span> + resource.getFilename());</span><br><span class="line">    System.out.println(<span class="string">&quot;resource.getDescription = &quot;</span>+ resource.getDescription());</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> resource.getInputStream();</span><br><span class="line">    <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">while</span>(in.read(b)!=-<span class="number">1</span>) &#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>FileSystemResource类</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loadAndReadUrlResource</span><span class="params">(String path)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">FileSystemResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemResource</span>(<span class="string">&quot;atguigu.txt&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;resource.getFileName = &quot;</span> + resource.getFilename());</span><br><span class="line">    System.out.println(<span class="string">&quot;resource.getDescription = &quot;</span>+ resource.getDescription());</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> resource.getInputStream();</span><br><span class="line">    <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">while</span>(in.read(b)!=-<span class="number">1</span>) &#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="6-4ResourceLoader接口"><a href="#6-4ResourceLoader接口" class="headerlink" title="6.4	ResourceLoader接口"></a>6.4	ResourceLoader接口</h3><ul>
<li><p><strong>ResourceLoader接口</strong>：该接口实现类的实例可以获得一个 <strong>Resource</strong> 实例，当 <strong>Spring</strong> 应用需要进行资源访问时，实际上并不需要直接使用 <strong>Resource</strong> 实现类，而是调用 <strong>ResourceLoader</strong> 实例的 <strong>getResource()</strong> 方法来获得资源，<strong>ReosurceLoader</strong> 将会负责选择 <strong>Reosurce</strong> 实现类，也就是确定具体的资源访问策略，从而将应用程序和具体的资源访问策略分离开</p>
</li>
<li><p><strong>获取Resource示例</strong></p>
<ul>
<li><p><strong>ClassPathXmlApplicationContext类</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>();</span><br><span class="line">    <span class="type">Resource</span> <span class="variable">res</span> <span class="operator">=</span> ctx.getResource(<span class="string">&quot;atguigu.txt&quot;</span>);</span><br><span class="line">    System.out.println(res.getFilename());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>FileSystemApplicationContext类</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span>();</span><br><span class="line">    <span class="type">Resource</span> <span class="variable">res</span> <span class="operator">=</span> ctx.getResource(<span class="string">&quot;atguigu.txt&quot;</span>);</span><br><span class="line">    System.out.println(res.getFilename());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="6-5ResourceLoaderAware接口"><a href="#6-5ResourceLoaderAware接口" class="headerlink" title="6.5	ResourceLoaderAware接口"></a>6.5	ResourceLoaderAware接口</h3><ul>
<li><p><strong>ResourceLoaderAware接口</strong>：该实现类的实例将获得一个 <strong>ResourceLoader</strong> 的引用，提供一个 <strong>setResourceLoader()</strong> 方法，由<strong>Spring</strong> 容器负责调用，<strong>Spring</strong> 容器会将将自身当成 <strong>ResourceLoader</strong> 对象作为该方法的参数传入</p>
</li>
<li><p><strong>获取ResourceLoader示例</strong></p>
<ul>
<li><p><strong>实现接口</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBean</span> <span class="keyword">implements</span> <span class="title class_">ResourceLoaderAware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ResourceLoader resourceLoader;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setResourceLoader</span><span class="params">(ResourceLoader resourceLoader)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ResourceLoader <span class="title function_">getResourceLoader</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.resourceLoader;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置文件</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;testBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.resouceloader.TestBean&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>测试</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">    <span class="type">TestBean</span> <span class="variable">testBean</span> <span class="operator">=</span> ctx.getBean(<span class="string">&quot;testBean&quot;</span>,TestBean.class);</span><br><span class="line">    <span class="type">ResourceLoader</span> <span class="variable">resourceLoader</span> <span class="operator">=</span> testBean.getResourceLoader();</span><br><span class="line">    <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> resourceLoader.getResource(<span class="string">&quot;atguigu.txt&quot;</span>);</span><br><span class="line">    System.out.println(resource.getFilename());</span><br><span class="line">    System.out.println(resource.getDescription());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="6-6使用Resource作为属性"><a href="#6-6使用Resource作为属性" class="headerlink" title="6.6	使用Resource作为属性"></a>6.6	使用Resource作为属性</h3><ul>
<li><p><strong>依赖注入资源属性</strong>：让 <strong>Spring</strong> 为 <strong>Bean</strong> 实例依赖注入资源，资源所在的物理位置不会被耦合到代码中，如果资源位置发生改变，不必改写程序</p>
</li>
<li><p><strong>注入资源属性示例</strong></p>
<ul>
<li><p><strong>创建依赖注入类</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResourceBean</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Resource res;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRes</span><span class="params">(Resource res)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.res = res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Resource <span class="title function_">getRes</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置文件</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;resourceBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.resouceloader.ResourceBean&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;res&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:atguigu.txt&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>测试</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">    <span class="type">ResourceBean</span> <span class="variable">resourceBean</span> <span class="operator">=</span> ctx.getBean(<span class="string">&quot;resourceBean&quot;</span>,ResourceBean.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="6-7应用程序上下文和资源路径"><a href="#6-7应用程序上下文和资源路径" class="headerlink" title="6.7	应用程序上下文和资源路径"></a>6.7	应用程序上下文和资源路径</h3><ul>
<li><p><strong>使用实现类确定资源访问策略</strong></p>
<table>
<thead>
<tr>
<th align="center">实现类</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>ClassPathXMLApplicationContext</strong></td>
<td align="center">对应使用 <strong>ClassPathResource</strong> 进行资源访问</td>
</tr>
<tr>
<td align="center"><strong>FileSystemXmlApplicationContext</strong></td>
<td align="center">对应使用 <strong>FileSystemResource</strong> 进行资源访问</td>
</tr>
<tr>
<td align="center"><strong>XmlWebApplicationContext</strong></td>
<td align="center">对应使用 <strong>ServletContextResource</strong> 进行资源访问</td>
</tr>
</tbody></table>
</li>
<li><p><strong>使用前缀指定资源访问策略</strong></p>
<ul>
<li><p><strong>classpath前缀使用</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath:bean.xml&quot;</span>);</span><br><span class="line">    <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> ctx.getResource(<span class="string">&quot;atguigu.txt&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>classpath通配符使用</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath*:bean.xml&quot;</span>);</span><br><span class="line">    <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> ctx.getResource(<span class="string">&quot;atguigu.txt&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第七节国际化：i18n"><a href="#第七节国际化：i18n" class="headerlink" title="第七节	国际化：i18n"></a>第七节	国际化：i18n</h2><h3 id="7-1国际化概述"><a href="#7-1国际化概述" class="headerlink" title="7.1	国际化概述"></a>7.1	国际化概述</h3><ul>
<li><strong>国际化i18n</strong>：英文单词 <strong>internationalization</strong> 的首末字符 <strong>i</strong> 和 <strong>n</strong>，18 为中间的字符数，即软件显示不同语言的过程，软件中的国际化是通过配置文件来实现的，假设要支撑两种语言，那么就需要两个版本的配置文件</li>
</ul>
<h3 id="7-2Java国际化"><a href="#7-2Java国际化" class="headerlink" title="7.2	Java国际化"></a>7.2	Java国际化</h3><ul>
<li><p><strong>Locale类</strong>：用于指定当前用户所属的语言环境等信息，包含 <strong>language</strong> 信息和 <strong>country</strong> 信息，使用 <strong>ResourceBundle</strong> 查找绑定对应的资源文件</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Locale <span class="title function_">createConstant</span><span class="params">(String lang, String country)</span> &#123;</span><br><span class="line">    <span class="type">BaseLocale</span> <span class="variable">base</span> <span class="operator">=</span> BaseLocale.createInstance(lang, country);</span><br><span class="line">    <span class="keyword">return</span> getInstance(base, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置文件命名规则</strong>：<strong>basename_language_country.properties</strong></p>
<ul>
<li><strong>basename</strong> 是必须的，语言和国家是可选的</li>
<li>如果同时提供了 <strong>messages.properties</strong> 和 <strong>messages_zh_CN.propertes</strong> 两个配置文件，优先查找<strong>messages_en_CN.propertes</strong> 配置文件，如果没查找到，再查找 <strong>messages.properties</strong> 配置文件</li>
</ul>
</li>
<li><p><strong>Java国际化示例</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(ResourceBundle.getBundle(<span class="string">&quot;messages&quot;</span>,<span class="keyword">new</span> <span class="title class_">Locale</span>(<span class="string">&quot;en&quot;</span>,<span class="string">&quot;GB&quot;</span>)).getString(<span class="string">&quot;test&quot;</span>));</span><br><span class="line">System.out.println(ResourceBundle.getBundle(<span class="string">&quot;messages&quot;</span>,<span class="keyword">new</span> <span class="title class_">Locale</span>(<span class="string">&quot;zh&quot;</span>,<span class="string">&quot;CN&quot;</span>)).getString(<span class="string">&quot;test&quot;</span>));</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="7-3Spring国际化"><a href="#7-3Spring国际化" class="headerlink" title="7.3	Spring国际化"></a>7.3	Spring国际化</h3><ul>
<li><p><strong>MessageSource接口</strong>：用于实现 <strong>Spring</strong> 国际化，可根据不同需求使用不同的实现类</p>
<table>
<thead>
<tr>
<th align="center">实现类</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>ResourceBundleMessageSource</strong></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">这个是基于Java的ResourceBundle基础类实现，允许仅通过资源名加载国际化资源</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><strong>ReloadableResourceBundleMessageSource</strong></td>
<td align="center"></td>
</tr>
</tbody></table>
</li>
<li><p><strong>Spring国际化示例</strong></p>
<ul>
<li><p><strong>创建资源文件</strong></p>
<ul>
<li><p><strong>创建atguigu_en_US.properties</strong></p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">www.atguigu.com</span>=<span class="string">welcome &#123;0&#125;,时间:&#123;1&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建atguigu_zh_CN.properties</strong></p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">www.atguigu.com</span>=<span class="string">欢迎 &#123;0&#125;,时间:&#123;1&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>配置文件</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;messageSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ResourceBundleMessageSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basenames&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>atguigu<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>测试</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">    Object[] objs = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;atguigu&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>().toString()&#125;;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> context.getMessage(<span class="string">&quot;www.atguigu.com&quot;</span>, objs, Locale.CHINA);</span><br><span class="line">    System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第八节数据校验Validation"><a href="#第八节数据校验Validation" class="headerlink" title="第八节	数据校验Validation"></a>第八节	数据校验Validation</h2><h3 id="8-1Spring-Validation概述"><a href="#8-1Spring-Validation概述" class="headerlink" title="8.1	Spring Validation概述"></a>8.1	Spring Validation概述</h3><ul>
<li><strong>Spring Validation概述</strong>：允许通过注解的方式来定义对象校验规则，把校验和业务逻辑分离开，用于对参数等是否符合规则的校验，让代码编写更加方便</li>
</ul>
<h3 id="8-2通过Validator接口实现"><a href="#8-2通过Validator接口实现" class="headerlink" title="8.2	通过Validator接口实现"></a>8.2	通过Validator接口实现</h3><ul>
<li><p><strong>接口实现校验</strong></p>
<ul>
<li><p><strong>添加依赖</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0.5.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.glassfish<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.el<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建实体类</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>实现校验接口</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonValidator</span> <span class="keyword">implements</span> <span class="title class_">Validator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Person.class.equals(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">validate</span><span class="params">(Object object, Errors errors)</span> &#123;</span><br><span class="line">        ValidationUtils.rejectIfEmpty(errors, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;name.empty&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) object;</span><br><span class="line">        <span class="keyword">if</span> (p.getAge() &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            errors.rejectValue(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;error value &lt; 0&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.getAge() &gt; <span class="number">110</span>) &#123;</span><br><span class="line">            errors.rejectValue(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;error value too old&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>测试</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    person.setName(<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line">    person.setAge(-<span class="number">1</span>);</span><br><span class="line">    <span class="type">DataBinder</span> <span class="variable">binder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataBinder</span>(person);</span><br><span class="line">    binder.setValidator(<span class="keyword">new</span> <span class="title class_">PersonValidator</span>());</span><br><span class="line">    binder.validate();</span><br><span class="line">    <span class="type">BindingResult</span> <span class="variable">results</span> <span class="operator">=</span> binder.getBindingResult();</span><br><span class="line">    System.out.println(results.getAllErrors());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="8-3通过注解实现"><a href="#8-3通过注解实现" class="headerlink" title="8.3	通过注解实现"></a>8.3	通过注解实现</h3><ul>
<li><p><strong>常用注解</strong></p>
<table>
<thead>
<tr>
<th align="center">注解</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>@NotNull</strong></td>
<td align="center">限制必须不为 <strong>null</strong></td>
</tr>
<tr>
<td align="center"><strong>@NotEmpty</strong></td>
<td align="center">只作用于字符串类型，字符串不为空，并且长度不为0</td>
</tr>
<tr>
<td align="center"><strong>@NotBlank</strong></td>
<td align="center">只作用于字符串类型，字符串不为空，并且 <strong>trim()</strong> 后不为空串</td>
</tr>
<tr>
<td align="center"><strong>@DecimalMax(value)</strong></td>
<td align="center">限制必须为一个不大于指定值的数字</td>
</tr>
<tr>
<td align="center"><strong>@DecimalMin(value)</strong></td>
<td align="center">限制必须为一个不小于指定值的数字</td>
</tr>
<tr>
<td align="center"><strong>@Max(value)</strong></td>
<td align="center">限制必须为一个不大于指定值的数字</td>
</tr>
<tr>
<td align="center"><strong>@Min(value)</strong></td>
<td align="center">限制必须为一个不小于指定值的数字</td>
</tr>
<tr>
<td align="center"><strong>@Pattern(value)</strong></td>
<td align="center">限制必须符合指定的正则表达式</td>
</tr>
<tr>
<td align="center"><strong>@Size(max,min)</strong></td>
<td align="center">限制字符长度必须在 <strong>min</strong> 到 <strong>max</strong> 之间</td>
</tr>
<tr>
<td align="center"><strong>@Email</strong></td>
<td align="center">验证注解的元素值是 <strong>Email</strong>，也可以通过正则表达式和 <strong>flag</strong> 指定自定义的 <strong>email</strong> 格式</td>
</tr>
</tbody></table>
</li>
<li><p><strong>注解实现校验</strong></p>
<ul>
<li><p><strong>创建配置类</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.atguigu.spring6.validation.method2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidationConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> LocalValidatorFactoryBean <span class="title function_">validator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LocalValidatorFactoryBean</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建实体类</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Min(0)</span></span><br><span class="line">    <span class="meta">@Max(120)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用校验器</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Validator validator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="type">boolean</span> <span class="title function_">validator</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        Set&lt;ConstraintViolation&lt;User&gt;&gt; sets =  validator.validate(user);</span><br><span class="line">        <span class="keyword">return</span> sets.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Validator validator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validaPersonByValidator</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="type">BindException</span> <span class="variable">bindException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BindException</span>(user, user.getName());</span><br><span class="line">        validator.validate(user, bindException);</span><br><span class="line">        <span class="keyword">return</span> bindException.hasErrors();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>测试</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMyService1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(ValidationConfig.class);</span><br><span class="line">    <span class="type">MyService1</span> <span class="variable">myService</span> <span class="operator">=</span> context.getBean(MyService1.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setAge(-<span class="number">1</span>);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">validator</span> <span class="operator">=</span> myService.validator(user);</span><br><span class="line">    System.out.println(validator);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="8-4基于方法实现"><a href="#8-4基于方法实现" class="headerlink" title="8.4	基于方法实现"></a>8.4	基于方法实现</h3><ul>
<li><p><strong>方法实现校验</strong></p>
<ul>
<li><p><strong>创建配置类</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.atguigu.spring6.validation.method3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidationConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MethodValidationPostProcessor <span class="title function_">validationPostProcessor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MethodValidationPostProcessor</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建实体类</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Min(0)</span></span><br><span class="line">    <span class="meta">@Max(120)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;^1(3|4|5|7|8)\\d&#123;9&#125;$&quot;,message = &quot;手机号码格式错误&quot;)</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;手机号码不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPhone</span><span class="params">(String phone)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>通过注解操作对象</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testParams</span><span class="params">(<span class="meta">@NotNull</span> <span class="meta">@Valid</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>测试</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMyService1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(ValidationConfig.class);</span><br><span class="line">    <span class="type">MyService</span> <span class="variable">myService</span> <span class="operator">=</span> context.getBean(MyService.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setAge(-<span class="number">1</span>);</span><br><span class="line">    myService.testParams(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="8-5自定义校验"><a href="#8-5自定义校验" class="headerlink" title="8.5	自定义校验"></a>8.5	自定义校验</h3><ul>
<li><p><strong>自定义校验注解</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy = &#123;CannotBlankValidator.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CannotBlank &#123;</span><br><span class="line">    <span class="comment">//默认错误消息</span></span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;不能包含空格&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分组</span></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//负载</span></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定多个时使用</span></span><br><span class="line">    <span class="meta">@Target(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.TYPE_USE&#125;)</span></span><br><span class="line">    <span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line">    <span class="meta">@Documented</span></span><br><span class="line">    <span class="meta">@interface</span> List &#123;</span><br><span class="line">        CannotBlank[] value();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建校验类</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CannotBlankValidator</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;CannotBlank, String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(CannotBlank constraintAnnotation)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String value, ConstraintValidatorContext context)</span> &#123;</span><br><span class="line">            <span class="comment">//null时不进行校验</span></span><br><span class="line">            <span class="keyword">if</span> (value != <span class="literal">null</span> &amp;&amp; value.contains(<span class="string">&quot; &quot;</span>)) &#123;</span><br><span class="line">                    <span class="comment">//获取默认提示信息</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">defaultConstraintMessageTemplate</span> <span class="operator">=</span> context.getDefaultConstraintMessageTemplate();</span><br><span class="line">                    System.out.println(<span class="string">&quot;default message :&quot;</span> + defaultConstraintMessageTemplate);</span><br><span class="line">                    <span class="comment">//禁用默认提示信息</span></span><br><span class="line">                    context.disableDefaultConstraintViolation();</span><br><span class="line">                    <span class="comment">//设置提示语</span></span><br><span class="line">                    context.buildConstraintViolationWithTemplate(<span class="string">&quot;can not contains blank&quot;</span>).addConstraintViolation();</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第九节提前编译：AOT"><a href="#第九节提前编译：AOT" class="headerlink" title="第九节	提前编译：AOT"></a>第九节	提前编译：AOT</h2><h3 id="9-1AOT概述"><a href="#9-1AOT概述" class="headerlink" title="9.1	AOT概述"></a>9.1	AOT概述</h3><ul>
<li><p><strong>JIT 与 AOT 的区别</strong></p>
<ul>
<li><strong>JIT</strong>：全称 <strong>Just-in-time</strong>，即动态即时编译，边运行边编译。在程序运行时，根据算法计算出热点代码，然后进行 <strong>JIT</strong> 实时编译，这种方式吞吐量高，有运行时性能加成，可以跑得更快，并可以做到动态生成代码等，但是相对启动速度较慢，并需要一定时间和调用频率才能触发 JIT 的分层机制</li>
<li><strong>AOT</strong>：全称 <strong>Ahead Of Time</strong>，即运行前编译，预先编译。直接将源代码转化为机器码，内存占用低，启动速度快，可以无需 <strong>runtime</strong> 运行，直接将 <strong>runtime</strong> 静态链接至最终的程序中，但是无运行时性能加成，不能根据程序运行情况做进一步的优化</li>
</ul>
</li>
<li><p><strong>AOT 的优缺点</strong></p>
<ul>
<li><p><strong>优点</strong></p>
<ul>
<li>不必等待及时编译器的预热，减少 <strong>Java</strong> 应用给人带来第一次运行慢的不良体验</li>
<li>在程序运行前编译，可以避免在运行时的编译性能消耗和内存消耗</li>
<li>可以在程序运行初期就达到最高性能，程序启动速度快</li>
<li>运行产物只有机器码，打包体积小</li>
</ul>
</li>
<li><p><strong>缺点</strong></p>
<ul>
<li>不能根据硬件情况或程序运行情况择优选择机器指令序列，理论峰值性能不如 <strong>JIT</strong></li>
<li>没有动态能力，同一份产物不能跨平台运行</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="9-2Graalvm"><a href="#9-2Graalvm" class="headerlink" title="9.2	Graalvm"></a>9.2	Graalvm</h3><ul>
<li><p><strong>GraalVM概述</strong>：<strong>Spring6</strong> 支持的 <strong>AOT</strong> 技术的底层支持，<strong>GraalVM</strong> 是一种高性能 <strong>JDK</strong>，旨在加速用 <strong>Java</strong> 和其他 <strong>JVM</strong> 语言编写的应用程序的执行，<strong>GraalVM</strong> 提供两种运行 <strong>Java</strong> 应用程序的方法：在 <strong>HotSpot JVM</strong> 上使用 <strong>Graal</strong> 即时编译器或作为提前编译的本机可执行文件</p>
</li>
<li><p><strong>GraalVM的特性</strong></p>
<ul>
<li>一种高级优化编译器，它生成更快、更精简的代码，需要更少的计算资源</li>
<li>AOT 本机图像编译提前将 Java 应用程序编译为本机二进制文件，立即启动，无需预热即可实现最高性能</li>
<li>Polyglot 编程在单个应用程序中利用流行语言的最佳功能和库，无需额外开销</li>
<li>高级工具在 Java 和多种语言中调试、监视、分析和优化资源消耗</li>
</ul>
</li>
<li><p><strong>GraalVM Native Image概述</strong>：另外一种实现 <strong>Java AOT</strong> 的思路，直接摒弃 <strong>JVM</strong>，和 <strong>C&#x2F;C++</strong> 一样通过编译器直接将代码编译成机器代码，然后运行。它通过 <strong>C</strong> 语言实现了一个超微缩的运行时组件 <strong>Substrate VM</strong>，基本实现了 <strong>JVM</strong> 的各种特性，但足够轻量、可以被轻松内嵌，这就让 <strong>Java</strong> 语言和工程摆脱 <strong>JVM</strong> 的限制，能够真正意义上实现和 <strong>C&#x2F;C++</strong> 一样的 <strong>AOT</strong> 编译</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>SpringBoot</title>
    <url>/2024/01/28/SpringBoot/</url>
    <content><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h2 id="第一节SpringBoot快速入门"><a href="#第一节SpringBoot快速入门" class="headerlink" title="第一节	SpringBoot快速入门"></a>第一节	SpringBoot快速入门</h2><h3 id="1-1简介"><a href="#1-1简介" class="headerlink" title="1.1	简介"></a>1.1	简介</h3><ul>
<li><p><strong>SpringBoot 简介</strong>：<strong>SpringBoot</strong> 帮我们简单、快速地创建一个独立的、生产级别的 <strong>Spring</strong> 应用，大多数 <strong>SpringBoot</strong> 应用只需要编写少量配置即可快速整合 <strong>Spring</strong> 平台以及第三方技术</p>
</li>
<li><p><strong>SpringBoot 的特性</strong></p>
<ul>
<li>快速创建独立 <strong>Spring</strong> 应用</li>
<li>直接嵌入<strong>Tomcat</strong>、<strong>Jetty</strong> 或者 <strong>Undertow</strong>，无需部署 <strong>war</strong> 包</li>
<li>提供可选的 <strong>starter</strong>，简化应用整合</li>
<li>按需自动配置 <strong>Spring</strong> 以及第三方库</li>
<li>提供生产级特性，如监控指标、健康检查、外部化配置等</li>
<li>无代码生成、无 <strong>xml</strong></li>
</ul>
</li>
</ul>
<h3 id="1-2快速体验"><a href="#1-2快速体验" class="headerlink" title="1.2	快速体验"></a>1.2	快速体验</h3><ul>
<li><p><strong>依赖配置</strong></p>
<ul>
<li><p><strong>继承父项目</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;!--所有springboot项目都必须继承--&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.1</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/parent&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>添加依赖</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--web开发的场景启动器 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>添加插件</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--SpringBoot应用打包插件--&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>源代码编写</strong></p>
<ul>
<li><p><strong>主程序</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>映射类</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello,springboot&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>特性总结</strong></p>
<ul>
<li><strong>简化整合</strong>：导入相关的场景，拥有相关的功能，场景启动器</li>
<li><strong>简化开发</strong>：无需编写任何配置，直接开发业务</li>
<li><strong>简化配置</strong>：集中式管理配置，只需要修改配置文件，配置基本都有默认值</li>
<li><strong>简化部署</strong>：打包为可执行的 <strong>jar</strong> 包，<strong>linux</strong> 服务器上有 <strong>Java</strong> 环境</li>
<li><strong>简化运维</strong>：修改配置、监控、健康检查</li>
</ul>
</li>
<li><p><strong>Spring</strong> <strong>Initializr 创建向导</strong>：一键创建好整个项目结构</p>
</li>
</ul>
<h3 id="1-3应用分析"><a href="#1-3应用分析" class="headerlink" title="1.3	应用分析"></a>1.3	应用分析</h3><ul>
<li><strong>依赖管理机制</strong><ul>
<li>导入<strong>starter-web</strong> 自动导入所有相关依赖</li>
<li>父项目是版本仲裁中心，声明所有常见的 <strong>jar</strong> 包的依赖版本，无需自定义版本号</li>
<li>自定义版本号，可以利用 <strong>Maven</strong> 的就近原则，直接在导入依赖的时候声明版本</li>
<li><strong>boot</strong> 父项目没有管理的第三方的 <strong>jar</strong> 包需要自行声明</li>
</ul>
</li>
<li><strong>自动配置机制</strong><ul>
<li><strong>自动配置组件</strong>：导入场景，容器中就会自动配置好这个场景的核心组件，例如 <strong>Tomcat</strong>、<strong>SpringMVC</strong> 等</li>
<li><strong>默认的包扫描规则</strong>：**@SpringBootApplication** 标注主程序类，<strong>SpringBoot</strong> 只会扫描主程序所在的包及其下面的子包</li>
<li><strong>自定义扫描路径</strong>：使用 **@SpringBootApplication(scanBasePackages &#x3D; “com.example”)**，或者 <strong>@ComponentScan(“com.example”)</strong> 直接指定扫描的路径</li>
<li><strong>配置默认值</strong>：配置文件的所有配置项是和属性类的对象值进行一一绑定</li>
<li><strong>按需加载自动配置</strong>：场景启动器除了会导入相关功能依赖，也会导入一个 <strong>spring-boot-starter</strong>，包含 <strong>spring-boot-autoconfigure</strong> 包，容纳各种场景的<strong>AutoConfiguration</strong> 自动配置类， 导入哪个场景就开启哪个自动配置</li>
</ul>
</li>
<li><strong>自动配置流程细节梳理</strong><ul>
<li><strong>导入 starter-web 场景启动器</strong><ul>
<li>场景启动器导入了相关场景的所有依赖</li>
<li>每个场景启动器都引入了一个 <strong>spring-boot-starter</strong> 核心场景启动器</li>
<li>核心场景启动器引入了 <strong>spring-boot-autoconfigure</strong> 包，里面囊括了所有场景的所有配置</li>
<li><strong>SpringBoot</strong> 默认扫描不到 <strong>spring-boot-autoconfigure</strong> 下写好的所有配置类，只扫描主程序所在的包</li>
</ul>
</li>
<li><strong>主程序 @SpringBootApplication</strong><ul>
<li><strong>@SpringBootApplication</strong> 由 <strong>@SpringBootConfiguration</strong>、**@EnableAutoConfiguration<strong>、</strong>@ComponentScan** 三个注解组成</li>
<li><strong>SpringBoot</strong> 默认只能扫描自己主程序所在的包及其下面的子包，扫描不到 <strong>spring-boot-autoconfigure</strong> 包中官方写好的配置</li>
<li><strong>@EnableAutoConfiguration</strong> 注解是开启自动配置的核心注解</li>
<li><strong>@Import</strong> 注解会批量给容器中导入组件，<strong>SpringBoot</strong> 启动会默认加载来自于 <strong>spring-boot-autoconfigure</strong> 下 <strong>META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports</strong> 文件的配置类</li>
<li>并不是所有自动配置类都能生效，每一个自动配置类，都有条件注解 <strong>@ConditionalOnxxx</strong>，只有条件成立，才会按需生效</li>
</ul>
</li>
<li><strong>xxxxAutoConfiguration 自动配置类</strong><ul>
<li>使用 <strong>@Bean</strong> 注解向容器中添加组件</li>
<li>每个自动配置类都可能有这个注解 <strong>@EnableConfigurationProperties</strong>，用来把配置文件中配的指定前缀的属性值封装到 <strong>xxxProperties</strong> 属性类中</li>
<li><strong>xxxProperties</strong> 都是和配置文件绑定，只需要改配置文件的值，核心组件的底层参数都能修改</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="1-4核心技能"><a href="#1-4核心技能" class="headerlink" title="1.4	核心技能"></a>1.4	核心技能</h3><ul>
<li><p><strong>常用注解</strong></p>
<ul>
<li><p><strong>组件注册</strong></p>
<ul>
<li><p><strong>@SpringBootApplication</strong>：用在启动类上，主要组合包含了以下 3 个注解：**@Configuration<strong>，</strong>@EnableAutoConfiguration<strong>和</strong>@ComponentScan**</p>
</li>
<li><p><strong>@Configuration</strong>：实现配置文件的功能，该类是 <strong>bean</strong> 配置的信息源</p>
</li>
<li><p><strong>@Bean</strong>：标识一个方法，替代以前的 <strong>bean</strong> 标签，产生一个 <strong>bean</strong> 并交给 <strong>spring</strong> 管理</p>
</li>
<li><p><strong>@Scope</strong>：用于指定 <strong>spring</strong> <strong>bean</strong> 的作用域，可以是 <strong>Singleton</strong>、<strong>Prototype</strong>、<strong>Request</strong>、<strong>Session</strong> 等</p>
</li>
<li><p><strong>@Import</strong>：用于引入其他配置类或组件类，可以将其他配置类中的 <strong>bean</strong> 引入到当前配置类中</p>
</li>
<li><p><strong>@ComponentScan</strong>：用于开启组件扫描，用于自动扫描并注册注解类到 <strong>spring</strong> 容器</p>
</li>
</ul>
</li>
<li><p><strong>条件注解</strong></p>
<ul>
<li><strong>@ConditionalOnClass</strong>：如果类路径中存在这个类，则触发指定行为</li>
<li><strong>@ConditionalOnMissingClass</strong>：如果类路径中不存在这个类，则触发指定行为</li>
<li><strong>@ConditionalOnBean</strong>：如果容器中存在这个 <strong>bean</strong>，则触发指定行为</li>
<li><strong>@ConditionalOnMissingBean</strong>：如果容器中不存在这个 <strong>bean</strong>，则触发指定行为</li>
<li><strong>@ConditionalOnBean</strong>：判断容器中是否有这个类型的组件，并且名字是指定的值</li>
</ul>
</li>
<li><p><strong>属性绑定</strong></p>
<ul>
<li><strong>@ConfigurationProperties</strong>： 声明组件的属性和配置文件哪些前缀开始项进行绑定</li>
<li><strong>@EnableConfigurationProperties</strong>：标识于配置类上，将容器中任意组件的属性值和配置文件的配置项的值进行绑定</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>YAML 配置文件</strong></p>
<ul>
<li><p><strong>基本语法</strong></p>
<ul>
<li>大小写敏感</li>
<li>使用缩进表示层级关系，<strong>key: value</strong>，使用空格分割，缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li>
<li>#表示注释，从这个字符一直到行尾，都会被解析器忽略</li>
<li>数组可以使用 <strong>- value</strong> 的方式，也可以使用 <strong>[cat,dog,pig]</strong> 的行内方式</li>
<li>对象可以使用嵌套结构，也可以使用 <strong>{‘name’: ‘Tom Smith’, ‘age’: 37}</strong> 的行内方式</li>
</ul>
</li>
<li><p><strong>语法细节</strong></p>
<ul>
<li><strong>文本</strong>：单引号不会转义字符，双引号会转义字符</li>
<li><strong>大文本</strong>： <strong>|</strong> 开头，大文本写在下层，保留文本格式，换行符正确显示；**&gt;** 开头，大文本写在下层，折叠换行符</li>
<li><strong>多文档合并</strong>：使用 <strong>—</strong> 可以把多个 <strong>yaml</strong> 文档合并在一个文档中，每个文档区依然认为内容独立</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>日志配置</strong></p>
<ul>
<li><p><strong>简介</strong>：<strong>Spring</strong> 使用 <strong>commons-logging</strong> 作为内部日志，但底层日志实现开放，也可以对接其他日志框架</p>
</li>
<li><p><strong>日志配置</strong></p>
<ul>
<li>核心场景引入了日志的所用功能 <strong>spring-boot-starter-logging</strong>，默认使用了 <strong>logback + slf4j</strong> 组合作为默认底层日志</li>
<li>日志使用 <strong>ApplicationListener</strong> 监听器配置，在系统启动后即配置完成</li>
<li>日志所有的配置都可以通过修改配置文件中的以 <strong>logging</strong> 开始的所有配置项完成</li>
</ul>
</li>
<li><p><strong>日志格式</strong></p>
<ul>
<li>时间和日期：毫秒级精度</li>
<li>日志级别：<strong>ERROR</strong>，<strong>WARN</strong>，<strong>INFO</strong>，<strong>DEBUG</strong>，<strong>TRACE</strong></li>
<li>进程 <strong>ID</strong></li>
<li>**—**： 消息分割符</li>
<li>线程名： 使用 <strong>[]</strong> 包含</li>
<li><strong>Logger</strong> 名： 通常是产生日志的类名</li>
<li>消息： 日志记录的内容</li>
</ul>
</li>
<li><p><strong>记录日志</strong>：使用 <strong>getLogger</strong> 方法获取日志信息</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass());</span><br><span class="line">longger.info(<span class="string">&quot;hello,logger&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>日志级别</strong></p>
<ul>
<li><strong>ALL</strong>：打印所有日志</li>
<li><strong>TRACE</strong>：追踪框架详细流程日志，一般不使用</li>
<li><strong>DEBUG</strong>：开发调试细节日志</li>
<li><strong>INFO</strong>：关键、感兴趣信息日志，是默认日志级别</li>
<li><strong>WARN</strong>：警告但不是错误的信息日志，比如：版本过时</li>
<li><strong>ERROR</strong>：业务错误日志，比如出现各种异常</li>
<li><strong>FATAL</strong>：致命错误日志，比如jvm系统崩溃</li>
<li><strong>OFF</strong>：关闭所有日志记录</li>
</ul>
</li>
<li><p><strong>日志分组</strong></p>
<ul>
<li><p><strong>自定义分组</strong>：将相关的 <strong>logger</strong> 分组在一起，便于统一管理</p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging.group.tomcat</span>=<span class="string">org.apache.catalina,org.apache.coyote,org.apache.tomcat</span></span><br><span class="line"><span class="attr">logging.level.tomcat</span>=<span class="string">trace</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>预分组</strong></p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#web分组</span></span><br><span class="line"><span class="attr">web</span>=<span class="string">org.springframework.core.codec, org.springframework.http, org.springframework.web, org.springframework.boot.actuate.endpoint.web, org.springframework.boot.web.servlet.ServletContextInitializerBeans</span></span><br><span class="line"><span class="comment">#sql分组</span></span><br><span class="line"><span class="attr">sql</span>=<span class="string">org.springframework.jdbc.core, org.hibernate.SQL, org.jooq.tools.LoggerListener</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>文件输出</strong>：在配置文件中添加 <strong>logging.file.name</strong> 和 <strong>logging.file.path</strong> 配置项</p>
<table>
<thead>
<tr>
<th align="center">logging.file.name</th>
<th align="center">logging.file.path</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">未指定</td>
<td align="center">未指定</td>
<td align="center">仅控制台输出</td>
</tr>
<tr>
<td align="center">指定</td>
<td align="center">未指定</td>
<td align="center">写入指定文件，可以添加路径</td>
</tr>
<tr>
<td align="center">未指定</td>
<td align="center">指定</td>
<td align="center">写入指定目录，例如&#x2F;var&#x2F;log，文件名为 spring.log</td>
</tr>
<tr>
<td align="center">指定</td>
<td align="center">指定</td>
<td align="center">以 logging.file.name 为准</td>
</tr>
</tbody></table>
</li>
<li><p><strong>文件归档与滚动切割</strong></p>
<ul>
<li><p><strong>归档</strong>：每天的日志单独存到一个文档中</p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">ogging.logback.rollingpolicy.file-name-pattern</span>=<span class="string">$&#123;LOG_FILE&#125;.%d&#123;yyyy-MM-dd&#125;.%i.gz</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>切割</strong>：每个文件限制大小，超过大小切割成另外一个文件</p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging.logback.rollingpolicy.max-file-size</span>=<span class="string">1MB</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="第二节SpringBoot-Web开发"><a href="#第二节SpringBoot-Web开发" class="headerlink" title="第二节	SpringBoot-Web开发"></a>第二节	SpringBoot-Web开发</h2><h3 id="2-1WebMvcAutoConfiguration原理"><a href="#2-1WebMvcAutoConfiguration原理" class="headerlink" title="2.1	WebMvcAutoConfiguration原理"></a>2.1	WebMvcAutoConfiguration原理</h3><ul>
<li><p><strong>WebMvcAutoConfiguration 生效条件</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AutoConfiguration(after = &#123; DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,</span></span><br><span class="line"><span class="meta">		ValidationAutoConfiguration.class &#125;)</span> <span class="comment">//在这些自动配置之后</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span> <span class="comment">//如果是web应用就生效，类型SERVLET、REACTIVE 响应式web</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span> <span class="comment">//容器中没有这个Bean，才生效。默认就是没有</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span><span class="comment">//优先级</span></span><br><span class="line"><span class="meta">@ImportRuntimeHints(WebResourcesRuntimeHints.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcAutoConfiguration</span> &#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置类效果</strong></p>
<ul>
<li><strong>Filter 类</strong><ul>
<li><strong>HiddenHttpMethodFilter</strong>；页面表单提交 <strong>Rest</strong> 请求（<strong>GET</strong>、<strong>POST</strong>、<strong>PUT</strong>、<strong>DELETE</strong>）</li>
<li><strong>FormContentFilter</strong>： 避免 <strong>PUT</strong>、<strong>DELETE</strong> 请求被服务器忽略</li>
</ul>
</li>
<li><strong>WebMvcConfigurer 组件</strong><ul>
<li>所有的功能最终会和配置文件进行绑定</li>
<li><strong>WebMvcProperties</strong>：绑定 <strong>spring.mvc</strong> 配置文件</li>
<li><strong>WebProperties</strong>：绑定 <strong>spring.web</strong> 配置文件</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2-2Web场景"><a href="#2-2Web场景" class="headerlink" title="2.2	Web场景"></a>2.2	Web场景</h3><ul>
<li><p><strong>配置文件的配置项</strong></p>
<ul>
<li><strong>SpringMVC</strong> 的所有配置以 <strong>spring.mvc</strong> 开头</li>
<li><strong>Web</strong> 场景通用配置以 <strong>spring.web</strong> 开头</li>
<li>文件上传配置以 <strong>spring.servlet.multipart</strong> 开头</li>
<li>服务器的配置以 <strong>server</strong> 开头</li>
</ul>
</li>
<li><p><strong>默认配置</strong></p>
<ul>
<li>包含了 <strong>ContentNegotiatingViewResolver</strong> 和 <strong>BeanNameViewResolver</strong> 组件，方便视图解析</li>
<li>默认的静态资源处理机制： 静态资源放在 <strong>static</strong> 文件夹下即可直接访问</li>
<li>自动注册了 <strong>Converter</strong>，<strong>GenericConverter</strong>，<strong>Formatter</strong>组件，适配常见数据类型转换和格式化需求</li>
<li>支持 <strong>HttpMessageConverters</strong>，可以方便返回 <strong>json</strong> 等数据类型</li>
<li>注册 <strong>MessageCodesResolver</strong>，方便国际化及错误消息处理</li>
<li>支持静态 <strong>index.html</strong></li>
<li>自动使用 <strong>ConfigurableWebBindingInitializer</strong>，实现消息处理、数据绑定、类型转化、数据校验等功能</li>
</ul>
</li>
</ul>
<h3 id="2-3静态资源"><a href="#2-3静态资源" class="headerlink" title="2.3	静态资源"></a>2.3	静态资源</h3><ul>
<li><p><strong>静态资源默认规则</strong></p>
<ul>
<li><p><strong>静态资源规则映射</strong></p>
<ul>
<li>浏览器访问 <strong>&#x2F;webjars&#x2F;**</strong> 路径服务器去 <strong>classpath:&#x2F;META-INF&#x2F;resources&#x2F;webjars&#x2F;</strong> 下找资源</li>
<li>浏览器访问 <strong>&#x2F;**</strong> 路径服务器去静态资源默认的四个位置 <strong>classpath:&#x2F;META-INF&#x2F;resources&#x2F;<strong>，</strong>classpath:&#x2F;resources&#x2F;<strong>，</strong>classpath:&#x2F;static&#x2F;<strong>，</strong>classpath:&#x2F;public&#x2F;</strong> 下找资源</li>
</ul>
</li>
<li><p><strong>静态资源缓存规则设置</strong></p>
<ul>
<li>所有缓存的设置，直接通过配置文件 <strong>spring.web</strong> 进行配置</li>
<li><strong>cachePeriod</strong>：缓存周期</li>
<li><strong>cacheControl</strong>：<strong>HTTP</strong> 缓存控制</li>
<li><strong>useLastModified</strong>：是否使用最后一次修改，配合 <strong>HTTP Cache</strong> 规则</li>
</ul>
</li>
<li><p><strong>页面配置</strong></p>
<ul>
<li>默认页面在静态资源目录下的 <strong>index.html</strong>，如果没有就在 <strong>templates</strong>下找 <strong>index</strong> 模板页</li>
<li>默认图标在静态资源目录下的 <strong>favicon.ico</strong> 文件</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>自定义静态资源默认规则</strong></p>
<ul>
<li><p><strong>配置方式</strong></p>
<ul>
<li><p><strong>spring.web 配置项</strong></p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启静态资源映射规则</span></span><br><span class="line"><span class="attr">spring.web.resources.add-mappings</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#设置缓存</span></span><br><span class="line"><span class="attr">spring.web.resources.cache.period</span>=<span class="string">3600</span></span><br><span class="line"><span class="attr">spring.web.resources.cache.cachecontrol.max-age</span>=<span class="string">7200</span></span><br><span class="line"><span class="attr">spring.web.resources.cache.cachecontrol.cache-public</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.web.resources.cache.use-last-modified</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#自定义静态资源文件夹位置</span></span><br><span class="line"><span class="attr">spring.web.resources.static-locations</span>=<span class="string">classpath:/a/,classpath:/b/,classpath:/static/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>spring.mvc 配置项</strong></p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#自定义webjars路径前缀</span></span><br><span class="line"><span class="attr">spring.mvc.webjars-path-pattern</span>=<span class="string">/wj/**</span></span><br><span class="line"><span class="comment">#静态资源访问路径前缀</span></span><br><span class="line"><span class="attr">spring.mvc.static-path-pattern</span>=<span class="string">/static/**</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>代码方式</strong></p>
<ul>
<li><p><strong>实现 WebMvcConfigurer 接口</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/static/**&quot;</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">&quot;classpath:/a/&quot;</span>,<span class="string">&quot;classpath:/b/&quot;</span>)</span><br><span class="line">                .setCacheControl(CacheControl.maxAge(<span class="number">1180</span>, TimeUnit.SECONDS));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>添加 WebMvcConfigurer 组件</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WebMvcConfigurer <span class="title function_">webMvcConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebMvcConfigurer</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">                registry.addResourceHandler(<span class="string">&quot;/static/**&quot;</span>)</span><br><span class="line">                        .addResourceLocations(<span class="string">&quot;classpath:/a/&quot;</span>, <span class="string">&quot;classpath:/b/&quot;</span>)</span><br><span class="line">                        .setCacheControl(CacheControl.maxAge(<span class="number">1180</span>, TimeUnit.SECONDS));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2-4路径匹配"><a href="#2-4路径匹配" class="headerlink" title="2.4	路径匹配"></a>2.4	路径匹配</h3><ul>
<li><p><strong>Ant 风格路径用法</strong></p>
<ul>
<li>*****：表示任意数量的字符</li>
<li>**?**：表示任意一个字符</li>
<li>******：表示任意数量的目录</li>
<li><strong>{}</strong>：表示一个命名模式的占位符</li>
<li>**[]**：表示字符集合</li>
<li><strong>\</strong>：表示特殊字符转义</li>
</ul>
</li>
<li><p><strong>模式切换</strong></p>
<ul>
<li><p><strong>PathPatternParser</strong></p>
<ul>
<li>兼容 <strong>Ant</strong> 风格路径用法，并支持更多类型的路径模式</li>
<li>****** 多段匹配仅支持在模式末尾使用</li>
</ul>
</li>
<li><p><strong>路径匹配规则使用</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/a*/b?/&#123;p1:[a-f]+&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(HttpServletRequest request, </span></span><br><span class="line"><span class="params">                    <span class="meta">@PathVariable(&quot;p1&quot;)</span> String path)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">    <span class="keyword">return</span> uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>匹配模式切换</strong></p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.mvc.pathmatch.matching-strategy</span>=<span class="string">ant_path_matcher</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-5内容协商"><a href="#2-5内容协商" class="headerlink" title="2.5	内容协商"></a>2.5	内容协商</h3><ul>
<li><p><strong>多段内容适配</strong></p>
<ul>
<li><p><strong>默认规则</strong></p>
<ul>
<li><strong>基于请求头</strong>：默认开启，客户端向服务端发送请求，携带 <strong>HTTP</strong> 标准的 <strong>Accept</strong> 请求头</li>
<li><strong>基于请求参数</strong>：需要手动开启，根据 <strong>Get</strong> 请求携带的参数匹配，返回不同的数据类型</li>
</ul>
</li>
<li><p><strong>流程演示</strong></p>
<ul>
<li><p><strong>添加依赖</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>标识注解</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JacksonXmlRootElement</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Person <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1L</span>,<span class="string">&quot;Jack&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>开启基于请求参数的内容协商</strong></p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.mvc.contentnegotiation.favor-parameter</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.mvc.contentnegotiation.parameter-name</span>=<span class="string">type</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>自定义内容返回</strong></p>
<ul>
<li><p><strong>添加依赖</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-yaml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>对象类型转换</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1L</span>,<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;aaa@qq.com&quot;</span>,<span class="number">18</span>);</span><br><span class="line"><span class="type">YAMLFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">YAMLFactory</span>().disable(YAMLGenerator.Feature.WRITE_DOC_START_MARKER);</span><br><span class="line"><span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>(factory);</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> mapper.writeValueAsString(person);</span><br><span class="line">System.out.println(s);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>编写配置</strong></p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#新增一种媒体类型</span></span><br><span class="line"><span class="attr">spring.mvc.contentnegotiation.media-types.yaml</span>=<span class="string">text/yaml</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>添加组件</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> WebMvcConfigurer <span class="title function_">webMvcConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebMvcConfigurer</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span> <span class="comment">//配置一个能把对象转为yaml的messageConverter</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">            converters.add(<span class="keyword">new</span> <span class="title class_">MyYamlHttpMessageConverter</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-6模板引擎"><a href="#2-6模板引擎" class="headerlink" title="2.6	模板引擎"></a>2.6	模板引擎</h3><ul>
<li><p><strong>基本语法</strong></p>
<ul>
<li><p><strong>th:xxx 属性</strong>：动态渲染指定的 <strong>html</strong> 标签属性值、或者 <strong>th</strong> 指令（遍历、判断等）</p>
</li>
<li><p><strong>表达式</strong></p>
<table>
<thead>
<tr>
<th align="center">表达式</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>${}</strong></td>
<td align="center">变量取值</td>
</tr>
<tr>
<td align="center"><strong>@{}</strong></td>
<td align="center">url路径</td>
</tr>
<tr>
<td align="center"><strong>#{}</strong></td>
<td align="center">国际化消息</td>
</tr>
<tr>
<td align="center"><strong>~{}</strong></td>
<td align="center">片段引用</td>
</tr>
<tr>
<td align="center"><strong>*{}</strong></td>
<td align="center">变量选择</td>
</tr>
</tbody></table>
</li>
<li><p><strong>内置对象</strong></p>
<table>
<thead>
<tr>
<th align="center">对象</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>param</strong></td>
<td align="center">请求参数对象</td>
</tr>
<tr>
<td align="center"><strong>session</strong></td>
<td align="center">session对象</td>
</tr>
<tr>
<td align="center"><strong>application</strong></td>
<td align="center">application对象</td>
</tr>
<tr>
<td align="center"><strong>#dates</strong></td>
<td align="center">日期工具类</td>
</tr>
<tr>
<td align="center"><strong>#strings</strong></td>
<td align="center">字符串操作</td>
</tr>
<tr>
<td align="center"><strong>#arrays</strong></td>
<td align="center">array工具</td>
</tr>
<tr>
<td align="center"><strong>#lists</strong></td>
<td align="center">list工具</td>
</tr>
<tr>
<td align="center"><strong>#sets</strong></td>
<td align="center">set工具</td>
</tr>
<tr>
<td align="center"><strong>#maps</strong></td>
<td align="center">map工具</td>
</tr>
</tbody></table>
</li>
<li><p><strong>属性设置</strong></p>
<ul>
<li><p><strong>th:text</strong>：动态绑定标签内容</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;content&#125;&quot;</span>&gt;</span>原内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>th:href</strong>：动态绑定链接目标</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>th:attr</strong>：设置标签的属性</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">th:attr</span>=<span class="string">&quot;src=@&#123;/images/gtvglogo.png&#125;,title=#&#123;logo&#125;,alt=#&#123;logo&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>th:each</strong>：遍历集合的内容</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;prod : $&#123;prods&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;prod.name&#125;&quot;</span>&gt;</span>Onions<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;prod.price&#125;&quot;</span>&gt;</span>2.41<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>th:if</strong>：判断属性值决定是否执行</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;comments.html&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">th:if</span>=<span class="string">&quot;$&#123;not #lists.isEmpty(prod.comments)&#125;&quot;</span>&gt;</span>view<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>th:switch</strong>：多项选择</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">&quot;$&#123;user.role&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">&quot;&#x27;admin&#x27;&quot;</span>&gt;</span>User is an administrator<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">&quot;#&#123;roles.manager&#125;&quot;</span>&gt;</span>User is a manager<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">&quot;*&quot;</span>&gt;</span>User is some other thing<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>行内写法</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, [[$&#123;session.user.name&#125;]]!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>模板布局</strong></p>
<ul>
<li><p><strong>th:fragment</strong>：定义模板</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">th:fragment</span>=<span class="string">&quot;copy&quot;</span>&gt;</span><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>**~{templatename::selector}**：引用模板</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">&quot;~&#123;footer :: copy&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;~&#123;footer :: copy&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>th:insert 和 th:replace</strong>：插入模板</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">&quot;~&#123;footer :: copy&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;~&#123;footer :: copy&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2-7国际化"><a href="#2-7国际化" class="headerlink" title="2.7	国际化"></a>2.7	国际化</h3><ul>
<li><p><strong>国际化步骤</strong></p>
<ul>
<li><p><strong>消息文件</strong></p>
<ul>
<li><strong>messages.properties</strong>：默认消息文件</li>
<li><strong>messages_zh_CN.properties</strong>：中文环境消息文件</li>
<li><strong>messages_en_US.properties</strong>：英语环境消息文件</li>
</ul>
</li>
<li><p><strong>获取配置项值</strong></p>
<ul>
<li><p><strong>代码方式</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">MessageSource messageSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/haha&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">haha</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    <span class="type">Locale</span> <span class="variable">locale</span> <span class="operator">=</span> request.getLocale();</span><br><span class="line">    <span class="type">String</span> <span class="variable">login</span> <span class="operator">=</span> messageSource.getMessage(<span class="string">&quot;login&quot;</span>, <span class="literal">null</span>, locale);</span><br><span class="line">    <span class="keyword">return</span> login;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>页面标签方式</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;login&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2-8错误处理"><a href="#2-8错误处理" class="headerlink" title="2.8	错误处理"></a>2.8	错误处理</h3><ul>
<li><strong>默认机制</strong></li>
<li><strong>自定义错误响应</strong></li>
</ul>
<h3 id="2-9嵌入式容器"><a href="#2-9嵌入式容器" class="headerlink" title="2.9	嵌入式容器"></a>2.9	嵌入式容器</h3><ul>
<li><strong>自动配置原理</strong></li>
<li><strong>自定义容器</strong></li>
</ul>
<h3 id="2-10全面接管SpringMVC"><a href="#2-10全面接管SpringMVC" class="headerlink" title="2.10	全面接管SpringMVC"></a>2.10	全面接管SpringMVC</h3><ul>
<li><strong>自动配置规则</strong></li>
<li><strong>禁用默认行为</strong></li>
<li><strong>WebMvcConfigurer 功能</strong></li>
</ul>
<h3 id="2-11Web新特性"><a href="#2-11Web新特性" class="headerlink" title="2.11	Web新特性"></a>2.11	Web新特性</h3><ul>
<li><strong>Problemdetails</strong></li>
<li><strong>函数式 Web</strong></li>
</ul>
<h2 id="第三节SpringBoot数据访问"><a href="#第三节SpringBoot数据访问" class="headerlink" title="第三节	SpringBoot数据访问"></a>第三节	SpringBoot数据访问</h2><h2 id="第四节SpringBoot基础特性"><a href="#第四节SpringBoot基础特性" class="headerlink" title="第四节	SpringBoot基础特性"></a>第四节	SpringBoot基础特性</h2><h3 id="4-1SpringApplication"><a href="#4-1SpringApplication" class="headerlink" title="4.1	SpringApplication"></a>4.1	SpringApplication</h3><h3 id="4-2Profiles"><a href="#4-2Profiles" class="headerlink" title="4.2	Profiles"></a>4.2	Profiles</h3><h3 id="4-3外部化配置"><a href="#4-3外部化配置" class="headerlink" title="4.3	外部化配置"></a>4.3	外部化配置</h3><h3 id="4-4单元测试JUnit5"><a href="#4-4单元测试JUnit5" class="headerlink" title="4.4	单元测试JUnit5"></a>4.4	单元测试JUnit5</h3><h2 id="第五节SpringBoot核心原理"><a href="#第五节SpringBoot核心原理" class="headerlink" title="第五节	SpringBoot核心原理"></a>第五节	SpringBoot核心原理</h2><h3 id="5-1事件和监听器"><a href="#5-1事件和监听器" class="headerlink" title="5.1	事件和监听器"></a>5.1	事件和监听器</h3><h3 id="5-2自动配置原理"><a href="#5-2自动配置原理" class="headerlink" title="5.2	自动配置原理"></a>5.2	自动配置原理</h3><h3 id="5-3自定义starter"><a href="#5-3自定义starter" class="headerlink" title="5.3	自定义starter"></a>5.3	自定义starter</h3><h2 id="第六节NoSQL"><a href="#第六节NoSQL" class="headerlink" title="第六节	NoSQL"></a>第六节	NoSQL</h2><h2 id="第七节接口文档"><a href="#第七节接口文档" class="headerlink" title="第七节	接口文档"></a>第七节	接口文档</h2><h3 id="7-1WebClient"><a href="#7-1WebClient" class="headerlink" title="7.1	WebClient"></a>7.1	WebClient</h3><h3 id="7-2HTTP-Interface"><a href="#7-2HTTP-Interface" class="headerlink" title="7.2	HTTP Interface"></a>7.2	HTTP Interface</h3><h2 id="第八节远程调用"><a href="#第八节远程调用" class="headerlink" title="第八节	远程调用"></a>第八节	远程调用</h2><h2 id="第九节消息服务"><a href="#第九节消息服务" class="headerlink" title="第九节	消息服务"></a>第九节	消息服务</h2><h2 id="第十节Web安全"><a href="#第十节Web安全" class="headerlink" title="第十节	Web安全"></a>第十节	Web安全</h2><h3 id="10-1安全架构"><a href="#10-1安全架构" class="headerlink" title="10.1	安全架构"></a>10.1	安全架构</h3><h3 id="10-2Spring-Security-原理"><a href="#10-2Spring-Security-原理" class="headerlink" title="10.2	Spring Security 原理"></a>10.2	Spring Security 原理</h3><h3 id="10-3使用"><a href="#10-3使用" class="headerlink" title="10.3	使用"></a>10.3	使用</h3><h3 id="10-4实战"><a href="#10-4实战" class="headerlink" title="10.4	实战"></a>10.4	实战</h3><h2 id="第十一节可观测性"><a href="#第十一节可观测性" class="headerlink" title="第十一节	可观测性"></a>第十一节	可观测性</h2><h2 id="第十二节AOT"><a href="#第十二节AOT" class="headerlink" title="第十二节	AOT"></a>第十二节	AOT</h2><h3 id="12-1AOT与JIT"><a href="#12-1AOT与JIT" class="headerlink" title="12.1	AOT与JIT"></a>12.1	AOT与JIT</h3><h3 id="12-2GraalVM"><a href="#12-2GraalVM" class="headerlink" title="12.2	GraalVM"></a>12.2	GraalVM</h3><h3 id="12-3SpringBoot整合"><a href="#12-3SpringBoot整合" class="headerlink" title="12.3	SpringBoot整合"></a>12.3	SpringBoot整合</h3><h2 id="第十三节Reactor核心"><a href="#第十三节Reactor核心" class="headerlink" title="第十三节	Reactor核心"></a>第十三节	Reactor核心</h2><h2 id="第十四节Spring-Webflux"><a href="#第十四节Spring-Webflux" class="headerlink" title="第十四节	Spring Webflux"></a>第十四节	Spring Webflux</h2><h2 id="第十五节R2DBC"><a href="#第十五节R2DBC" class="headerlink" title="第十五节	R2DBC"></a>第十五节	R2DBC</h2><h2 id="第十六节Spring-Security-Reactive"><a href="#第十六节Spring-Security-Reactive" class="headerlink" title="第十六节	Spring Security Reactive"></a>第十六节	Spring Security Reactive</h2>]]></content>
  </entry>
  <entry>
    <title>SpringMVC</title>
    <url>/2024/01/28/SpringMVC/</url>
    <content><![CDATA[<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><h2 id="第一章SpringMVC简介"><a href="#第一章SpringMVC简介" class="headerlink" title="第一章	SpringMVC简介"></a>第一章	SpringMVC简介</h2><h3 id="1-1SpringMVC"><a href="#1-1SpringMVC" class="headerlink" title="1.1	SpringMVC"></a>1.1	SpringMVC</h3><ul>
<li><strong>MVC概述</strong>：一种软件架构的思想，将软件按照模型、视图、控制器来划分<ul>
<li><strong>M</strong>：模型层，指工程中的 <strong>JavaBean</strong>，可分为实体类和 <strong>Service</strong> 或 <strong>Dao</strong> 业务处理类，用于存储业务数据或处理业务逻辑和数据访问</li>
<li><strong>V</strong>：视图层，指工程当中的 <strong>html</strong> 或 <strong>jsp</strong> 页面，用于与用户进行交互，展示数据</li>
<li><strong>C</strong>：控制层，指工程当中的 <strong>Servlet</strong>，用于接收请求和响应浏览器</li>
</ul>
</li>
<li><strong>SpringMVC简介</strong>：<strong>Spring</strong> 的一个后续产品，是 <strong>Spring</strong> 的一个子项目，为表述层开发提供的一整套完备的解决方案</li>
<li><strong>SpringMVC的特点</strong><ul>
<li><strong>Spring</strong> 家族原生产品，与 <strong>IOC</strong> 容器等基础设施无缝对接</li>
<li>基于原生的 <strong>Servlet</strong>，通过了功能强大的前端控制器 <strong>DispatcherServlet</strong>，对请求和响应进行统一处理</li>
<li>表述层各细分领域需要解决的问题全方位覆盖，提供全面解决方案</li>
<li>代码清新简洁，大幅度提升开发效率</li>
<li>内部组件化程度高，可插拔式组件即插即用，想要什么功能配置相应组件即可</li>
<li>性能卓著，尤其适合现代大型、超大型互联网项目要求</li>
</ul>
</li>
</ul>
<h3 id="1-2项目配置"><a href="#1-2项目配置" class="headerlink" title="1.2	项目配置"></a>1.2	项目配置</h3><ul>
<li><p><strong>创建Maven工程</strong></p>
<ul>
<li><p>添加 <strong>web</strong> 模块，新建 <strong>webapp</strong> 目录，使用 <strong>war</strong> 打包方式</p>
</li>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SpringMVC --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- ServletAPI --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Spring6和Thymeleaf整合包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring6<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>配置web.xml文件</strong>：注册前端控制器，对浏览器发送的请求统一进行处理</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:SpringMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建请求控制器</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">    	<span class="comment">//设置视图名称</span></span><br><span class="line">    	<span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建SpringMVC配置文件</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动扫描包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.mvc.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;springResourceTemplateResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring6.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;templateEngine&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring6.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;springResourceTemplateResolver&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring6.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;templateEngine&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第二章-RequestMapping注解"><a href="#第二章-RequestMapping注解" class="headerlink" title="第二章	@RequestMapping注解"></a>第二章	@RequestMapping注解</h2><h3 id="2-1-RequestMapping注解"><a href="#2-1-RequestMapping注解" class="headerlink" title="2.1	@RequestMapping注解"></a>2.1	@RequestMapping注解</h3><ul>
<li><strong>注解功能</strong>：将请求和处理请求的控制器方法关联起来，建立映射关系，当 <strong>SpringMVC</strong> 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求</li>
<li><strong>注解位置</strong><ul>
<li><strong>类注解</strong>：设置映射请求的请求路径的初始信息</li>
<li><strong>方法注解</strong>：设置映射请求请求路径的具体信息</li>
</ul>
</li>
</ul>
<h3 id="2-2-RequestMapping属性"><a href="#2-2-RequestMapping属性" class="headerlink" title="2.2	@RequestMapping属性"></a>2.2	@RequestMapping属性</h3><ul>
<li><p><strong>value属性</strong></p>
<ul>
<li><p><strong>功能</strong>：是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求</p>
</li>
<li><p><strong>示例</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>method属性</strong></p>
<ul>
<li><p><strong>功能</strong>：是一个 <strong>RequestMethod</strong> 类型的数组，表示该请求映射能够匹配多种请求方式的请求</p>
</li>
<li><p><strong>示例</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;,</span></span><br><span class="line"><span class="meta">        method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>派生注解</strong>：<strong>post</strong> 方式可以使用 <strong>PostMapping</strong> 注解，<strong>get</strong> 方式可以使用 <strong>GetMapping</strong> 注解</p>
</li>
</ul>
</li>
<li><p><strong>param属性</strong></p>
<ul>
<li><p><strong>功能</strong>：是一个字符串类型的数组，可以通过四种表达式设置请求参数和请求映射的匹配关系</p>
</li>
<li><p><strong>示例</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span></span><br><span class="line"><span class="meta">        ,method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span></span><br><span class="line"><span class="meta">        ,params = &#123;&quot;username&quot;,&quot;password!=123456&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>headers属性</strong></p>
<ul>
<li><p><strong>功能</strong>：是一个字符串类型的数组，可以通过四种表达式设置请求头信息和请求映射的匹配关系</p>
</li>
<li><p><strong>示例</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span></span><br><span class="line"><span class="meta">        ,header = &#123;&quot;Host=localhost:8080&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-3路径中的占位符"><a href="#2-3路径中的占位符" class="headerlink" title="2.3	路径中的占位符"></a>2.3	路径中的占位符</h3><ul>
<li><p><strong>Ant风格路径</strong></p>
<ul>
<li>**?**：表示任意的单个字符</li>
<li>*****：表示任意的0个或多个字符</li>
<li>******：表示任意的一层或多层目录</li>
</ul>
</li>
<li><p><strong>路径中的占位符</strong></p>
<ul>
<li><p>使用路径表示传入的参数，例如将 <strong>&#x2F;deleteUser?id&#x3D;1</strong> 改写成 <strong>&#x2F;deleteUser&#x2F;1</strong></p>
</li>
<li><p>在相应的 <strong>@RequestMapping</strong> 注解的 <strong>value</strong> 属性中通过占位符 <strong>{xxx}</strong> 表示传输的数据</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;a th:href=<span class="string">&quot;@&#123;/testRest/1/admin&#125;&quot;</span>&gt;测试路径中的占位符--&gt;/testRest&lt;/a&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/testRest/&#123;id&#125;/&#123;username&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRest</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id, <span class="meta">@PathVariable(&quot;username&quot;)</span> String username)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;id:&quot;</span>+id+<span class="string">&quot;,username:&quot;</span>+username);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第三章获取请求参数"><a href="#第三章获取请求参数" class="headerlink" title="第三章	获取请求参数"></a>第三章	获取请求参数</h2><h3 id="3-1通过ServletAPI获取"><a href="#3-1通过ServletAPI获取" class="headerlink" title="3.1	通过ServletAPI获取"></a>3.1	通过ServletAPI获取</h3><ul>
<li><p><strong>Servlet获取</strong>：使用 <strong>HttpServletRequest</strong> 的 <strong>getParameter</strong> 方法获取请求参数</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span>+username+<span class="string">&quot;,password:&quot;</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-2通过控制器方法的形参获取"><a href="#3-2通过控制器方法的形参获取" class="headerlink" title="3.2	通过控制器方法的形参获取"></a>3.2	通过控制器方法的形参获取</h3><ul>
<li><p><strong>控制器方法形参获取</strong>：在控制器方法的形参位置，设置和请求参数同名的形参获取参数</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;a th:href=<span class="string">&quot;@&#123;/testParam(username=&#x27;admin&#x27;,password=123456)&#125;&quot;</span>&gt;测试获取请求参数--&gt;/testParam&lt;/a&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam</span><span class="params">(String username, String password)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span>+username+<span class="string">&quot;,password:&quot;</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-3请求注解"><a href="#3-3请求注解" class="headerlink" title="3.3	请求注解"></a>3.3	请求注解</h3><ul>
<li><strong>@RequestParam</strong>：将请求参数和控制器方法的形参创建映射关系<ul>
<li><strong>value属性</strong>：指定为形参赋值的请求参数的参数名</li>
<li><strong>required属性</strong>：设置是否必须传输此请求参数，默认值为 <strong>true</strong></li>
<li><strong>defaultValue属性</strong>：不管 <strong>required</strong> 属性值为 <strong>true</strong> 或 <strong>false</strong>，当 <strong>value</strong> 所指定的请求参数没有传输或传输的值为空时，则使用默认值为形参赋值</li>
</ul>
</li>
<li><strong>@RequestHeader</strong>：将请求头信息和控制器方法的形参创建映射关系，属性及其用法同上</li>
<li><strong>@CookieValue</strong>：将 <strong>cookie</strong> 数据和控制器方法的形参创建映射关系，属性及其用法同上</li>
</ul>
<h3 id="3-4通过POJO获取参数"><a href="#3-4通过POJO获取参数" class="headerlink" title="3.4	通过POJO获取参数"></a>3.4	通过POJO获取参数</h3><ul>
<li><p><strong>POJO获取参数</strong>：在控制器方法的形参位置设置一个实体类类型的形参，此时若浏览器传输的请求参数的参数名和实体类中的属性名一致，那么请求参数就会为此属性赋值</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;form th:action=<span class="string">&quot;@&#123;/testpojo&#125;&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    密码：&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    性别：&lt;input type=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;sex&quot;</span> value=<span class="string">&quot;男&quot;</span>&gt;男&lt;input type=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;sex&quot;</span> value=<span class="string">&quot;女&quot;</span>&gt;女&lt;br&gt;</span><br><span class="line">    年龄：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;age&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    邮箱：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;email&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@RequestMapping(&quot;/testpojo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testPOJO</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-5解决乱码问题"><a href="#3-5解决乱码问题" class="headerlink" title="3.5	解决乱码问题"></a>3.5	解决乱码问题</h3><ul>
<li><p><strong>解决乱码问题</strong>：使用 <strong>SpringMVC</strong> 提供的编码过滤器 <strong>CharacterEncodingFilter</strong>，在 <strong>web.xml</strong> 当中进行注册</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第四章域对象共享数据"><a href="#第四章域对象共享数据" class="headerlink" title="第四章	域对象共享数据"></a>第四章	域对象共享数据</h2><h3 id="4-1request域对象共享数据"><a href="#4-1request域对象共享数据" class="headerlink" title="4.1	request域对象共享数据"></a>4.1	request域对象共享数据</h3><ul>
<li><p><strong>使用ServletAPI</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testServletAPI&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testServletAPI</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    request.setAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,servletAPI&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用ModelAndView</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModelAndView&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">testModelAndView</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">mav</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">    mav.addObject(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,ModelAndView&quot;</span>);</span><br><span class="line">    mav.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用Model</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testModel</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,Model&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用Map</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testMap&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testMap</span><span class="params">(Map&lt;String, Object&gt; map)</span>&#123;</span><br><span class="line">    map.put(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,Map&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-2session域对象共享数据"><a href="#4-2session域对象共享数据" class="headerlink" title="4.2	session域对象共享数据"></a>4.2	session域对象共享数据</h3><ul>
<li><p><strong>使用session</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testSession&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testSession</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    session.setAttribute(<span class="string">&quot;testSessionScope&quot;</span>, <span class="string">&quot;hello,session&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-3application域对象共享数据"><a href="#4-3application域对象共享数据" class="headerlink" title="4.3	application域对象共享数据"></a>4.3	application域对象共享数据</h3><ul>
<li><p><strong>使用application</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testApplication&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testApplication</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">application</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    application.setAttribute(<span class="string">&quot;testApplicationScope&quot;</span>, <span class="string">&quot;hello,application&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第五章视图"><a href="#第五章视图" class="headerlink" title="第五章	视图"></a>第五章	视图</h2><h3 id="5-1ThymeleafView"><a href="#5-1ThymeleafView" class="headerlink" title="5.1	ThymeleafView"></a>5.1	ThymeleafView</h3><ul>
<li><p><strong>视图解析器</strong>：视图名称被 <strong>SpringMVC</strong> 配置文件中所配置的视图解析器解析，视图名称拼接视图前缀和视图后缀所得到的最终路径，会通过转发的方式实现跳转</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testHello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testHello</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-2转发视图"><a href="#5-2转发视图" class="headerlink" title="5.2	转发视图"></a>5.2	转发视图</h3><ul>
<li><p><strong>转发视图</strong>：当控制器方法中所设置的视图名称以 <strong>forward:</strong> 为前缀时，创建 <strong>InternalResourceView</strong> 视图，此时的视图名称不会视图解析器解析，而是会去除前缀并将剩余部分作为最终路径通过转发的方式实现跳转</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testForward&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testForward</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/testHello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-3重定向视图"><a href="#5-3重定向视图" class="headerlink" title="5.3	重定向视图"></a>5.3	重定向视图</h3><ul>
<li><p><strong>重定向视图</strong>：当控制器方法中所设置的视图名称以 <strong>redirect:</strong> 为前缀时，创建 <strong>RedirectView</strong> 视图，此时的视图名称不会被视图解析器解析，而是会去除前缀并将剩余部分作为最终路径通过重定向的方式实现跳转</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRedirect&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRedirect</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/testHello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-4视图控制器"><a href="#5-4视图控制器" class="headerlink" title="5.4	视图控制器"></a>5.4	视图控制器</h3><ul>
<li><p><strong>控制器视图</strong>：仅仅用来实现页面跳转，即只需要设置视图名称时</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/testView&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;success&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第六章RESTful"><a href="#第六章RESTful" class="headerlink" title="第六章	RESTful"></a>第六章	RESTful</h2><h3 id="6-1RESTful简介"><a href="#6-1RESTful简介" class="headerlink" title="6.1	RESTful简介"></a>6.1	RESTful简介</h3><ul>
<li><p><strong>RESTful概述</strong>：全称 <strong>Representational State Transfer</strong>，表现层资源状态转移</p>
<ul>
<li><strong>资源</strong>：将服务器看作是由很多离散的资源组成，每个资源是服务器上一个可命名的抽象概念，不仅仅能代表服务器文件系统中的一个文件、数据库中的一张表等等具体的东西，可以将资源设计的要多抽象有多抽象，只要想象力允许而且客户端应用开发者能够理解</li>
<li><strong>资源的表述</strong>：一段对于资源在某个特定时刻的状态的描述，可以在客户端-服务器端之间转移（交换）</li>
<li><strong>状态转移</strong>：在客户端和服务器端之间转移代表资源状态的表述，通过转移和操作资源的表述，来间接实现操作资源的目的</li>
</ul>
</li>
<li><p><strong>RESTful的实现</strong>：使用不同类型报文实现不同操作，<strong>GET</strong> 用来获取资源，<strong>POST</strong> 用来新建资源，<strong>PUT</strong> 用来更新资源，<strong>DELETE</strong> 用来删除资源</p>
<table>
<thead>
<tr>
<th align="center">操作</th>
<th align="center">传统方式</th>
<th align="center">REST风格</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>查询操作</strong></td>
<td align="center">getUserById?id&#x3D;1</td>
<td align="center">user&#x2F;1–&gt;get请求方式</td>
</tr>
<tr>
<td align="center"><strong>保存操作</strong></td>
<td align="center">saveUser</td>
<td align="center">user–&gt;post请求方式</td>
</tr>
<tr>
<td align="center"><strong>删除操作</strong></td>
<td align="center">deleteUser?id&#x3D;1</td>
<td align="center">user&#x2F;1–&gt;delete请求方式</td>
</tr>
<tr>
<td align="center"><strong>更新操作</strong></td>
<td align="center">updateUser</td>
<td align="center">user–&gt;put请求方式</td>
</tr>
</tbody></table>
</li>
<li><p><strong>HiddenHttpMethodFilter</strong>：将 <strong>post</strong> 请求转换为 <strong>DELETE</strong> 或者 <strong>PUT</strong> 请求</p>
<ul>
<li><p><strong>注册过滤器</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>表单示例</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;delete_form&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;delete&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="6-2RTESTful案例"><a href="#6-2RTESTful案例" class="headerlink" title="6.2	RTESTful案例"></a>6.2	RTESTful案例</h3><ul>
<li><p><strong>访问首页</strong></p>
<ul>
<li><p><strong>创建html页面</strong></p>
</li>
<li><p><strong>配置视图控制器</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;index&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>查询数据</strong></p>
<ul>
<li><p><strong>创建html页面</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dataTable&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;5&quot;</span>&gt;</span>Employee Info<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>lastName<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>email<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>gender<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>options(<span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toAdd&#125;&quot;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">a</span>&gt;</span>)<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;employee : $&#123;employeeList&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;deleteA&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;deleteEmployee&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>控制器方法</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getEmployeeList</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    Collection&lt;Employee&gt; employeeList = employeeDao.getAll();</span><br><span class="line">    model.addAttribute(<span class="string">&quot;employeeList&quot;</span>, employeeList);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;employee_list&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>删除数据</strong></p>
<ul>
<li><p><strong>创建html页面</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;delete_form&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;delete&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>绑定点击事件</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;deleteA&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;deleteEmployee&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#dataTable&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">deleteEmployee</span>:<span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> delete_form = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;delete_form&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                delete_form.<span class="property">action</span> = event.<span class="property">target</span>.<span class="property">href</span>;</span></span><br><span class="line"><span class="language-javascript">                delete_form.<span class="title function_">submit</span>();</span></span><br><span class="line"><span class="language-javascript">                event.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>控制器方法</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;, method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">deleteEmployee</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">    employeeDao.delete(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>跳转页面</strong></p>
<ul>
<li><p><strong>创建html页面</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    lastName:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    email:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    gender:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>male</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>female<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;add&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置视图控制器</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/toAdd&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;employee_add&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>添加数据</strong></p>
<ul>
<li><p><strong>创建html页面</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    lastName:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    email:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    gender:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>male</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>female<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;add&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>控制器方法</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addEmployee</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">    employeeDao.save(employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>更新数据</strong></p>
<ul>
<li><p><strong>创建html页面</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;put&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.id&#125;&quot;</span>&gt;</span></span><br><span class="line">    lastName:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    email:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    gender:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">th:field</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span>male</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">th:field</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span>female<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;update&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>控制器方法</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getEmployeeById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id, Model model)</span>&#123;</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeDao.get(id);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;employee&quot;</span>, employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;employee_update&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第七章报文信息转换"><a href="#第七章报文信息转换" class="headerlink" title="第七章	报文信息转换"></a>第七章	报文信息转换</h2><h3 id="7-1请求报文"><a href="#7-1请求报文" class="headerlink" title="7.1	请求报文"></a>7.1	请求报文</h3><ul>
<li><p><strong>@RequestBody</strong>：获取请求体，为当前注解标识的形参赋值</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;form th:action=<span class="string">&quot;@&#123;/testRequestBody&#125;&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    密码：&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestBody&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestBody</span><span class="params">(<span class="meta">@RequestBody</span> String requestBody)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;requestBody:&quot;</span>+requestBody);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>RequestEntity</strong>：封装请求报文的一种类型，可以通过 <strong>getHeaders()</strong> 获取请求头信息，通过 <strong>getBody()</strong> 获取请求体信息</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestEntity&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestEntity</span><span class="params">(RequestEntity&lt;String&gt; requestEntity)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;requestHeader:&quot;</span>+requestEntity.getHeaders());</span><br><span class="line">    System.out.println(<span class="string">&quot;requestBody:&quot;</span>+requestEntity.getBody());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="7-2SpringMVC处理json"><a href="#7-2SpringMVC处理json" class="headerlink" title="7.2	SpringMVC处理json"></a>7.2	SpringMVC处理json</h3><ul>
<li><p><strong>响应报文处理json</strong></p>
<ul>
<li><p><strong>导入依赖</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.15.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>开启注解驱动</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>控制器方法返回Java对象</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testResponseUser&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">testResponseUser</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1001</span>,<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="7-3响应报文"><a href="#7-3响应报文" class="headerlink" title="7.3	响应报文"></a>7.3	响应报文</h3><ul>
<li><p><strong>@ResponseBody</strong>：用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到浏览器</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testResponseBody&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testResponseBody</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>ResponseEntity</strong>：用于控制器方法的返回值类型，该控制器方法的返回值就是响应到浏览器的响应报文</p>
</li>
<li><p><strong>@RestController</strong>：<strong>springMVC</strong> 提供的一个复合注解，标识在控制器的类上，就相当于为类添加了 <strong>@Controller</strong> 注解，并且为其中的每个方法添加了 <strong>@ResponseBody</strong> 注解</p>
</li>
</ul>
<h2 id="第八章文件上传和下载"><a href="#第八章文件上传和下载" class="headerlink" title="第八章	文件上传和下载"></a>第八章	文件上传和下载</h2><h3 id="8-1文件下载"><a href="#8-1文件下载" class="headerlink" title="8.1	文件下载"></a>8.1	文件下载</h3><ul>
<li><p><strong>使用ResponseEntity</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testDown&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="type">byte</span>[]&gt; testResponseEntity(HttpSession session) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//获取ServletContext对象</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    <span class="comment">//获取服务器中文件的真实路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;/static/img/1.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">//创建输入流</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(realPath);</span><br><span class="line">    <span class="comment">//创建字节数组</span></span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[is.available()];</span><br><span class="line">    <span class="comment">//将流读到字节数组中</span></span><br><span class="line">    is.read(bytes);</span><br><span class="line">    <span class="comment">//创建HttpHeaders对象设置响应头信息</span></span><br><span class="line">    MultiValueMap&lt;String, String&gt; headers = <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">    <span class="comment">//设置要下载方式以及下载文件的名字</span></span><br><span class="line">    headers.add(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=1.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">//设置响应状态码</span></span><br><span class="line">    <span class="type">HttpStatus</span> <span class="variable">statusCode</span> <span class="operator">=</span> HttpStatus.OK;</span><br><span class="line">    <span class="comment">//创建ResponseEntity对象</span></span><br><span class="line">    ResponseEntity&lt;<span class="type">byte</span>[]&gt; responseEntity = <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(bytes, headers, statusCode);</span><br><span class="line">    <span class="comment">//关闭输入流</span></span><br><span class="line">    is.close();</span><br><span class="line">    <span class="keyword">return</span> responseEntity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="8-2文件上传"><a href="#8-2文件上传" class="headerlink" title="8.2	文件上传"></a>8.2	文件上传</h3><ul>
<li><p><strong>文件上传</strong></p>
<ul>
<li><p><strong>添加依赖</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>添加bean配置</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.support.StandardServletMultipartResolver&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>添加Servlet配置</strong>：嵌入到前端控制器 <strong>servlet</strong> 标签中</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">multipart-config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--         上传文件最大为多少   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">max-file-size</span>&gt;</span>10485760<span class="tag">&lt;/<span class="name">max-file-size</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--         最大的请求大小   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">max-request-size</span>&gt;</span>10485760<span class="tag">&lt;/<span class="name">max-request-size</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--         多大以上的文件可以上传   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">file-size-threshold</span>&gt;</span>0<span class="tag">&lt;/<span class="name">file-size-threshold</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">multipart-config</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>前端代码</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/testUp&#125;&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;picture&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>控制器方法</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testUp&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testUpload</span><span class="params">(<span class="meta">@RequestParam(&quot;picture&quot;)</span>MultipartFile picture, HttpSession session)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//获取上传的文件的文件名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> picture.getOriginalFilename();</span><br><span class="line">    <span class="comment">//处理文件重名问题</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">hzName</span> <span class="operator">=</span> fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    fileName = UUID.randomUUID() + hzName;</span><br><span class="line">    <span class="comment">//获取服务器中photo目录的路径</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    <span class="type">String</span> <span class="variable">photoPath</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;picture&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(photoPath);</span><br><span class="line">    <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">        file.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">finalPath</span> <span class="operator">=</span> photoPath + File.separator + fileName;</span><br><span class="line">    <span class="comment">//实现上传功能</span></span><br><span class="line">    picture.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(finalPath));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;successs&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第九章拦截器"><a href="#第九章拦截器" class="headerlink" title="第九章	拦截器"></a>第九章	拦截器</h2><h3 id="9-1拦截器配置"><a href="#9-1拦截器配置" class="headerlink" title="9.1	拦截器配置"></a>9.1	拦截器配置</h3><ul>
<li><p><strong>拦截器</strong>：用于拦截控制器的执行，需要实现 <strong>HandlerInterceptor</strong> 接口</p>
</li>
<li><p><strong>拦截器的配置</strong></p>
<ul>
<li><p><strong>bean标签处理所有请求</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.interceptor.FirstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>ref标签处理所有请求</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>interceptor标签处理部分请求</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/testRequestEntity&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="9-2拦截器的抽象方法"><a href="#9-2拦截器的抽象方法" class="headerlink" title="9.2	拦截器的抽象方法"></a>9.2	拦截器的抽象方法</h3><ul>
<li><strong>preHandle</strong>：控制器方法执行之前执行 **preHandle()**，其返回值表示是否拦截或放行，返回 <strong>true</strong> 为放行，即调用控制器方法；返回 <strong>false</strong> 表示拦截，即不调用控制器方法</li>
<li><strong>postHandle</strong>：控制器方法执行之后执行 <strong>postHandle()</strong></li>
<li><strong>afterComplation</strong>：处理完视图和模型数据，渲染视图完毕之后执行 <strong>afterComplation()</strong></li>
</ul>
<h3 id="9-3拦截器的执行顺序"><a href="#9-3拦截器的执行顺序" class="headerlink" title="9.3	拦截器的执行顺序"></a>9.3	拦截器的执行顺序</h3><ul>
<li><strong>每个preHandle返回true</strong>：<strong>preHandle()</strong> 会按照配置的顺序执行，而 <strong>postHandle()</strong> 和 <strong>afterComplation()</strong> 会按照配置的反序执行</li>
<li><strong>每个preHandle都返回false</strong>：<strong>preHandle()</strong> 返回 <strong>false</strong> 和它之前的拦截器的 <strong>preHandle()</strong> 都会执行，<strong>postHandle()</strong> 都不执行，返回<strong>false</strong> 的拦截器之前的拦截器的 <strong>afterComplation()</strong> 会执行</li>
</ul>
<h2 id="第十章异常处理器"><a href="#第十章异常处理器" class="headerlink" title="第十章	异常处理器"></a>第十章	异常处理器</h2><h3 id="10-1基于配置的异常处理"><a href="#10-1基于配置的异常处理" class="headerlink" title="10.1	基于配置的异常处理"></a>10.1	基于配置的异常处理</h3><ul>
<li><p><strong>异常处理器</strong></p>
<ul>
<li><p><strong>bean配置</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionMappings&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--设置异常对应的视图--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;java.lang.ArithmeticException&quot;</span>&gt;</span>error<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置将异常信息共享在请求域中的键--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionAttribute&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>错误视图</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span> = <span class="string">&quot;$&#123;ex&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="10-2基于注解的异常处理"><a href="#10-2基于注解的异常处理" class="headerlink" title="10.2	基于注解的异常处理"></a>10.2	基于注解的异常处理</h3><ul>
<li><p><strong>异常处理器</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionController</span> &#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(ArithmeticException.class)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleArithmeticException</span><span class="params">(Exception ex, Model model)</span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;ex&quot;</span>, ex);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第十一章注解配置SpringMVC"><a href="#第十一章注解配置SpringMVC" class="headerlink" title="第十一章	注解配置SpringMVC"></a>第十一章	注解配置SpringMVC</h2><h3 id="11-1初始化类"><a href="#11-1初始化类" class="headerlink" title="11.1	初始化类"></a>11.1	初始化类</h3><ul>
<li><p><strong>初始化类代替web.xml</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebInit</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定spring的配置类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定SpringMVC的配置类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;WebConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定DispatcherServlet的映射规则，即url-pattern</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加过滤器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        <span class="type">CharacterEncodingFilter</span> <span class="variable">encodingFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">        encodingFilter.setEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        encodingFilter.setForceRequestEncoding(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">HiddenHttpMethodFilter</span> <span class="variable">hiddenHttpMethodFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HiddenHttpMethodFilter</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;encodingFilter, hiddenHttpMethodFilter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="11-2Spring配置类"><a href="#11-2Spring配置类" class="headerlink" title="11.2	Spring配置类"></a>11.2	Spring配置类</h3><ul>
<li><p><strong>SpringConfig类代替配置文件</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">    <span class="comment">//ssm整合之后，spring的配置信息写在此类中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="11-3Web配置类"><a href="#11-3Web配置类" class="headerlink" title="11.3	Web配置类"></a>11.3	Web配置类</h3><ul>
<li><p><strong>WebConfig类代替SpringMVC.xml</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//扫描组件</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.atguigu.mvc.controller&quot;)</span></span><br><span class="line"><span class="comment">//开启MVC注解驱动</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用默认的servlet处理静态资源</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> &#123;</span><br><span class="line">        configurer.enable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置文件上传解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CommonsMultipartResolver <span class="title function_">multipartResolver</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonsMultipartResolver</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="type">FirstInterceptor</span> <span class="variable">firstInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FirstInterceptor</span>();</span><br><span class="line">        registry.addInterceptor(firstInterceptor).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置视图控制</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public void addViewControllers(ViewControllerRegistry registry) &#123;</span></span><br><span class="line"><span class="comment">        registry.addViewController(&quot;/&quot;).setViewName(&quot;index&quot;);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置异常映射</span></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public void configureHandlerExceptionResolvers(List&lt;HandlerExceptionResolver&gt; resolvers) &#123;</span></span><br><span class="line"><span class="comment">        SimpleMappingExceptionResolver exceptionResolver = new SimpleMappingExceptionResolver();</span></span><br><span class="line"><span class="comment">        Properties prop = new Properties();</span></span><br><span class="line"><span class="comment">        prop.setProperty(&quot;java.lang.ArithmeticException&quot;, &quot;error&quot;);</span></span><br><span class="line"><span class="comment">        //设置异常映射</span></span><br><span class="line"><span class="comment">        exceptionResolver.setExceptionMappings(prop);</span></span><br><span class="line"><span class="comment">        //设置共享异常信息的键</span></span><br><span class="line"><span class="comment">        exceptionResolver.setExceptionAttribute(&quot;ex&quot;);</span></span><br><span class="line"><span class="comment">        resolvers.add(exceptionResolver);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置生成模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ITemplateResolver <span class="title function_">templateResolver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">webApplicationContext</span> <span class="operator">=</span> ContextLoader.getCurrentWebApplicationContext();</span><br><span class="line">        <span class="comment">// ServletContextTemplateResolver需要一个ServletContext作为构造参数，可通过WebApplicationContext 的方法获得</span></span><br><span class="line">        <span class="type">ServletContextTemplateResolver</span> <span class="variable">templateResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletContextTemplateResolver</span>(</span><br><span class="line">                webApplicationContext.getServletContext());</span><br><span class="line">        templateResolver.setPrefix(<span class="string">&quot;/WEB-INF/templates/&quot;</span>);</span><br><span class="line">        templateResolver.setSuffix(<span class="string">&quot;.html&quot;</span>);</span><br><span class="line">        templateResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        templateResolver.setTemplateMode(TemplateMode.HTML);</span><br><span class="line">        <span class="keyword">return</span> templateResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成模板引擎并为模板引擎注入模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SpringTemplateEngine <span class="title function_">templateEngine</span><span class="params">(ITemplateResolver templateResolver)</span> &#123;</span><br><span class="line">        <span class="type">SpringTemplateEngine</span> <span class="variable">templateEngine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringTemplateEngine</span>();</span><br><span class="line">        templateEngine.setTemplateResolver(templateResolver);</span><br><span class="line">        <span class="keyword">return</span> templateEngine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成视图解析器并未解析器注入模板引擎</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ViewResolver <span class="title function_">viewResolver</span><span class="params">(SpringTemplateEngine templateEngine)</span> &#123;</span><br><span class="line">        <span class="type">ThymeleafViewResolver</span> <span class="variable">viewResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThymeleafViewResolver</span>();</span><br><span class="line">        viewResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        viewResolver.setTemplateEngine(templateEngine);</span><br><span class="line">        <span class="keyword">return</span> viewResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
  </entry>
</search>
