<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2023/12/10/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Java SE基础</title>
    <url>/2024/01/28/Java-SE%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="第一章基本数据类型"><a href="#第一章基本数据类型" class="headerlink" title="第一章	基本数据类型"></a>第一章	基本数据类型</h2><table>
<thead>
<tr>
<th align="center">数据类型</th>
<th align="center">描述</th>
<th align="center">位数</th>
<th align="center">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>byte</strong></td>
<td align="center">位</td>
<td align="center">8</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center"><strong>short</strong></td>
<td align="center">短整数</td>
<td align="center">16</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center"><strong>int</strong></td>
<td align="center">整数</td>
<td align="center">32</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center"><strong>long</strong></td>
<td align="center">长整数</td>
<td align="center">64</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center"><strong>float</strong></td>
<td align="center">单精度浮点数</td>
<td align="center">32</td>
<td align="center">0.0</td>
</tr>
<tr>
<td align="center"><strong>double</strong></td>
<td align="center">双精度浮点数</td>
<td align="center">64</td>
<td align="center">0.0</td>
</tr>
<tr>
<td align="center"><strong>char</strong></td>
<td align="center">字符</td>
<td align="center">16</td>
<td align="center">null</td>
</tr>
<tr>
<td align="center"><strong>boolean</strong></td>
<td align="center">布尔值</td>
<td align="center">8</td>
<td align="center">false</td>
</tr>
</tbody></table>
<h2 id="第二章数组"><a href="#第二章数组" class="headerlink" title="第二章	数组"></a>第二章	数组</h2><ul>
<li><p><strong>定义数组</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>输出数组地址</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(a);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>数组转字符串</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(a.toString());</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第三章方法"><a href="#第三章方法" class="headerlink" title="第三章	方法"></a>第三章	方法</h2><h3 id="3-1方法重载"><a href="#3-1方法重载" class="headerlink" title="3.1	方法重载"></a>3.1	方法重载</h3><ul>
<li><p><strong>重载</strong>：指一个类中可以有多个方法具有相同的方法名，但这些方法的参数类型不同、个数不同、顺序不同</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span> &#123; </span><br><span class="line">    System.out.println(<span class="string">&quot;3f&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> a)</span> &#123;        <span class="comment">//重载，注意返回值同，参数不同</span></span><br><span class="line">    System.out.println(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-2可变参数"><a href="#3-2可变参数" class="headerlink" title="3.2	可变参数"></a>3.2	可变参数</h3><ul>
<li><p><strong>可变参数</strong>：是将所有参数封装到数组里，注意可变参数要放在后面</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span>... b)</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第四章修饰符"><a href="#第四章修饰符" class="headerlink" title="第四章	修饰符"></a>第四章	修饰符</h2><h3 id="4-1访问权限修饰符"><a href="#4-1访问权限修饰符" class="headerlink" title="4.1	访问权限修饰符"></a>4.1	访问权限修饰符</h3><table>
<thead>
<tr>
<th align="center">修饰符</th>
<th align="center">访问权限</th>
<th align="center">适用范围</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>public</strong></td>
<td align="center">所有类可见</td>
<td align="center">类，接口，变量，方法</td>
</tr>
<tr>
<td align="center"><strong>protected</strong></td>
<td align="center">同一个包的类，不同包的子类可见</td>
<td align="center">变量，方法</td>
</tr>
<tr>
<td align="center"><strong>default</strong></td>
<td align="center">同一个包的类可见</td>
<td align="center">类，接口，变量，方法</td>
</tr>
<tr>
<td align="center"><strong>private</strong></td>
<td align="center">仅当前类可见</td>
<td align="center">变量，方法</td>
</tr>
</tbody></table>
<h3 id="4-2static关键字"><a href="#4-2static关键字" class="headerlink" title="4.2	static关键字"></a>4.2	static关键字</h3><ul>
<li><p><strong>静态成员变量</strong>：被所有对象共享，可用类名调用，局部变量不能被声明为 <strong>static</strong> 变量</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> price;<span class="comment">//成员变量在堆内存</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>静态方法</strong>：可用类名调用，只能访问静态变量和方法，不能使用 <strong>this</strong> 关键字</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        Phone.price=<span class="number">4</span>;</span><br><span class="line">        <span class="comment">//fun();会报错，静态方法只能访问静态方法或变量。</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">fun</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-3abstract关键字"><a href="#4-3abstract关键字" class="headerlink" title="4.3	abstract关键字"></a>4.3	abstract关键字</h3><ul>
<li><p><strong>抽象类</strong>：使用 <strong>abstract</strong> 修饰，不能使用 <strong>final</strong> 修饰，可以包括抽象方法和非抽象方法</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">()</span>; <span class="comment">//抽象方法</span></span><br><span class="line">	<span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">n</span><span class="params">()</span>; <span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>抽象方法</strong>：使用 <strong>abstract</strong> 修饰，只能存在于抽象类中，非抽象子类必须重写抽象父类中的所有抽象方法，抽象子类可以直接继承</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;    <span class="comment">//非抽象子类</span></span><br><span class="line">     <span class="comment">//实现父类所有抽象方法</span></span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">m</span><span class="params">()</span>&#123;</span><br><span class="line">          .........</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">n</span><span class="params">()</span>&#123;</span><br><span class="line">          .........</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-4final"><a href="#4-4final" class="headerlink" title="4.4	final"></a>4.4	final</h3><ul>
<li><p><strong>final 变量</strong>：必须显式指定初始值，不能被重新赋值</p>
</li>
<li><p><strong>final 方法</strong>：不能被子类重写</p>
</li>
<li><p><strong>final 类</strong>：不能被继承</p>
</li>
<li><p><strong>final 引用</strong>：不能变地址值，但是可以变地址内容</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> M m=<span class="keyword">new</span> <span class="title class_">M</span>();</span><br><span class="line">m.age=<span class="number">12</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第五章关键字"><a href="#第五章关键字" class="headerlink" title="第五章	关键字"></a>第五章	关键字</h2><h3 id="5-1this"><a href="#5-1this" class="headerlink" title="5.1	this"></a>5.1	this</h3><ul>
<li><p><strong>this 关键字</strong>：指代当前类中的成员变量、方法，可以用于方法的形参与成员变量同名时进行区分</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-2super"><a href="#5-2super" class="headerlink" title="5.2	super"></a>5.2	super</h3><ul>
<li><p><strong>super 关键字</strong>：指代父类的成员变量、方法</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123; </span><br><span class="line">    <span class="keyword">public</span> String name;   </span><br><span class="line">    <span class="type">int</span> age=<span class="number">3</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;  <span class="comment">//吃东西方法的具体实现  &#125; </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123; <span class="comment">//睡觉方法的具体实现  &#125; </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//子类 </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Penguin</span>  <span class="keyword">extends</span>  <span class="title class_">Animal</span>&#123; </span><br><span class="line">    <span class="type">int</span> age=<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> age=<span class="number">5</span>;</span><br><span class="line">         System.out.println(age);   <span class="comment">//5,子类可以访问父类非私有成员变量</span></span><br><span class="line">        System.out.println(<span class="built_in">this</span>.age);<span class="comment">//4</span></span><br><span class="line">        System.out.println(<span class="built_in">super</span>.age);<span class="comment">//3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第六章面向对象"><a href="#第六章面向对象" class="headerlink" title="第六章	面向对象"></a>第六章	面向对象</h2><h3 id="6-1类和对象"><a href="#6-1类和对象" class="headerlink" title="6.1	类和对象"></a>6.1	类和对象</h3><ul>
<li><p><strong>类</strong>：对象在堆内存，成员变量便也在堆内存，创建对象时有初始值</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="type">int</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> tmp;<span class="comment">//局部变量在栈内存，不赋值就用会报错</span></span><br><span class="line">        System.out.println(<span class="string">&quot;phone&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>对象</strong>：使用 <strong>new</strong> 关键字创建对象</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Phone p=<span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="6-2内部类"><a href="#6-2内部类" class="headerlink" title="6.2	内部类"></a>6.2	内部类</h3><ul>
<li><p><strong>内部类</strong>：在一个类中定义类，可以直接访问外部类私有、公有成员</p>
</li>
<li><p><strong>成员内部类</strong>：定义在外部类的成员位置</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="type">int</span> num=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;innershow&quot;</span>+num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//外部类访问成员内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">()</span>&#123;        </span><br><span class="line">        Inner in=<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        in.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>局部内部类</strong>：定义在外部类的成员方法内</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fun2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner2</span>&#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;成员内部类&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Inner2 in=<span class="keyword">new</span> <span class="title class_">Inner2</span>();</span><br><span class="line">    in.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>匿名内部类</strong>：在成员方法内定义子类，实现接口或继承抽象类</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fun3</span><span class="params">()</span>&#123;</span><br><span class="line">        Phone p=<span class="keyword">new</span> <span class="title class_">Phone</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;实现接口的匿名内部类&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        p.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="6-3封装"><a href="#6-3封装" class="headerlink" title="6.3	封装"></a>6.3	封装</h3><ul>
<li><p><strong>封装</strong>：将类的某些信息隐藏在类的内部，不允许外部程序直接访问，以提高安全性和复用性</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="type">int</span> price;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第七章继承"><a href="#第七章继承" class="headerlink" title="第七章	继承"></a>第七章	继承</h2><ul>
<li><p><strong>继承</strong>：子类拥有父类的属性、方法等，同时可以拥有自己的属性和方法，即子类可以对父类进行扩展</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>继承的特点</strong>：可以提高代码的复用性， 便于后续的维护，但是同时也会增加代码的耦合性</p>
</li>
<li><p><strong>构造器的继承</strong>：子类所有构造方法会默认先运行 **super()**，构造方法内的其余语句必须写在 <strong>super()</strong> 语句后</p>
</li>
</ul>
<h2 id="第八章多态"><a href="#第八章多态" class="headerlink" title="第八章	多态"></a>第八章	多态</h2><ul>
<li><p><strong>多态</strong>：同一个实体同时具有多种形式，即同一个对象，在不同时刻，代表的对象不一样，指的是对象的多种形态</p>
</li>
<li><p><strong>向上转型</strong>：父类引用指向子类对象，编译看左边，运行看右边</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();  <span class="comment">// 向上转型  </span></span><br><span class="line">a.eat();               <span class="comment">// 调用的是 Cat 的 eat</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>向下转型</strong>：子类引用恢复成原有对象类型</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();  <span class="comment">// 向上转型  </span></span><br><span class="line">a.eat();               <span class="comment">// 调用的是 Cat 的 eat</span></span><br><span class="line"><span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> (Cat)a;        <span class="comment">// 向下转型  </span></span><br><span class="line">c.work();        <span class="comment">// 调用的是 Cat 的 work</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第九章接口"><a href="#第九章接口" class="headerlink" title="第九章	接口"></a>第九章	接口</h2><ul>
<li><p><strong>接口</strong>：一系列方法的声明，是一些方法特征的集合</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> price=<span class="number">4</span>;    <span class="comment">//修饰符可省略</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;        <span class="comment">//修饰符可省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhoneImpl</span> <span class="keyword">implements</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;        <span class="comment">//必须是public，否则报错</span></span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>接口的特点</strong></p>
<ul>
<li>没有构造方法</li>
<li>接口中的方法会被隐式的指定为 <strong>public abstract</strong> 方法，不能定义静态方法</li>
<li>接口中的变量会被隐式的指定为 <strong>public static final</strong> 变量，不能定义私有成员</li>
<li>接口和接口多继承，接口和类多实现</li>
</ul>
</li>
</ul>
<h2 id="第十章异常"><a href="#第十章异常" class="headerlink" title="第十章	异常"></a>第十章	异常</h2><h3 id="10-1Throwable类"><a href="#10-1Throwable类" class="headerlink" title="10.1	Throwable类"></a>10.1	Throwable类</h3><ul>
<li><p><strong>Throwable</strong> 类：所有异常类的父类</p>
<ul>
<li><strong>Error</strong> 错误类：严重问题，不需要程序员处理</li>
<li><strong>Exception</strong> 异常类：程序本身可以处理的问题<ul>
<li><strong>RuntimeException</strong> 运行时异常类：编译不出错，运行时出错</li>
<li><strong>IOException</strong> 编译检查异常类：编译时异常，<strong>throws</strong> 可以抛出异常，使编译通过，运行时还会出错，要 <strong>try-catch</strong>处理</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Throwable</strong> 类主要方法</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>String getMessage()</strong></td>
<td align="center">返回关于发生的异常的详细信息，这个消息在 <strong>Throwable</strong> 类的构造函数中初始化了</td>
</tr>
<tr>
<td align="center"><strong>String toString()</strong></td>
<td align="center">返回此 <strong>Throwable</strong> 的简短描述</td>
</tr>
<tr>
<td align="center"><strong>void printStackTrace()</strong></td>
<td align="center">将此 <strong>Throwable</strong> 及其回溯打印到标准错误流</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="10-2捕获异常"><a href="#10-2捕获异常" class="headerlink" title="10.2	捕获异常"></a>10.2	捕获异常</h3><ul>
<li><p><strong>捕获异常</strong>：使用 <strong>try</strong> 和 <strong>catch</strong> 关键字可以捕获异常，将 <strong>try&#x2F;catch</strong> 代码块放在异常可能发生的地方</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    System.out.println(arr[<span class="number">10</span>]);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;        <span class="comment">//ArrayIndexOutOfBoundsException </span></span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="10-3自定义异常"><a href="#10-3自定义异常" class="headerlink" title="10.3	自定义异常"></a>10.3	自定义异常</h3><ul>
<li><strong>自定义异常类</strong>：继承 <strong>Exception</strong> 类以实现检查时异常类，继承 <strong>RuntimeException</strong> 类以实现运行时异常类</li>
</ul>
<h2 id="第十一章集合"><a href="#第十一章集合" class="headerlink" title="第十一章	集合"></a>第十一章	集合</h2><h3 id="11-1集合体系"><a href="#11-1集合体系" class="headerlink" title="11.1	集合体系"></a>11.1	集合体系</h3><ul>
<li><strong>集合</strong>：长度可变，只能容纳引用类型<ul>
<li><strong>Map</strong> 类：双列集合，主要包括 <strong>HashMap</strong> 类</li>
<li><strong>Collection</strong> 类：单列集合<ul>
<li><strong>List</strong> 类：可以重复，主要包括 <strong>ArrayList</strong> 类和 <strong>LinkedList</strong> 类</li>
<li><strong>Set</strong> 类：不可以重复，主要包括 <strong>HashSet</strong> 类和 <strong>TreeSet</strong> 类</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="11-2ListIterator"><a href="#11-2ListIterator" class="headerlink" title="11.2	ListIterator"></a>11.2	ListIterator</h3><ul>
<li><p><strong>列表迭代器</strong>：允许沿任一方向遍历列表</p>
</li>
<li><p><strong>常用方法</strong></p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>void add(E e)</strong></td>
<td align="center">将指定元素插入到列表</td>
</tr>
<tr>
<td align="center"><strong>boolean hasNext()</strong></td>
<td align="center">正向遍历列表，判断是否有元素</td>
</tr>
<tr>
<td align="center"><strong>boolean hasPrevious()</strong></td>
<td align="center">反向遍历列表，判断是否有元素</td>
</tr>
<tr>
<td align="center"><strong>E next()</strong></td>
<td align="center">返回列表中的下一个元素，并且前进光标位置</td>
</tr>
<tr>
<td align="center"><strong>int nextIndex()</strong></td>
<td align="center">返回随后调用 <strong>next()</strong> 返回的元素的索引</td>
</tr>
<tr>
<td align="center"><strong>E previous()</strong></td>
<td align="center">返回列表中的上一个元素，并且前进光标位置</td>
</tr>
<tr>
<td align="center"><strong>int previousIndex()</strong></td>
<td align="center">返回由后续调用 <strong>previous()</strong> 返回的元素的索引</td>
</tr>
<tr>
<td align="center"><strong>void remove()</strong></td>
<td align="center">从列表中删除由 <strong>next()</strong> 或 <strong>previous()</strong> 返回的最后一个元素</td>
</tr>
<tr>
<td align="center"><strong>void set(E e)</strong></td>
<td align="center">用指定的元素替换由 <strong>next()</strong> 或 <strong>previous()</strong> 返回的最后一个元素</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="11-3ArrayList"><a href="#11-3ArrayList" class="headerlink" title="11.3	ArrayList"></a>11.3	ArrayList</h3><ul>
<li><strong>ArrayList</strong>：可以动态修改的数组，没有固定大小的限制，采用数组的数据类型实现</li>
</ul>
<h3 id="11-4LinkedList"><a href="#11-4LinkedList" class="headerlink" title="11.4	LinkedList"></a>11.4	LinkedList</h3><ul>
<li><strong>LinkedList</strong>：可以动态修改的数组，没有固定大小的限制，采用链表的数据类型实现</li>
</ul>
<h3 id="11-5HashSet"><a href="#11-5HashSet" class="headerlink" title="11.5	HashSet"></a>11.5	HashSet</h3><ul>
<li><strong>HashSet</strong>：不包含重复元素，元素无序，允许有 <strong>null</strong> 值，不是线程安全的</li>
<li><strong>hashCode()<strong>：返回哈希值，不同对象的哈希值默认不同，</strong>HashSet</strong> 通过哈希值来判断重复元素</li>
</ul>
<h3 id="11-6LinkedHashSet"><a href="#11-6LinkedHashSet" class="headerlink" title="11.6	LinkedHashSet"></a>11.6	LinkedHashSet</h3><ul>
<li><strong>LinkedHashSet</strong>：不包含重复元素，存取有序，通过哈希表和双向链表维护访问次序</li>
</ul>
<h3 id="11-7TreeSet"><a href="#11-7TreeSet" class="headerlink" title="11.7	TreeSet"></a>11.7	TreeSet</h3><ul>
<li><strong>TreeSet</strong>：不包含重复元素，元素有序，实现 <strong>Comparable</strong> 接口来对元素排序</li>
</ul>
<h3 id="11-8HashMap"><a href="#11-8HashMap" class="headerlink" title="11.8	HashMap"></a>11.8	HashMap</h3><ul>
<li><p><strong>HashMap</strong>：实现接口 <strong>Map(K,V)<strong>，其中，</strong>K</strong> 是键，<strong>V</strong> 是值</p>
</li>
<li><p><strong>常用方法</strong></p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>void clear()</strong></td>
<td align="center">删除所有的映射</td>
</tr>
<tr>
<td align="center"><strong>boolean isEmpty()</strong></td>
<td align="center">判断是否包含指定映射</td>
</tr>
<tr>
<td align="center"><strong>V put()</strong></td>
<td align="center">将指定的值与此映射中的指定键相关联</td>
</tr>
<tr>
<td align="center"><strong>V get()</strong></td>
<td align="center">获取指定 <strong>key</strong> 对应对 <strong>value</strong></td>
</tr>
<tr>
<td align="center"><strong>boolean	containsKey()</strong></td>
<td align="center">判断此映射是否包含指定键的映射</td>
</tr>
<tr>
<td align="center"><strong>V remove()</strong></td>
<td align="center">删除指定键的映射</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="11-9Collections"><a href="#11-9Collections" class="headerlink" title="11.9	Collections"></a>11.9	Collections</h3><ul>
<li><p><strong>常用方法</strong></p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>sort()</strong></td>
<td align="center">对指定的列表进行排序</td>
</tr>
<tr>
<td align="center"><strong>reverse()</strong></td>
<td align="center">反转指定列表中元素的顺序</td>
</tr>
<tr>
<td align="center"><strong>shuffle()</strong></td>
<td align="center">随机排列指定的列表</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="第十二章泛型"><a href="#第十二章泛型" class="headerlink" title="第十二章	泛型"></a>第十二章	泛型</h2><h3 id="12-1泛型"><a href="#12-1泛型" class="headerlink" title="12.1	泛型"></a>12.1	泛型</h3><ul>
<li><p><strong>泛型</strong>：将具体的类型参数化，提供了编译时类型安全检测机制</p>
</li>
<li><p><strong>定义泛型</strong>：&lt;类型&gt;、&lt;类型1，类型2…&gt;</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collection&lt;String&gt; b=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="12-2泛型类"><a href="#12-2泛型类" class="headerlink" title="12.2	泛型类"></a>12.2	泛型类</h3><ul>
<li><p><strong>泛型类</strong>：将类型参数化、模板化，创建对象时再指定具体类型</p>
</li>
<li><p><strong>定义泛型类</strong>：修饰符 class 类名&lt;类型&gt; {}</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Generic</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T t;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getT</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setT</span><span class="params">(T t)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.t = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="12-3泛型方法"><a href="#12-3泛型方法" class="headerlink" title="12.3	泛型方法"></a>12.3	泛型方法</h3><ul>
<li><p><strong>定义泛型方法</strong>：修饰符 &lt;类型&gt; 返回值类型 方法名(变量列表) {}</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Generic</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt;<span class="keyword">void</span> <span class="title function_">show</span><span class="params">(T t)</span>&#123;</span><br><span class="line">        System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="12-4泛型接口"><a href="#12-4泛型接口" class="headerlink" title="12.4	泛型接口"></a>12.4	泛型接口</h3><ul>
<li><p><strong>定义泛型接口</strong>：修饰符 interface 接口名&lt;类型&gt; {}</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AdapterItemListener</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">onItemClick</span><span class="params">(<span class="type">int</span> position,T item)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">onLongItemClick</span><span class="params">(<span class="type">int</span> position, T item)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="12-5类型通配符"><a href="#12-5类型通配符" class="headerlink" title="12.5	类型通配符"></a>12.5	类型通配符</h3><ul>
<li><p>**&lt;?&gt;**：匹配任何类型</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;?&gt; l0=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Number&gt;();    </span><br></pre></td></tr></table></figure>
</li>
<li><p>**List&lt;? extends 指定类型&gt;**：匹配指定类型的子类</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;? <span class="keyword">extends</span> <span class="title class_">Object</span>&gt; l1=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Number&gt;();    <span class="comment">//通配object的子类</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>**List&lt;? super 指定类型&gt;**：匹配指定类型的父类</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;? <span class="built_in">super</span> Integer&gt; l2=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Number&gt;();    <span class="comment">//通配Integer的父类</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第十三章I-O流"><a href="#第十三章I-O流" class="headerlink" title="第十三章	I&#x2F;O流"></a>第十三章	I&#x2F;O流</h2><h3 id="13-1IO流分类"><a href="#13-1IO流分类" class="headerlink" title="13.1	IO流分类"></a>13.1	IO流分类</h3><ul>
<li><p>按数据流向</p>
<ul>
<li><strong>输入流</strong>：读数据</li>
<li><strong>输出流</strong>：写数据</li>
</ul>
</li>
<li><p>按数据类型</p>
<ul>
<li><strong>字节流</strong>：处理单元为1个字节，操作字节和字节数组，存储的是二进制文件，应用范围有音频文件、图片、歌曲</li>
<li><strong>字符流</strong>：处理的单元为2个字节的 <strong>Unicode</strong> 字符，分别操作字符、字符数组或字符串，应用范围有中文文本</li>
</ul>
</li>
</ul>
<h3 id="13-2File类"><a href="#13-2File类" class="headerlink" title="13.2	File类"></a>13.2	File类</h3><ul>
<li><p><strong>File 类</strong>：封装的不是真正的文件，只是路径</p>
</li>
<li><p><strong>常用方法</strong></p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>boolean createNewFile()</strong></td>
<td align="center">创建一个新的空文件</td>
</tr>
<tr>
<td align="center"><strong>boolean mkdir()</strong></td>
<td align="center">创建目录</td>
</tr>
<tr>
<td align="center"><strong>boolean mkdirs()</strong></td>
<td align="center">创建目录，包括任何必需但不存在的父目录</td>
</tr>
<tr>
<td align="center"><strong>boolean delete()</strong></td>
<td align="center">删除文件或目录</td>
</tr>
<tr>
<td align="center"><strong>File[] listFiles()</strong></td>
<td align="center">返回一个数组，表示目录中的文件</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="13-3字节输出流OutputStream"><a href="#13-3字节输出流OutputStream" class="headerlink" title="13.3	字节输出流OutputStream"></a>13.3	字节输出流OutputStream</h3><ul>
<li><p><strong>字节输出流</strong>：关于字节输出的抽象类</p>
</li>
<li><p><strong>子类</strong></p>
<ul>
<li><strong>网络数据传输</strong>：<strong>SocketInputStream</strong> 和 <strong>SocketOutputStream</strong></li>
<li><strong>文件操作</strong>：<strong>FileInputStream</strong> 和 <strong>FileOutputStream</strong></li>
<li><strong>字节数据操作</strong>：<strong>DataInputStream</strong> 和 <strong>DataOutputStream</strong></li>
</ul>
</li>
<li><p><strong>常用方法</strong></p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>void close()</strong></td>
<td align="center">关闭此输出流并释放与此流相关联的任何系统资源</td>
</tr>
<tr>
<td align="center"><strong>void flush()</strong></td>
<td align="center">刷新此输出流并强制任何缓冲的输出字节被写出</td>
</tr>
<tr>
<td align="center"><strong>void write()</strong></td>
<td align="center">将指定的字节写入此输出流</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="13-4字节输入流InputStream"><a href="#13-4字节输入流InputStream" class="headerlink" title="13.4	字节输入流InputStream"></a>13.4	字节输入流InputStream</h3><ul>
<li><p><strong>字节输入流</strong>：关于字节输入的抽象类</p>
</li>
<li><p><strong>子类</strong></p>
<ul>
<li><strong>网络数据传输</strong>：<strong>SocketInputStream</strong> 和 <strong>SocketOutputStream</strong></li>
<li><strong>文件操作</strong>：<strong>FileInputStream</strong> 和 <strong>FileOutputStream</strong></li>
<li><strong>字节数据操作</strong>：<strong>DataInputStream</strong> 和 <strong>DataOutputStream</strong></li>
</ul>
</li>
<li><p><strong>常用方法</strong></p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>int read()</strong></td>
<td align="center">从输入流读取数据字节</td>
</tr>
<tr>
<td align="center"><strong>void mark()</strong></td>
<td align="center">标记此输入流中的当前位置</td>
</tr>
<tr>
<td align="center"><strong>void reset()</strong></td>
<td align="center">将此流重新定位到上次在此输入流上调用该方法时 <strong>mark</strong> 的位置</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="13-5文件输出流FileOutputStream"><a href="#13-5文件输出流FileOutputStream" class="headerlink" title="13.5	文件输出流FileOutputStream"></a>13.5	文件输出流FileOutputStream</h3><ul>
<li><strong>文件输出流</strong>：字节输出流的子类，将数据输出到文件里</li>
<li>**void write()**：将指定字节写入文件输出流</li>
</ul>
<h3 id="13-6文件输入流-FileInputStream"><a href="#13-6文件输入流-FileInputStream" class="headerlink" title="13.6	文件输入流 FileInputStream"></a>13.6	文件输入流 FileInputStream</h3><ul>
<li><strong>文件输入</strong>：输入流的子类，从文件当中输入数据</li>
<li>**int read()**：从该输入流读取数据字节</li>
</ul>
<h3 id="13-7字节缓冲流"><a href="#13-7字节缓冲流" class="headerlink" title="13.7	字节缓冲流"></a>13.7	字节缓冲流</h3><ul>
<li><p><strong>字节缓冲流 BufferStream</strong>：提供缓冲区，实现复制操作比基本字节流要快</p>
</li>
<li><p><strong>字节缓冲输出流 BufferedOutputStream</strong>：实现缓冲输出流，应用程序可以向底层输出流写入字节，而不必为写入的每个字节导致底层系统的调用</p>
</li>
<li><p><strong>字节缓冲输入流 BufferedInputStream</strong>：创建一个内部缓冲区数组，当从流中读取或跳过字节时，内部缓冲区将根据需要从所包含的输入流中重新填充，一次有多个字节</p>
</li>
</ul>
<h3 id="13-8字符流"><a href="#13-8字符流" class="headerlink" title="13.8	字符流"></a>13.8	字符流</h3><ul>
<li><p><strong>Reader</strong>：读取字符流抽象类</p>
<ul>
<li><strong>InputStreamReader</strong>：字符输入处理流，主要包括 <strong>FileReader</strong> 字符输入流</li>
<li><strong>BufferReader</strong>：字符输入缓冲流</li>
<li><strong>CharArrayReader</strong>：字符数组输入流</li>
</ul>
</li>
<li><p><strong>Writer</strong>：写入字符流抽象类</p>
<ul>
<li><strong>OutputStreamWriter</strong>：字符输出处理流，主要包括 <strong>FileWriter</strong> 字符输出流</li>
<li><strong>BufferWriter</strong>：字符输出缓冲流</li>
<li><strong>CharArrayWriter</strong>：字符数组输出流</li>
</ul>
</li>
<li><p><strong>字符输出流 OutputStreamWriter</strong>：只用于字符转字节，写入字节文件</p>
</li>
<li><p><strong>字符输入流InputStreamReader</strong>：只用于从字节文件解码出字符</p>
</li>
<li><p><strong>FileWriter</strong>和 <strong>FileReader</strong>：字符输入输出流的子类，用于文件的输入输出</p>
</li>
</ul>
<h3 id="13-9特殊操作流"><a href="#13-9特殊操作流" class="headerlink" title="13.9	特殊操作流"></a>13.9	特殊操作流</h3><ul>
<li><p><strong>标准输入输出流</strong></p>
<ul>
<li>标准输出流：<strong>System.out</strong></li>
<li>标准输入流：<strong>System.in</strong></li>
<li>错误输出流：<strong>System.err</strong></li>
</ul>
</li>
<li><p><strong>字节打印流 PrintStream</strong>：只负责输出数据，不负责读取数据</p>
</li>
<li><p><strong>字符打印流 PrintWriter</strong>：输出数据，打印字符</p>
</li>
<li><p><strong>对象序列化流 ObjectOutputStream</strong>：将指定对象序列化，写入流中</p>
</li>
<li><p><strong>对象反序列化流 ObjectInputStream</strong>：从流中读取数据反序列化，得到对象</p>
</li>
</ul>
<h2 id="第十四章多线程"><a href="#第十四章多线程" class="headerlink" title="第十四章	多线程"></a>第十四章	多线程</h2><h3 id="14-1概念"><a href="#14-1概念" class="headerlink" title="14.1	概念"></a>14.1	概念</h3><ul>
<li><p><strong>进程</strong>：一个进程包括由操作系统分配的内存空间，包含一个或多个线程</p>
</li>
<li><p><strong>线程</strong>：一条线程指的是进程中一个单一顺序的控制流，是一条执行路径</p>
</li>
<li><p><strong>多线程</strong>：一个进程里有多条执行路径</p>
</li>
<li><p><strong>Java抢占式调度模型</strong>：每一个 <strong>Java</strong> 线程都有一个 1~10 的整数作为优先级，优先级高的线程获取CPU时间片的几率高</p>
</li>
</ul>
<h3 id="14-2创建线程方法"><a href="#14-2创建线程方法" class="headerlink" title="14.2	创建线程方法"></a>14.2	创建线程方法</h3><ul>
<li><p><strong>继承 Thread 类</strong>：继承类必须重写 <strong>run()</strong> 方法，该方法是新线程的入口点</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        MyThread a=<span class="keyword">new</span> <span class="title class_">MyThread</span>(<span class="string">&quot;a&quot;</span>),b=<span class="keyword">new</span> <span class="title class_">MyThread</span>(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        a.start();b.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++) System.out.println(getName()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyThread</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyThread</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现 <strong>Runnable</strong> 接口：实现接口，重写<strong>run()</strong> 方法，创建新类的对象作为 <strong>Thread</strong> 类对象的构造器参数</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        MyRunnable mr=<span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line">        Thread a=<span class="keyword">new</span> <span class="title class_">Thread</span>(mr,<span class="string">&quot;a&quot;</span>),b=<span class="keyword">new</span> <span class="title class_">Thread</span>(mr,<span class="string">&quot;b&quot;</span>),c=<span class="keyword">new</span> <span class="title class_">Thread</span>(mr);</span><br><span class="line">        a.start();b.start();c.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="14-3线程同步"><a href="#14-3线程同步" class="headerlink" title="14.3	线程同步"></a>14.3	线程同步</h3><ul>
<li><p><strong>同步代码块</strong>：将一段代码用一把锁给锁起来，只有获得了这把锁的线程才访问，并且同一时刻，只有一个线程能持有这把锁，这样就保证了同一时刻只有一个线程能执行被锁住的代码</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(同步对象) &#123;</span><br><span class="line">    <span class="comment">//多条语句操作共享数据的代码 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>同步方法</strong>：非静态同步方法的锁对象为 <strong>this</strong>，静态同步方法的锁对象为 <strong>类名.class</strong></p>
</li>
<li><p><strong>线程安全的类</strong>：<strong>StringBuffer</strong>，<strong>Vector</strong>，<strong>Hashtable</strong></p>
</li>
<li><p><strong>Lock</strong> 锁：提供比同步方法和代码块更广泛的锁定操作，<strong>ReentrantLock</strong> 是它的实现类</p>
<ul>
<li>**void lock()**：获得锁</li>
<li>**void unlock()**：释放锁</li>
</ul>
</li>
</ul>
<h2 id="第十五章网络编程"><a href="#第十五章网络编程" class="headerlink" title="第十五章	网络编程"></a>第十五章	网络编程</h2><h3 id="15-1概念"><a href="#15-1概念" class="headerlink" title="15.1	概念"></a>15.1	概念</h3><ul>
<li><strong>IP 地址</strong>：设备接收数据的识别数据的标识号，可分为 <strong>IP v4</strong> 和 <strong>IP v6</strong></li>
<li><strong>端口</strong>：设备中的应用程序的唯一标识号，用 0~65535 的整数表示</li>
<li><strong>协议</strong>：计算机网络中连接和通信的规则</li>
</ul>
<h3 id="15-2InetAddress-类"><a href="#15-2InetAddress-类" class="headerlink" title="15.2	InetAddress 类"></a>15.2	InetAddress 类</h3><ul>
<li><p><strong>InetAddress 类</strong>：表示 <strong>IP</strong> 地址，没有构造方法</p>
</li>
<li><p><strong>常用方法</strong></p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>InetAddress getByName()</strong></td>
<td align="center">确定主机名称的 <strong>IP</strong> 地址</td>
</tr>
<tr>
<td align="center"><strong>String getHostAddress()</strong></td>
<td align="center">返回文本显示中的 <strong>IP</strong> 地址字符串</td>
</tr>
<tr>
<td align="center"><strong>String getHostName()</strong></td>
<td align="center">获取此 <strong>IP</strong> 地址的主机名</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="15-3UDP协议接收发送数据"><a href="#15-3UDP协议接收发送数据" class="headerlink" title="15.3	UDP协议接收发送数据"></a>15.3	UDP协议接收发送数据</h3><ul>
<li><strong>发送数据的步骤</strong><ul>
<li>创建发送端的 <strong>Socket</strong> 对象</li>
<li>创建数据并打包</li>
<li>调用 <strong>DatagramSocket</strong> 对象的方法发送数据</li>
<li>关闭发送端</li>
</ul>
</li>
<li><strong>接收数据的步骤</strong><ul>
<li>创建接收端的 <strong>Socket</strong> 对象</li>
<li>创建数据包用于接收数据</li>
<li>调用 <strong>DatagramSocket</strong> 对象的方法发送数据</li>
<li>关闭接收端</li>
</ul>
</li>
</ul>
<h3 id="15-4TCP协议"><a href="#15-4TCP协议" class="headerlink" title="15.4	TCP协议"></a>15.4	TCP协议</h3><ul>
<li><strong>发送数据的步骤</strong><ul>
<li>创建客户端的 <strong>Socket</strong> 对象</li>
<li>获取输入流，写入数据</li>
<li>释放资源</li>
</ul>
</li>
<li><strong>接收数据的步骤</strong><ul>
<li>创建服务器端的 <strong>Socket</strong> 对象</li>
<li>监听客户端对象，返回一个 <strong>Socket</strong> 对象</li>
<li>获取输入流，读取数据，并把数据显示在控制台</li>
<li>释放资源</li>
</ul>
</li>
</ul>
<h2 id="第十六章Lambda表达式"><a href="#第十六章Lambda表达式" class="headerlink" title="第十六章	Lambda表达式"></a>第十六章	Lambda表达式</h2><h3 id="16-1概念"><a href="#16-1概念" class="headerlink" title="16.1	概念"></a>16.1	概念</h3><ul>
<li><p><strong>Lambda 表达式</strong>：是一个对象，且必须有上下文环境，作用是实现单方法的接口</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        fun((a,b)-&gt;&#123;    <span class="comment">//Lambda形参类型、返回类型可以省略</span></span><br><span class="line">            <span class="keyword">return</span> a+b;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">(Dog d)</span>&#123;</span><br><span class="line">        d.add(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Dog</span> &#123;    <span class="comment">//单方法接口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;<span class="comment">//只能有一个方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Lambda 表达式格式</strong>：(形参)-&gt;{方法内的代码块}</p>
<ul>
<li>形参类型、返回类型可以省略</li>
<li>如果只有一个参数，小括号可以省略</li>
<li>如果代码句只有一条，大括号和分号可以省略，要么都省，要么都不省略</li>
<li>若单语句是 <strong>return</strong>，要么大括号、分号、<strong>return</strong> 要么都省，要么都不省略</li>
</ul>
</li>
</ul>
<h3 id="16-2Lambda-和匿名内部类区别"><a href="#16-2Lambda-和匿名内部类区别" class="headerlink" title="16.2	Lambda 和匿名内部类区别"></a>16.2	Lambda 和匿名内部类区别</h3><ul>
<li><strong>接口</strong>：<strong>Lambda</strong>只能是接口，匿名内部类可以是接口、抽象类、具体类</li>
<li><strong>方法</strong>：**Lambda **只能单方法，匿名内部类可以多方法</li>
<li><strong>原理</strong>：**Lambda **编译后字节码在运行时动态生成，匿名内部类编译后生成一个字节码文件</li>
</ul>
<h2 id="第十七章接口组成更新"><a href="#第十七章接口组成更新" class="headerlink" title="第十七章	接口组成更新"></a>第十七章	接口组成更新</h2><h3 id="17-1接口中default默认方法"><a href="#17-1接口中default默认方法" class="headerlink" title="17.1	接口中default默认方法"></a>17.1	接口中default默认方法</h3><ul>
<li><p>默认方法不是抽象方法，实现类可以重写，也可以不重写</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;he&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="17-2接口中静态方法"><a href="#17-2接口中静态方法" class="headerlink" title="17.2	接口中静态方法"></a>17.2	接口中静态方法</h3><ul>
<li><p>接口中静态方法只能被接口名调用，不能被实现类对象调用</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;he&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Dog.eat();</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="17-3接口中私有方法"><a href="#17-3接口中私有方法" class="headerlink" title="17.3	接口中私有方法"></a>17.3	接口中私有方法</h3><ul>
<li><p><strong>接口私有方法</strong>：为了将接口中多个默认或静态方法中的共性方法抽离出来</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;    <span class="comment">//静态方法只能访问静态变量和方法</span></span><br><span class="line">        look();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;        <span class="comment">//非静态方法可以访问静态非静态成员</span></span><br><span class="line">        look();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">look</span><span class="params">()</span>&#123;    <span class="comment">//私有成员仅本类内可见</span></span><br><span class="line">        System.out.println(<span class="string">&quot;look&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第十八章方法引用"><a href="#第十八章方法引用" class="headerlink" title="第十八章	方法引用"></a>第十八章	方法引用</h2><h3 id="18-1概念"><a href="#18-1概念" class="headerlink" title="18.1	概念"></a>18.1	概念</h3><ul>
<li><strong>方法引用</strong>：和 <strong>Lambda</strong> 表达式一样都可以根据上下文推导</li>
<li><strong>方法引用格式</strong>：引用类::不带括号的方法名</li>
</ul>
<h3 id="18-2引用类的方法"><a href="#18-2引用类的方法" class="headerlink" title="18.2	引用类的方法"></a>18.2	引用类的方法</h3><ul>
<li><p>引用 <strong>Lambda</strong>  中类的方法</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        fun((s)-&gt; System.out.println(s));    <span class="comment">//fruit</span></span><br><span class="line">        fun(System.out::println);    <span class="comment">//fruit        //根据上下文推导出标准输出流类的println方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">(Dog dog)</span>&#123;    <span class="comment">//Dog是个接口</span></span><br><span class="line">        dog.eat(<span class="string">&quot; fruit&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>引用匿名内部类中类的方法</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">fun(<span class="keyword">new</span> <span class="title class_">Dog</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">fun(System.out::println);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="18-2引用对象"><a href="#18-2引用对象" class="headerlink" title="18.2	引用对象"></a>18.2	引用对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Dog dog=<span class="keyword">new</span> <span class="title class_">Dog</span>();        <span class="comment">//Dog是类        </span></span><br><span class="line">        fun(dog::eat);        引用对象的方法，实参为对象，形参是接口</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">(Cat c)</span>&#123;        <span class="comment">//Cat是接口</span></span><br><span class="line">        c.look(<span class="string">&quot;4346&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="18-3引用构造器"><a href="#18-3引用构造器" class="headerlink" title="18.3	引用构造器"></a>18.3	引用构造器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">useStudentBuilder((name,age) -&gt; <span class="keyword">new</span> <span class="title class_">Student</span>(name,age));</span><br><span class="line">useStudentBuilder(Student::<span class="keyword">new</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">useStudentBuilder</span><span class="params">(StudentBuilder sb)</span>;</span><br></pre></td></tr></table></figure>

<h2 id="第十九章函数式接口"><a href="#第十九章函数式接口" class="headerlink" title="第十九章	函数式接口"></a>第十九章	函数式接口</h2><h3 id="19-1概念"><a href="#19-1概念" class="headerlink" title="19.1	概念"></a>19.1	概念</h3><ul>
<li><strong>函数式接口</strong>：有且仅有一个抽象方法的接口，<strong>Java</strong> 中函数式编程体现就是 <strong>Lambda</strong> 表达式</li>
<li><strong>JDK 中自带的函数式接口</strong>：<strong>Supplier</strong>，<strong>Consumer</strong>，<strong>Predicate</strong>，<strong>Function</strong></li>
</ul>
<h3 id="19-2函数式接口Supplier接口"><a href="#19-2函数式接口Supplier接口" class="headerlink" title="19.2	函数式接口Supplier接口"></a>19.2	函数式接口Supplier接口</h3><ul>
<li><p><strong>Supplier</strong>：获取到生产出的数据</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Supplier</span>&lt;T&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="19-3函数式接口Consumer"><a href="#19-3函数式接口Consumer" class="headerlink" title="19.3	函数式接口Consumer"></a>19.3	函数式接口Consumer</h3><ul>
<li><p><strong>Consumer</strong>：对数据进行操作，无返回值</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Consumer</span>&lt;T&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="19-4函数式接口Predicate"><a href="#19-4函数式接口Predicate" class="headerlink" title="19.4	函数式接口Predicate"></a>19.4	函数式接口Predicate</h3><ul>
<li><p><strong>Predicate</strong>：判断参数是否满足条件</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Predicate</span>&lt;T&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="19-5函数式接口Function"><a href="#19-5函数式接口Function" class="headerlink" title="19.5	函数式接口Function"></a>19.5	函数式接口Function</h3><ul>
<li><p><strong>Function</strong>：用于对参数进行处理、转换，然后返回一个新值</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Function</span>&lt;T,R&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第二十章Stream流"><a href="#第二十章Stream流" class="headerlink" title="第二十章	Stream流"></a>第二十章	Stream流</h2><h3 id="20-1Stream流生成："><a href="#20-1Stream流生成：" class="headerlink" title="20.1	Stream流生成："></a>20.1	Stream流生成：</h3><ul>
<li><T> Stream<T> of(T t)：返回包含单个元素的顺序 <strong>Stream</strong></li>
</ul>
<h3 id="20-2Stream流中间操作"><a href="#20-2Stream流中间操作" class="headerlink" title="20.2	Stream流中间操作"></a>20.2	Stream流中间操作</h3><table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>Stream<T>	filter()</strong></td>
<td align="center">返回由与此给定谓词匹配的此流的元素组成的流</td>
</tr>
<tr>
<td align="center"><strong>Stream<T>	limit()</strong></td>
<td align="center">返回由此流的元素组成的流</td>
</tr>
<tr>
<td align="center"><strong>Stream<T>	skip()</strong></td>
<td align="center">在丢弃流的第一个 n 元素后，返回由该流的 n元素组成的流</td>
</tr>
<tr>
<td align="center"><strong>Stream<T>	concat()</strong></td>
<td align="center">创建一个懒惰连接的流，其元素是第一个流的所有元素，后跟第二个流的所有元素</td>
</tr>
</tbody></table>
<h3 id="20-3Stream流终结"><a href="#20-3Stream流终结" class="headerlink" title="20.3	Stream流终结"></a>20.3	Stream流终结</h3><table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>long count()</strong></td>
<td align="center">返回此流中的元素数</td>
</tr>
<tr>
<td align="center"><strong>void forEach()</strong></td>
<td align="center">对此流的每个元素执行操作</td>
</tr>
</tbody></table>
<h3 id="20-4Stream流收集"><a href="#20-4Stream流收集" class="headerlink" title="20.4	Stream流收集"></a>20.4	Stream流收集</h3><ul>
<li>**&lt;R,A&gt; R	collect()**：使用 <strong>Collector</strong> 对此流的元素执行操作</li>
</ul>
<h2 id="第二十一章反射"><a href="#第二十一章反射" class="headerlink" title="第二十一章	反射"></a>第二十一章	反射</h2><h3 id="21-1类加载和类加载器"><a href="#21-1类加载和类加载器" class="headerlink" title="21.1	类加载和类加载器"></a>21.1	类加载和类加载器</h3><ul>
<li><strong>类加载</strong><ul>
<li><strong>类的加载</strong>：将 <strong>class</strong> 文件读入内存，并为之创建一个 <strong>Class</strong> 对象</li>
<li><strong>类的链接</strong>：验证类是否有正确的结构，为类的变量分配内存并设置默认值，将类的二进制数据中的符号引用替换为直接引用</li>
<li><strong>类的初始化</strong>：先初始化父类，依次执行初始化语句</li>
</ul>
</li>
</ul>
<h3 id="21-2反射概述"><a href="#21-2反射概述" class="headerlink" title="21.2	反射概述"></a>21.2	反射概述</h3><ul>
<li><strong>反射</strong>：把 <strong>Java</strong> 类中的各个成分映射成一个个的 <strong>Java</strong> 对象</li>
<li><strong>反射机制的作用</strong><ul>
<li>操作字节码文件</li>
<li>操作代码片段</li>
</ul>
</li>
</ul>
<h3 id="21-3三种获取Class类的对象方法"><a href="#21-3三种获取Class类的对象方法" class="headerlink" title="21.3	三种获取Class类的对象方法"></a>21.3	三种获取Class类的对象方法</h3><ul>
<li><p><strong>类的 class 属性</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;Dog&gt; c1=Dog.class;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>对象的 getclass 方法</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;? <span class="keyword">extends</span> <span class="title class_">Dog</span>&gt; c2=d.getClass();</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Class 类的静态方法 forName</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; c3= Class.forName(<span class="string">&quot;train.Dog&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="21-4反射获取构造方法并实例化"><a href="#21-4反射获取构造方法并实例化" class="headerlink" title="21.4	反射获取构造方法并实例化"></a>21.4	反射获取构造方法并实例化</h3><table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>Constructor<T> getConstructor()</strong></td>
<td align="center">返回单个公共构造方法对象</td>
</tr>
<tr>
<td align="center"><strong>Constructor<T> getDeclaredConstructor()</strong></td>
<td align="center">返回单个构造方法对象</td>
</tr>
<tr>
<td align="center"><strong>Constructor&lt;?&gt;[] getConstructors()</strong></td>
<td align="center">返回所有公共构造方法对象的数组</td>
</tr>
<tr>
<td align="center"><strong>Constructor&lt;?&gt;[] getDeclaredConstructors()</strong></td>
<td align="center">返回所有构造方法对象的数组</td>
</tr>
<tr>
<td align="center"><strong>T newInstance()</strong></td>
<td align="center">调用类的指定构造方法，完成构造方法的对象创建</td>
</tr>
</tbody></table>
<h3 id="21-5反射获取成员变量并赋值"><a href="#21-5反射获取成员变量并赋值" class="headerlink" title="21.5	反射获取成员变量并赋值"></a>21.5	反射获取成员变量并赋值</h3><table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>Field getField()</strong></td>
<td align="center">返回一个 <strong>Field</strong> 对象，反映此表示的类或接口的指定公共成员字段类对象</td>
</tr>
<tr>
<td align="center"><strong>Field[] getFields()</strong></td>
<td align="center">返回包含一个 <strong>Field</strong> 对象数组，反映由此表示的类或接口的所有可访问的公共字段类对象</td>
</tr>
<tr>
<td align="center"><strong>Field getDeclaredField()</strong></td>
<td align="center">返回一个 <strong>Field</strong> 对象，反映此表示的类或接口的指定已声明字段类对象</td>
</tr>
<tr>
<td align="center"><strong>Field[] getDeclaredFields()</strong></td>
<td align="center">返回的数组 <strong>Field</strong> 对象反映此表示的类或接口声明的所有字段类对象</td>
</tr>
<tr>
<td align="center"><strong>void set()</strong></td>
<td align="center">给对象的成员变量赋值</td>
</tr>
</tbody></table>
<h3 id="21-6获取成员方法对象并调用成员方法"><a href="#21-6获取成员方法对象并调用成员方法" class="headerlink" title="21.6	获取成员方法对象并调用成员方法"></a>21.6	获取成员方法对象并调用成员方法</h3><table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>Method getMethod()</strong></td>
<td align="center">返回一个 <strong>Method</strong> 对象，反映此表示的类或接口的指定公共成员方法类对象</td>
</tr>
<tr>
<td align="center"><strong>Method[] getMethods()</strong></td>
<td align="center">返回包含一个 <strong>Method</strong> 对象数组，反映由此表示的类或接口的所有公共方法 类对象，包括那些由类或接口和那些从超类和超接口继承的声明</td>
</tr>
<tr>
<td align="center"><strong>Method getDeclaredMethod()</strong></td>
<td align="center">返回一个 <strong>Method</strong> 对象，反映此表示的类或接口的指定声明的方法 类对象</td>
</tr>
<tr>
<td align="center"><strong>Method[] getDeclaredMethods()</strong></td>
<td align="center">返回包含一个 <strong>Method</strong> 对象数组，反映的类或接口的所有声明的方法，通过此表示 类对象，包括公共，保护，默认（包）访问和私有方法，但不包括继承的方法</td>
</tr>
<tr>
<td align="center"><strong>Object invoke()</strong></td>
<td align="center">在具有指定参数的 <strong>Method</strong> 对象上调用此 <strong>Method</strong> 对象表示的底层方法</td>
</tr>
</tbody></table>
<h2 id="第二十二章注解"><a href="#第二十二章注解" class="headerlink" title="第二十二章	注解"></a>第二十二章	注解</h2><h2 id="第二十三章枚举"><a href="#第二十三章枚举" class="headerlink" title="第二十三章	枚举"></a>第二十三章	枚举</h2>]]></content>
  </entry>
  <entry>
    <title>Java编程思想</title>
    <url>/2024/01/28/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/</url>
    <content><![CDATA[<h2 id="第一章对象导论"><a href="#第一章对象导论" class="headerlink" title="第一章	对象导论"></a>第一章	对象导论</h2><h3 id="1-1抽象过程"><a href="#1-1抽象过程" class="headerlink" title="1.1	抽象过程"></a>1.1	抽象过程</h3><ul>
<li><strong>抽象机制</strong>：所有编程语言都提供抽象机制，问题的复杂性取决于类型和质量</li>
<li><strong>抽象语言的五大特征</strong><ul>
<li>万物皆为对象</li>
<li>程序是对象的集合，它们通过发送消息来告知彼此所要做的</li>
<li>每个对象都有自己的由其他对象所构成的存储</li>
<li>每个对象都拥有类型</li>
<li>某一特定类型的所有对象都可以接收同样的消息</li>
</ul>
</li>
<li><strong>对对象的描述</strong>：对象具有状态，行为和标识</li>
</ul>
<h3 id="1-2每个对象都有一个接口"><a href="#1-2每个对象都有一个接口" class="headerlink" title="1.2	每个对象都有一个接口"></a>1.2	每个对象都有一个接口</h3><ul>
<li>类描述了具有相同特性（数据元素）和行为（功能）的对象集合</li>
<li>类实际上就是一个数据类型，程序员通过定义类来适应问题，编程系统欣然接受新的类</li>
<li>接口确定了对某一特定对象所能发出的请求</li>
</ul>
<h3 id="1-3每个对象都提供服务"><a href="#1-3每个对象都提供服务" class="headerlink" title="1.3	每个对象都提供服务"></a>1.3	每个对象都提供服务</h3><ul>
<li>将对象想象为“服务提供者”，程序本身将向用户提供服务</li>
<li>服务提供者的思想有助于提高对象的内聚性，意味着一个软件构件的各个方面组合得很好</li>
</ul>
<h3 id="1-4被隐藏的具体实现"><a href="#1-4被隐藏的具体实现" class="headerlink" title="1.4	被隐藏的具体实现"></a>1.4	被隐藏的具体实现</h3><ul>
<li><p>程序开发人员可分为类创建者（创建新数据类型的程序员）和客户端程序员（使用数据类型的类消费者）</p>
</li>
<li><p>访问控制约束了客户端程序员，将实现隐藏起来</p>
</li>
<li><p>访问控制允许库设计者可以改变类内部的工作方式而不用担心会影响到客户端程序员</p>
</li>
</ul>
<h3 id="1-5复用具体体现"><a href="#1-5复用具体体现" class="headerlink" title="1.5	复用具体体现"></a>1.5	复用具体体现</h3><ul>
<li>组合：使用现有的类合成新的类，经常被视为<strong>“has-a”</strong>关系</li>
<li>新类的成员对象通常被声明为<strong>private</strong>，使得那些使用新类的客户端程序员不能访问它们，以及实现动态修改代码的行为</li>
</ul>
<h3 id="1-6继承"><a href="#1-6继承" class="headerlink" title="1.6	继承"></a>1.6	继承</h3><ul>
<li><strong>继承</strong>：以现有的基类为基础，复制并添加和修改这个副本，创建新的类</li>
<li>经过继承，两个类型可以有相同的特性和行为，但是其中一个类型可能比另一个拥有更多的特性，并且可以处理更多的消息</li>
<li>使基类和导出类<strong>产生差异</strong>的方式<ul>
<li>直接在导出类中添加新方法</li>
<li>覆盖，即改变现有基类的方法</li>
</ul>
</li>
<li><strong>“是一个”</strong>与<strong>“像是一个”</strong>关系<ul>
<li><code>is-a</code>：替代原则，不添加新方法，只覆盖基类的方法</li>
<li><code>is-like-a</code>：添加新的接口元素，拓展接口</li>
</ul>
</li>
</ul>
<h3 id="1-7伴随多态的可互换对象"><a href="#1-7伴随多态的可互换对象" class="headerlink" title="1.7	伴随多态的可互换对象"></a>1.7	伴随多态的可互换对象</h3><ul>
<li><strong>后期绑定</strong>：当向对象发送消息时，被调用的代码直到运行时才能确定</li>
<li><strong>向上转型</strong>：将导出类看做是它的基类</li>
</ul>
<h3 id="1-8单根继承结构"><a href="#1-8单根继承结构" class="headerlink" title="1.8	单根继承结构"></a>1.8	单根继承结构</h3><ul>
<li><strong>Object类</strong>：所有的类都继承自单一的基类</li>
<li>单根继承结构保证所有的对象都具备某些功能，使垃圾回收器的实现变得容易得多</li>
</ul>
<h3 id="1-9容器"><a href="#1-9容器" class="headerlink" title="1.9	容器"></a>1.9	容器</h3><ul>
<li><strong>容器</strong>：创建的一种数据类型，使得它持有对其他对象的引用</li>
<li>Java在其标准类库中包含大量的容器<ul>
<li>不同的容器提供了不同类型的接口和外部行为</li>
<li>不同的容器对于某些操作具有不同的效率</li>
</ul>
</li>
<li><strong>参数化类型（泛型）</strong>：编译器自动定制用于特定类型上的类，例如只接纳和取出特定类型的容器</li>
</ul>
<h3 id="1-10对象的创建和生命期"><a href="#1-10对象的创建和生命期" class="headerlink" title="1.10	对象的创建和生命期"></a>1.10	对象的创建和生命期</h3><ul>
<li><strong>动态内存分配方式</strong>：在堆的内存池中动态地创建对象，当需要一个新对象时，直接在堆中复制</li>
<li><strong>垃圾回收器</strong>：自动发现对象何时不再使用，并继而销毁它，避免暗藏的内存泄漏问题</li>
</ul>
<h3 id="1-11异常处理：处理错误"><a href="#1-11异常处理：处理错误" class="headerlink" title="1.11	异常处理：处理错误"></a>1.11	异常处理：处理错误</h3><ul>
<li><strong>异常处理</strong>：将异常从出错地点“抛出”，并被异常处理器”捕获“</li>
<li>异常处理是与程序正常执行路径并行的，在错误发生时执行的另一条路径，不会干扰正常的执行代码</li>
</ul>
<h3 id="1-12并发编程"><a href="#1-12并发编程" class="headerlink" title="1.12	并发编程"></a>1.12	并发编程</h3><ul>
<li><strong>并发编程</strong>：将问题切分成多个可独立运行的部分（线程），从而提高程序的响应能力</li>
<li><strong>并发编程的隐患</strong>：共享资源的使用，可以使用资源锁来解决</li>
</ul>
<h3 id="1-13Java与Internet"><a href="#1-13Java与Internet" class="headerlink" title="1.13	Java与Internet"></a>1.13	Java与Internet</h3><h4 id="Web是什么"><a href="#Web是什么" class="headerlink" title="Web是什么"></a>Web是什么</h4><ul>
<li><strong>客户&#x2F;服务器系统思想</strong>：系统具有一个中央信息存储池，用来存储某种数据，通常存在于数据库，可以根据需要将它分发给某些人员或机器集群</li>
<li>Web是一个巨型的客户&#x2F;服务器系统</li>
</ul>
<h4 id="客户端编程"><a href="#客户端编程" class="headerlink" title="客户端编程"></a>客户端编程</h4><ul>
<li><strong>客户端编程</strong>：Web浏览器利用空闲的时间执行工作，使得返回给用户的结果更加迅捷，使得网站更加具有交互性</li>
<li><strong>脚本语言</strong>：通过脚本语言，将客户端程序的源代码嵌入到<strong>HTML</strong>页面中，解释这种语言的插件自动被激活</li>
<li><strong>Java</strong>：通过<strong>applet</strong>在浏览器中运行以分发客户端软件，<strong>Java</strong>凭借Web浏览器内置的解释器，解决脚本语言难以解决的复杂问题</li>
</ul>
<h4 id="服务器端编程"><a href="#服务器端编程" class="headerlink" title="服务器端编程"></a>服务器端编程</h4><ul>
<li><strong>Java servlet</strong>：涉及到文件发送问题和数据库修改等，消除了处理具有不同能力的浏览器时遇到的问题</li>
</ul>
<h2 id="第二章一切都是对象"><a href="#第二章一切都是对象" class="headerlink" title="第二章	一切都是对象"></a>第二章	一切都是对象</h2><h3 id="2-1用引用操纵对象"><a href="#2-1用引用操纵对象" class="headerlink" title="2.1	用引用操纵对象"></a>2.1	用引用操纵对象</h3><ul>
<li><p>将一切都看做对象，操纵对象的标识符是对象的一个引用</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s;</span><br><span class="line"><span class="comment">//此处只是创建引用，而不是对象</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-2必须由你创建所有对象"><a href="#2-2必须由你创建所有对象" class="headerlink" title="2.2	必须由你创建所有对象"></a>2.2	必须由你创建所有对象</h3><h4 id="存储到什么地方"><a href="#存储到什么地方" class="headerlink" title="存储到什么地方"></a>存储到什么地方</h4><ul>
<li><strong>寄存器</strong>：最快的存储区，位于处理器内部</li>
<li><strong>堆栈</strong>：位于通用<strong>RAM</strong>（随机访问寄存器）中，可以通过操纵堆栈指针来管理内存</li>
<li><strong>堆</strong>：一种通用的内存池，也位于<strong>RAM</strong>，用于存放<strong>Java</strong>中的对象</li>
<li><strong>常量存储</strong>：通常直接存储在代码内部，在嵌入式系统中，可能会存放在<strong>ROM</strong>（只读存储器）中</li>
<li><strong>非RAM存储</strong>：<strong>流对象</strong>和<strong>持久化对象</strong>，可以完全存活于程序之外</li>
</ul>
<h4 id="特例：基本类型"><a href="#特例：基本类型" class="headerlink" title="特例：基本类型"></a>特例：基本类型</h4><ul>
<li><strong>基本类型</strong>：并非引用的“自动”变量，直接存储值，并置于堆栈中，更加地高效</li>
<li><strong>高精度数字</strong>：<strong>BigInteger</strong>支持任意精度的整数，<strong>BigDecimal</strong>支持任意精度的定点数</li>
</ul>
<h4 id="Java中的数组"><a href="#Java中的数组" class="headerlink" title="Java中的数组"></a>Java中的数组</h4><ul>
<li><strong>安全性</strong>：确保数组被初始化，进行范围检查</li>
</ul>
<h3 id="2-3永远不需要销毁对象"><a href="#2-3永远不需要销毁对象" class="headerlink" title="2.3	永远不需要销毁对象"></a>2.3	永远不需要销毁对象</h3><ul>
<li><p><strong>作用域</strong>：由花括号的位置决定</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">96</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在Java中不合法，不允许在c++中将较大作用域的变量隐藏的做法</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>对象的作用域</strong>：引用在作用域终点即消失，但<strong>new</strong>创建的对象可以存活于作用域外，直至被垃圾回收器清理</p>
</li>
</ul>
<h3 id="2-4创建新的数据类型，类"><a href="#2-4创建新的数据类型，类" class="headerlink" title="2.4	创建新的数据类型，类"></a>2.4	创建新的数据类型，类</h3><ul>
<li><p><strong>类的元素</strong>：字段（数据成员）和方法（成员函数）</p>
</li>
<li><p>基本成员默认值</p>
<table>
<thead>
<tr>
<th align="center">基本类型</th>
<th align="center">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>boolean</strong></td>
<td align="center"><strong>false</strong></td>
</tr>
<tr>
<td align="center"><strong>char</strong></td>
<td align="center"><strong>‘\u0000’(null)</strong></td>
</tr>
<tr>
<td align="center"><strong>byte</strong></td>
<td align="center"><strong>(byte)0</strong></td>
</tr>
<tr>
<td align="center"><strong>short</strong></td>
<td align="center"><strong>(short)0</strong></td>
</tr>
<tr>
<td align="center"><strong>int</strong></td>
<td align="center"><strong>0</strong></td>
</tr>
<tr>
<td align="center"><strong>long</strong></td>
<td align="center"><strong>0L</strong></td>
</tr>
<tr>
<td align="center"><strong>float</strong></td>
<td align="center"><strong>0.0f</strong></td>
</tr>
<tr>
<td align="center"><strong>double</strong></td>
<td align="center"><strong>0.0d</strong></td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="2-5方法，参数与返回值"><a href="#2-5方法，参数与返回值" class="headerlink" title="2.5	方法，参数与返回值"></a>2.5	方法，参数与返回值</h3><ul>
<li><p><strong>方法的基本组成部分</strong>：名称，参数，返回值和方法体</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ReturnType <span class="title function_">methodName</span><span class="params">(<span class="comment">/* Argument list */</span>)</span>&#123;</span><br><span class="line">	<span class="comment">/* Method body */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>参数列表</strong>：指定传递给方法的信息，采用对象引用的形式</p>
</li>
</ul>
<h3 id="2-6构建一个Java程序"><a href="#2-6构建一个Java程序" class="headerlink" title="2.6	构建一个Java程序"></a>2.6	构建一个Java程序</h3><ul>
<li><strong>名字可见性</strong>：使用反转域名来命名类库，避免名称的重复</li>
<li><strong>运用其他构件</strong>：使用<strong>import</strong>语句指示编译器导入一个包</li>
<li><strong>static关键字</strong>：使域或方法不与任何对象实例关联到一起，在未创建对象时，也可以访问其对象或访问其域</li>
</ul>
<h3 id="2-7你的第一个Java程序"><a href="#2-7你的第一个Java程序" class="headerlink" title="2.7	你的第一个Java程序"></a>2.7	你的第一个Java程序</h3><ul>
<li><strong>args</strong>：存储命令行参数</li>
</ul>
<h3 id="2-8注释与嵌入文档"><a href="#2-8注释与嵌入文档" class="headerlink" title="2.8	注释与嵌入文档"></a>2.8	注释与嵌入文档</h3><ul>
<li><p><strong>注释风格</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单行注释</span></span><br><span class="line"><span class="comment">//this is a Java program</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//多行注释</span></span><br><span class="line"><span class="comment">/* this is</span></span><br><span class="line"><span class="comment">* a Java program</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>注释文档</strong>：使用<strong>javadoc</strong>提取注释，输出一个HTML文件</p>
</li>
<li><p><strong>一些标签示例</strong></p>
<ul>
<li><code>@see</code>：引用其他类的文档，生成一个超链接</li>
<li><code>&#123;@link package.class#emmber label&#125;</code>：引用其他类</li>
<li><code>&#123;@docRoot&#125;</code>：产生到根目录的相对路径，用于文档树页面的显式超链接</li>
<li><code>&#123;@inheritRoot&#125;</code>：从基类中继承相关文档到该注释中</li>
<li><code>@version (version-information)</code>：<strong>javadoc</strong>命令行使用**-version**命令，提取出版本信息</li>
<li><code>@author (author-information)</code>：<strong>javadoc</strong>命令行使用**-author**命令，提取出作者信息</li>
<li><code>@since</code>：指定程序代码最早使用的版本</li>
<li><code>@param (para-name description)</code>：生成参数列表</li>
<li><code>@return (description)</code>：生成返回值信息</li>
<li><code>@throws (fully-qualified-class-name description)</code>：生成抛出异常信息</li>
<li><code>@deprecated</code>：弃用文本，指名一个过期的类或成员，表明该类或方法不建议使用</li>
</ul>
</li>
</ul>
<h3 id="2-9编程风格"><a href="#2-9编程风格" class="headerlink" title="2.9	编程风格"></a>2.9	编程风格</h3><ul>
<li><strong>编程风格</strong><ul>
<li>类的首字母要大写</li>
<li><strong>驼峰风格</strong>：将单词拼接在一起，内部的每一个单词首字母大写</li>
</ul>
</li>
</ul>
<h2 id="第三章操作符"><a href="#第三章操作符" class="headerlink" title="第三章	操作符"></a>第三章	操作符</h2><h3 id="3-1更简单的打印语句"><a href="#3-1更简单的打印语句" class="headerlink" title="3.1	更简单的打印语句"></a>3.1	更简单的打印语句</h3><ul>
<li>静态导入类库，简化打印语句</li>
</ul>
<h3 id="3-2使用Java操作符"><a href="#3-2使用Java操作符" class="headerlink" title="3.2	使用Java操作符"></a>3.2	使用Java操作符</h3><ul>
<li><strong>操作符</strong>：接受一个或多个参数，并生成一个新值，除<strong>String</strong>外只能操作基本类型</li>
</ul>
<h3 id="3-3优先级"><a href="#3-3优先级" class="headerlink" title="3.3	优先级"></a>3.3	优先级</h3><ul>
<li><strong>优先级</strong>：计算顺序，使用括号明确</li>
</ul>
<h3 id="3-4赋值"><a href="#3-4赋值" class="headerlink" title="3.4	赋值"></a>3.4	赋值</h3><ul>
<li><p><strong>别名现象</strong>：当使用对象进行赋值时，真正操作的是对象的引用，若改变其中任何一个对象，会导致其余对象也发生变化</p>
</li>
<li><p><strong>方法中的别名问题</strong>：方法不会复制参数的副本，实际上只是传递一个引用</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        B b=<span class="keyword">new</span> <span class="title class_">B</span>(<span class="number">1</span>);</span><br><span class="line">        B.f(b);</span><br><span class="line">        System.out.println(b.value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">B</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">(B b2)</span>&#123;</span><br><span class="line">        b2.value=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-5算术操作符"><a href="#3-5算术操作符" class="headerlink" title="3.5	算术操作符"></a>3.5	算术操作符</h3><ul>
<li><strong>Random类</strong>：将当前时间作为随机数生成器的种子，生成随机数</li>
</ul>
<h3 id="3-6自动递增和递减"><a href="#3-6自动递增和递减" class="headerlink" title="3.6	自动递增和递减"></a>3.6	自动递增和递减</h3><ul>
<li><strong>前缀式</strong>：操作符位于变量或表达式的前面，先执行运算后生成值</li>
<li><strong>后缀式</strong>：操作符位于变量或表达式的后面，先生成值后执行运算</li>
</ul>
<h3 id="3-7关系操作符"><a href="#3-7关系操作符" class="headerlink" title="3.7	关系操作符"></a>3.7	关系操作符</h3><ul>
<li><strong>&#x3D;&#x3D; 和 equals</strong>：**&#x3D;&#x3D;<strong>比较的是两个操作数的引用，可以根据需要重写</strong>equals**方法来判断两个对象是否相等</li>
</ul>
<h3 id="3-8逻辑操作符"><a href="#3-8逻辑操作符" class="headerlink" title="3.8	逻辑操作符"></a>3.8	逻辑操作符</h3><ul>
<li>不可以将非布尔值当做布尔值用在逻辑表达式中</li>
<li>在应该使用<strong>String</strong>值的地方使用了布尔值，会自动转换成文本文档</li>
<li><strong>短路</strong>：一旦能够明确无误地确定整个表达式的值，就不会计算表达式余下部分</li>
</ul>
<h3 id="3-9直接常量"><a href="#3-9直接常量" class="headerlink" title="3.9	直接常量"></a>3.9	直接常量</h3><ul>
<li><strong>long</strong>等数据类型标明后缀类型，以避免编译器混淆类型</li>
<li><strong>进制转换</strong><ul>
<li>10进制转2进制：<code>Integer.toBinaryString(n);</code></li>
<li>10进制转8进制： <code>Integer.toOctalString(n);</code></li>
<li>10进制转16进制：<code>Integer.toHexString(n);</code></li>
<li>10进制转r进制：<code>Integer.toString(100, r);</code></li>
<li>r进制转10进制： <code>Integer.parseInt((String) s,(int) r);</code></li>
</ul>
</li>
<li><strong>指数计数法</strong>：<code>a.be^x=a.b*10^x</code></li>
</ul>
<h3 id="3-10按位操作符"><a href="#3-10按位操作符" class="headerlink" title="3.10	按位操作符"></a>3.10	按位操作符</h3><table>
<thead>
<tr>
<th align="center">操作符</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>&amp;</strong></td>
<td align="center"><strong>按位与</strong></td>
</tr>
<tr>
<td align="center"><strong>|</strong></td>
<td align="center"><strong>按位或</strong></td>
</tr>
<tr>
<td align="center"><strong>^</strong></td>
<td align="center"><strong>按位异或</strong></td>
</tr>
<tr>
<td align="center"><strong>~</strong></td>
<td align="center"><strong>按位非</strong></td>
</tr>
</tbody></table>
<h3 id="3-11移位操作符"><a href="#3-11移位操作符" class="headerlink" title="3.11	移位操作符"></a>3.11	移位操作符</h3><ul>
<li><strong>左移位操作符</strong><code>&lt;&lt;</code>：按照操作符右侧指定位数将操作符左边的操作数向左移动（低位补0）</li>
<li><strong>有符号右移位操作符</strong><code>&gt;&gt;</code>：按照操作符右侧指定位数将操作符左边的操作数向右移动，正数高位补0，负数高位补1</li>
<li><strong>无符号右移位操作符</strong><code>&gt;&gt;&gt;</code>：同有符号右移，高位始终补0</li>
</ul>
<h3 id="3-12三元操作符if-else"><a href="#3-12三元操作符if-else" class="headerlink" title="3.12	三元操作符if-else"></a>3.12	三元操作符if-else</h3><ul>
<li><strong>条件操作符</strong><code>boolean-exp ? value0 : value1</code>：如果布尔值为<strong>true</strong>，表达式值为<strong>value0</strong>，否则为<strong>value1</strong></li>
</ul>
<h3 id="3-13字符串操作符-和"><a href="#3-13字符串操作符-和" class="headerlink" title="3.13	字符串操作符+和+&#x3D;"></a>3.13	字符串操作符+和+&#x3D;</h3><ul>
<li>**+<strong>和</strong>+&#x3D;**用于字符串时，会将所有操作数转换成字符串类型</li>
</ul>
<h3 id="3-14使用操作符时常犯的错误"><a href="#3-14使用操作符时常犯的错误" class="headerlink" title="3.14	使用操作符时常犯的错误"></a>3.14	使用操作符时常犯的错误</h3><ul>
<li>Java编译器避免将一种类型当成另一种类型使用</li>
</ul>
<h3 id="3-15类型转换操作符"><a href="#3-15类型转换操作符" class="headerlink" title="3.15	类型转换操作符"></a>3.15	类型转换操作符</h3><ul>
<li><strong>窄化转换</strong>：将能容纳更多信息的数据类型转换成无法容纳那么多信息的类型，有可能面临信息丢失的危险</li>
<li><strong>扩展转换</strong>：与窄化转换相反，不必显式进行转换，不会造成任何信息的丢失</li>
<li><strong>截尾和舍入</strong>：窄化转换时会对数字执行截尾操作，可以使用**Math.round()**方法获得舍入结果</li>
<li><strong>提升</strong>：表达式结果的类型取决于表达式中最大的数据类型</li>
</ul>
<h3 id="3-16Java没有sizeof"><a href="#3-16Java没有sizeof" class="headerlink" title="3.16	Java没有sizeof"></a>3.16	Java没有sizeof</h3><ul>
<li><strong>Java</strong>运行在虚拟机上，所有的数据类型大小都相等，不会产生移植问题</li>
</ul>
<h2 id="第四章控制执行流程"><a href="#第四章控制执行流程" class="headerlink" title="第四章	控制执行流程"></a>第四章	控制执行流程</h2><h3 id="4-1true和false"><a href="#4-1true和false" class="headerlink" title="4.1	true和false"></a>4.1	true和false</h3><ul>
<li>条件语句利用条件表达式的值决定执行路径，不允许使用非布尔值</li>
</ul>
<h3 id="4-2if-else"><a href="#4-2if-else" class="headerlink" title="4.2	if-else"></a>4.2	if-else</h3><ul>
<li><p><strong>if-else语句</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(Boolean-expression)</span><br><span class="line">    statement</span><br><span class="line">或</span><br><span class="line">    <span class="keyword">if</span>(Boolean-expression)</span><br><span class="line">	    statement</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        statement</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-3迭代"><a href="#4-3迭代" class="headerlink" title="4.3	迭代"></a>4.3	迭代</h3><ul>
<li><p><strong>do-while语句</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">    statement</span><br><span class="line"><span class="title function_">while</span><span class="params">(Boolean-expression)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>for语句</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(initialization;Boolean-expression;step)</span><br><span class="line">    statement</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>逗号操作符</strong>：用于<strong>for</strong>语句的初始化和步进控制部分，被分割的语句均会独立执行</p>
</li>
</ul>
<h3 id="4-4Foreach语法"><a href="#4-4Foreach语法" class="headerlink" title="4.4	Foreach语法"></a>4.4	Foreach语法</h3><ul>
<li><p><strong>foreach用于数组和容器</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> num : nums)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-5return"><a href="#4-5return" class="headerlink" title="4.5	return"></a>4.5	return</h3><ul>
<li><strong>return关键字</strong><ul>
<li>指定一个方法返回什么值</li>
<li>导致当前方法退出，并返回值</li>
</ul>
</li>
</ul>
<h3 id="4-6break和continue"><a href="#4-6break和continue" class="headerlink" title="4.6	break和continue"></a>4.6	break和continue</h3><ul>
<li><strong>break关键字</strong>：强制退出循环，不执行循环中剩余语句</li>
<li><strong>continue关键字</strong>：停止执行当前的迭代，退出循环起始处，开始下一次迭代</li>
</ul>
<h3 id="4-7臭名昭著的goto"><a href="#4-7臭名昭著的goto" class="headerlink" title="4.7	臭名昭著的goto"></a>4.7	臭名昭著的goto</h3><ul>
<li><p><strong>goto语句</strong>：源码级的跳转导致程序的控制流程的混乱</p>
</li>
<li><p><strong>标签</strong>：用于迭代语句之前，<strong>break</strong>和<strong>continue</strong>会中断循环，直到标签所在的地方</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">label1:</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span> label1;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">label2:</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span> label2;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-8switch"><a href="#4-8switch" class="headerlink" title="4.8	switch"></a>4.8	switch</h3><ul>
<li><p><strong>switch选择语句</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(integral-selector)&#123;</span><br><span class="line">    <span class="keyword">case</span> integral-value1 : statement; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> integral-value1 : statement; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> integral-value1 : statement; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> integral-value1 : statement; <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">default</span> : statement; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第五章初始化与清理"><a href="#第五章初始化与清理" class="headerlink" title="第五章	初始化与清理"></a>第五章	初始化与清理</h2><h3 id="5-1用构造器确保初始化"><a href="#5-1用构造器确保初始化" class="headerlink" title="5.1	用构造器确保初始化"></a>5.1	用构造器确保初始化</h3><ul>
<li><p><strong>构造器</strong>：名称与类名相同，不返回任何值</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rock</span>&#123;</span><br><span class="line">	Rock()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Rock&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-2方法重载"><a href="#5-2方法重载" class="headerlink" title="5.2	方法重载"></a>5.2	方法重载</h3><ul>
<li><strong>区别重载的方法</strong>：通过参数列表的不同区别重载方法，包括参数列表的顺序</li>
<li><strong>涉及基本类型的重载</strong>：如果传入的实际参数大于形式参数，会提升参数数据类型，反之编译器会报错</li>
<li><strong>以返回值区分重载方法</strong>：返回值重载会产生歧义，导致编译器报错</li>
</ul>
<h3 id="5-3默认构造器"><a href="#5-3默认构造器" class="headerlink" title="5.3	默认构造器"></a>5.3	默认构造器</h3><ul>
<li><strong>默认构造器</strong>：当且仅当在未创建任何构造器的情况下，编译器会自动生成一个无参构造器</li>
</ul>
<h3 id="5-4this关键字"><a href="#5-4this关键字" class="headerlink" title="5.4	this关键字"></a>5.4	this关键字</h3><ul>
<li><strong>在构造器中调用构造器</strong>：使用<strong>this</strong>关键字，只能使用一个<strong>this</strong>语句，并且只能用于构造器开头</li>
</ul>
<h3 id="5-5清理：终结处理和垃圾回收"><a href="#5-5清理：终结处理和垃圾回收" class="headerlink" title="5.5	清理：终结处理和垃圾回收"></a>5.5	清理：终结处理和垃圾回收</h3><ul>
<li>**finalize()**：在垃圾回收器准备释放对象占用空间前被调用，在下一次回收动作发生时，才会真正地回收内存空间，常常用于确保某些非内存资源的释放</li>
</ul>
<h3 id="5-6成员初始化"><a href="#5-6成员初始化" class="headerlink" title="5.6	成员初始化"></a>5.6	成员初始化</h3><ul>
<li><strong>Java</strong>要求方法的局部变量必须初始化，否则产生编译时错误，但如果是基本数据类型，则会赋予初始值</li>
</ul>
<h3 id="5-7构造器初始化"><a href="#5-7构造器初始化" class="headerlink" title="5.7	构造器初始化"></a>5.7	构造器初始化</h3><ul>
<li><strong>初始化顺序</strong>：按照变量定义时的顺序决定变量初始化的顺序</li>
<li><strong>静态对象的初始化</strong>：只有在第一个对象被创建或者第一次访问时，才会初始化静态对象，并且此后不会再次被初始化，静态对象的初始化优先于非静态对象</li>
</ul>
<h3 id="5-8数组初始化"><a href="#5-8数组初始化" class="headerlink" title="5.8	数组初始化"></a>5.8	数组初始化</h3><ul>
<li><p><strong>数组的两种初始化方式</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer[] a=<span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">2</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Integer[] b=&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">2</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>可变参数列表</strong>：一种特殊的形参类型，能够让方法接受不定数量的参数，且必须是方法定义中的最后一个参数</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String ... strings)</span>&#123;</span><br><span class="line">    <span class="type">int</span> index=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(String string : strings)&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;the Num.&quot;</span>+index+++<span class="string">&quot; string: &quot;</span>+string);</span><br><span class="line">        System.out.print(<span class="string">&quot;  &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    print(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">    print(<span class="string">&quot;one&quot;</span>,<span class="string">&quot;two&quot;</span>);</span><br><span class="line">    print(<span class="string">&quot;one&quot;</span>,<span class="string">&quot;two&quot;</span>,<span class="string">&quot;three&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-9枚举类型"><a href="#5-9枚举类型" class="headerlink" title="5.9	枚举类型"></a>5.9	枚举类型</h3><ul>
<li><strong>枚举</strong>：一种特殊的数据类型，它定义了一个有限的值集合，使程序更具可读性和易用性</li>
</ul>
<h2 id="第六章访问权限控制"><a href="#第六章访问权限控制" class="headerlink" title="第六章	访问权限控制"></a>第六章	访问权限控制</h2><h3 id="6-1包：库单元"><a href="#6-1包：库单元" class="headerlink" title="6.1	包：库单元"></a>6.1	包：库单元</h3><ul>
<li><p><strong>编译单元</strong>：一个后缀名为**.java<strong>的源代码文件，一个编译单元只能拥有一个公开的</strong>public class**，且类名与文件名相同</p>
</li>
<li><p><strong>package关键字</strong>：<strong>package</strong>是用来组织和管理类的一种机制，一个<strong>package</strong>可以包含多个类和子包，它们可以帮助开发人员更加有效地组织和管理自己的代码，文件中除注释外必须是<strong>package语句</strong></p>
</li>
<li><p><strong>包的命名规则</strong></p>
<ul>
<li><p>包名全部为小写字母</p>
</li>
<li><p>包名使用点分隔符（.）将各个单词连接在一起</p>
</li>
<li><p>包名应该基于域名的倒置命名法来命名</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置环境变量CLASSPATH以包含多个可供查询的路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//例如:</span></span><br><span class="line"><span class="comment">//路径C:\DOC\JavaT\net\mindview\simple</span></span><br><span class="line"><span class="comment">//CLASSPATH=.;D:\JAVA\LIB;C:\DOC\JavaT</span></span><br><span class="line"><span class="keyword">import</span> net.mindview.simple.*;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>当发生类名冲突时，编译器会报错以要求指明类的全名</p>
</li>
</ul>
<h3 id="6-2Java访问权限修饰词"><a href="#6-2Java访问权限修饰词" class="headerlink" title="6.2	Java访问权限修饰词"></a>6.2	Java访问权限修饰词</h3><ul>
<li><p><strong>访问权限修饰词</strong></p>
<table>
<thead>
<tr>
<th align="center">修饰词</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>public</strong></td>
<td align="center">最大权限，修饰的成员可以被任何类访问，在同一个包下的类和不同包下的类都可以访问</td>
</tr>
<tr>
<td align="center"><strong>protected</strong></td>
<td align="center">能够被同一个包下的类以及不同包下的子类访问，但是不能被不同包下的非子类访问</td>
</tr>
<tr>
<td align="center"><strong>默认</strong></td>
<td align="center">当没有任何访问修饰符时，即为默认访问权限，只能被同一个包下的类访问，无法被其他包下的类访问</td>
</tr>
<tr>
<td align="center"><strong>private</strong></td>
<td align="center">最小权限，只能被定义该成员的类访问，不能被同一包下的其他类或者不同包下的类访问</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="6-3接口和实现"><a href="#6-3接口和实现" class="headerlink" title="6.3	接口和实现"></a>6.3	接口和实现</h3><ul>
<li>访问权限的控制常被称为具体实现的隐藏，用于设定客户端程序员可以使用和不可以使用的界限，和接口与实现的分离</li>
</ul>
<h3 id="6-4类的访问权限"><a href="#6-4类的访问权限" class="headerlink" title="6.4	类的访问权限"></a>6.4	类的访问权限</h3><ul>
<li><strong>修饰词限制</strong><ul>
<li>每个编译单元只能拥有一个<strong>public</strong>类，且类名与文件名相同</li>
<li>如果不含有<strong>public</strong>类，可随意对文件命名</li>
</ul>
</li>
<li>类不可以使用<strong>private</strong>修饰，只能使用<strong>package-private</strong>或<strong>public</strong>，如果不希望任何其它类拥有访问权限，可以将构造器指定为<strong>private</strong></li>
</ul>
<h2 id="第七章复用类"><a href="#第七章复用类" class="headerlink" title="第七章	复用类"></a>第七章	复用类</h2><h3 id="7-1组合语法"><a href="#7-1组合语法" class="headerlink" title="7.1	组合语法"></a>7.1	组合语法</h3><ul>
<li><strong>组合技术</strong>：将所需要的对象引用置于新类之中</li>
</ul>
<h3 id="7-2继承语法"><a href="#7-2继承语法" class="headerlink" title="7.2	继承语法"></a>7.2	继承语法</h3><ul>
<li><strong>extends语句</strong>：导出类继承基类，并自动得到基类中所有的域和方法</li>
<li><strong>初始化基类</strong>：在生成导出类对象时，总会调用基类构造器，且基类构造器先于导出类构造器被调用</li>
<li><strong>super关键字</strong>：带参数构造器必须显式地使用<strong>super</strong>语句调用基类的构造器，且必须写在构造器的第一行</li>
</ul>
<h3 id="7-3代理"><a href="#7-3代理" class="headerlink" title="7.3	代理"></a>7.3	代理</h3><ul>
<li><p><strong>代理</strong>：一个类代表另一个类的功能，并控制对该类的访问，从而实现为其他对象提供一种代理控制对目标对象的访问的功能</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 目标接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Image</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 目标对象：实现目标接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RealImage</span> <span class="keyword">implements</span> <span class="title class_">Image</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String fileName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RealImage</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fileName = fileName;</span><br><span class="line">        loadFromDisk(fileName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Displaying &quot;</span> + fileName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">loadFromDisk</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Loading &quot;</span> + fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理对象：实现与目标对象相同的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImageProxy</span> <span class="keyword">implements</span> <span class="title class_">Image</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RealImage realImage;</span><br><span class="line">    <span class="keyword">private</span> String fileName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ImageProxy</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fileName = fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (realImage == <span class="literal">null</span>) &#123;</span><br><span class="line">            realImage = <span class="keyword">new</span> <span class="title class_">RealImage</span>(fileName);</span><br><span class="line">        &#125;</span><br><span class="line">        realImage.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="7-4结合实用组合和继承"><a href="#7-4结合实用组合和继承" class="headerlink" title="7.4	结合实用组合和继承"></a>7.4	结合实用组合和继承</h3><ul>
<li><strong>名称屏蔽</strong>：在导出类中重新定义方法，不会屏蔽其在基类中的任何版本</li>
</ul>
<h3 id="7-5在组合与继承之间选择"><a href="#7-5在组合与继承之间选择" class="headerlink" title="7.5	在组合与继承之间选择"></a>7.5	在组合与继承之间选择</h3><ul>
<li><strong>is-a</strong>（是一个）用继承表达关系，<strong>has-a</strong>（有一个）用组合表达关系</li>
</ul>
<h3 id="7-6protected关键字"><a href="#7-6protected关键字" class="headerlink" title="7.6	protected关键字"></a>7.6	protected关键字</h3><ul>
<li><strong>protect关键字</strong>：对于类用户而言<strong>private</strong>，对于任何继承自此类的导出类或其他任何位于同一个包内的内而言，是可以访问的</li>
</ul>
<h3 id="7-7向上转型"><a href="#7-7向上转型" class="headerlink" title="7.7	向上转型"></a>7.7	向上转型</h3><ul>
<li><strong>向上转型</strong>：将一个子类对象转换成其父类对象的过程，由于面向对象编程的特性，每个子类对象都可以被当作父类对象使用，可以将一个子类对象赋值给一个父类引用变量，以实现向上转型</li>
</ul>
<h3 id="7-8final关键字"><a href="#7-8final关键字" class="headerlink" title="7.8	final关键字"></a>7.8	final关键字</h3><ul>
<li><strong>final数据</strong><ul>
<li>修饰基本类型时，数值恒定不变；修饰引用类型时，引用恒定不变</li>
<li><strong>空白final</strong>：被声明为<strong>final</strong>但又未给初值的域，在使用前必须在构造器中进行初始化</li>
<li><strong>final参数</strong>：在参数列表中以声明的方式将参数指明为<strong>final</strong>，表示无法在方法中更改参数引用所指向的对象</li>
</ul>
</li>
<li><strong>final方法</strong><ul>
<li>将方法锁定，以防任何继承类修改它的含义</li>
<li>类中所有的<strong>private</strong>方法都隐式地指定为是<strong>final</strong>的</li>
</ul>
</li>
<li><strong>final</strong>类：不允许继承该类</li>
</ul>
<h3 id="7-9初始化及类的加载"><a href="#7-9初始化及类的加载" class="headerlink" title="7.9	初始化及类的加载"></a>7.9	初始化及类的加载</h3><ul>
<li><strong>类的加载顺序</strong><ul>
<li>优先加载加载类的基类，无论是否需要产生基类的对象</li>
<li>按照继承关系依次执行<strong>static</strong>的初始化</li>
<li>创建对象后，对象中所有基本类型被设为默认值，然后执行对象的构造器</li>
</ul>
</li>
</ul>
<h2 id="第八章多态"><a href="#第八章多态" class="headerlink" title="第八章	多态"></a>第八章	多态</h2><h3 id="8-1再论向上转型"><a href="#8-1再论向上转型" class="headerlink" title="8.1	再论向上转型"></a>8.1	再论向上转型</h3><ul>
<li>向上转型避免了继承后，需要更多重载的编程过程，如果仅接收基类作为参数，可以简化代码的结构</li>
</ul>
<h3 id="8-2转机"><a href="#8-2转机" class="headerlink" title="8.2	转机"></a>8.2	转机</h3><ul>
<li><strong>绑定</strong>：讲一个方法调用同一个方法主体关联起来<ul>
<li><strong>前期绑定</strong>：在程序执行前绑定</li>
<li><strong>后期绑定</strong>：在运行时根据对象的类型进行绑定</li>
</ul>
</li>
<li><strong>注意事项</strong><ul>
<li>私有方法的覆盖不会产生多态现象</li>
<li>域和静态方法不具备多态性</li>
</ul>
</li>
</ul>
<h3 id="8-3构造器和多态"><a href="#8-3构造器和多态" class="headerlink" title="8.3	构造器和多态"></a>8.3	构造器和多态</h3><ul>
<li><strong>构造器的调用顺序</strong><ul>
<li>调用基类构造器</li>
<li>按声明顺序调用成员的初始化方法</li>
<li>调用导出类构造器的主体</li>
</ul>
</li>
<li><strong>构造器内部的多态方法的行为</strong><ul>
<li>在其他任何事物发生之前，将分配给对象的存储空间初始化成二进制的零</li>
<li>如前所述那样调用基类构造器</li>
<li>按照声明的顺序调用成员的初始化方法</li>
<li>调用导出类的构造器主体</li>
</ul>
</li>
</ul>
<h3 id="8-4协变返回类型"><a href="#8-4协变返回类型" class="headerlink" title="8.4	协变返回类型"></a>8.4	协变返回类型</h3><ul>
<li><strong>协变返回类型</strong>：在导出类中的被覆盖方法可以返回基类方法的返回基类的某种导出类型</li>
</ul>
<h3 id="8-5用继承进行设计"><a href="#8-5用继承进行设计" class="headerlink" title="8.5	用继承进行设计"></a>8.5	用继承进行设计</h3><ul>
<li><strong>纯继承与拓展</strong>：采用<strong>纯粹</strong>的方式来创建继承层次结构，只有在基类中已经建立的方法才可以在导出类中被覆盖，基类与导出类拥有完全相同的接口</li>
<li><strong>向下转型与运行时类型识别</strong>：向下转型时会进行<strong>运行时类型识别</strong>，如果不是希望的类型会报错</li>
</ul>
<h2 id="第九章接口"><a href="#第九章接口" class="headerlink" title="第九章	接口"></a>第九章	接口</h2><h3 id="9-1抽象类和抽象方法"><a href="#9-1抽象类和抽象方法" class="headerlink" title="9.1	抽象类和抽象方法"></a>9.1	抽象类和抽象方法</h3><ul>
<li><strong>抽象方法</strong>：只有方法声明，没有具体实现的方法，只能在抽象类或者接口中存在，不能被直接调用，需要由子类进行实现</li>
<li><strong>抽象类</strong>：在类的声明中包含抽象方法的类，不能被实例化，必须被子类继承并实现其中的抽象方法才能被使用</li>
<li><strong>使用场合</strong><ul>
<li><strong>定义通用接口</strong>：通过定义抽象方法和抽象类，使得多个具体的子类可以共享这些接口和基础实现逻辑，提高了代码的复用性和效率</li>
<li><strong>约束子类行为</strong>：抽象类可以定义一些基础的方法和属性，但是对于某些具体的属性和方法，需要等到子类中具体实现之后才可以使用，从而达到约束子类行为的目的</li>
<li><strong>提高代码可读性和可维护性</strong>：通过抽象类将某些具体的实现逻辑封装起来，有助于提高代码的可读性和可维护性</li>
</ul>
</li>
</ul>
<h3 id="9-2接口"><a href="#9-2接口" class="headerlink" title="9.2	接口"></a>9.2	接口</h3><ul>
<li><strong>interface关键字</strong>：产生完全抽象的类，只提供形式，不提供任何具体实现</li>
<li><strong>接口方法</strong>：默认为<strong>public</strong>且必须被定义为<strong>public</strong>，否则在方法继承过程中会导致其访问权限降低（在高版本Java中，接口中的普通方法也是被允许的，此类方法为静态方法，可以使用<strong>private</strong>来实现工具函数）</li>
</ul>
<h3 id="9-3完全解耦"><a href="#9-3完全解耦" class="headerlink" title="9.3	完全解耦"></a>9.3	完全解耦</h3><ul>
<li><strong>策略设计模式</strong>：根据所传递参数对象不同，而具有不同行为的方法</li>
<li><strong>解耦</strong>：将接口从具体实现中解耦，使得接口可以用于多种不同的具体实现，代码更具可复用性</li>
</ul>
<h3 id="9-4Java中的多重继承"><a href="#9-4Java中的多重继承" class="headerlink" title="9.4	Java中的多重继承"></a>9.4	Java中的多重继承</h3><ul>
<li><strong>多重继承</strong>：继承任意多个接口来实现多重继承，接口没有任何具体实现，不会产生类继承所面临的问题</li>
</ul>
<h3 id="9-5通过继承来拓展接口"><a href="#9-5通过继承来拓展接口" class="headerlink" title="9.5	通过继承来拓展接口"></a>9.5	通过继承来拓展接口</h3><ul>
<li><strong>拓展接口</strong>：通过继承多个接口，或者在接口中添加新的声明，来实现接口的拓展</li>
<li><strong>多重继承的名字冲突</strong>：返回类型或方法签名不同的相同方法，不允许被同时继承</li>
</ul>
<h3 id="9-6适配接口"><a href="#9-6适配接口" class="headerlink" title="9.6	适配接口"></a>9.6	适配接口</h3><ul>
<li><strong>适配接口</strong>：使用<strong>策略设计模式</strong>和<strong>适配器模式</strong>，来实现任何类对方法进行适配</li>
</ul>
<h3 id="9-7接口中的域"><a href="#9-7接口中的域" class="headerlink" title="9.7	接口中的域"></a>9.7	接口中的域</h3><ul>
<li>接口中的任何域都是<strong>static</strong>和<strong>final</strong>的，可以用来实现与<strong>enum</strong>类似的功能</li>
<li>接口中的域不允许空<strong>final</strong>，必须进行初始化</li>
</ul>
<h3 id="9-8嵌套接口"><a href="#9-8嵌套接口" class="headerlink" title="9.8	嵌套接口"></a>9.8	嵌套接口</h3><ul>
<li>接口可以嵌套在其他接口或类当中</li>
</ul>
<h3 id="9-9接口与工厂"><a href="#9-9接口与工厂" class="headerlink" title="9.9	接口与工厂"></a>9.9	接口与工厂</h3><ul>
<li><strong>工厂方法设计模式</strong>：在工厂对象上调用创建方法，生成接口的某个实现对象</li>
</ul>
<h2 id="第十章内部类"><a href="#第十章内部类" class="headerlink" title="第十章	内部类"></a>第十章	内部类</h2><h3 id="10-1创建内部类"><a href="#10-1创建内部类" class="headerlink" title="10.1	创建内部类"></a>10.1	创建内部类</h3><ul>
<li><strong>内部类</strong>：将一个类的定义放在另一个类的定义内部，使用时需要指明其类型<strong>OuterClassName.InnerClassName</strong></li>
</ul>
<h3 id="10-2链接到外部类"><a href="#10-2链接到外部类" class="headerlink" title="10.2	链接到外部类"></a>10.2	链接到外部类</h3><ul>
<li>内部类能够访问其外围对象的所有成员，拥有其外围类所有元素的访问权</li>
</ul>
<h3 id="10-3使用-this与-new"><a href="#10-3使用-this与-new" class="headerlink" title="10.3	使用.this与.new"></a>10.3	使用.this与.new</h3><ul>
<li><p><strong>.this关键字</strong>：生成对外部类对象的引用</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DotThis</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;DotThis.f()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> DotThis <span class="title function_">outer</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> DotThis.<span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Inner <span class="title function_">inner</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        DotThis dt=<span class="keyword">new</span> <span class="title class_">DotThis</span>();</span><br><span class="line">        DotThis.Inner dti= dt.inner();</span><br><span class="line">        dti.outer().f();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>.new关键字</strong>：提供对其他外部类对象的引用</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DotNew</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        DotNew dn=<span class="keyword">new</span> <span class="title class_">DotNew</span>();</span><br><span class="line">        DotNew.Inner dni=dn.<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="10-4内部类与向上转型"><a href="#10-4内部类与向上转型" class="headerlink" title="10.4	内部类与向上转型"></a>10.4	内部类与向上转型</h3><ul>
<li>外围类中添加实现接口的私有内部类，隐藏了实现的细节，有助于生成更高效的代码</li>
</ul>
<h3 id="10-5在方法和作用域内的内部类"><a href="#10-5在方法和作用域内的内部类" class="headerlink" title="10.5	在方法和作用域内的内部类"></a>10.5	在方法和作用域内的内部类</h3><ul>
<li><strong>内部类的作用</strong><ul>
<li>实现某类型的接口，创建并返回对其的引用</li>
<li>使用私有内部类辅助解决外围类的复杂问题</li>
</ul>
</li>
<li><strong>内部类的分类</strong><ul>
<li><strong>成员内部类</strong>：定义在一个类的内部，且在类的成员位置上。它可以访问外部类的所有成员变量和方法，包括私有的。创建成员内部类的实例时，必须先创建外部类的实例，通过外部类的引用来创建内部类的对象。</li>
<li><strong>静态内部类</strong>：定义在一个类的内部，且在类的成员位置上，并使用 static 修饰。它不能访问外部类的非静态成员变量和方法，只能访问外部类的静态成员变量和方法。创建静态内部类的实例时，不需要先创建外部类的实例。</li>
<li><strong>局部内部类</strong>：定义在一个方法或语句块的内部。它只能在定义它的方法或语句块中使用，并且不能被 public、protected、private 和 static 修饰。局部内部类可以访问外部类的所有成员变量和方法，但是要求这些变量和方法必须是 final 类型的。</li>
<li><strong>匿名内部类</strong>：没有类名的内部类。它通常用于创建临时的、只使用一次的类对象。匿名内部类通常作为参数传递给方法或构造函数，也可以直接创建它的实例。匿名内部类可以继承一个父类或实现一个接口，但是不能同时进行。</li>
</ul>
</li>
</ul>
<h3 id="10-6匿名内部类"><a href="#10-6匿名内部类" class="headerlink" title="10.6	匿名内部类"></a>10.6	匿名内部类</h3><ul>
<li><p><strong>匿名内部类</strong>：一个接口&#x2F;类的方法的某个实现方式在程序中只会执行一次，但为了使用它，我们需要创建它的实现类&#x2F;子类去实现&#x2F;重写，此时可以使用匿名内部类的方式，可以无需创建新的类，减少代码冗余</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Greeting</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Greeting</span> <span class="variable">greeting</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Greeting</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        greeting.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="10-7嵌套类"><a href="#10-7嵌套类" class="headerlink" title="10.7	嵌套类"></a>10.7	嵌套类</h3><ul>
<li><p><strong>嵌套类</strong></p>
<ul>
<li><p>不需要其外围类的对象</p>
</li>
<li><p>不能从嵌套类的对象中访问非静态的外围类对象</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Greeting</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Greet</span> <span class="keyword">implements</span> <span class="title class_">Greeting</span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Greet greet=<span class="keyword">new</span> <span class="title class_">Greet</span>();</span><br><span class="line">        greet.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>接口内部的类</strong>：嵌套类可以作为接口的一部分</p>
</li>
<li><p><strong>多层嵌套</strong>：无论被嵌套多少层，嵌套类都可以透明地访问它所嵌入的外围类的所有成员</p>
</li>
</ul>
<h3 id="10-8为什么需要内部类"><a href="#10-8为什么需要内部类" class="headerlink" title="10.8	为什么需要内部类"></a>10.8	为什么需要内部类</h3><ul>
<li><strong>内部类的作用</strong>：每个内部类都能够独立地继承自一个（接口的）实现，所以无论外围类是否已经继承了某个（接口的）实现，对于内部类都没有影响</li>
<li><strong>内部类的特性</strong><ul>
<li>内部类可以有多个实例，每个实例都有自己的状态信息，并且与其外围类对象的信息相互独立</li>
<li>在单个外围类中，可以让多个内部类以不同的方式实现同一个接口，或继承同一个类</li>
<li>创建内部类对象的时刻并不依赖于外围类对象的创建</li>
<li>内部类并没有令人迷惑的<strong>is-a</strong>关系，它就是一个独立的实体</li>
</ul>
</li>
<li><strong>闭包</strong>：一个可调用的对象，记录了来自于创建它的作用域的信息，内部类是面向对象的闭包</li>
<li><strong>回调</strong>：对象携带一些信息，允许它在稍后的某个时刻调用初始的对象</li>
</ul>
<h3 id="10-9内部类的继承"><a href="#10-9内部类的继承" class="headerlink" title="10.9	内部类的继承"></a>10.9	内部类的继承</h3><ul>
<li><p>内部类的继承需要使用**.super**，用于进行初始化操作</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WithInner</span>&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InheritInner</span> <span class="keyword">extends</span> <span class="title class_">WithInner</span>.Inner&#123;</span><br><span class="line">    InheritInner(WithInner wi)&#123;</span><br><span class="line">        wi.<span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        WithInner wi=<span class="keyword">new</span> <span class="title class_">WithInner</span>();</span><br><span class="line">        InheritInner ii=<span class="keyword">new</span> <span class="title class_">InheritInner</span>(wi);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="10-10内部类可以被覆盖吗"><a href="#10-10内部类可以被覆盖吗" class="headerlink" title="10.10	内部类可以被覆盖吗"></a>10.10	内部类可以被覆盖吗</h3><ul>
<li>内部类可以被覆盖，但是仅继承外围类不会产生影响，因为它们位于两个不同的命名空间</li>
</ul>
<h3 id="10-11局部内部类"><a href="#10-11局部内部类" class="headerlink" title="10.11	局部内部类"></a>10.11	局部内部类</h3><ul>
<li>局部内部类不是外围类的一部分，但是它可以访问当前代码块的常量以及外围类的所有成员，与匿名内部类不同的是，局部内部类的对象可以被多次声明</li>
</ul>
<h3 id="10-12内部类标识符"><a href="#10-12内部类标识符" class="headerlink" title="10.12	内部类标识符"></a>10.12	内部类标识符</h3><ul>
<li>内部类会产生一个**.class<strong>文件以及包含它们的</strong>Class**对象信息，它们使用外围类名称 + $ + 内部类名称来命名</li>
</ul>
<h2 id="第十一章持有对象"><a href="#第十一章持有对象" class="headerlink" title="第十一章	持有对象"></a>第十一章	持有对象</h2><h3 id="11-1泛型和类型安全的容器"><a href="#11-1泛型和类型安全的容器" class="headerlink" title="11.1	泛型和类型安全的容器"></a>11.1	泛型和类型安全的容器</h3><ul>
<li>通过使用预定义的泛型，可以在编译期避免将错误类型的对象放置到容器中，同时也优化了后续的类型转换过程</li>
</ul>
<h3 id="11-2基本概念"><a href="#11-2基本概念" class="headerlink" title="11.2	基本概念"></a>11.2	基本概念</h3><ul>
<li><strong>Java</strong>容器类类库的用途为保存对象，可分为两类<ul>
<li><strong>Collection</strong>：一个独立元素的序列，服从一条或多条规则</li>
<li><strong>Map</strong>：一组成对的键值对对象，可以通过键来查找值</li>
</ul>
</li>
</ul>
<h3 id="11-3添加一组元素"><a href="#11-3添加一组元素" class="headerlink" title="11.3	添加一组元素"></a>11.3	添加一组元素</h3><ul>
<li><p><strong>添加元素</strong></p>
<ul>
<li><p>数组转换成集合<strong>asList</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collection&lt;Integer&gt; collection=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;(Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>));</span><br></pre></td></tr></table></figure>
</li>
<li><p>向集合中添加多个元素<strong>addAll</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collections.addAll(collection,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>向集合中添加逐个元素<strong>add</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">collection.add(<span class="number">4</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="11-4容器的打印"><a href="#11-4容器的打印" class="headerlink" title="11.4	容器的打印"></a>11.4	容器的打印</h3><ul>
<li><strong>容器打印</strong>：使用<strong>Arrays.toString</strong>来打印容器中的对象</li>
</ul>
<h3 id="11-5List"><a href="#11-5List" class="headerlink" title="11.5	List"></a>11.5	List</h3><ul>
<li><strong>List</strong>接口在<strong>Collection</strong>的基础上添加方法，使得它可以插入元素和移除元素<ul>
<li><strong>ArrayList</strong>：基于数组的容器，随机访问元素速度快，但是插入和移除元素较慢</li>
<li><strong>LinkedList</strong>：基于链表的容器，插入和删除操作较快，但随机访问能力低</li>
</ul>
</li>
</ul>
<h3 id="11-6迭代器"><a href="#11-6迭代器" class="headerlink" title="11.6	迭代器"></a>11.6	迭代器</h3><ul>
<li><strong>迭代器</strong>：一个对象，用于遍历并选择序列中的对象，不必关心序列底层的结构</li>
<li><strong>Iterator</strong>迭代器<ul>
<li>使用方法**iterator()**要求容器返回一个迭代器，将准备好返回序列的第一个元素</li>
<li>使用**next()**获得序列中的下一个元素</li>
<li>使用**hasNext()**检查序列中是否还有其他元素</li>
<li>使用**remove()**将迭代器新近返回的元素删除</li>
</ul>
</li>
<li><strong>ListIterator</strong>迭代器：<strong>Iterator</strong>迭代器的子类，允许双向移动</li>
</ul>
<h3 id="11-7LinkedList"><a href="#11-7LinkedList" class="headerlink" title="11.7	LinkedList"></a>11.7	LinkedList</h3><ul>
<li><strong>LinkedList</strong>：相对于<strong>ArrayList</strong>接口，性能上有所差异，同时添加了用作栈，队列或双端队列的方法</li>
</ul>
<h3 id="11-8Stack"><a href="#11-8Stack" class="headerlink" title="11.8	Stack"></a>11.8	Stack</h3><ul>
<li><strong>栈</strong>：后进先出的容器，可以通过<strong>LinkedList</strong>接口来实现</li>
</ul>
<h3 id="11-9Set"><a href="#11-9Set" class="headerlink" title="11.9	Set"></a>11.9	Set</h3><ul>
<li><strong>集合</strong>：不保存重复的元素，通常使用<strong>HashSet</strong>实现，在快速查找方面的性能较强</li>
</ul>
<h3 id="11-10Map"><a href="#11-10Map" class="headerlink" title="11.10	Map"></a>11.10	Map</h3><ul>
<li><strong>映射</strong>：将键对象映射到值对象，其中<strong>HashMap</strong>无序，而<strong>LinkedHashMap</strong>有序</li>
</ul>
<h3 id="11-11Queue"><a href="#11-11Queue" class="headerlink" title="11.11	Queue"></a>11.11	Queue</h3><ul>
<li><strong>队列</strong>：先进先出的容器，<strong>LinkedList</strong>是队列的一种实现</li>
<li><strong>PriorityQueue</strong>：优先级队列，确定元素的优先级，按照一定顺序弹出元素</li>
</ul>
<h3 id="11-12Collection和Iterator"><a href="#11-12Collection和Iterator" class="headerlink" title="11.12	Collection和Iterator"></a>11.12	Collection和Iterator</h3><ul>
<li><strong>Collection</strong>是描述所有序列容器的共性的根接口，但是，当我们需要实现一个不是<strong>Collection</strong>的类时，可以选择使用<strong>Iterator</strong>，在序列类上的约束也更少</li>
</ul>
<h3 id="11-13Foreach与迭代器"><a href="#11-13Foreach与迭代器" class="headerlink" title="11.13	Foreach与迭代器"></a>11.13	Foreach与迭代器</h3><ul>
<li><strong>foreach</strong>语法可用于任何<strong>Collection</strong>对象，它使用<strong>Iterator</strong>接口来返回序列中的元素</li>
<li><strong>适配器方法</strong>：添加一个用于生成迭代器的方法，提供接口以满足<strong>foreach</strong>语句</li>
</ul>
<h2 id="第十二章通过异常处理错误"><a href="#第十二章通过异常处理错误" class="headerlink" title="第十二章	通过异常处理错误"></a>第十二章	通过异常处理错误</h2><h3 id="12-1概念"><a href="#12-1概念" class="headerlink" title="12.1	概念"></a>12.1	概念</h3><ul>
<li><strong>异常处理的必要性</strong><ul>
<li>编译期间并不能找出所有的错误，余下的问题必须在运行期间解决</li>
<li>对于构造大型，健壮，可维护的程序而言，错误处理模式已经成为主要障碍</li>
<li>使用异常往往可以降低错误代码处理的复杂度</li>
</ul>
</li>
</ul>
<h3 id="12-2基本异常"><a href="#12-2基本异常" class="headerlink" title="12.2	基本异常"></a>12.2	基本异常</h3><ul>
<li><strong>异常情形</strong>：阻止当前方法或作用域据需执行的问题</li>
<li><strong>抛出异常的流程</strong><ul>
<li>使用<strong>new</strong>在堆上创建异常对象</li>
<li>当前执行路径被终止，并且从当前环境中弹出对异常对象的引用</li>
<li>异常处理机制接管程序，并寻找下一个合适的地方来继续执行程序</li>
</ul>
</li>
</ul>
<h3 id="12-3捕获异常"><a href="#12-3捕获异常" class="headerlink" title="12.3	捕获异常"></a>12.3	捕获异常</h3><ul>
<li><p><strong>try块</strong>：在块内设置监控区域，用于捕获可能出现的异常</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">	<span class="comment">//Code that might generate exceptions</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>异常处理程序</strong>：使用<strong>catch</strong>关键字，用于处理抛出的异常</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">	<span class="comment">//Code that might generate exceptions</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(Type1 id1)&#123;</span><br><span class="line">	<span class="comment">//Handle exceptions of type1</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(Type2 id2)&#123;</span><br><span class="line">	<span class="comment">//Handle exceptions of type2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//etc</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>终止与恢复</strong>：异常处理的两种基本模型，<strong>Java</strong>支持终止模型，一旦被抛出，程序无法返回继续执行；另一种为恢复模型，异常处理程序修正错误，重新尝试出问题的方法</p>
</li>
</ul>
<h3 id="12-4创建自定义异常"><a href="#12-4创建自定义异常" class="headerlink" title="12.4	创建自定义异常"></a>12.4	创建自定义异常</h3><ul>
<li><strong>自定义异常类</strong>：选择意思相近的异常类进行继承</li>
<li><strong>异常与记录日志</strong>：将异常信息记录到<strong>Logger</strong>对象中</li>
</ul>
<h3 id="12-5异常说明"><a href="#12-5异常说明" class="headerlink" title="12.5	异常说明"></a>12.5	异常说明</h3><ul>
<li><strong>throw语句</strong>：将方法可能产生的异常抛出，并告知客户端程序员</li>
</ul>
<h3 id="12-6捕获所有异常"><a href="#12-6捕获所有异常" class="headerlink" title="12.6	捕获所有异常"></a>12.6	捕获所有异常</h3><ul>
<li><strong>Exception类</strong>：异常类型的基类，可以使用它捕获所有的异常，然后根据它的类型判断异常的原因</li>
<li><strong>栈轨迹</strong>：**printStackTree()<strong>和</strong>getStacktree()**可以将元素压入和取出栈</li>
<li><strong>重新抛出异常</strong>：使用<strong>throw</strong>语句重新抛出异常，将异常交给上一级异常处理程序，同一个<strong>try</strong>块的后续<strong>catch</strong>子句将被忽略</li>
<li><strong>异常链</strong>：在捕获一个异常后抛出另一个异常，并把原始异常的信息保存下来</li>
</ul>
<h3 id="12-7Java标准异常"><a href="#12-7Java标准异常" class="headerlink" title="12.7	Java标准异常"></a>12.7	Java标准异常</h3><ul>
<li><strong>Throwable类</strong>：表示任何可以作为异常被抛出的类，可分为编译时和系统错误<strong>Error</strong>和运行时错误<strong>Exception</strong></li>
<li><strong>RuntimeException类</strong>：运行时异常类，代表着编程错误</li>
</ul>
<h3 id="12-8使用finally进行清理"><a href="#12-8使用finally进行清理" class="headerlink" title="12.8	使用finally进行清理"></a>12.8	使用finally进行清理</h3><ul>
<li><strong>finally子句</strong>：无论<strong>try</strong>是否抛出异常，都能得到执行的子句，可以用来把除内存外的资源恢复到它们的初始状态，包括网络连接，图形和外部开关等</li>
<li>在<strong>return</strong>语句中使用<strong>finally</strong>：<strong>finally</strong>子句一定会执行，即使<strong>return</strong>先进行了返回操作，<strong>finally</strong>中的代码也会被执行</li>
</ul>
<h3 id="12-9异常的限制"><a href="#12-9异常的限制" class="headerlink" title="12.9	异常的限制"></a>12.9	异常的限制</h3><ul>
<li>在覆盖方法时，只能抛出在基类方法的异常说明中列出的异常，但是这种限制对构造器不起作用，且派生类构造器不能接收基类构造器抛出的异常</li>
</ul>
<h3 id="12-10构造器"><a href="#12-10构造器" class="headerlink" title="12.10	构造器"></a>12.10	构造器</h3><ul>
<li>当构造器抛出异常时，除内存外其他资源的清理工作不会进行，编写构造器时要格外小心</li>
</ul>
<h3 id="12-11异常匹配"><a href="#12-11异常匹配" class="headerlink" title="12.11	异常匹配"></a>12.11	异常匹配</h3><ul>
<li>抛出异常时，异常处理系统会按照代码的书写顺序找出最近的处理程序，匹配后就不再查找</li>
</ul>
<h3 id="12-12其他可选方式"><a href="#12-12其他可选方式" class="headerlink" title="12.12	其他可选方式"></a>12.12	其他可选方式</h3><ul>
<li><strong>异常处理历史</strong><ul>
<li>起源于<strong>Pl&#x2F;1</strong>和<strong>Mesa</strong>之类的系统</li>
<li>借鉴于<strong>CLU</strong>的做法，异常处理机制加入到**C++**标准化过程</li>
<li><strong>Java</strong>设计者去掉了一些<strong>C+<strong>中不好的地方，将异常处理机制加入到</strong>Java</strong>中</li>
</ul>
</li>
<li><strong>Java被检查的异常</strong><ul>
<li>一致的，使用异常来报告错误的模型</li>
<li>一定的类型检查，强制程序使用正确的类型</li>
</ul>
</li>
</ul>
<h3 id="12-13异常使用指南"><a href="#12-13异常使用指南" class="headerlink" title="12.13	异常使用指南"></a>12.13	异常使用指南</h3><ul>
<li><strong>使用异常的情况</strong><ul>
<li>在恰当的级别处理问题</li>
<li>解决问题并且重新调用产生异常的方法</li>
<li>进行少许修补，然后绕过异常发生的地方继续执行</li>
<li>用别的数据进行计算，用代替方法预计会返回的值</li>
<li>把当前环境能做的事情尽量做完，然后把相同的异常重抛到更高层</li>
<li>把当前环境能做的事情尽量做完，然后把不同的异常抛到更高层</li>
<li>终止程序</li>
<li>进行简化</li>
<li>让类库和程序更安全</li>
</ul>
</li>
</ul>
<h2 id="第十三章字符串"><a href="#第十三章字符串" class="headerlink" title="第十三章	字符串"></a>第十三章	字符串</h2><h3 id="13-1不可变String"><a href="#13-1不可变String" class="headerlink" title="13.1	不可变String"></a>13.1	不可变String</h3><ul>
<li><strong>String</strong>对象是不可改变的，任何修改<strong>String</strong>值的行为都是创建全新的<strong>String</strong>对象</li>
</ul>
<h3 id="13-2重载“-”与StringBuilder"><a href="#13-2重载“-”与StringBuilder" class="headerlink" title="13.2	重载“+”与StringBuilder"></a>13.2	重载“+”与StringBuilder</h3><ul>
<li><strong>Java</strong>重载了 <strong>+</strong> 和 <strong>+&#x3D;</strong> 运算符，用于字符串的连接，原理为重新生成所需的<strong>String</strong>对象</li>
<li>当循环修改<strong>String</strong>对象时，可以使用<strong>StringBuilder</strong>类来提高代码运行效率</li>
</ul>
<h3 id="13-3无意识的递归"><a href="#13-3无意识的递归" class="headerlink" title="13.3	无意识的递归"></a>13.3	无意识的递归</h3><ul>
<li>在代码中使用 <strong>+</strong> 时，可能会自动调用<strong>Object</strong>的<strong>toString</strong>方法而转化为<strong>String</strong>对象</li>
</ul>
<h3 id="13-4String上的操作"><a href="#13-4String上的操作" class="headerlink" title="13.4	String上的操作"></a>13.4	String上的操作</h3><table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">参数，重载版本</th>
<th align="center">应用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">构造器</td>
<td align="center">默认版本，<strong>String</strong>，<strong>StringBuilder</strong>，<strong>StringBuffer</strong>，<strong>char</strong>数组，<strong>byte</strong>数组</td>
<td align="center">创建<strong>String</strong>对象</td>
</tr>
<tr>
<td align="center"><strong>length()</strong></td>
<td align="center"></td>
<td align="center"><strong>String</strong>中字符的个数</td>
</tr>
<tr>
<td align="center"><strong>charAt()</strong></td>
<td align="center"><strong>int</strong>索引</td>
<td align="center">取得<strong>String</strong>中该索引位置上的<strong>char</strong></td>
</tr>
<tr>
<td align="center"><strong>getChars(),getBytes()</strong></td>
<td align="center">复制部分起点终点的索引，目标数组，目标数组的起始索引</td>
<td align="center">复制<strong>char</strong>或<strong>byte</strong>到一个目标数组中</td>
</tr>
<tr>
<td align="center"><strong>toCharArray()</strong></td>
<td align="center"></td>
<td align="center">生成一个<strong>char[]<strong>，包含</strong>String</strong>的所有字符</td>
</tr>
<tr>
<td align="center"><strong>equals()</strong></td>
<td align="center">要比较的<strong>String</strong></td>
<td align="center">比较两个<strong>String</strong>的内容是否相同</td>
</tr>
<tr>
<td align="center"><strong>compareTo()</strong></td>
<td align="center">要比较的<strong>String</strong></td>
<td align="center">按词典顺序比较<strong>String</strong>的内容</td>
</tr>
<tr>
<td align="center"><strong>contains()</strong></td>
<td align="center">要搜索的<strong>CharSequence</strong></td>
<td align="center">判断<strong>String</strong>对象是否包含参数的内容</td>
</tr>
<tr>
<td align="center"><strong>contentEquals()</strong></td>
<td align="center">要比较的<strong>CharSequence</strong>或<strong>StringBuffer</strong></td>
<td align="center">判断<strong>String</strong>对象是否与参数的内容完全一致</td>
</tr>
<tr>
<td align="center"><strong>equalsIgnoreCase()</strong></td>
<td align="center">要比较的<strong>String</strong></td>
<td align="center">忽略大小写，判断<strong>String</strong>内容是否相同</td>
</tr>
<tr>
<td align="center"><strong>regionMatcher()</strong></td>
<td align="center">两个<strong>String</strong>的索引偏移量，要比较的长度，重载版本可以忽略大小写</td>
<td align="center">判断所选区域是否相等</td>
</tr>
<tr>
<td align="center"><strong>startsWith</strong></td>
<td align="center">起始<strong>String</strong>，重载版本增加了偏移量</td>
<td align="center">判断此参数是否为字符串的前缀</td>
</tr>
<tr>
<td align="center"><strong>endsWith</strong></td>
<td align="center">后缀<strong>String</strong></td>
<td align="center">判断此参数是否为字符串的后缀</td>
</tr>
<tr>
<td align="center"><strong>indexOf(),lastIndexOf()</strong></td>
<td align="center">重载版本有<strong>char</strong>，<strong>char</strong>与起始索引，<strong>String</strong>，<strong>String</strong>与起始索引</td>
<td align="center">返回此参数在<strong>String</strong>中的起始索引，不包含则返回-1,**lastIndexOf()**是从后向前搜索</td>
</tr>
<tr>
<td align="center"><strong>substring(),(subSequence())</strong></td>
<td align="center">重载版本有起始索引，起始索引 + 终点坐标</td>
<td align="center">返回包含参数的子字符串</td>
</tr>
<tr>
<td align="center"><strong>concat()</strong></td>
<td align="center">要连接的<strong>String</strong></td>
<td align="center">连接后的新的<strong>String</strong>对象</td>
</tr>
<tr>
<td align="center"><strong>replace()</strong></td>
<td align="center">要替换掉的<strong>char</strong>或<strong>charSequence</strong>，用来替换的<strong>char</strong>或<strong>charSequence</strong></td>
<td align="center">替换字符后的新<strong>String</strong>对象</td>
</tr>
<tr>
<td align="center"><strong>toLowerCase(),toUpperCase()</strong></td>
<td align="center"></td>
<td align="center">大小写转换后的新<strong>String</strong>对象</td>
</tr>
<tr>
<td align="center"><strong>trim()</strong></td>
<td align="center"></td>
<td align="center">删除两端空白符后的新<strong>String</strong>对象</td>
</tr>
<tr>
<td align="center"><strong>valueOf()</strong></td>
<td align="center">重载版本有<strong>Object</strong>，<strong>char[]<strong>，</strong>char[]<strong>和偏移量和字符个数，</strong>boolean</strong>,<strong>char</strong>,<strong>int</strong>，<strong>long</strong>，<strong>float</strong>，<strong>double</strong></td>
<td align="center">表示参数内容的<strong>String</strong></td>
</tr>
<tr>
<td align="center"><strong>intern()</strong></td>
<td align="center"></td>
<td align="center">为每一个唯一的字符序列生成一个且仅生成一个<strong>String</strong>引用</td>
</tr>
</tbody></table>
<h3 id="13-5格式化输出"><a href="#13-5格式化输出" class="headerlink" title="13.5	格式化输出"></a>13.5	格式化输出</h3><ul>
<li>**printf()**：格式化修饰符 + 参数</li>
<li><strong>System.out.format()<strong>：与C语言的</strong>printf()<strong>和</strong>Java</strong>中的**System.out.printf()**等价</li>
<li><strong>Formatter</strong>类：<strong>Java</strong>中的所有的格式化功能都由该类实现</li>
<li><strong>格式化说明符</strong>：**%[argument_index$][flags][width][.precision]conversion**<ul>
<li>**[width]**：指定一个域的最小尺寸，默认添加空格右对齐</li>
<li>**[.precision]**：指定最大尺寸</li>
</ul>
</li>
<li><strong>Formatter转换</strong></li>
</ul>
<table>
<thead>
<tr>
<th align="center">类型转换字符</th>
<th align="center">字符含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">d</td>
<td align="center">整数型（十进制）</td>
</tr>
<tr>
<td align="center">c</td>
<td align="center">Unicode字符</td>
</tr>
<tr>
<td align="center">b</td>
<td align="center">Boolean值</td>
</tr>
<tr>
<td align="center">s</td>
<td align="center">String</td>
</tr>
<tr>
<td align="center">f</td>
<td align="center">浮点数（十进制）</td>
</tr>
<tr>
<td align="center">e</td>
<td align="center">浮点数（科学计数法）</td>
</tr>
<tr>
<td align="center">x</td>
<td align="center">整数（十六进制）</td>
</tr>
<tr>
<td align="center">h</td>
<td align="center">散列码（十六进制）</td>
</tr>
<tr>
<td align="center">%</td>
<td align="center">字符%</td>
</tr>
</tbody></table>
<h3 id="13-6正则表达式"><a href="#13-6正则表达式" class="headerlink" title="13.6	正则表达式"></a>13.6	正则表达式</h3><ul>
<li><p><strong>正则表达式</strong>：一种强大而灵活的文本处理工具，以编程的方式，构造复杂的文本模式，并对输入的字符串进行搜索</p>
</li>
<li><p><strong>创建正则表达式</strong></p>
<ul>
<li><p>字符</p>
<table>
<thead>
<tr>
<th align="center">正则表达式</th>
<th align="center">匹配内容</th>
</tr>
</thead>
<tbody><tr>
<td align="center">B</td>
<td align="center">指定字符B</td>
</tr>
<tr>
<td align="center">\xhh</td>
<td align="center">十六进制中值为0xhh的字符</td>
</tr>
<tr>
<td align="center">\uhhhh</td>
<td align="center">十六进制表示0xhhhh的Unicode字符</td>
</tr>
<tr>
<td align="center">\t</td>
<td align="center">制表符Tab</td>
</tr>
<tr>
<td align="center">\n</td>
<td align="center">换行符</td>
</tr>
<tr>
<td align="center">\r</td>
<td align="center">回车</td>
</tr>
<tr>
<td align="center">\f</td>
<td align="center">换页</td>
</tr>
<tr>
<td align="center">\e</td>
<td align="center">转义</td>
</tr>
</tbody></table>
</li>
<li><p>字符类</p>
<table>
<thead>
<tr>
<th align="center">正则表达式</th>
<th align="center">匹配内容</th>
</tr>
</thead>
<tbody><tr>
<td align="center">.</td>
<td align="center">任意字符</td>
</tr>
<tr>
<td align="center">[abc]</td>
<td align="center">包含a，b和c的任意字符</td>
</tr>
<tr>
<td align="center">[^abc]</td>
<td align="center">除了a，b，c外的任何字符</td>
</tr>
<tr>
<td align="center">[a-zA-Z]</td>
<td align="center">从a到z或从A到Z的任意字符</td>
</tr>
<tr>
<td align="center">[abc[hij]]</td>
<td align="center">任意a，b，c，h，i，j字符</td>
</tr>
<tr>
<td align="center">[a-z&amp;&amp;[hij]]</td>
<td align="center">任意h，i，j字符</td>
</tr>
<tr>
<td align="center">\s</td>
<td align="center">空白符</td>
</tr>
<tr>
<td align="center">\S</td>
<td align="center">非空白符</td>
</tr>
<tr>
<td align="center">\d</td>
<td align="center">数字0-9</td>
</tr>
<tr>
<td align="center">\D</td>
<td align="center">非数字</td>
</tr>
<tr>
<td align="center">\w</td>
<td align="center">词字符（大小写字母，数字）</td>
</tr>
<tr>
<td align="center">\W</td>
<td align="center">非词字符</td>
</tr>
</tbody></table>
</li>
<li><p>逻辑操作符</p>
<table>
<thead>
<tr>
<th align="center">正则表达式</th>
<th align="center">匹配内容</th>
</tr>
</thead>
<tbody><tr>
<td align="center">XY</td>
<td align="center">Y在X后面</td>
</tr>
<tr>
<td align="center">X|Y</td>
<td align="center">X或Y</td>
</tr>
<tr>
<td align="center">（X）</td>
<td align="center">捕获组，使用\i引用第i个捕获组</td>
</tr>
</tbody></table>
</li>
<li><p>边界匹配符</p>
<table>
<thead>
<tr>
<th align="center">正则表达式</th>
<th align="center">匹配内容</th>
</tr>
</thead>
<tbody><tr>
<td align="center">^</td>
<td align="center">一行的起始</td>
</tr>
<tr>
<td align="center">$</td>
<td align="center">一行的结束</td>
</tr>
<tr>
<td align="center">\b</td>
<td align="center">词的边界</td>
</tr>
<tr>
<td align="center">\B</td>
<td align="center">非词的边界</td>
</tr>
<tr>
<td align="center">\G</td>
<td align="center">前一个匹配的结束</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p><strong>量词</strong>：描述一个模式吸收输入文本的方式</p>
<ul>
<li><strong>贪婪型</strong>：为所有可能的模式发现尽可能多的匹配</li>
<li><strong>勉强型</strong>：匹配满足模式所需的最少字符数</li>
<li><strong>占有型</strong>：仅用于<strong>Java</strong>语言，不保存中间状态，防止回溯，常用于防止正则表达式失控</li>
</ul>
<table>
<thead>
<tr>
<th align="center">贪婪型</th>
<th align="center">勉强型</th>
<th align="center">占有型</th>
<th align="center">如何匹配</th>
</tr>
</thead>
<tbody><tr>
<td align="center">X?</td>
<td align="center">X??</td>
<td align="center">X?+</td>
<td align="center">一个或零个X</td>
</tr>
<tr>
<td align="center">X*</td>
<td align="center">X*?</td>
<td align="center">X*+</td>
<td align="center">零个或多个X</td>
</tr>
<tr>
<td align="center">X+</td>
<td align="center">X+?</td>
<td align="center">X++</td>
<td align="center">一个或多个X</td>
</tr>
<tr>
<td align="center">X{n}</td>
<td align="center">X{n}?</td>
<td align="center">X{n}+</td>
<td align="center">恰好n次X</td>
</tr>
<tr>
<td align="center">X{n,}</td>
<td align="center">X{n,}?</td>
<td align="center">X{n,}+</td>
<td align="center">至少n次X</td>
</tr>
<tr>
<td align="center">X{n,m}</td>
<td align="center">X{n,m}?</td>
<td align="center">X{n,m}+</td>
<td align="center">X至少n次，且不超过mci</td>
</tr>
</tbody></table>
</li>
<li><p><strong>Pattern和Matcher</strong>：<strong>Pattern</strong>类表示一个正则表达式，可以通过<strong>Pattern.compile()<strong>方法将一个字符串编译成一个</strong>Pattern</strong>对象，<strong>Matcher</strong>类则是用于匹配字符串的工具类，可以通过<strong>Pattern.matcher()<strong>方法将一个字符串与一个</strong>Pattern</strong>对象进行匹配</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String regex=<span class="string">&quot;x+&quot;</span>;</span><br><span class="line">String input=<span class="string">&quot;xxx&quot;</span>;</span><br><span class="line">Pattern pattern=Pattern.compile(regex);</span><br><span class="line">Matcher matcher=pattern.matcher(input);</span><br><span class="line">System.out.println(matcher);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="13-7扫描输入"><a href="#13-7扫描输入" class="headerlink" title="13.7	扫描输入"></a>13.7	扫描输入</h3><ul>
<li><strong>扫描输入</strong>：使用<strong>Scanner</strong>类，接受任何类型的输入对象，通过正则表达式扫描，获取所需输入</li>
</ul>
<h2 id="第十四章类型信息"><a href="#第十四章类型信息" class="headerlink" title="第十四章	类型信息"></a>第十四章	类型信息</h2><h3 id="14-1为什么需要RTTI"><a href="#14-1为什么需要RTTI" class="headerlink" title="14.1	为什么需要RTTI"></a>14.1	为什么需要RTTI</h3><ul>
<li><strong>RTTI</strong>：在运行时，识别一个对象的类型</li>
</ul>
<h3 id="14-2Class对象"><a href="#14-2Class对象" class="headerlink" title="14.2	Class对象"></a>14.2	Class对象</h3><ul>
<li><p><strong>Class对象</strong>：一种特殊的对象，包含了与类有关的信息，每当编译一个新类，<strong>JVM</strong>使用类加载器生成一个<strong>Class</strong>对象</p>
</li>
<li><p><strong>动态加载</strong></p>
<ul>
<li>当程序创建第一个对类的静态成员的引用时，就会加载这个类</li>
<li><strong>Java</strong>程序在它运行之前并未被完全加载，各部分只有在必需的时候才会被加载</li>
<li>类加载器首先检查<strong>Class</strong>对象是否已经被加载，如果没有，类加载器根据类名查找**.class<strong>文件加载</strong>.Class**对象</li>
</ul>
</li>
<li><p><strong>类字面量</strong>：生成对**.Class**对象的引用</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FancyToy.class</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用类的准备工作</strong></p>
<ul>
<li><strong>加载</strong>，由类加载器执行，查找字节码并创建 <strong>Class</strong>对象</li>
<li><strong>链接</strong>，验证类中的字节码，为静态域分配空间，解析在该类创建的对其他类的引用</li>
<li><strong>初始化</strong>，执行静态初始化器和静态初始化块</li>
</ul>
</li>
</ul>
<h3 id="14-3类型转换前先做检查"><a href="#14-3类型转换前先做检查" class="headerlink" title="14.3	类型转换前先做检查"></a>14.3	类型转换前先做检查</h3><ul>
<li><p><strong>instanceof关键字</strong>：返回一个布尔值，表示对象是不是某个特定类型的实例</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(x <span class="keyword">instanceof</span> Dog) ((Dog)x).bark();</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="14-4注册工厂"><a href="#14-4注册工厂" class="headerlink" title="14.4	注册工厂"></a>14.4	注册工厂</h3><ul>
<li>使用工厂设计模式，将对象的创建工作交由类来完成，工厂被多态地调用而创建恰当的对象</li>
</ul>
<h3 id="14-5instanceof与Class的等价性"><a href="#14-5instanceof与Class的等价性" class="headerlink" title="14.5	instanceof与Class的等价性"></a>14.5	instanceof与Class的等价性</h3><ul>
<li><strong>instance</strong>和<strong>Class</strong>：<strong>instance</strong>判断是否为比较类或者比较类的基类，<strong>Class</strong>仅仅判断是否为比较类</li>
</ul>
<h3 id="14-6反射：运行时的类信息"><a href="#14-6反射：运行时的类信息" class="headerlink" title="14.6	反射：运行时的类信息"></a>14.6	反射：运行时的类信息</h3><ul>
<li><strong>反射机制</strong>：当某个对象的类型在编译时未知，需要在程序运行时获取对象的类型时，传统的<strong>RTTI</strong>无法识别，可以通过在<strong>JVM</strong>创建的<strong>Class</strong>对象和<strong>Java.lang.reflect</strong>类库的反射类获知对象的类型，并进行相关的操作</li>
<li><strong>类方法提取器</strong>：使用<strong>Class</strong>的<strong>getMethods()<strong>和</strong>getConstructors()<strong>方法来得到</strong>Method</strong>对象的数组和<strong>Constructor</strong>对象的数组，分别解析对象的方法和构造器，包括其名字，输入参数以及返回值</li>
</ul>
<h3 id="14-7动态代理"><a href="#14-7动态代理" class="headerlink" title="14.7	动态代理"></a>14.7	动态代理</h3><ul>
<li><strong>代理</strong>：基本的设计模式之一，为了提供额外的或不同的操作，而插入用来替代实际对象的对象，通常涉及与实际对象的通信，代理起到中间人的角色</li>
</ul>
<h3 id="14-8空对象"><a href="#14-8空对象" class="headerlink" title="14.8	空对象"></a>14.8	空对象</h3><ul>
<li>使用空对象<strong>null</strong>表示缺少对象</li>
</ul>
<h3 id="14-9接口与类型信息"><a href="#14-9接口与类型信息" class="headerlink" title="14.9	接口与类型信息"></a>14.9	接口与类型信息</h3><ul>
<li><strong>instance</strong>关键字允许程序员隔离构件，从而减低代码的耦合度，可以被应用到接口中</li>
</ul>
<h2 id="第十五章泛型"><a href="#第十五章泛型" class="headerlink" title="第十五章	泛型"></a>第十五章	泛型</h2><h3 id="15-1与C-的比较"><a href="#15-1与C-的比较" class="headerlink" title="15.1	与C++的比较"></a>15.1	与C++的比较</h3><ul>
<li><strong>泛型</strong>：实现了参数化的概念，使得代码可以应用于更多的类型，类和方法能够具备更广泛的表达能力</li>
</ul>
<h3 id="15-2简单泛型"><a href="#15-2简单泛型" class="headerlink" title="15.2	简单泛型"></a>15.2	简单泛型</h3><ul>
<li><p>创造容器类，指定容器要持有特定类型对象，并且由编译器来保证类型的安全</p>
</li>
<li><p><strong>元组</strong>：将一组对象打包存储于其中的一个单一对象，可以具有任意长度，存储任意类型</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Tuple&lt;String, Integer&gt; tuple = <span class="keyword">new</span> <span class="title class_">Tuple</span>&lt;&gt;(<span class="string">&quot;Hello&quot;</span>, <span class="number">123</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="15-3泛型接口"><a href="#15-3泛型接口" class="headerlink" title="15.3	泛型接口"></a>15.3	泛型接口</h3><ul>
<li>泛型可以应用于接口，例如工厂方法设计模式中专门负责创建对象的生成器</li>
</ul>
<h3 id="15-4泛型方法"><a href="#15-4泛型方法" class="headerlink" title="15.4	泛型方法"></a>15.4	泛型方法</h3><ul>
<li><p><strong>泛型方法</strong>：一种类型安全的方法，它可以在声明方法时使用一个或多个参数来占位符，这些占位符称为<strong>类型形参</strong>，可代表任何<strong>Java</strong>数据类型，在调用方法时需要指定实际类型的参数</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">f</span><span class="params">(T x)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>杠杆</p>
</li>
</ul>
<h3 id="15-5匿名内部类"><a href="#15-5匿名内部类" class="headerlink" title="15.5	匿名内部类"></a>15.5	匿名内部类</h3><h3 id="15-6构建复杂模型"><a href="#15-6构建复杂模型" class="headerlink" title="15.6	构建复杂模型"></a>15.6	构建复杂模型</h3><h3 id="15-7擦出的神秘之处"><a href="#15-7擦出的神秘之处" class="headerlink" title="15.7	擦出的神秘之处"></a>15.7	擦出的神秘之处</h3><h3 id="15-8擦除的补偿"><a href="#15-8擦除的补偿" class="headerlink" title="15.8	擦除的补偿"></a>15.8	擦除的补偿</h3><h3 id="15-9边界"><a href="#15-9边界" class="headerlink" title="15.9	边界"></a>15.9	边界</h3><h3 id="15-10通配符"><a href="#15-10通配符" class="headerlink" title="15.10	通配符"></a>15.10	通配符</h3><h3 id="15-11问题"><a href="#15-11问题" class="headerlink" title="15.11	问题"></a>15.11	问题</h3><h3 id="15-12自限定的类型"><a href="#15-12自限定的类型" class="headerlink" title="15.12	自限定的类型"></a>15.12	自限定的类型</h3><h3 id="15-13动态类型安全"><a href="#15-13动态类型安全" class="headerlink" title="15.13	动态类型安全"></a>15.13	动态类型安全</h3><h3 id="15-14异常"><a href="#15-14异常" class="headerlink" title="15.14	异常"></a>15.14	异常</h3><h3 id="15-15混型"><a href="#15-15混型" class="headerlink" title="15.15	混型"></a>15.15	混型</h3><h3 id="15-16潜在类型机制"><a href="#15-16潜在类型机制" class="headerlink" title="15.16	潜在类型机制"></a>15.16	潜在类型机制</h3><h3 id="15-17对缺乏潜在类型机制的补偿"><a href="#15-17对缺乏潜在类型机制的补偿" class="headerlink" title="15.17	对缺乏潜在类型机制的补偿"></a>15.17	对缺乏潜在类型机制的补偿</h3><h3 id="15-18将函数对象用作策略"><a href="#15-18将函数对象用作策略" class="headerlink" title="15.18	将函数对象用作策略"></a>15.18	将函数对象用作策略</h3><h3 id="15-19总结：转型真的如此之糟吗？"><a href="#15-19总结：转型真的如此之糟吗？" class="headerlink" title="15.19	总结：转型真的如此之糟吗？"></a>15.19	总结：转型真的如此之糟吗？</h3><h2 id="第十六章数组"><a href="#第十六章数组" class="headerlink" title="第十六章	数组"></a>第十六章	数组</h2><h3 id="16-1数组为什么特殊"><a href="#16-1数组为什么特殊" class="headerlink" title="16.1	数组为什么特殊"></a>16.1	数组为什么特殊</h3><ul>
<li><strong>数组的特殊</strong><ul>
<li>效率最高的存储和随机访问对象引用序列的方式，简单的线性结构使得元素访问十分迅速</li>
<li>在不使用泛型的情况下，数组只能持有某特定类型的对象，错误的类型无法通过编译器检查</li>
<li>数组可以持有基本类型</li>
</ul>
</li>
</ul>
<h3 id="16-2数组是第一级对象"><a href="#16-2数组是第一级对象" class="headerlink" title="16.2	数组是第一级对象"></a>16.2	数组是第一级对象</h3><ul>
<li><p>数组标识符只有一个引用，指向在堆中创建的一个真实的对象，用于保存指向其他对象的引用</p>
</li>
<li><p><strong>初始化数组</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] a;</span><br><span class="line"><span class="type">int</span>[] b = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span>[] c = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="16-3返回一个数组"><a href="#16-3返回一个数组" class="headerlink" title="16.3	返回一个数组"></a>16.3	返回一个数组</h3><ul>
<li>在<strong>c&#x2F;c++<strong>中，只能返回指向数组的指针，而</strong>Java</strong>可以直接返回数组本身，类似于普通的对象</li>
</ul>
<h3 id="16-4多维数组"><a href="#16-4多维数组" class="headerlink" title="16.4	多维数组"></a>16.4	多维数组</h3><ul>
<li><p><strong>创建多维数组</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] a = &#123;</span><br><span class="line">	&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">	&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span>[][] b = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][];</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>粗糙数组</strong>：数组中构成矩阵的每个向量都可以具有任意的长度</p>
</li>
<li><p>**Arrays.deepTostring()**：将多维数组转化为字符串</p>
</li>
</ul>
<h3 id="16-5数组与泛型"><a href="#16-5数组与泛型" class="headerlink" title="16.5	数组与泛型"></a>16.5	数组与泛型</h3><ul>
<li>数组与泛型不能很好地结合，但是可以参数化数组本身的类型</li>
</ul>
<h3 id="16-6创建测试数据"><a href="#16-6创建测试数据" class="headerlink" title="16.6	创建测试数据"></a>16.6	创建测试数据</h3><ul>
<li>**Arrays.fill()**：复制同一个值填充整个数组</li>
<li><strong>数据生成器</strong>：使用<strong>Generator</strong>类，以更灵活的方式创建数组</li>
</ul>
<h3 id="16-7Arrays实用功能"><a href="#16-7Arrays实用功能" class="headerlink" title="16.7	Arrays实用功能"></a>16.7	Arrays实用功能</h3><ul>
<li><strong>复制数组</strong>：相对于<strong>for</strong>语句，**System.arraycopy()**可以更快地进行浅复制</li>
<li><strong>数组的比较</strong>：使用重载后的**equals()**方法比较整个数组</li>
<li><strong>数组元素的比较</strong>：通过实现了<strong>Comparable</strong>接口的<strong>compareTo</strong>方法比较元素，或者编写自己的<strong>Comparator</strong>方法进行比较</li>
<li><strong>数组排序</strong>：使用内置的排序方法对基本类型的数组进行排序，或者对实现了<strong>Comparable</strong>接口的对象进行排序</li>
<li><strong>在已排序的数组中查找</strong>：使用**Arrays.binarySearch()**方法进行快速的二分查找</li>
</ul>
<h2 id="第十七章容器深入研究"><a href="#第十七章容器深入研究" class="headerlink" title="第十七章	容器深入研究"></a>第十七章	容器深入研究</h2><h3 id="17-1完整的容器分类法"><a href="#17-1完整的容器分类法" class="headerlink" title="17.1	完整的容器分类法"></a>17.1	完整的容器分类法</h3><h3 id="17-2填充容器"><a href="#17-2填充容器" class="headerlink" title="17.2	填充容器"></a>17.2	填充容器</h3><ul>
<li>**fill()**：复制同一个对象引用来填充整个容器</li>
<li><strong>Generator类</strong>：适配器设计模式，使用该类来填充容器</li>
</ul>
<h3 id="17-3Collection的功能方法"><a href="#17-3Collection的功能方法" class="headerlink" title="17.3	Collection的功能方法"></a>17.3	Collection的功能方法</h3><table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>boolean add(T)</strong></td>
<td align="center">将参数添加进容器</td>
</tr>
<tr>
<td align="center"><strong>boolean addAll(Collections&lt;? extends T&gt;)</strong></td>
<td align="center">添加参数中的所有元素</td>
</tr>
<tr>
<td align="center"><strong>void clear()</strong></td>
<td align="center">移除容器中的所有元素</td>
</tr>
<tr>
<td align="center"><strong>boolean contains(T)</strong></td>
<td align="center">判断容器是否持有特定类型</td>
</tr>
<tr>
<td align="center"><strong>boolean containsAll(Collection&lt;?&gt;)</strong></td>
<td align="center">判断容器是否持有此类型的所有元素</td>
</tr>
<tr>
<td align="center"><strong>boolean isEmpty()</strong></td>
<td align="center">判断容器是否为空</td>
</tr>
<tr>
<td align="center"><strong>Iterator&lt;T&gt; iterator()</strong></td>
<td align="center">返回容器的迭代器</td>
</tr>
<tr>
<td align="center"><strong>boolean remove(Object)</strong></td>
<td align="center">移除一个元素</td>
</tr>
<tr>
<td align="center"><strong>boolean removeAll(Collection&lt;?&gt;)</strong></td>
<td align="center">移除参数中的所有元素</td>
</tr>
<tr>
<td align="center"><strong>boolean containsAll(Collection&lt;?&gt;)</strong></td>
<td align="center">只保存参数中的元素</td>
</tr>
<tr>
<td align="center"><strong>int size()</strong></td>
<td align="center">容器中元素数目</td>
</tr>
<tr>
<td align="center"><strong>Object[] toArray()</strong></td>
<td align="center">返回容器元素转化的数组</td>
</tr>
<tr>
<td align="center"><strong>&lt;T&gt; T[] toArray(T[] a)</strong></td>
<td align="center">返回容器元素转化的指定类型的数组</td>
</tr>
</tbody></table>
<h3 id="17-4可选操作"><a href="#17-4可选操作" class="headerlink" title="17.4	可选操作"></a>17.4	可选操作</h3><ul>
<li><strong>可选操作</strong>：在<strong>Collection</strong>接口中执行各种不同的添加和移除的方法是可选的，实现类并不需要为这些方法提供功能定义</li>
<li><strong>未获支持的操作</strong>：<strong>Java</strong>程序中使用了一些不被支持或不被推荐的操作或语法</li>
</ul>
<h3 id="17-5List的功能方法"><a href="#17-5List的功能方法" class="headerlink" title="17.5	List的功能方法"></a>17.5	List的功能方法</h3><ul>
<li><strong>List</strong>类基本方法<ul>
<li>**add()**：添加元素</li>
<li>**get()**：获取元素</li>
<li>**iterator()**：返回迭代器</li>
</ul>
</li>
</ul>
<h3 id="17-6Set和存储顺序"><a href="#17-6Set和存储顺序" class="headerlink" title="17.6	Set和存储顺序"></a>17.6	Set和存储顺序</h3><ul>
<li><p><strong>Set类的分类</strong></p>
<table>
<thead>
<tr>
<th align="center">类名</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>Set</strong></td>
<td align="center">元素具有唯一性，不保证维护元素的次序</td>
</tr>
<tr>
<td align="center"><strong>HashSet</strong></td>
<td align="center">适用于快速查找，存入元素必须定义**hashCode()**方法</td>
</tr>
<tr>
<td align="center"><strong>TreeSet</strong></td>
<td align="center">保持元素的次序，底层为树结构，存入元素必须实现<strong>Comparable</strong>接口</td>
</tr>
<tr>
<td align="center"><strong>LinkedHashSet</strong></td>
<td align="center">具有<strong>HashSet</strong>的查找速度，且底层使用链表维护元素的次序，存入元素必须定义**hashCode()**方法</td>
</tr>
</tbody></table>
</li>
<li><p><strong>SortedSet</strong>：元素保证处于排序状态，按对象的比较函数对元素排序</p>
<ul>
<li><strong>Comparator comparator()<strong>：返回当前</strong>Set</strong>使用的<strong>Comparator</strong></li>
<li>**Object first()**：返回容器中第一个元素</li>
<li>**Object last()**：返回容器中最末的元素</li>
<li><strong>SortedSet subSet(fromElement, toElement)<strong>：生成此</strong>Set</strong>的子集，从<strong>fromElement</strong>到<strong>toElement</strong></li>
<li><strong>SortedSet headSet(toElement)<strong>：生成此</strong>Set</strong>的子集，从开始到<strong>toElement</strong></li>
<li><strong>SortedSet tailSet(fromElement)<strong>：生成此</strong>Set</strong>的子集，从<strong>fromElement</strong>到末尾</li>
</ul>
</li>
</ul>
<h3 id="17-7队列"><a href="#17-7队列" class="headerlink" title="17.7	队列"></a>17.7	队列</h3><ul>
<li><strong>优先级队列PriorityQueue</strong>：通过实现<strong>Comparable</strong>对元素进行排序</li>
<li><strong>双向队列</strong>：创建<strong>Deque</strong>类，基于<strong>LinkedList</strong>添加支持双向队列的相关方法</li>
</ul>
<h3 id="17-8理解Map"><a href="#17-8理解Map" class="headerlink" title="17.8	理解Map"></a>17.8	理解Map</h3><ul>
<li><p>映射表的思想是维护它的键-值对关联，基本方法是**put()<strong>和</strong>get()**，用于添加和取出键-值</p>
</li>
<li><p><strong>性能</strong></p>
<table>
<thead>
<tr>
<th align="center">类名</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>HashMap</strong></td>
<td align="center">基于散列表的实现，插入和查询的开销是固定的</td>
</tr>
<tr>
<td align="center"><strong>LinkedHashMap</strong></td>
<td align="center">类似于<strong>HashMap</strong>，使用链表维护内部次序，迭代遍历的速度更快，使用插入次序或<strong>LRU</strong>算法取得键值对</td>
</tr>
<tr>
<td align="center"><strong>TreeMap</strong></td>
<td align="center">基于红黑树的实现，查询是得到的结果会被经过排序</td>
</tr>
<tr>
<td align="center"><strong>WeakHashMap</strong></td>
<td align="center">弱键映射，允许释放映射所指向的对象</td>
</tr>
<tr>
<td align="center"><strong>ConcurrentHashMap</strong></td>
<td align="center">线程安全，不涉及同步加锁</td>
</tr>
<tr>
<td align="center"><strong>IdentityHashMap</strong></td>
<td align="center">使用**&#x3D;&#x3D;<strong>代替</strong>equals()**对键进行比较的散列映射</td>
</tr>
</tbody></table>
</li>
<li><p><strong>SortedMap</strong>：实现<strong>Comparable</strong>，确保键处于排序状态</p>
</li>
<li><p><strong>LinkedHashMap</strong>：散列化所有元素，提高速度，在遍历键值对时，以元素插入顺序返回</p>
</li>
</ul>
<h3 id="17-9散列与散列码"><a href="#17-9散列与散列码" class="headerlink" title="17.9	散列与散列码"></a>17.9	散列与散列码</h3><ul>
<li><p>**hashCode()**：返回对象的散列码，用于确定对象的存储位置，它根据对象的属性计算出一个整数值，尽可能地唯一标识对象</p>
</li>
<li><p><strong>为速度而散列</strong>：线性查询是最慢的查询方式，散列通过键对象生成散列码，使用散列码查询数组，使得查询得以快速进行</p>
</li>
<li><p><strong>计算散列码</strong></p>
<table>
<thead>
<tr>
<th align="center">域类型</th>
<th align="center">计算</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>boolean</strong></td>
<td align="center"><strong>c &#x3D; (f ? 0 : 1)</strong></td>
</tr>
<tr>
<td align="center"><strong>byte</strong>，<strong>char</strong>，<strong>short</strong>或<strong>int</strong></td>
<td align="center"><strong>c &#x3D; (int) f</strong></td>
</tr>
<tr>
<td align="center"><strong>long</strong></td>
<td align="center"><strong>c &#x3D; (int)(f ^ (f &gt;&gt;&gt; 32))</strong></td>
</tr>
<tr>
<td align="center"><strong>float</strong></td>
<td align="center"><strong>c &#x3D; Float.floatToIntBits(f)</strong></td>
</tr>
<tr>
<td align="center"><strong>double</strong></td>
<td align="center"><strong>long l &#x3D; Double.doubleToLongBits(f) ;</strong><br><strong>c &#x3D; (int)(l ^ (l &gt;&gt;&gt; 32))</strong></td>
</tr>
<tr>
<td align="center"><strong>Object</strong></td>
<td align="center"><strong>c &#x3D; f.hashCode()</strong></td>
</tr>
<tr>
<td align="center"><strong>数组</strong></td>
<td align="center"><strong>对每个元素应用上述规则</strong></td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="17-10选择接口的不同实现"><a href="#17-10选择接口的不同实现" class="headerlink" title="17.10	选择接口的不同实现"></a>17.10	选择接口的不同实现</h3><ul>
<li><strong>性能测试框架</strong>：编写测试框架，使用基类嵌套 多个测试匿名内部类的方式，对各个子程序进行性能测试</li>
<li><strong>微基准测试的危险</strong>：不能做太多的假设，并且要把测试窄化，同时考虑测试时间和测试环境对结果的影响</li>
</ul>
<h3 id="17-11实用方法"><a href="#17-11实用方法" class="headerlink" title="17.11	实用方法"></a>17.11	实用方法</h3><ul>
<li><strong>List的排序和查询</strong>：与数组类似，可以使用<strong>Collection</strong>的**sort()<strong>和</strong>binarysearch()<strong>分别进行排序和查询，此外，还可以使用</strong>shuffle()**打乱顺序</li>
<li><strong>设置Collection或Map为不可修改</strong>：设置只读类，参数为原本的容器，但返回值为容器的只读版本</li>
<li><strong>Collection或Map的同步控制</strong>：使用<strong>synchronize</strong>关键字自动同步整个容器，<strong>Java</strong>容器类使用快速报错机制，防止多线程产生的内容不一致问题</li>
</ul>
<h3 id="17-12持有引用"><a href="#17-12持有引用" class="headerlink" title="17.12	持有引用"></a>17.12	持有引用</h3><ul>
<li><strong>Reference类</strong>：作为与普通引用之间的代理，持有对某个对象的引用，避免被垃圾回收器回收后无法访问到该对象</li>
<li><strong>WeakHashMap类</strong>：用于保存<strong>WeakReference</strong>，使得规范映射更易于使用，每个值只保存一份实例以节省存储空间</li>
</ul>
<h3 id="17-13Java-1-0-1-1的容器"><a href="#17-13Java-1-0-1-1的容器" class="headerlink" title="17.13	Java 1.0&#x2F;1.1的容器"></a>17.13	Java 1.0&#x2F;1.1的容器</h3><ul>
<li><strong>Vector类</strong>：类似于<strong>ArrayList</strong>，但是缺点较多，建议使用<strong>ArrayList</strong>替代</li>
<li><strong>Enumeration接口</strong>：类似于<strong>Iterator</strong>接口，只有两个方法</li>
<li><strong>Hashtable类</strong>：与<strong>HashMap</strong>很相似，建议使用<strong>HashMap</strong>替代</li>
<li><strong>Stack类</strong>：继承<strong>Vector</strong>而实现栈的功能，建议使用或继承<strong>ArrayList</strong>替代</li>
<li><strong>BitSet类</strong>：可以高效率地存储大量开&#x2F;关信息，它的空间性能优秀，但是时间性能稍逊于数组，可以使用<strong>EnumSet</strong>替代</li>
</ul>
<h2 id="第十八章Java-I-O系统"><a href="#第十八章Java-I-O系统" class="headerlink" title="第十八章	Java I&#x2F;O系统"></a>第十八章	Java I&#x2F;O系统</h2><h3 id="18-1File类"><a href="#18-1File类" class="headerlink" title="18.1	File类"></a>18.1	File类</h3><ul>
<li><strong>目录列表器</strong>：调用<strong>list()<strong>方法获得此</strong>File</strong>对象包含的全部列表，或者编写目录过滤器生成一个受限列表</li>
<li><strong>目录的检查及创建</strong>：使用**exists()<strong>方法判断指定目录是否存在，使用</strong>mkdirs()**方法创建目录</li>
</ul>
<h3 id="18-2输入和输出"><a href="#18-2输入和输出" class="headerlink" title="18.2	输入和输出"></a>18.2	输入和输出</h3><ul>
<li><p><strong>流</strong>：代表任何有能力产出数据的数据源对象或者是有能力接收数据的接收端对象，它屏蔽了实际的<strong>I&#x2F;O</strong>设备中处理数据的细节</p>
</li>
<li><p><strong>InputStream类型</strong>：表示那些从不同数据源产生输入的类，包括字节数组，<strong>String</strong>对象，文件，管道和其他数据源</p>
<table>
<thead>
<tr>
<th align="center">类</th>
<th align="center">功能</th>
<th align="center">构造器参数以及用途</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>ByteArrayInputStream</strong></td>
<td align="center">允许将内存的缓冲区当做<strong>InputStream</strong>使用</td>
<td align="center">缓冲区，字节将从中取出<br>作为一种数据源，将其与<strong>FilterInputStream</strong>对象相连以提供有用的接口</td>
</tr>
<tr>
<td align="center"><strong>StringBufferInputStream</strong></td>
<td align="center">将<strong>String</strong>转换为<strong>InputStream</strong></td>
<td align="center">字符串，底层实现使用<strong>StringBuffer</strong><br/>作为一种数据源，将其与<strong>FilterInputStream</strong>对象相连以提供有用的接口</td>
</tr>
<tr>
<td align="center"><strong>FileInputStream</strong></td>
<td align="center">从文件中读取信息</td>
<td align="center">字符串，表示文件名，文件或<strong>FileDescriptor</strong>对象<br/>作为一种数据源，将其与<strong>FilterInputStream</strong>对象相连以提供有用的接口</td>
</tr>
<tr>
<td align="center"><strong>PipedInputStream</strong></td>
<td align="center">产生用于写入<strong>PipedInputStream</strong>的数据，实现管道化概念</td>
<td align="center"><strong>PipedOutputStream</strong><br/>作为多线程中的数据源，将其与<strong>FilterInputStream</strong>对象相连以提供有用的接口</td>
</tr>
<tr>
<td align="center"><strong>SequenceInputStream</strong></td>
<td align="center">将两个或多个<strong>InputStream</strong>对象转换为单个<strong>InputStream</strong></td>
<td align="center">两个<strong>InputStream</strong>对象或一个容纳<strong>InputStream</strong>对象的容器<br/>作为一种数据源，将其与<strong>FilterInputStream</strong>对象相连以提供有用的接口</td>
</tr>
<tr>
<td align="center"><strong>FilterInputStream</strong></td>
<td align="center">抽象类，作为装饰器的接口</td>
<td align="center">&#x2F;</td>
</tr>
</tbody></table>
</li>
<li><p><strong>OutputStream类型</strong></p>
<table>
<thead>
<tr>
<th align="center">类</th>
<th align="center">功能</th>
<th align="center">构造器参数以及用途</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>ByteArrayOutputStream</strong></td>
<td align="center">在内存中创建缓冲区，存放要送入流的数据</td>
<td align="center">缓冲区初始尺寸<br/>指定数据的目的地，将其与<strong>FilterOutputStream</strong>对象相连以提供有用的接口</td>
</tr>
<tr>
<td align="center"><strong>FileOutputStream</strong></td>
<td align="center">将信息写入文件</td>
<td align="center">字符串，表示文件名，文件或<strong>FileDescriptor</strong>对象<br/>指定数据的目的地，将其与<strong>FilterOutputStream</strong>对象相连以提供有用的接口</td>
</tr>
<tr>
<td align="center"><strong>PipedOutputStream</strong></td>
<td align="center">作为相关<strong>PipedInputStream</strong>的输出，实现管道化概念</td>
<td align="center"><strong>PipedInputStream</strong><br/>指定用于多线程的数据目的地，将其与<strong>FilterOutputStream</strong>对象相连以提供有用的接口</td>
</tr>
<tr>
<td align="center"><strong>FilterOutputStream</strong></td>
<td align="center">抽象类，作为装饰器的接口</td>
<td align="center">&#x2F;</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="18-3添加类型和有用的接口"><a href="#18-3添加类型和有用的接口" class="headerlink" title="18.3	添加类型和有用的接口"></a>18.3	添加类型和有用的接口</h3><ul>
<li><p><strong>通过FilterInputStream从InputStream中读取数据</strong></p>
<table>
<thead>
<tr>
<th align="center">类</th>
<th align="center">功能</th>
<th align="center">构造器参数以及用途</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>DataInputStream</strong></td>
<td align="center">按照可移植的方式从数据流中读取基本数据类型</td>
<td align="center"><strong>InputStream</strong><br>包含基本数据类型的全部接口</td>
</tr>
<tr>
<td align="center"><strong>BufferedInputStream</strong></td>
<td align="center">使用缓冲区，防止每次读取都进行写操作</td>
<td align="center"><strong>InputStream</strong><br/>与接口对象搭配，向进程中添加缓冲区</td>
</tr>
<tr>
<td align="center"><strong>LineNumberInputStream</strong></td>
<td align="center">跟踪输入流中的行号</td>
<td align="center"><strong>InputStream</strong><br/>与接口对象搭配使用，添加了行号</td>
</tr>
<tr>
<td align="center"><strong>PushbackInputStream</strong></td>
<td align="center">能弹出一个字节的缓冲区，可以将独到的最后一个字符回退</td>
<td align="center"><strong>InputStream</strong><br/>作为编译器的扫描器</td>
</tr>
</tbody></table>
</li>
<li><p><strong>通过FilterOutputStream向OutputStream写入</strong></p>
<table>
<thead>
<tr>
<th align="center">类</th>
<th align="center">功能</th>
<th align="center">构造器参数以及用途</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>DataOutputStream</strong></td>
<td align="center">按照可移植的方式写入基本数据类型</td>
<td align="center"><strong>OutputStream</strong><br>包含基本数据类型的全部接口</td>
</tr>
<tr>
<td align="center"><strong>PrintStream</strong></td>
<td align="center">用于产生格式化输出</td>
<td align="center"><strong>OutputStream</strong><br/>对<strong>OutputStream</strong>对象进行最后的封装</td>
</tr>
<tr>
<td align="center"><strong>BufferedOutputStream</strong></td>
<td align="center">代表缓冲区，避免每次发送数据进行实际的写操作</td>
<td align="center"><strong>OutputStream</strong><br/>与接口对象搭配，向接口中添加缓冲区</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="18-4Reader和Writer"><a href="#18-4Reader和Writer" class="headerlink" title="18.4	Reader和Writer"></a>18.4	Reader和Writer</h3><ul>
<li>设计<strong>Reader</strong>和<strong>Writer</strong>继承层次结构主要是为了国际化，用于支持<strong>Unicode</strong>的<strong>I&#x2F;O</strong>操作</li>
</ul>
<h3 id="18-5自我独立的类：RandomAccessFile"><a href="#18-5自我独立的类：RandomAccessFile" class="headerlink" title="18.5	自我独立的类：RandomAccessFile"></a>18.5	自我独立的类：RandomAccessFile</h3><ul>
<li><strong>RandomAccessFile类</strong>：适用于由大小已知的记录组成的文件，它不是继承层次结构的一部分</li>
</ul>
<h3 id="18-6I-O流的典型使用方式"><a href="#18-6I-O流的典型使用方式" class="headerlink" title="18.6	I&#x2F;O流的典型使用方式"></a>18.6	I&#x2F;O流的典型使用方式</h3><ul>
<li><strong>缓冲输入文件</strong>：使用以<strong>String</strong>或<strong>File</strong>对象作为文件名的<strong>FileInputStream</strong>，将产生的引用传入<strong>BufferedReader</strong>构造器</li>
<li><strong>从内存输入</strong>：从<strong>BufferedInputFile.read()<strong>读入的</strong>String</strong>结果被用来创建<strong>StringReader</strong></li>
<li><strong>格式化的内存输入</strong>：为<strong>ByteArrayInputStream</strong>提供字节数组，产生的对象传递给<strong>DataInputStream</strong></li>
<li><strong>基本的文件输出</strong>：创建一个与指定文件连接的<strong>FileWriter</strong>，使用<strong>BufferedWriter</strong>包装以缓冲输出</li>
<li><strong>存储和恢复数据</strong>：使用<strong>DataOutputStream</strong>写入数据，用<strong>DataInputStream</strong>恢复数据</li>
<li><strong>读写随机访问文件</strong>：使用<strong>RandomAccessFile</strong>类，利用**seek()**方法在文件中移动并修改值</li>
<li><strong>管道流</strong>：在多线程中，用于任务之间的通信</li>
</ul>
<h3 id="18-7文件读写的实用工具"><a href="#18-7文件读写的实用工具" class="headerlink" title="18.7	文件读写的实用工具"></a>18.7	文件读写的实用工具</h3><ul>
<li>自定义文件读写类，以消除与这些任务相关联的重复代码</li>
</ul>
<h3 id="18-8标准I-O"><a href="#18-8标准I-O" class="headerlink" title="18.8	标准I&#x2F;O"></a>18.8	标准I&#x2F;O</h3><ul>
<li><strong>标准I&#x2F;O</strong>：程序的所有输入都可以来自<strong>标准输入</strong>，所有的输出可以发送到<strong>标准输出</strong>，以及所有的错误信息都可以发送的<strong>标准错误</strong>，标准I&#x2F;O参考了<strong>Unix</strong>操作系统的概念，使得我们可以很容易地把程序串联起来</li>
<li><strong>从标准输入中读取</strong>：使用<strong>System.in</strong>的<strong>readLine()<strong>方法读取一行输入，它是一个未经包装的</strong>PrintStream</strong>对象</li>
<li><strong>标准I&#x2F;O重定向</strong>：<strong>Java</strong>的<strong>System</strong>类提供了**setIn()<strong>，</strong>setOut()<strong>，</strong>setErr()**方法分别对输入，输出和错误流进行重定向</li>
</ul>
<h3 id="18-9进程控制"><a href="#18-9进程控制" class="headerlink" title="18.9	进程控制"></a>18.9	进程控制</h3><ul>
<li>向<strong>OSExcute.command()<strong>传递一个</strong>command</strong>字符串，与控制台上运行该程序的命令相同</li>
</ul>
<h3 id="18-10新I-O"><a href="#18-10新I-O" class="headerlink" title="18.10	新I&#x2F;O"></a>18.10	新I&#x2F;O</h3><ul>
<li><strong>新I&#x2F;O</strong>：<strong>java.nio.*<strong>包引入的新的</strong>JavaI&#x2F;O</strong>类库，使用通道和缓冲器方式，更为接近操作系统处理<strong>I&#x2F;O</strong>的方式</li>
<li><strong>转换数据</strong>：每次输入读取一个数据，然后将之转换为特定类型，对缓冲区的字节进行编码和解码</li>
<li><strong>获取基本类型</strong>：利用<strong>ByteBuffer</strong>类的**asCharBuffer()<strong>和</strong>asShortBuffer()<strong>获得缓冲器上的视图，然后使用视图的</strong>put()**方法插入基本类型数据</li>
<li><strong>视图缓冲器</strong>：通过某个特定的基本数据类型的视图查看其底层的<strong>ByteBuffer</strong></li>
<li><strong>用缓冲器操纵数据</strong>：使用<strong>ByteBuffer</strong>包装字节数组，在<strong>FileOutputStream</strong>中打开一个通道，将数据写入到通道中</li>
<li><strong>内存映射文件</strong>：允许我们创建和修改那些因为太大而不能放入内存的文件</li>
<li><strong>文件加锁</strong>：通过调用<strong>lock()<strong>获得</strong>FileLock</strong>对象</li>
</ul>
<h3 id="18-11压缩"><a href="#18-11压缩" class="headerlink" title="18.11	压缩"></a>18.11	压缩</h3><ul>
<li><p><strong>压缩类</strong></p>
<table>
<thead>
<tr>
<th align="center">压缩类</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>CheckedInputStream</strong></td>
<td align="center">为输入流产生校验和</td>
</tr>
<tr>
<td align="center"><strong>CheckedOutputStream</strong></td>
<td align="center">为输出流产生校验和</td>
</tr>
<tr>
<td align="center"><strong>DeflaterOutputStream</strong></td>
<td align="center">压缩类的基类</td>
</tr>
<tr>
<td align="center"><strong>ZipOutputStream</strong></td>
<td align="center">将数据压缩成<strong>Zip</strong>文件格式</td>
</tr>
<tr>
<td align="center"><strong>GZIPOutputStream</strong></td>
<td align="center">将数据压缩成<strong>GZIP</strong>文件格式</td>
</tr>
<tr>
<td align="center"><strong>InflaterInputStream</strong></td>
<td align="center">解压缩类的基类</td>
</tr>
<tr>
<td align="center"><strong>ZipInputStream</strong></td>
<td align="center">解压缩<strong>Zip</strong>文件格式的数据</td>
</tr>
<tr>
<td align="center"><strong>GZIPInputStream</strong></td>
<td align="center">解压缩<strong>GZIP</strong>文件格式的数据</td>
</tr>
</tbody></table>
</li>
<li><p><strong>用GZIP进行简单压缩</strong>：将输出流封装成<strong>GZIPOutputStream</strong>，再将输入流封装成<strong>GZIPINputStream</strong>，可以对单个数据流进行压缩</p>
</li>
<li><p><strong>用Zip进行多文件保存</strong>：进文件传递给<strong>ZipEntry</strong>对象，使用该对象的接口对压缩文件进行读写处理</p>
</li>
<li><p><strong>Java档案文件</strong>：<strong>JAR</strong>类似于<strong>Zip</strong>，可以合并所有需要的文件，同时含有一张描述这些文件的文件清单</p>
</li>
</ul>
<h3 id="18-12对象序列化"><a href="#18-12对象序列化" class="headerlink" title="18.12	对象序列化"></a>18.12	对象序列化</h3><ul>
<li><strong>对象序列化</strong>：将实现了<strong>Serializable</strong>接口的对象转换成一个字节序列，并能够在以后将这个字节序列恢复为原来的对象</li>
<li><strong>寻找类</strong>：必须保证<strong>Java</strong>虚拟机能够找到相关的**.class**文件</li>
<li><strong>序列化的控制</strong>：实现<strong>Externalizable</strong>而不是<strong>Serializable</strong>接口，来对序列化的过程进行控制</li>
<li><strong>transient关键字</strong>：对指定字段关闭序列化</li>
</ul>
<h3 id="18-13XML"><a href="#18-13XML" class="headerlink" title="18.13	XML"></a>18.13	XML</h3><ul>
<li><strong>XML</strong>：一种描述数据的标记语言，采用类似<strong>HTML</strong>标签的方式来表示数据的结构和属性，并支持自定义的标签和属性</li>
</ul>
<h3 id="18-14Preferences"><a href="#18-14Preferences" class="headerlink" title="18.14	Preferences"></a>18.14	Preferences</h3><ul>
<li><strong>Preferences</strong>：键-值集合，存储在一个节点层次结构</li>
</ul>
<h2 id="第十九章枚举类型"><a href="#第十九章枚举类型" class="headerlink" title="第十九章	枚举类型"></a>第十九章	枚举类型</h2><h3 id="19-1基本enum类型"><a href="#19-1基本enum类型" class="headerlink" title="19.1	基本enum类型"></a>19.1	基本enum类型</h3><ul>
<li><strong>enum关键字</strong>：将一组具名的值的有限集合创建为一种新的类型，而这些具名的值可以作为常规的程序组件使用</li>
<li><strong>values()方法</strong>：返回枚举实例按声明顺序排列的数组，可以用于遍历枚举类型</li>
<li>创建枚举类型是，编译器会自动生成一个相关的类，继承自<strong>java.lang.Enum</strong></li>
<li><strong>将静态导入用于enum</strong>：使用<strong>import static</strong>可以将<strong>enum</strong>实例带入当前命名空间</li>
</ul>
<h3 id="19-2向enum中添加新方法"><a href="#19-2向enum中添加新方法" class="headerlink" title="19.2	向enum中添加新方法"></a>19.2	向enum中添加新方法</h3><ul>
<li>可以将枚举看成一个不能继承的普通类，可以向枚举中添加新的方法，需要在枚举实例序列中添加分号</li>
<li><strong>覆盖enum的方法</strong>：覆盖**toString()**方法，为枚举实例生成不同的字符串描述信息</li>
</ul>
<h3 id="19-3switch语句中的enum"><a href="#19-3switch语句中的enum" class="headerlink" title="19.3	switch语句中的enum"></a>19.3	switch语句中的enum</h3><ul>
<li>在<strong>switch</strong>语句中使用<strong>enum</strong>非常便利，它具备整数值的次序，并且可以通过**ordinal()**方法取得其次序</li>
</ul>
<h3 id="19-4values-的神秘之处"><a href="#19-4values-的神秘之处" class="headerlink" title="19.4	values()的神秘之处"></a>19.4	values()的神秘之处</h3><ul>
<li><strong>Enum</strong>类中并没有<strong>values()<strong>方法，它是由编译器添加的</strong>static</strong>方法</li>
</ul>
<h3 id="19-5实现，而非继承"><a href="#19-5实现，而非继承" class="headerlink" title="19.5	实现，而非继承"></a>19.5	实现，而非继承</h3><ul>
<li><strong>enum</strong>不能够继承其他类，但是可以同时实现一个或多个接口</li>
</ul>
<h3 id="19-6随机选取"><a href="#19-6随机选取" class="headerlink" title="19.6	随机选取"></a>19.6	随机选取</h3><ul>
<li>利用泛型从枚举类中随机选取值</li>
</ul>
<h3 id="19-7使用接口组织枚举"><a href="#19-7使用接口组织枚举" class="headerlink" title="19.7	使用接口组织枚举"></a>19.7	使用接口组织枚举</h3><ul>
<li>在一个接口创建枚举，实现接口以使其子类化</li>
</ul>
<h3 id="19-8使用EnumSet替代标志"><a href="#19-8使用EnumSet替代标志" class="headerlink" title="19.8	使用EnumSet替代标志"></a>19.8	使用EnumSet替代标志</h3><ul>
<li><strong>EnumSet</strong>：通过<strong>enum</strong>创建的一种替代品，具有良好的速度性能</li>
</ul>
<h3 id="19-9使用EnumMap"><a href="#19-9使用EnumMap" class="headerlink" title="19.9	使用EnumMap"></a>19.9	使用EnumMap</h3><ul>
<li><strong>EnumMap</strong>：一种特殊的<strong>Map</strong>，要求其中的键必须来自一个<strong>enum</strong></li>
</ul>
<h3 id="19-10常量相关方法"><a href="#19-10常量相关方法" class="headerlink" title="19.10	常量相关方法"></a>19.10	常量相关方法</h3><ul>
<li><strong>实现常量相关方法</strong>：定义一个或多个抽象方法，为每一个枚举实例实现该抽象方法</li>
<li><strong>使用enum的职责链</strong>：以多种不同的方式来解决一个问题，然后将它们链接在一起，当请求到来时，遍历这个链，直到找到问题的解决方案</li>
<li><strong>使用enum的状态机</strong>：一个状态机可以具有有限个特定的状态，它会根据输入进行状态的转移</li>
</ul>
<h3 id="19-11多路分发"><a href="#19-11多路分发" class="headerlink" title="19.11	多路分发"></a>19.11	多路分发</h3><ul>
<li><strong>多路分发</strong>：操作多个类型未知的对象，多个方法一同工作，产生多个结果，以解决<strong>Java</strong>绑定机制只支持单路并发的缺陷</li>
<li><strong>使用enum分发</strong>：结合<strong>switch</strong>语句，遍历参数类型</li>
<li><strong>使用常量相关的方法</strong>：为每个实例提供方法的不同实现</li>
<li><strong>使用EnumMap分发</strong>：实现两路分发</li>
<li><strong>使用二维数组</strong>：最简洁，最直接的方案，表达能力更强</li>
</ul>
<h2 id="第二十章注解"><a href="#第二十章注解" class="headerlink" title="第二十章	注解"></a>第二十章	注解</h2><h3 id="20-1基本语法"><a href="#20-1基本语法" class="headerlink" title="20.1	基本语法"></a>20.1	基本语法</h3><ul>
<li><p><strong>注解</strong>：又被称为元数据，为程序员在代码中添加信息提供了一种形式化方法，在稍后的某个时刻可以非常方便地使用这些数据</p>
</li>
<li><p><strong>注解的优点</strong></p>
<ul>
<li>完整地描述程序所需的信息</li>
<li>由编译器来测试和验证的格式，存储有关程序的额外信息</li>
<li>生成描述符文件，有助于减轻样板代码的负担</li>
<li>更加干净易读的代码以及编译期类型检查</li>
</ul>
</li>
<li><p><strong>定义注解</strong>：使用**@<strong>符号，类似于接口，也会被编译成</strong>.Class**文件</p>
</li>
<li><p><strong>元注解</strong>：专职负责注解其他的注解</p>
<table>
<thead>
<tr>
<th align="center">注解</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>@Target</strong></td>
<td align="center">表示注解可以用于什么地方，参数包括<br><strong>CONSTRUCTOR</strong>构造器<br><strong>FIELD</strong>域<br><strong>LOCAL_VARIABLE</strong>局部变量<br/><strong>METHOD</strong>方法<br/><strong>PACKAGE</strong>包<br/><strong>PARAMETER</strong>参数<br/><strong>TYPE</strong>类，接口，枚举等</td>
</tr>
<tr>
<td align="center"><strong>@Retention</strong></td>
<td align="center">表示在什么级别保存该注解信息，参数包括<br/><strong>SOURCE</strong>会被编译器丢弃<br/><strong>CLASS</strong>在<strong>class</strong>文件可用，但会被虚拟机丢弃<br/><strong>RUNTIME</strong>运行期保留，可以通过反射机制读取该注解</td>
</tr>
<tr>
<td align="center"><strong>@Document</strong></td>
<td align="center">将注解保存在<strong>Javadoc</strong>中</td>
</tr>
<tr>
<td align="center"><strong>@Inherited</strong></td>
<td align="center">允许子类继承父类的注解</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="20-2编写注解处理器"><a href="#20-2编写注解处理器" class="headerlink" title="20.2	编写注解处理器"></a>20.2	编写注解处理器</h3><ul>
<li><strong>注解处理器</strong>：运用反射机制，使用**getDeclearMethods()<strong>和</strong>getAnnotation()**提取对象中的方法和注解并进行适当的处理</li>
<li><strong>注解元素</strong>：<strong>Java</strong>注解中可以使用到的元素，包括所有的基本类型，<strong>String</strong>，<strong>Class</strong>，<strong>enum</strong>，<strong>Annotation</strong>和以上类型的数组</li>
<li><strong>默认值限制</strong>：对于非基本类型的元素，不能使用<strong>null</strong>，可以定义一些特殊值表示元素不存在</li>
<li><strong>生成外部文件</strong>：使用注解，可以将所有的信息保存在<strong>Java</strong>源文件中，不必重复地提供有关文件的相关信息</li>
<li><strong>注解不支持继承</strong>：不能使用<strong>extends</strong>继承注解，不过可以在<strong>Spring</strong>框架中使用反射机制进行注解的继承</li>
</ul>
<h3 id="20-3使用apt处理注解"><a href="#20-3使用apt处理注解" class="headerlink" title="20.3	使用apt处理注解"></a>20.3	使用apt处理注解</h3><ul>
<li><strong>注解处理工具apt</strong>：<strong>Sun</strong>公司为了帮助注解的处理过程而提供的工具，它可以在编译期间扫描和处理<strong>Java</strong>源代码中的注解，并生成新的<strong>Java</strong>代码、<strong>XML</strong>文件或其他形式的文件</li>
</ul>
<h3 id="20-4将观察者模式用于apt"><a href="#20-4将观察者模式用于apt" class="headerlink" title="20.4	将观察者模式用于apt"></a>20.4	将观察者模式用于apt</h3><ul>
<li><strong>访问者模式</strong>：一个访问者遍历某个数据类型或一个对象的集合，对其中的每一个对象执行一个操作</li>
</ul>
<h3 id="20-5基于注解的单元测试"><a href="#20-5基于注解的单元测试" class="headerlink" title="20.5	基于注解的单元测试"></a>20.5	基于注解的单元测试</h3><ul>
<li><strong>单元测试</strong>：对类中每个方法提供一个或多个测试的一种实践，用于有规律地测是一个类的各个部分是否具备正确的行为</li>
<li><strong>将@Unit用于泛型</strong>：让测试类继承自泛型类的一个特定版本</li>
<li><strong>移除测试代码</strong>：删除字节码中的**@Test**注解</li>
</ul>
<h2 id="第二十一章并发"><a href="#第二十一章并发" class="headerlink" title="第二十一章	并发"></a>第二十一章	并发</h2><h3 id="21-1并发的多面性"><a href="#21-1并发的多面性" class="headerlink" title="21.1	并发的多面性"></a>21.1	并发的多面性</h3><ul>
<li><strong>并发编程的难题</strong>：并发编程时需要解决的问题与实现并发的方式之间，没有明显的映射关系，需要有效地使用并发，以理解这些问题和特例</li>
<li><strong>更快的执行</strong>：违背直觉的是，并发编程可以提高程序在单处理器上的运行速度，因为并发编程会避免阻塞问题对程序运行速度的影响</li>
<li><strong>改进代码设计</strong>：极大地简化了相关问题的解决，<strong>Java</strong>采用协作多线程机制，在处理大量的仿真元素的问题是是一种你想的解决方案</li>
</ul>
<h3 id="21-2基本的线程机制"><a href="#21-2基本的线程机制" class="headerlink" title="21.2	基本的线程机制"></a>21.2	基本的线程机制</h3><ul>
<li><strong>线程机制</strong>：将程序分为多个分离的，独立运行的任务，这些任务中的每一个都将由执行流程来驱动，一个线程就是在进程中的一个单一的顺序控制流</li>
<li><strong>定义任务</strong>：实现<strong>Runnable</strong>接口并编写**run()**方法</li>
<li><strong>Thread类</strong>：将<strong>Runnable</strong>对象交由<strong>Thread</strong>构造器以驱动，调用<strong>start()<strong>方法为该线程执行必需的初始化操作，然后调用</strong>Runnable</strong>对象的**run()**方法，在新线程中启动该任务</li>
<li><strong>使用Executor</strong>：使用<strong>java.util.concurrent</strong>中的<strong>Executor</strong>，管理<strong>Thread</strong>对象，简化并发编程</li>
<li><strong>从任务中产生返回值</strong>：实现<strong>Callable</strong>类而不是<strong>Runnable</strong>接口</li>
<li><strong>休眠</strong>：调用**sleep()**方法，使任务中止执行给定的时间</li>
<li><strong>优先级</strong>：使用**getPriority()<strong>方法来读取现有进程的优先级，使用</strong>setPriority()**方法修改优先级</li>
<li><strong>让步</strong>：调用**yield()**方法，可以提出建议为同优先级的进程让步</li>
<li><strong>后台进程</strong>：在程序运行的时候在后台提供的一种通用服务的线程，并且不属于程序中不可或缺的一部分，使用**setDaemon()<strong>方法将方法设置为后台进程，使用</strong>isDaemon()**方法判断进程是否为后台进程</li>
<li><strong>编码的变体</strong>：直接从<strong>Thread</strong>类继承以简化并发过程</li>
<li><strong>加入一个线程</strong>：调用**join()**方法，等待一段时间知道第二个线程结束继续执行</li>
<li><strong>捕获异常</strong>：使用<strong>Execute</strong>修改产生线程的方式，在<strong>Thread</strong>对象上附着一个异常处理器</li>
</ul>
<h3 id="21-3共享受限资源"><a href="#21-3共享受限资源" class="headerlink" title="21.3	共享受限资源"></a>21.3	共享受限资源</h3><ul>
<li><strong>解决共享资源竞争</strong>：在资源被访问时，给资源加锁以避免其他线程访问，使用<strong>synchronized</strong>关键字对资源上锁</li>
<li><strong>原子性与易变性</strong>：原子操作是不能被线程调度机制中断的操作，使用<strong>volatile</strong>关键字确保应用中的可视性</li>
<li><strong>原子类</strong>：<strong>AtomicInteger</strong>，<strong>AtomicLong</strong>，<strong>AtomicReference</strong>等原子性变量类，可以在机器级别获得原子性</li>
<li><strong>临界区</strong>：访问多个线程同时访问方法内部的部分代码而不是防止访问整个方法，分离出来的代码段称为临界区</li>
<li><strong>在其他对象上同步</strong>：使用其方法正在被调用的当前对象<strong>synchronize(this)</strong></li>
<li><strong>线程本地存储</strong>：使用<strong>ThreadLocal</strong>类，为使用相同变量的每个不同的线程都创建不同的存储</li>
</ul>
<h3 id="21-4终结任务"><a href="#21-4终结任务" class="headerlink" title="21.4	终结任务"></a>21.4	终结任务</h3><ul>
<li><strong>线程状态</strong><ul>
<li><strong>新建</strong>：当线程被创建时短暂的状态，分配必需的资源并初始化</li>
<li><strong>就绪</strong>：在任意时刻，只要被调度器分配时间片，就可以运行</li>
<li><strong>阻塞</strong>：某个条件阻止线程的运行，调度器将忽略线程，不分配<strong>CPU</strong>时间，直至重新进入就绪状态</li>
<li><strong>死亡</strong>：任务已结束或者不再是可运行</li>
</ul>
</li>
<li><strong>进入阻塞状态</strong><ul>
<li>调用**sleep()**方法进入休眠状态</li>
<li>调用**wait()**使线程挂起</li>
<li>任务在等待某个输入&#x2F;输出完成</li>
<li>任务试图在某个对象上调用其同步控制方法，但对象锁不可用，因为另一个任务已经获取了该锁</li>
</ul>
</li>
<li><strong>中断</strong>：调用<strong>Thread</strong>对象的**interrupt()**方法，设置线程的中断状态</li>
<li><strong>检查中断</strong>：调用**interrupted()**来检查中断状态</li>
</ul>
<h3 id="21-5线程之间的协作"><a href="#21-5线程之间的协作" class="headerlink" title="21.5	线程之间的协作"></a>21.5	线程之间的协作</h3><ul>
<li>**wait()和notifyAll()<strong>：</strong>wait()**使得程序等待某个条件发生变化，而改变这个条件超出了当前方法的控制能力</li>
<li><strong>notify()和notifyAll()<strong>：当程序的结构只会有一个任务实际处于</strong>wait()<strong>状态，可以使用</strong>notify()<strong>替代</strong>notifyAll()</strong></li>
<li><strong>生产者–消费者与队列</strong>：使用同步队列来解决任务协作问题，同步队列在任何时刻只允许一个任务插入或移除元素</li>
<li><strong>任务间适应管道进行输入&#x2F;输出</strong>：使用<strong>PipedWriter</strong>和<strong>PipedReader</strong>类实现管道概念</li>
</ul>
<h3 id="21-6死锁"><a href="#21-6死锁" class="headerlink" title="21.6	死锁"></a>21.6	死锁</h3><ul>
<li><strong>死锁</strong>：某个任务在等待另一个任务，而后者又等待别的任务，这样一直下去，直到这个任务上的任务又在等待第一个任务释放锁，构成了一个相互等待的连续循环，没有哪个线程能继续</li>
<li><strong>死锁产生的原因</strong><ul>
<li>互斥条件，任务使用的资源至少有一个是不能共享的</li>
<li>至少有一个任务它必须持有一个资源且正在等待获取一个当前被别的任务持有的资源</li>
<li>资源不能被任务抢占，任务必须把资源释放当做普通事件</li>
<li>必须有循环等待</li>
</ul>
</li>
</ul>
<h3 id="21-7新类库中的构件"><a href="#21-7新类库中的构件" class="headerlink" title="21.7	新类库中的构件"></a>21.7	新类库中的构件</h3><ul>
<li><strong>CountDownLatch</strong>：同步一个或多个任务，强制它们等待由其他任务执行的操作完成</li>
<li><strong>CyclicBarrier</strong>：多次重用的<strong>CountDownLatch</strong></li>
<li><strong>DelayQueue</strong>：用于放置实现了<strong>Delayed</strong>接口的对象，其中的对象只能在其到期时才能从队列中取走</li>
<li><strong>PriorityBlockingQueue</strong>：基础的优先级队列，具有可阻塞的读取操作</li>
<li><strong>Semaphore</strong>：允许多个任务同时访问这个资源，信号量可以被看作是在向外分发使用资源的许可证</li>
<li><strong>Exchanger</strong>：两个任务之间交换对象的栅栏</li>
</ul>
<h3 id="21-8仿真"><a href="#21-8仿真" class="headerlink" title="21.8	仿真"></a>21.8	仿真</h3><ul>
<li><strong>银行出纳员仿真</strong></li>
<li><strong>饭店仿真</strong></li>
<li><strong>分发工作</strong></li>
</ul>
<h3 id="21-9性能调优"><a href="#21-9性能调优" class="headerlink" title="21.9	性能调优"></a>21.9	性能调优</h3><ul>
<li><strong>免锁容器</strong>：对容器的修改可以与读取操作同时发生，只要读取者只能看到完成修改的结果即可</li>
</ul>
<h3 id="21-10活动对象"><a href="#21-10活动对象" class="headerlink" title="21.10	活动对象"></a>21.10	活动对象</h3><ul>
<li><strong>活动对象</strong>：每个对象都维护着它自己的工作器线程和消息队列，所有对这种对象的请求都将进入队列排队，任何时刻只能运行其中一个</li>
<li><strong>活动对象的特点</strong><ul>
<li>每个活动对象都可以拥有自己的工作器线程</li>
<li>每个对象都将维护对它自己的域的全部控制权</li>
<li>所有在活动对象之间的通信都将以在这些对象之间的消息形式发生</li>
<li>活动对象之间的所有消息都要排队</li>
</ul>
</li>
</ul>
<h2 id="第二十二章图形用户界面"><a href="#第二十二章图形用户界面" class="headerlink" title="第二十二章	图形用户界面"></a>第二十二章	图形用户界面</h2><h3 id="22-1applet"><a href="#22-1applet" class="headerlink" title="22.1	applet"></a>22.1	applet</h3><ul>
<li><strong>applet</strong>：一种可以在<strong>Internet</strong>上传递，并在<strong>Web</strong>浏览器中运行的程序</li>
<li><strong>applet的失败</strong>：大多数机器上并没有运行<strong>applet</strong>所必需的<strong>Java</strong>软件，为了某次特定的使用去下载和安装软件包比较麻烦</li>
</ul>
<h3 id="22-2Swing基础"><a href="#22-2Swing基础" class="headerlink" title="22.2	Swing基础"></a>22.2	Swing基础</h3><ul>
<li><strong>JFrame</strong>：大多数<strong>Swing</strong>应用被构建于此，可以在任何操作系统上创建视图应用</li>
<li><strong>一个显示框架</strong>：创建显示框架，以降低冗余代码</li>
</ul>
<h3 id="22-3创建按钮"><a href="#22-3创建按钮" class="headerlink" title="22.3	创建按钮"></a>22.3	创建按钮</h3><ul>
<li><strong>创建按钮</strong>：在标签上调用<strong>JButton</strong>构造器</li>
</ul>
<h3 id="22-4捕获事件"><a href="#22-4捕获事件" class="headerlink" title="22.4	捕获事件"></a>22.4	捕获事件</h3><ul>
<li>调用<strong>JButton</strong>的<strong>addActionListener()<strong>方法，并在类中实现</strong>ActionListener</strong>接口</li>
<li><strong>JTextField</strong>：支持用户输入文本，并放置在画布上</li>
</ul>
<h3 id="22-5文本区域"><a href="#22-5文本区域" class="headerlink" title="22.5	文本区域"></a>22.5	文本区域</h3><ul>
<li><strong>JTextArea</strong>：与<strong>JTextField</strong>类似，其中的**append()**方法可以用来添加文本</li>
</ul>
<h3 id="22-6控制布局"><a href="#22-6控制布局" class="headerlink" title="22.6	控制布局"></a>22.6	控制布局</h3><ul>
<li><p><strong>BorderLayout</strong>：默认的布局模式，接收**add()**方法加入组件</p>
<table>
<thead>
<tr>
<th align="center">常量值</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>BorderLayout.NORTH</strong></td>
<td align="center"><strong>顶端</strong></td>
</tr>
<tr>
<td align="center"><strong>BorderLayout.SOUTH</strong></td>
<td align="center"><strong>底端</strong></td>
</tr>
<tr>
<td align="center"><strong>BorderLayout.EAST</strong></td>
<td align="center"><strong>右端</strong></td>
</tr>
<tr>
<td align="center"><strong>BorderLayout.WEST</strong></td>
<td align="center"><strong>左端</strong></td>
</tr>
<tr>
<td align="center"><strong>BorderLayout.CENTER</strong></td>
<td align="center"><strong>中央</strong></td>
</tr>
</tbody></table>
</li>
<li><p><strong>FlowLayout</strong>：从左到右流动到窗体，直到占满上方的空间，然后下移一行继续流动</p>
</li>
<li><p><strong>GridLayout</strong>：允许构建放置组件的表格，按照从左到右，从上到下的顺序加入组件</p>
</li>
<li><p><strong>GridBagLayout</strong>：精确判断视窗区域如何布局，以及视窗大小变化的时候如何放置组件</p>
</li>
</ul>
<h3 id="22-7Swing事件模型"><a href="#22-7Swing事件模型" class="headerlink" title="22.7	Swing事件模型"></a>22.7	Swing事件模型</h3><ul>
<li><strong>事件与监听器的模型</strong>：所有的<strong>Swing</strong>组件都具有**addXXXListener()<strong>和</strong>removeXXXListener()**方法，用于添加和移除相应类型的监听器</li>
</ul>
<h3 id="22-8Swing组件一览"><a href="#22-8Swing组件一览" class="headerlink" title="22.8	Swing组件一览"></a>22.8	Swing组件一览</h3><ul>
<li><strong>按钮</strong>：从<strong>AbstractButton</strong>类继承各种类型的按钮类</li>
<li><strong>图标</strong>：在<strong>JLable</strong>或者从<strong>AbstractButtton</strong>类继承的组件中使用<strong>Icon</strong></li>
<li><strong>工具提示</strong>：用来创建用户接口的类，绝大多数继承自<strong>JComponent</strong>类</li>
<li><strong>文本域</strong>：<strong>JTextField</strong>组件</li>
<li><strong>边框</strong>：<strong>JComponent</strong>的**setBorder()**方法，可以为任何可视组件设置各种边框</li>
<li><strong>复选框</strong>：接收标签作为参数创建<strong>JCheckBox</strong></li>
<li><strong>单选按钮</strong>：设置一组关联的<strong>JRadioButton</strong></li>
<li><strong>组合框</strong>：使用<strong>JComboBox</strong>组合框</li>
<li><strong>列表框</strong>：使用<strong>JList</strong>在屏幕上生成列表</li>
<li><strong>页签面板</strong>：<strong>JTabbedPane</strong>允许创建页签式对话框</li>
<li><strong>消息框</strong>：<strong>JOptionPane</strong>组件，可以提供包括消息对话框和确认对话框在内的很多选择</li>
<li><strong>菜单</strong>：每个持有菜单地子类，包括<strong>JApplet</strong>，<strong>JFrame</strong>，<strong>JDialog</strong>以及它们的子类，都具有**setJMenuBar()**方法用于接收参数对象</li>
<li><strong>弹出式菜单</strong>：创建一个继承自<strong>MouseAdapter</strong>的内部类</li>
<li><strong>绘图</strong>：从<strong>JPanel</strong>继承，并覆盖<strong>paintComponent</strong>方法</li>
<li><strong>对话框</strong>：继承<strong>JDialog</strong>，添加事件监听器来处理事件</li>
<li><strong>文件对话框</strong>：使用<strong>JFileChooser</strong></li>
<li><strong>Swing组件上的HTML</strong>：任何<strong>Swing</strong>组件都可以接受<strong>HTML</strong>文本，并且重新格式化文本</li>
</ul>
<h3 id="22-9JNLP与Java-Web-Start"><a href="#22-9JNLP与Java-Web-Start" class="headerlink" title="22.9	JNLP与Java Web Start"></a>22.9	JNLP与Java Web Start</h3><ul>
<li><strong>JNLP</strong>：<strong>Java</strong>网络发布协议，在保持<strong>applet</strong>的优点的前提下，解决了<strong>applet</strong>只能在浏览器上运行等问题</li>
<li><strong>Java Web Start</strong>：由<strong>Sun</strong>免费提供的<strong>JNLP</strong>的官方参考实现</li>
</ul>
<h3 id="22-10Swing与并发"><a href="#22-10Swing与并发" class="headerlink" title="22.10	Swing与并发"></a>22.10	Swing与并发</h3><ul>
<li><strong>长期运行的任务</strong>：在单独的线程中执行长期运行的任务</li>
</ul>
<h3 id="22-11可视化编程与JavaBean"><a href="#22-11可视化编程与JavaBean" class="headerlink" title="22.11	可视化编程与JavaBean"></a>22.11	可视化编程与JavaBean</h3><ul>
<li><strong>可视化编程</strong>：<strong>IDE</strong>构建工具通过反射机制来动态地向组件查询，以找出组件具有的属性和支持的事件</li>
<li><strong>JavaBean</strong>：一种符合特定规范的Java类，常用于图形用户界面编程、数据持久化和<strong>Web</strong>应用程序开发中<ul>
<li>对于一个名称为<strong>xxx</strong>的属性，通常具有两个方法：<strong>getXxx()<strong>和</strong>setXxx()</strong></li>
<li>对于布尔型属性，可以使用上述方法，也可以将<strong>get</strong>替换为<strong>is</strong></li>
<li><strong>Bean</strong>的普通方法不必遵循以上的命名规则，不过它们必须是<strong>public</strong>的</li>
<li>对于事件，要是用<strong>Swing</strong>中处理监听器的方式</li>
</ul>
</li>
<li><strong>JavaBean与同步</strong>：尽可能让<strong>Bean</strong>中的所有公共方法都是<strong>synchronize</strong>的；当一个多路事件触发了一组对该事件感兴趣的监听器时，必须假定在遍历列表进行通知的同时监听器可能被移除或添加</li>
</ul>
<h2 id="第二十三章Java8新特性"><a href="#第二十三章Java8新特性" class="headerlink" title="第二十三章	Java8新特性"></a>第二十三章	Java8新特性</h2><h3 id="第一节为什么要关心Java8"><a href="#第一节为什么要关心Java8" class="headerlink" title="第一节	为什么要关心Java8"></a>第一节	为什么要关心Java8</h3><h4 id="1-1Java怎么还在变"><a href="#1-1Java怎么还在变" class="headerlink" title="1.1	Java怎么还在变"></a>1.1	Java怎么还在变</h4><h4 id="1-2Java中的函数"><a href="#1-2Java中的函数" class="headerlink" title="1.2	Java中的函数"></a>1.2	Java中的函数</h4><h4 id="1-3流"><a href="#1-3流" class="headerlink" title="1.3	流"></a>1.3	流</h4><h4 id="1-4默认方法"><a href="#1-4默认方法" class="headerlink" title="1.4	默认方法"></a>1.4	默认方法</h4><h4 id="1-5来自函数式编程的其他好思想"><a href="#1-5来自函数式编程的其他好思想" class="headerlink" title="1.5	来自函数式编程的其他好思想"></a>1.5	来自函数式编程的其他好思想</h4><h3 id="第二节通过行为参数化传递代码"><a href="#第二节通过行为参数化传递代码" class="headerlink" title="第二节	通过行为参数化传递代码"></a>第二节	通过行为参数化传递代码</h3><h4 id="2-1应对不断变化的需求"><a href="#2-1应对不断变化的需求" class="headerlink" title="2.1	应对不断变化的需求"></a>2.1	应对不断变化的需求</h4><h4 id="2-2行为参数化"><a href="#2-2行为参数化" class="headerlink" title="2.2	行为参数化"></a>2.2	行为参数化</h4><h4 id="2-3对付啰嗦"><a href="#2-3对付啰嗦" class="headerlink" title="2.3	对付啰嗦"></a>2.3	对付啰嗦</h4><h4 id="2-4真实的例子"><a href="#2-4真实的例子" class="headerlink" title="2.4	真实的例子"></a>2.4	真实的例子</h4><h3 id="第三节Lambda表达式"><a href="#第三节Lambda表达式" class="headerlink" title="第三节	Lambda表达式"></a>第三节	Lambda表达式</h3><h4 id="3-1Lambda管中窥豹"><a href="#3-1Lambda管中窥豹" class="headerlink" title="3.1	Lambda管中窥豹"></a>3.1	Lambda管中窥豹</h4><h4 id="3-2在哪里以及如何使用Lambda"><a href="#3-2在哪里以及如何使用Lambda" class="headerlink" title="3.2	在哪里以及如何使用Lambda"></a>3.2	在哪里以及如何使用Lambda</h4><h4 id="3-3把Lambda付诸实践：环绕执行模式"><a href="#3-3把Lambda付诸实践：环绕执行模式" class="headerlink" title="3.3	把Lambda付诸实践：环绕执行模式"></a>3.3	把Lambda付诸实践：环绕执行模式</h4><h4 id="3-4使用函数式接口"><a href="#3-4使用函数式接口" class="headerlink" title="3.4	使用函数式接口"></a>3.4	使用函数式接口</h4><h4 id="3-5类型检查，类型推断以及限制"><a href="#3-5类型检查，类型推断以及限制" class="headerlink" title="3.5	类型检查，类型推断以及限制"></a>3.5	类型检查，类型推断以及限制</h4><h4 id="3-6方法引用"><a href="#3-6方法引用" class="headerlink" title="3.6	方法引用"></a>3.6	方法引用</h4><h4 id="3-7Lambda的方法引用实践"><a href="#3-7Lambda的方法引用实践" class="headerlink" title="3.7	Lambda的方法引用实践"></a>3.7	Lambda的方法引用实践</h4><h4 id="3-8复合Lambda表达式的有用方法"><a href="#3-8复合Lambda表达式的有用方法" class="headerlink" title="3.8	复合Lambda表达式的有用方法"></a>3.8	复合Lambda表达式的有用方法</h4><h4 id="3-9数学中的类似思想"><a href="#3-9数学中的类似思想" class="headerlink" title="3.9	数学中的类似思想"></a>3.9	数学中的类似思想</h4><h3 id="第四节引入流"><a href="#第四节引入流" class="headerlink" title="第四节	引入流"></a>第四节	引入流</h3><h4 id="4-1流是什么"><a href="#4-1流是什么" class="headerlink" title="4.1	流是什么"></a>4.1	流是什么</h4><h4 id="4-2流简介"><a href="#4-2流简介" class="headerlink" title="4.2	流简介"></a>4.2	流简介</h4><h4 id="4-3流与集合"><a href="#4-3流与集合" class="headerlink" title="4.3	流与集合"></a>4.3	流与集合</h4><h4 id="4-4流操作"><a href="#4-4流操作" class="headerlink" title="4.4	流操作"></a>4.4	流操作</h4><h3 id="第五节使用流"><a href="#第五节使用流" class="headerlink" title="第五节	使用流"></a>第五节	使用流</h3><h4 id="5-1筛选和切片"><a href="#5-1筛选和切片" class="headerlink" title="5.1	筛选和切片"></a>5.1	筛选和切片</h4><h4 id="5-2映射"><a href="#5-2映射" class="headerlink" title="5.2	映射"></a>5.2	映射</h4><h4 id="5-3查找和匹配"><a href="#5-3查找和匹配" class="headerlink" title="5.3	查找和匹配"></a>5.3	查找和匹配</h4><h4 id="5-4归约"><a href="#5-4归约" class="headerlink" title="5.4	归约"></a>5.4	归约</h4><h4 id="5-5付诸实践"><a href="#5-5付诸实践" class="headerlink" title="5.5	付诸实践"></a>5.5	付诸实践</h4><h4 id="5-6数值流"><a href="#5-6数值流" class="headerlink" title="5.6	数值流"></a>5.6	数值流</h4><h4 id="5-7构建流"><a href="#5-7构建流" class="headerlink" title="5.7	构建流"></a>5.7	构建流</h4><h3 id="第六节用流收集数据"><a href="#第六节用流收集数据" class="headerlink" title="第六节	用流收集数据"></a>第六节	用流收集数据</h3><h4 id="6-1收集器简介"><a href="#6-1收集器简介" class="headerlink" title="6.1	收集器简介"></a>6.1	收集器简介</h4><h4 id="6-2归约和汇总"><a href="#6-2归约和汇总" class="headerlink" title="6.2	归约和汇总"></a>6.2	归约和汇总</h4><h4 id="6-3分组"><a href="#6-3分组" class="headerlink" title="6.3	分组"></a>6.3	分组</h4><h4 id="6-4分区"><a href="#6-4分区" class="headerlink" title="6.4	分区"></a>6.4	分区</h4><h4 id="6-5收集器接口"><a href="#6-5收集器接口" class="headerlink" title="6.5	收集器接口"></a>6.5	收集器接口</h4><h4 id="6-6开发你自己的收集器以获得更好的性能"><a href="#6-6开发你自己的收集器以获得更好的性能" class="headerlink" title="6.6	开发你自己的收集器以获得更好的性能"></a>6.6	开发你自己的收集器以获得更好的性能</h4><h3 id="第七节并行数据处理与性能"><a href="#第七节并行数据处理与性能" class="headerlink" title="第七节	并行数据处理与性能"></a>第七节	并行数据处理与性能</h3><h4 id="7-1并行流"><a href="#7-1并行流" class="headerlink" title="7.1	并行流"></a>7.1	并行流</h4><h4 id="7-2分支-合并框架"><a href="#7-2分支-合并框架" class="headerlink" title="7.2	分支&#x2F;合并框架"></a>7.2	分支&#x2F;合并框架</h4><h4 id="7-3Spliterator"><a href="#7-3Spliterator" class="headerlink" title="7.3	Spliterator"></a>7.3	Spliterator</h4><h3 id="第八节重构，测试和调试"><a href="#第八节重构，测试和调试" class="headerlink" title="第八节	重构，测试和调试"></a>第八节	重构，测试和调试</h3><h4 id="8-1为改善可读性和灵活性重构代码"><a href="#8-1为改善可读性和灵活性重构代码" class="headerlink" title="8.1	为改善可读性和灵活性重构代码"></a>8.1	为改善可读性和灵活性重构代码</h4><h4 id="8-2使用Lambda重构面向对象的设计模式"><a href="#8-2使用Lambda重构面向对象的设计模式" class="headerlink" title="8.2	使用Lambda重构面向对象的设计模式"></a>8.2	使用Lambda重构面向对象的设计模式</h4><h4 id="8-3测试Lambda表达式"><a href="#8-3测试Lambda表达式" class="headerlink" title="8.3	测试Lambda表达式"></a>8.3	测试Lambda表达式</h4><h4 id="8-4调试"><a href="#8-4调试" class="headerlink" title="8.4	调试"></a>8.4	调试</h4><h3 id="第九节默认方法"><a href="#第九节默认方法" class="headerlink" title="第九节	默认方法"></a>第九节	默认方法</h3><h4 id="9-1不断演进的API"><a href="#9-1不断演进的API" class="headerlink" title="9.1	不断演进的API"></a>9.1	不断演进的API</h4><h4 id="9-2概述默认方法"><a href="#9-2概述默认方法" class="headerlink" title="9.2	概述默认方法"></a>9.2	概述默认方法</h4><h4 id="9-3默认方法的使用模式"><a href="#9-3默认方法的使用模式" class="headerlink" title="9.3	默认方法的使用模式"></a>9.3	默认方法的使用模式</h4><h4 id="9-4解决冲突的规则"><a href="#9-4解决冲突的规则" class="headerlink" title="9.4	解决冲突的规则"></a>9.4	解决冲突的规则</h4><h3 id="第十节用optional替代null"><a href="#第十节用optional替代null" class="headerlink" title="第十节	用optional替代null"></a>第十节	用optional替代null</h3><h4 id="10-1如何为缺失的值建模"><a href="#10-1如何为缺失的值建模" class="headerlink" title="10.1	如何为缺失的值建模"></a>10.1	如何为缺失的值建模</h4><h4 id="10-2Optional类入门"><a href="#10-2Optional类入门" class="headerlink" title="10.2	Optional类入门"></a>10.2	Optional类入门</h4><h4 id="10-3应用Optional的几种模式"><a href="#10-3应用Optional的几种模式" class="headerlink" title="10.3	应用Optional的几种模式"></a>10.3	应用Optional的几种模式</h4><h4 id="10-4使用Optional的实战示例"><a href="#10-4使用Optional的实战示例" class="headerlink" title="10.4	使用Optional的实战示例"></a>10.4	使用Optional的实战示例</h4><h3 id="第十一节CompletableFuture：组合式异步编程"><a href="#第十一节CompletableFuture：组合式异步编程" class="headerlink" title="第十一节	CompletableFuture：组合式异步编程"></a>第十一节	CompletableFuture：组合式异步编程</h3><h4 id="11-1Future接口"><a href="#11-1Future接口" class="headerlink" title="11.1	Future接口"></a>11.1	Future接口</h4><h4 id="11-2实现异步API"><a href="#11-2实现异步API" class="headerlink" title="11.2	实现异步API"></a>11.2	实现异步API</h4><h4 id="11-3让你的代码免受阻塞之苦"><a href="#11-3让你的代码免受阻塞之苦" class="headerlink" title="11.3	让你的代码免受阻塞之苦"></a>11.3	让你的代码免受阻塞之苦</h4><h4 id="11-4对多个异步任务进行流水线操作"><a href="#11-4对多个异步任务进行流水线操作" class="headerlink" title="11.4	对多个异步任务进行流水线操作"></a>11.4	对多个异步任务进行流水线操作</h4><h4 id="11-5响应CompletableFuture的completion事件"><a href="#11-5响应CompletableFuture的completion事件" class="headerlink" title="11.5	响应CompletableFuture的completion事件"></a>11.5	响应CompletableFuture的completion事件</h4><h3 id="第十二节新的日期和时间API"><a href="#第十二节新的日期和时间API" class="headerlink" title="第十二节	新的日期和时间API"></a>第十二节	新的日期和时间API</h3><h4 id="12-1LocalDate，LocalTime，Instant，Duration以及Period"><a href="#12-1LocalDate，LocalTime，Instant，Duration以及Period" class="headerlink" title="12.1	LocalDate，LocalTime，Instant，Duration以及Period"></a>12.1	LocalDate，LocalTime，Instant，Duration以及Period</h4><h4 id="12-2操纵，解析和格式化日期"><a href="#12-2操纵，解析和格式化日期" class="headerlink" title="12.2	操纵，解析和格式化日期"></a>12.2	操纵，解析和格式化日期</h4><h4 id="12-3处理不同的时区和历法"><a href="#12-3处理不同的时区和历法" class="headerlink" title="12.3	处理不同的时区和历法"></a>12.3	处理不同的时区和历法</h4><h3 id="第十三节函数式的思考"><a href="#第十三节函数式的思考" class="headerlink" title="第十三节	函数式的思考"></a>第十三节	函数式的思考</h3><h4 id="13-1实现和维护系统"><a href="#13-1实现和维护系统" class="headerlink" title="13.1	实现和维护系统"></a>13.1	实现和维护系统</h4><h4 id="13-2什么是函数式编程"><a href="#13-2什么是函数式编程" class="headerlink" title="13.2	什么是函数式编程"></a>13.2	什么是函数式编程</h4><h4 id="13-3递归和迭代"><a href="#13-3递归和迭代" class="headerlink" title="13.3	递归和迭代"></a>13.3	递归和迭代</h4><h3 id="第十四节函数式编程的技巧"><a href="#第十四节函数式编程的技巧" class="headerlink" title="第十四节	函数式编程的技巧"></a>第十四节	函数式编程的技巧</h3><h4 id="14-1无处不在的函数"><a href="#14-1无处不在的函数" class="headerlink" title="14.1	无处不在的函数"></a>14.1	无处不在的函数</h4><h4 id="14-2持久化数据结构"><a href="#14-2持久化数据结构" class="headerlink" title="14.2	持久化数据结构"></a>14.2	持久化数据结构</h4><h4 id="14-3Stream的延迟计算"><a href="#14-3Stream的延迟计算" class="headerlink" title="14.3	Stream的延迟计算"></a>14.3	Stream的延迟计算</h4><h4 id="14-4模式匹配"><a href="#14-4模式匹配" class="headerlink" title="14.4	模式匹配"></a>14.4	模式匹配</h4><h4 id="14-5杂项"><a href="#14-5杂项" class="headerlink" title="14.5	杂项"></a>14.5	杂项</h4><h3 id="第十五节面向对象和函数式编程的混合：Java8和Scala的比较"><a href="#第十五节面向对象和函数式编程的混合：Java8和Scala的比较" class="headerlink" title="第十五节	面向对象和函数式编程的混合：Java8和Scala的比较"></a>第十五节	面向对象和函数式编程的混合：Java8和Scala的比较</h3><h4 id="15-1Scala简介"><a href="#15-1Scala简介" class="headerlink" title="15.1	Scala简介"></a>15.1	Scala简介</h4><h4 id="15-2函数"><a href="#15-2函数" class="headerlink" title="15.2	函数"></a>15.2	函数</h4><h4 id="15-3类和trait"><a href="#15-3类和trait" class="headerlink" title="15.3	类和trait"></a>15.3	类和trait</h4>]]></content>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/2024/01/28/Docker/</url>
    <content><![CDATA[<h3 id="第一节Docker简介"><a href="#第一节Docker简介" class="headerlink" title="第一节	Docker简介"></a>第一节	Docker简介</h3><ul>
<li><strong>Docker 与传统虚拟化</strong><ul>
<li>传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程</li>
<li>容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便</li>
<li>每个容器之间互相隔离，每个容器有自己的文件系统 ，容器之间进程不会相互影响，能区分计算资源</li>
</ul>
</li>
<li><strong>Docker 三要素</strong><ul>
<li><strong>镜像</strong>：应用程序和配置依赖打包好形成一个可交付的运行环境，可以用来创建 <strong>Docker</strong> 容器，一个镜像可以创建很多容器</li>
<li><strong>容器</strong>：容器为镜像提供了一个标准的和隔离的运行环境，它可以被启动、开始、停止、删除，每个容器都是相互隔离的、保证安全的平台</li>
<li><strong>仓库</strong>：集中存放镜像文件的场所</li>
</ul>
</li>
<li><strong>Docker 工作架构</strong><ul>
<li>守护进程运行在主机上，通过 <strong>Socket</strong> 连接从客户端访问，守护进程从客户端接收命令并管理运行在主机上的容器</li>
<li>本地寻找镜像，如果不存在，通过远程仓库获取镜像</li>
<li>如果存在镜像，直接依据本地的镜像生成容器实例</li>
</ul>
</li>
</ul>
<h3 id="第二节Docker常用命令"><a href="#第二节Docker常用命令" class="headerlink" title="第二节	Docker常用命令"></a>第二节	Docker常用命令</h3><h3 id="2-1Docker帮助命令"><a href="#2-1Docker帮助命令" class="headerlink" title="2.1	Docker帮助命令"></a>2.1	Docker帮助命令</h3><ul>
<li><p><strong>常用帮助命令</strong></p>
<table>
<thead>
<tr>
<th align="center">操作</th>
<th align="center">命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">启动</td>
<td align="center">systemctl start docker</td>
</tr>
<tr>
<td align="center">停止</td>
<td align="center">systemctl stop docker</td>
</tr>
<tr>
<td align="center">重启</td>
<td align="center">systemctl restart docker</td>
</tr>
<tr>
<td align="center">查看状态</td>
<td align="center">systemctl status docker</td>
</tr>
<tr>
<td align="center">开机启动</td>
<td align="center">systemctl enable docker</td>
</tr>
<tr>
<td align="center">查看版本</td>
<td align="center">docker version</td>
</tr>
<tr>
<td align="center">查看信息</td>
<td align="center">docker info</td>
</tr>
<tr>
<td align="center">帮助命令</td>
<td align="center">docker [command] –help</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="2-2Docker镜像命令"><a href="#2-2Docker镜像命令" class="headerlink" title="2.2	Docker镜像命令"></a>2.2	Docker镜像命令</h3><ul>
<li><p><strong>常用镜像操作</strong></p>
<table>
<thead>
<tr>
<th align="center">镜像操作</th>
<th align="center">镜像命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">列出本地主机镜像</td>
<td align="center">docker images</td>
</tr>
<tr>
<td align="center">搜索镜像</td>
<td align="center">docker search [image]</td>
</tr>
<tr>
<td align="center">下载镜像</td>
<td align="center">docker pull [image:TAG]</td>
</tr>
</tbody></table>
</li>
<li><p><strong>删除镜像</strong></p>
<table>
<thead>
<tr>
<th align="center">镜像操作</th>
<th align="center">镜像命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">强制删除</td>
<td align="center">docker rmi -f</td>
</tr>
<tr>
<td align="center">根据名称删除</td>
<td align="center">docker rmi [image:TAG]</td>
</tr>
<tr>
<td align="center">根据 <strong>ID</strong> 删除</td>
<td align="center">docker rmi [imageID]</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="2-3Docker容器命令"><a href="#2-3Docker容器命令" class="headerlink" title="2.3	Docker容器命令"></a>2.3	Docker容器命令</h3><ul>
<li><p><strong>新建并启动容器</strong></p>
<table>
<thead>
<tr>
<th align="center">镜像操作</th>
<th align="center">镜像命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">指定容器名称</td>
<td align="center">docker run –name&#x3D;”hello” [container]</td>
</tr>
<tr>
<td align="center">后台启动容器</td>
<td align="center">docker run -d [container]</td>
</tr>
<tr>
<td align="center">前台启动容器</td>
<td align="center">docker run -it [container]</td>
</tr>
<tr>
<td align="center">指定端口映射</td>
<td align="center">docker run -p 8080:80 [container]</td>
</tr>
</tbody></table>
</li>
<li><p><strong>列举容器</strong></p>
<table>
<thead>
<tr>
<th align="center">镜像操作</th>
<th align="center">镜像命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">列举所有容器</td>
<td align="center">docker ps -a</td>
</tr>
<tr>
<td align="center">列举运行中的容器</td>
<td align="center">docker ps</td>
</tr>
</tbody></table>
</li>
<li><p><strong>启停容器</strong></p>
<table>
<thead>
<tr>
<th align="center">镜像操作</th>
<th align="center">镜像命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">启动容器</td>
<td align="center">docker start [container]</td>
</tr>
<tr>
<td align="center">重启容器</td>
<td align="center">docker restart [container]</td>
</tr>
<tr>
<td align="center">停止并退出容器</td>
<td align="center">exit</td>
</tr>
<tr>
<td align="center">退出不停止容器</td>
<td align="center">ctrl + p + q</td>
</tr>
<tr>
<td align="center">停止容器</td>
<td align="center">docker stop [container]</td>
</tr>
<tr>
<td align="center">前置停止容器</td>
<td align="center">docker kill [container]</td>
</tr>
</tbody></table>
</li>
<li><p><strong>删除容器</strong></p>
<table>
<thead>
<tr>
<th align="center">镜像操作</th>
<th align="center">镜像命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">强制删除</td>
<td align="center">docker rmi -f</td>
</tr>
<tr>
<td align="center">根据名称删除</td>
<td align="center">docker rm [container:TAG]</td>
</tr>
<tr>
<td align="center">根据 <strong>ID</strong> 删除</td>
<td align="center">docker rm [containerID]</td>
</tr>
</tbody></table>
</li>
<li><p><strong>容器进程</strong></p>
<table>
<thead>
<tr>
<th align="center">镜像操作</th>
<th align="center">镜像命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">查看日志</td>
<td align="center">docker logs [container]</td>
</tr>
<tr>
<td align="center">查看运行的进程</td>
<td align="center">docker top [container]</td>
</tr>
<tr>
<td align="center">查看内部细节</td>
<td align="center">docker inspect [container]</td>
</tr>
<tr>
<td align="center">进入运行的容器</td>
<td align="center">docker exec -it [container] &#x2F;bin&#x2F;bash</td>
</tr>
</tbody></table>
</li>
<li><p><strong>文件操作</strong></p>
<table>
<thead>
<tr>
<th align="center">镜像操作</th>
<th align="center">镜像命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">拷贝文件到容器</td>
<td align="center">docker cp [path] [container:path]</td>
</tr>
<tr>
<td align="center">拷贝文件到主机</td>
<td align="center">docker cp [container:path] [path]</td>
</tr>
<tr>
<td align="center">导入容器文件</td>
<td align="center">cat [file] | docker import - [container:TAG]</td>
</tr>
<tr>
<td align="center">导出容器文件</td>
<td align="center">docker export [container] &gt; [file]</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="第三节Docker镜像"><a href="#第三节Docker镜像" class="headerlink" title="第三节	Docker镜像"></a>第三节	Docker镜像</h3><h3 id="3-1镜像简介"><a href="#3-1镜像简介" class="headerlink" title="3.1	镜像简介"></a>3.1	镜像简介</h3><ul>
<li><p><strong>镜像简介</strong>：一种轻量级、可执行的独立软件包，把应用程序和配置依赖打包好形成一个可交付的运行环境，它包含运行某个软件所需的所有内容</p>
</li>
<li><p><strong>联合文件系统</strong>：<strong>Union</strong> 文件系统是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下，<strong>Union</strong> 文件系统是 <strong>Docker</strong> 镜像的基础，镜像可以通过分层来进行继承，基于基础镜像，可以制作各种具体的应用镜像</p>
</li>
<li><p><strong>docker 镜像加载原理</strong>：<strong>bootfs</strong> 主要包含 <strong>bootloader</strong> 和 <strong>kernel</strong>，<strong>bootloader</strong> 主要是引导加载 <strong>kernel</strong>，<strong>Linux</strong> 刚启动时会加载 <strong>bootfs</strong> 文件系统，在 <strong>Docker</strong> 镜像的最底层是引导文件系统 <strong>bootfs</strong>，包含 <strong>boot</strong> 加载器和内核，当 <strong>boot</strong> 加载完成之后整个内核就都在内存中了，此时内存的使用权已由 <strong>bootfs</strong> 转交给内核，此时系统也会卸载 <strong>bootfs</strong>，其中 <strong>rootfs</strong> 在 <strong>bootfs</strong> 之上，包含标准目录和文件</p>
</li>
<li><p><strong>分层结构的优点</strong>：共享资源，方便复用，多个镜像都从相同的 <strong>base</strong> 镜像构建而来，只需在磁盘上保存一份 <strong>base</strong> 镜像，内存中也只需加载一份 <strong>base</strong> 镜像，就可以为所有容器服务了，而且镜像的每一层都可以被共享</p>
</li>
</ul>
<h3 id="3-2镜像提交"><a href="#3-2镜像提交" class="headerlink" title="3.2	镜像提交"></a>3.2	镜像提交</h3><ul>
<li><p><strong>本地登录</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker login</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>提交容器到本地镜像</strong></p>
<ul>
<li><p><strong>添加作者名称</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker commit -a [author] [containerID] [image:TAG]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>添加描述信息</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker commit -m [message] [containerID] [image:TAG]</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>重新定义标签</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker tag [imageID] [username/repository:TAG]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>本地镜像发布到云服务器</strong></p>
<ul>
<li><p><strong>拉取镜像</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull [username/repository:TAG]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>推送镜像</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker push [username/repository:TAG]</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="第四节容器数据卷"><a href="#第四节容器数据卷" class="headerlink" title="第四节	容器数据卷"></a>第四节	容器数据卷</h3><h3 id="4-1容器数据卷"><a href="#4-1容器数据卷" class="headerlink" title="4.1	容器数据卷"></a>4.1	容器数据卷</h3><ul>
<li><strong>容器数据卷</strong>：将 <strong>docker</strong> 容器内的数据保存进宿主机的磁盘中，进行数据的持久化，完全独立于容器的生存周期，在容器删除时删除其挂载的数据卷</li>
<li><strong>容器数据卷的特点</strong><ul>
<li>数据卷可在容器之间共享或重用数据</li>
<li>卷中的更改可以直接实时生效</li>
<li>数据卷中的更改不会包含在镜像的更新中</li>
<li>数据卷的生命周期一直持续到没有容器使用它为止</li>
</ul>
</li>
</ul>
<h3 id="4-2添加数据卷"><a href="#4-2添加数据卷" class="headerlink" title="4.2	添加数据卷"></a>4.2	添加数据卷</h3><ul>
<li><p><strong>添加容器卷</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --privileged=<span class="literal">true</span> -v [hostPath:containerPath] [image]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查看挂载情况</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect [containerID]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>容器共享</strong></p>
<ul>
<li><strong>docker</strong> 容器修改，主机同步获得</li>
<li>主机修改，<strong>docker</strong> 容器同步获得</li>
<li><strong>docker</strong> 容器 <strong>stop</strong>，主机修改，<strong>docker</strong> 容器重启数据仍然同步</li>
</ul>
</li>
</ul>
<h3 id="4-3读写规则映射"><a href="#4-3读写规则映射" class="headerlink" title="4.3	读写规则映射"></a>4.3	读写规则映射</h3><ul>
<li><p><strong>读写规则</strong>：默认规则，既允许读文件，也允许写文件</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --privileged=<span class="literal">true</span> -v [hostPath:containerPath:rw] [image]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>只读规则</strong>：只允许读文件，不允许写文件</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --privileged=<span class="literal">true</span> -v [hostPath:containerPath:ro] [image]</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-4卷的继承和共享"><a href="#4-4卷的继承和共享" class="headerlink" title="4.4	卷的继承和共享"></a>4.4	卷的继承和共享</h3><ul>
<li><p><strong>卷的继承</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --privileged=<span class="literal">true</span> --volumes-from [fatherVolumes] --name=[childVolumes] [image]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>卷的共享</strong></p>
<ul>
<li>父子容器之间数据共享，删除父容器后，修改某一子容器会响应其兄弟元素</li>
<li>容器之间配置信息的传递，数据卷生命周期一直持续到没有容器使用它为止</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>JDBC</title>
    <url>/2024/01/28/JDBC/</url>
    <content><![CDATA[<h2 id="第一章JDBC技术概述"><a href="#第一章JDBC技术概述" class="headerlink" title="第一章	JDBC技术概述"></a>第一章	JDBC技术概述</h2><h3 id="1-1JDBC技术概念和理解"><a href="#1-1JDBC技术概念和理解" class="headerlink" title="1.1	JDBC技术概念和理解"></a>1.1	JDBC技术概念和理解</h3><ul>
<li><p><strong>JDBC概述</strong>：全称为 <strong>Java Database Connectivity</strong> 即 <strong>Java</strong> 连接数据库，<strong>JDBC</strong> 由 <strong>Java</strong> 语言的规范和各个数据库厂商的实现驱动(组成，是一种典型的面向接口编程，只需学习 <strong>JDBC</strong> 规范接口的方法，即可操作所有的数据库软件</p>
</li>
<li><p><strong>JDBC技术理解</strong></p>
<ul>
<li><strong>JDBC</strong> 是 <strong>Java</strong> 语言中访问关系型数据库的标准接口，它定义了一组 <strong>API</strong>，使得 <strong>Java</strong> 程序可以通过统一的方式连接、访问、操作不同的关系型数据库，<strong>JDBC API</strong> 提供了一套标准的接口，使得开发者可以使用 <strong>Java</strong> 语言来访问关系型数据库，而不必关心不同数据库之间的差异</li>
<li><strong>JDBC</strong> 有两个核心组件：<strong>JDBC</strong> 驱动程序和 <strong>JDBC API</strong>，<strong>JDBC</strong> 驱动程序通过提供特定数据库的实现，将 <strong>JDBC API</strong> 转换成数据库可以理解的命令，<strong>JDBC API</strong> 包括了一系列 <strong>Java</strong> 类和接口，使得开发者可以使用 <strong>Java</strong> 语言来执行 <strong>SQL</strong> 查询、更新和管理数据库连接等操作</li>
</ul>
</li>
<li><p><strong>JDBC连接数据库步骤</strong></p>
<ul>
<li>加载 <strong>JDBC</strong> 驱动程序：使用 <strong>Class.forName()</strong> 方法加载特定数据库的 <strong>JDBC</strong> 驱动程序</li>
<li>创建数据库连接：使用 <strong>DriverManager.getConnection()</strong> 方法创建一个数据库连接对象，该方法需要指定数据库的连接字符串、用户名和密码等信息</li>
<li>创建 <strong>Statement</strong> 对象：使用数据库连接对象创建一个 <strong>Statement</strong> 对象，用于执行 <strong>SQL</strong> 查询和更新操作</li>
<li>执行 <strong>SQL</strong> 语句：使用 <strong>Statement</strong> 对象执行 <strong>SQL</strong> 语句，包括查询、更新和删除等操作</li>
<li>处理结果集：如果执行查询操作，则需要使用 <strong>ResultSet</strong> 对象处理查询结果</li>
<li>关闭数据库连接：使用数据库连接对象的 <strong>close()</strong> 方法关闭数据库连接</li>
</ul>
</li>
</ul>
<h3 id="1-2JDBC核心API和使用路线"><a href="#1-2JDBC核心API和使用路线" class="headerlink" title="1.2	JDBC核心API和使用路线"></a>1.2	JDBC核心API和使用路线</h3><ul>
<li><p><strong>JDBC 技术组成</strong></p>
<ul>
<li><strong>JDK</strong> 下 <strong>JDBC</strong> 规范接口, 存储在 <strong>java.sql</strong> 和 <strong>javax.sql</strong> 包中的 <strong>API</strong>：为了项目代码的可移植性，可维护性，<strong>SUN</strong> 公司从最初就制定了 <strong>Java</strong> 程序连接各种数据库的统一接口规范，不管是连接哪一种 <strong>DBMS</strong> 软件，<strong>Java</strong> 代码可以保持一致性</li>
<li>各个数据库厂商提供的驱动 <strong>jar</strong> 包：因为各个数据库厂商的 <strong>DBMS</strong> 软件各有不同，那么内部如何通过 <strong>sql</strong> 实现增、删、改、查等管理数据，只有这个数据库厂商自己更清楚，因此把接口规范的实现交给各个数据库厂商自己实现</li>
</ul>
</li>
<li><p><strong>涉及具体核心类和接口</strong></p>
<ul>
<li><strong>DriverManager</strong>：将第三方数据库厂商的实现驱动 <strong>jar</strong> 注册到程序中，可以根据数据库连接信息获取 <strong>connection</strong></li>
<li><strong>Connection</strong>：和数据库建立的连接,在连接对象上,可以多次执行数据库 <strong>CURD</strong> 动作，可以获取 <strong>statement</strong> 和 <strong>preparedstatement</strong>，<strong>callablestatement</strong> 对象</li>
<li><strong>Statement</strong> 、 <strong>PreparedStatement</strong> 、 <strong>CallableStatement</strong>：具体发送 <strong>SQL</strong> 语句到数据库管理软件的对象，不同发送方式稍有不同</li>
<li><strong>Result</strong>：抽象成数据库的查询结果表，存储 <strong>DQL</strong> 查询数据库结果的对象，需要我们进行解析，获取具体的数据库数据</li>
</ul>
</li>
<li><p><strong>JDBC API 使用路线</strong></p>
<ul>
<li>静态 <strong>SQL</strong> 路线：DriverManager，Connection，Statement，Result</li>
<li>预编译 <strong>SQL</strong> 路线：DriverManager，Connection，PreparedStatement，Result</li>
<li>执行标准存储过 <strong>SQL</strong> 路线：DriverManager，Collection，CallableStatement，Result</li>
</ul>
</li>
</ul>
<h2 id="第二章JDBC核心API"><a href="#第二章JDBC核心API" class="headerlink" title="第二章	JDBC核心API"></a>第二章	JDBC核心API</h2><h3 id="2-1基于statement使用方式"><a href="#2-1基于statement使用方式" class="headerlink" title="2.1	基于statement使用方式"></a>2.1	基于statement使用方式</h3><ul>
<li><p><strong>基本步骤</strong></p>
<ul>
<li><p>注册驱动</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DriverManager.registerDriver(<span class="keyword">new</span> <span class="title class_">Driver</span>());       </span><br></pre></td></tr></table></figure>
</li>
<li><p>获取连接</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/my_jdbc&quot;</span>, <span class="string">&quot;MYXH&quot;</span>,<span class="string">&quot;520.ILY!&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建发送 <strong>SQL</strong> 语句对象</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();        </span><br></pre></td></tr></table></figure>
</li>
<li><p>发送 <strong>SQL</strong> 语句，并获取返回结果</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_user;&quot;</span>;</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br></pre></td></tr></table></figure>
</li>
<li><p>结果集解析</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">account</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;account&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">nickname</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;nickname&quot;</span>);</span><br><span class="line">    System.out.println(id + <span class="string">&quot;--&quot;</span> + account + <span class="string">&quot;--&quot;</span> + password + <span class="string">&quot;--&quot;</span> + nickname);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>资源关闭</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resultSet.close();</span><br><span class="line">statement.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>方式缺陷</strong></p>
<ul>
<li><strong>SQL</strong> 语句需要字符串拼接，比较麻烦</li>
<li>只能拼接字符串类型，其他的数据库类型无法处理</li>
<li>可能发生注入攻击</li>
</ul>
</li>
</ul>
<h3 id="2-2基于preparedStatement使用方式"><a href="#2-2基于preparedStatement使用方式" class="headerlink" title="2.2	基于preparedStatement使用方式"></a>2.2	基于preparedStatement使用方式</h3><ul>
<li><p><strong>基本步骤</strong></p>
<ul>
<li><p>注册驱动</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取连接</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql:///my_jdbc&quot;</span>, <span class="string">&quot;MYXH&quot;</span>, <span class="string">&quot;520.ILY!&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建 <strong>Statement</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 静态</span></span><br><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement(<span class="string">&quot;insert into t_user(account, password, nickname) values(&quot;</span>test<span class="string">&quot;, &quot;</span>test<span class="string">&quot;, &quot;</span>测试<span class="string">&quot;);&quot;</span>);</span><br><span class="line"><span class="comment">// 预编译</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">preparedstatement</span> <span class="operator">=</span> connection.preparedStatement(<span class="string">&quot;insert into t_user(account, password, nickname) values(?, ?, ?);&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>占位符赋值</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">preparedStatement.setObject(<span class="number">1</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">preparedStatement.setObject(<span class="number">2</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">preparedStatement.setObject(<span class="number">3</span>, <span class="string">&quot;测试&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>发送 <strong>SQL</strong> 语句获取结果</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> executeUpdate();    <span class="comment">//非 DQL</span></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> executeQuery();    <span class="comment">// DQL</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>查询结果集解析</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 移动光标指向行数据: next();</span></span><br><span class="line"><span class="comment">// if(next()) &#123;&#125; 或 while(next()) &#123;&#125;</span></span><br><span class="line"><span class="comment">// 获取列的数据即可, get类型(int 列的下角标 从1开始 或 int 列的label (别名或者列名))</span></span><br><span class="line"><span class="comment">// 获取列的信息: getMetadata();</span></span><br><span class="line"><span class="comment">// ResultsetMetaData 对象包含的就是列的信息</span></span><br><span class="line"><span class="comment">// getColumnCount(); 或 getCloumnLebal(index)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭资源</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resultSet.close();</span><br><span class="line">preparedStatement.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第三章JDBC拓展提升"><a href="#第三章JDBC拓展提升" class="headerlink" title="第三章	JDBC拓展提升"></a>第三章	JDBC拓展提升</h2><h3 id="3-1自增长主键回显显示"><a href="#3-1自增长主键回显显示" class="headerlink" title="3.1	自增长主键回显显示"></a>3.1	自增长主键回显显示</h3><ul>
<li><p><strong>功能需求</strong></p>
<ul>
<li><strong>主键回显</strong>：<strong>Java</strong> 程序获取插入数据时 <strong>MySQL</strong> 维护自增长维护的主键 <strong>id</strong> 值</li>
<li><strong>作用</strong>：在多表关联插入数据时，一般主表的主键都是自动生成的，所以在插入数据之前无法知道这条数据的主键，但是从表需要在插入数据之前就绑定主表的主键，这是可以使用主键回显技术</li>
</ul>
</li>
<li><p><strong>功能实现</strong></p>
<ul>
<li><p>注册驱动</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取连接</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql:///my_jdbc?user=MYXH&amp;password=520.ILY!&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 <strong>SQL</strong> 语句</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_user(account, password, nickname) values (?, ?, ?);&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建 <strong>PreparebdStatement</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql,PreparedStatement.RETURN_GENERATED_KEYS);</span><br></pre></td></tr></table></figure>
</li>
<li><p>占位符赋值</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">preparedStatement.setObject(<span class="number">1</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">preparedStatement.setObject(<span class="number">2</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">preparedStatement.setObject(<span class="number">3</span>, <span class="string">&quot;测试员&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>发送 <strong>SQL</strong> 语句,并且获取结果</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> preparedStatement.executeUpdate();</span><br></pre></td></tr></table></figure>
</li>
<li><p>结果解析</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (rows &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;数据插入成功！&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以获取回显的主键</span></span><br><span class="line">    <span class="comment">// 获取 PrepareStatement 装主键的结果集对象, 一行一列, id = 值</span></span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">generatedKeys</span> <span class="operator">=</span> preparedStatement.getGeneratedKeys();</span><br><span class="line">    generatedKeys.next();   <span class="comment">// 移动下光标</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> generatedKeys.getInt(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;id = &quot;</span> + id);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;数据插入失败！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭资源</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">preparedStatement.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="3-2批量数据插入性能提升"><a href="#3-2批量数据插入性能提升" class="headerlink" title="3.2	批量数据插入性能提升"></a>3.2	批量数据插入性能提升</h3><ul>
<li><p><strong>功能需求</strong></p>
<ul>
<li>批量数据插入优化</li>
<li>提升大量数据插入效率</li>
</ul>
</li>
<li><p><strong>功能实现</strong></p>
<ul>
<li><p>注册驱动</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取连接</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql:///my_jdbcrewriteBatchedStatements=true&quot;</span>, <span class="string">&quot;MYXH&quot;</span>, <span class="string">&quot;520.ILY!&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 <strong>SQL</strong> 语句</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_user(account, password, nickname) values (?, ?, ?)&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建 <strong>PreparedStatement</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br></pre></td></tr></table></figure>
</li>
<li><p>占位符赋值</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10000</span>; i++)&#123;</span><br><span class="line">    preparedStatement.setObject(<span class="number">1</span>, <span class="string">&quot;BatchTest&quot;</span> + i);</span><br><span class="line">    preparedStatement.setObject(<span class="number">2</span>, <span class="string">&quot;BatchTest&quot;</span> + i);</span><br><span class="line">    preparedStatement.setObject(<span class="number">3</span>, <span class="string">&quot;批量测试员&quot;</span> + i);</span><br><span class="line">    preparedStatement.addBatch();   <span class="comment">// 不执行, 追加到values后面</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>发送 <strong>SQL</strong> 语句，并且获取结果</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">preparedStatement.executeBatch();   <span class="comment">// 执行批量操作</span></span><br><span class="line"><span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br></pre></td></tr></table></figure>
</li>
<li><p>结果解析</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;执行 10000 次数据插入消耗的时间：&quot;</span> + (endTime - startTime) + <span class="string">&quot;ms&quot;</span>);       </span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭资源</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">preparedStatement.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="3-3JDBC中数据库事务实现"><a href="#3-3JDBC中数据库事务实现" class="headerlink" title="3.3	JDBC中数据库事务实现"></a>3.3	JDBC中数据库事务实现</h3><ul>
<li><p><strong>事务概念</strong></p>
<ul>
<li>数据库事务就是一种 <strong>SQL</strong> 语句执行的缓存机制，不会单条执行完毕就更新数据库数据，最终根据缓存内的多条语句执行结果统一判定</li>
<li>一个事务内所有语句都成功及事务成功，我们可以触发 <strong>commit</strong> 提交事务来结束事务，更新数据</li>
<li>一个事务内任意一条语句失败，及事务失败，我们可以触发 <strong>rollback</strong> 回滚结束事务，数据回到事务之前状态</li>
</ul>
</li>
<li><p><strong>事务特性</strong></p>
<ul>
<li><strong>原子性</strong>：事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生</li>
<li><strong>一致性</strong>：事务必须使数据库从一个一致性状态变换到另外一个一致性状态</li>
<li><strong>隔离性</strong>：一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰</li>
<li><strong>持久性</strong>：一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响</li>
</ul>
</li>
<li><p><strong>JDBC事务管理</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    connection.setAutoCommit(<span class="literal">false</span>);    <span class="comment">//关闭自动提交</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据库动作</span></span><br><span class="line">    <span class="comment">//statement, 单一的数据库动作 CURD</span></span><br><span class="line"></span><br><span class="line">    connection.commit();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span>(Execption e)&#123;</span><br><span class="line">    connection.rollback();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>JDBC事务实现示例</strong></p>
<ul>
<li><p><strong>BankService</strong> 类</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BankDao</span> <span class="variable">bankDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BankDao</span>();</span><br><span class="line"><span class="comment">// 一个事务的最基本要求, 必须是同一个连接对象 connection</span></span><br><span class="line"><span class="comment">// 一个转账方法属于一个事务〔存钱、取钱)</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql:///my_jdbc?user=MYXH&amp;password=520.ILY!&quot;</span>);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    connection.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">    </span><br><span class="line">    bankDao.add(addAccount, money, connection);</span><br><span class="line">    System.out.println(<span class="string">&quot;----------&quot;</span>);</span><br><span class="line">    bankDao.sub(subAccount, money, connection);</span><br><span class="line"></span><br><span class="line">    connection.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">    connection.rollback();</span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">&#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>BankDao</strong> 类</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_bank set money = money + ? where account = ? ;&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">preparedStatement.setObject(<span class="number">1</span>, money);</span><br><span class="line">preparedStatement.setObject(<span class="number">2</span>, account);</span><br><span class="line">preparedStatement.executeUpdate();</span><br><span class="line"></span><br><span class="line">preparedStatement.close();</span><br><span class="line">System.out.println(<span class="string">&quot;存钱成功！&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第四章Druid连接池技术使用"><a href="#第四章Druid连接池技术使用" class="headerlink" title="第四章	Druid连接池技术使用"></a>第四章	Druid连接池技术使用</h2><h3 id="4-1数据库连接池作用"><a href="#4-1数据库连接池作用" class="headerlink" title="4.1	数据库连接池作用"></a>4.1	数据库连接池作用</h3><ul>
<li><p><strong>不使用连接池的缺点</strong></p>
<ul>
<li>不使用数据库连接池，每次都通过 <strong>DriverManager</strong> 获取新连接，用完直接抛弃断开，连接的利用率太低，太浪费</li>
<li>对于数据库服务器来说，压力太大，我们数据库服务器和 <strong>Java</strong> 程序对连接数也无法控制，很容易导致数据库服务器崩溃</li>
</ul>
</li>
<li><p><strong>管理连接</strong></p>
<ul>
<li>可以建立一个连接池以容纳一定数量的连接对象，一开始我们可以先替用户先创建好一些连接对象，等用户要拿连接对象时，就直接从池中拿，不用新建了，这样也可以节省时间，然后用户用完后，放回去，别人可以接着用</li>
<li>可以提高连接的使用率，当池中的现有的连接都用完了，那么连接池可以向服务器申请新的连接放到池中</li>
<li>直到池中的连接达到最大连接数，就不能在申请新的连接了，如果没有拿到连接的用户只能等待</li>
</ul>
</li>
</ul>
<h3 id="4-2常见数据库连接池产品和对比"><a href="#4-2常见数据库连接池产品和对比" class="headerlink" title="4.2	常见数据库连接池产品和对比"></a>4.2	常见数据库连接池产品和对比</h3><ul>
<li><p><strong>数据库连接池</strong>：使用 <strong>javax.sql.DataSource</strong> 接口进行规范，所有的第三方连接池都实现此接口，自行添加具体实现，所有连接池获取连接的和回收连接方法都一样，不同的只有性能和扩展功能</p>
</li>
<li><p><strong>数据库连接池产品对比</strong></p>
<table>
<thead>
<tr>
<th align="center">数据库连接池</th>
<th align="center">特点</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>DBCP</strong></td>
<td align="center">依赖于 <strong>common-pool</strong></td>
<td align="center"><strong>Apache</strong> 提供的数据库连接池，速度相对 <strong>c3p0</strong> 较快，但因自身存在 <strong>BUG</strong></td>
</tr>
<tr>
<td align="center"><strong>C3P0</strong></td>
<td align="center">历史久远，代码逻辑复杂，且不易维护</td>
<td align="center">一个开源组织提供的一个数据库连接池，速度相对较慢，稳定性还可以</td>
</tr>
<tr>
<td align="center"><strong>Proxool</strong></td>
<td align="center">非常简单的移植到现存的代码中，可以透明地为你现存的 <strong>JDBC</strong> 驱动程序增加连接池功能</td>
<td align="center"><strong>sourceforge</strong> 下的一个开源项目数据库连接池，有监控连接池状态的功能，稳定性较 <strong>c3p0</strong> 差一点</td>
</tr>
<tr>
<td align="center"><strong>Druid</strong></td>
<td align="center">阿里开源，功能全面</td>
<td align="center">阿里提供的数据库连接池，据说是集 <strong>DBCP</strong> 、<strong>C3P0</strong> 、<strong>Proxool</strong> 优点于一身 的数据库连接池</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="4-3Druid连接池使用"><a href="#4-3Druid连接池使用" class="headerlink" title="4.3	Druid连接池使用"></a>4.3	Druid连接池使用</h3><ul>
<li><p><strong>硬编码方式</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 连接池对象</span></span><br><span class="line"><span class="type">DruidDataSource</span> <span class="variable">druidDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line"><span class="comment">// 设置参数</span></span><br><span class="line">druidDataSource.setDriverClassName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">druidDataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/my_jdbc&quot;</span>);</span><br><span class="line">druidDataSource.setUsername(<span class="string">&quot;MYXH&quot;</span>);</span><br><span class="line">druidDataSource.setPassword(<span class="string">&quot;520.ILY!&quot;</span>);</span><br><span class="line">druidDataSource.setInitialSize(<span class="number">5</span>);    <span class="comment">// 初始化的连接数量</span></span><br><span class="line">druidDataSource.setMaxActive(<span class="number">10</span>);    <span class="comment">// 最大的连接数量</span></span><br><span class="line"><span class="comment">// 获取连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> druidDataSource.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据库 CURD</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 回收连接</span></span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>软编码方式</strong></p>
<ul>
<li><p>配置文件</p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># key = value =&gt; java Properties 读取 (key 和 value)</span></span><br><span class="line"><span class="comment"># druid 配置 的key 固定命名</span></span><br><span class="line"><span class="comment"># druid 连接池需要的配置参数, key固定命名</span></span><br><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql:///my_jdbc</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">MYXH</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">520.ILY!</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">10</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>声明代码</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读取外部配置的文件 Properties</span></span><br><span class="line"><span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"><span class="comment">//使用类加载器提供的方法</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> DruidUsePart.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>);</span><br><span class="line">properties.load(inputStream);</span><br><span class="line"><span class="comment">//使用连接池的工具类的工场模式, 创建连接池</span></span><br><span class="line"><span class="type">DataSource</span> <span class="variable">druidDataSource</span> <span class="operator">=</span> DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> druidDataSource.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据库 CURD</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 回收连接</span></span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>Druid配置信息</strong></p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>name</strong></td>
<td align="center">如果存在多个数据源，监控的时候可以通过名字来区分开来，如果没有配置，将会生成一个名字，格式为 <strong>DataSource-” + System.identityHashCode(this)</strong></td>
</tr>
<tr>
<td align="center"><strong>jdbcUrl</strong></td>
<td align="center">连接数据库的 <strong>url</strong>，不同数据库不一样，例如：mysql : jdbc:mysql:&#x2F;&#x2F;10.20.153.104:3306&#x2F;druid2 oracle : jdbc:oracle:thin:@10.20.149.85:1521:ocnauto</td>
</tr>
<tr>
<td align="center"><strong>username</strong></td>
<td align="center">连接数据库的用户名</td>
</tr>
<tr>
<td align="center"><strong>password</strong></td>
<td align="center">连接数据库的密码，如果你不希望密码直接写在配置文件中，可以使用 <strong>ConfigFilter</strong></td>
</tr>
<tr>
<td align="center"><strong>initialSize</strong></td>
<td align="center">初始化时建立物理连接的个数，初始化发生在显示调用 <strong>init</strong> 方法，或者第一次 <strong>getConnection</strong> 时</td>
</tr>
<tr>
<td align="center"><strong>maxActive</strong></td>
<td align="center">最大连接池数量</td>
</tr>
<tr>
<td align="center"><strong>minIdle</strong></td>
<td align="center">最小连接池数量</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="第五章JDBC使用优化以及工具类封装"><a href="#第五章JDBC使用优化以及工具类封装" class="headerlink" title="第五章	JDBC使用优化以及工具类封装"></a>第五章	JDBC使用优化以及工具类封装</h3><h3 id="5-1JDBC工具类封装Version1-0"><a href="#5-1JDBC工具类封装Version1-0" class="headerlink" title="5.1	JDBC工具类封装Version1.0"></a>5.1	JDBC工具类封装Version1.0</h3><ul>
<li><p><strong>工具类封装</strong>：封装一个工具类，内部包含连接池对象，同时对外提供连接的方法和回收连接的方法</p>
<ul>
<li><p>配置文件</p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># key = value =&gt; java Properties 读取 (key 和 value)</span></span><br><span class="line"><span class="comment"># druid 配置 的key 固定命名</span></span><br><span class="line"><span class="comment"># druid 连接池需要的配置参数, key固定命名</span></span><br><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql:///my_jdbc</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">MYXH</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">520.ILY!</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">10</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>声明代码</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcUtilsVersion1</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DataSource dataSource;    <span class="comment">// 连接池对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">// 初始化连接池对象</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> JdbcUtilsVersion1.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>);</span><br><span class="line">        properties.load(inputStream);</span><br><span class="line">        dataSource = DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException&#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">freeConnection</span><span class="params">(Connection connection)</span> <span class="keyword">throws</span> SQLException&#123;</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="5-2JDBC工具类封装Version2-0"><a href="#5-2JDBC工具类封装Version2-0" class="headerlink" title="5.2	JDBC工具类封装Version2.0"></a>5.2	JDBC工具类封装Version2.0</h3><ul>
<li><p><strong>工具类封装</strong>：优化工具类，考虑事务的情况下，如何一个线程的不同方法获取同一个连接</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcUtilsVersion2</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DataSource dataSource;    <span class="comment">// 连接池对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Connection&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">// 初始化连接池对象</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> JdbcUtilsVersion2.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>);</span><br><span class="line">        properties.load(inputStream);</span><br><span class="line">        dataSource = DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException&#123;</span><br><span class="line">        <span class="comment">// 线程本地变量中是否存在</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> threadLocal.get();</span><br><span class="line">        <span class="comment">// 第一次没有</span></span><br><span class="line">        <span class="keyword">if</span> (connection == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 线程本地变量没有, 连接池获取</span></span><br><span class="line">            connection = dataSource.getConnection();</span><br><span class="line">            threadLocal.set(connection);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">freeConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> threadLocal.get();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="literal">null</span>)&#123;</span><br><span class="line">            threadLocal.remove();    <span class="comment">// 清空线程本地变量数据</span></span><br><span class="line">            connection.setAutoCommit(<span class="literal">true</span>);    <span class="comment">// 事务状态回归 false</span></span><br><span class="line">            connection.close();    <span class="comment">// 回收到连接池</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-3高级应用层封装BaseDao"><a href="#5-3高级应用层封装BaseDao" class="headerlink" title="5.3	高级应用层封装BaseDao"></a>5.3	高级应用层封装BaseDao</h3><ul>
<li><p><strong>应用层封装</strong>：每一个数据表都应该有一个对应的 <strong>DAO</strong> 接口及其实现类，发现对所有表的操作（增、删、改、查）代码重复度很高，所以可以抽取公共代码，给这些 <strong>DAO</strong> 的实现类可以抽取一个公共的父类，我们称为 <strong>BaseDao</strong></p>
</li>
<li><p><strong>代码示例</strong></p>
<ul>
<li><p><strong>BaseDao</strong> 类</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseDao</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">executeUpdate</span><span class="params">(String sql, Object... params)</span> <span class="keyword">throws</span> SQLException&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JdbcUtilsVersion2.getConnection();</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= params.length; i++)&#123;</span><br><span class="line">            preparedStatement.setObject(i, params[i - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> preparedStatement.executeUpdate();</span><br><span class="line">        preparedStatement.close();</span><br><span class="line">        <span class="keyword">if</span> (connection.getAutoCommit())&#123;</span><br><span class="line">            JdbcUtilsVersion2.freeConnection();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rows;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">executeQuery</span><span class="params">(Class&lt;T&gt; clazz, String sql, Object... params)</span> <span class="keyword">throws</span> SQLException, InstantiationException, IllegalAccessException, NoSuchFieldException, NoSuchMethodException, InvocationTargetException&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JdbcUtilsVersion2.getConnection();</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">        <span class="keyword">if</span> (params != <span class="literal">null</span> &amp;&amp; params.length != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= params.length; i++)&#123;</span><br><span class="line">                preparedStatement.setObject(i, params[i - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> preparedStatement.executeQuery();</span><br><span class="line">        List&lt;T&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">ResultSetMetaData</span> <span class="variable">metaData</span> <span class="operator">=</span> resultSet.getMetaData();</span><br><span class="line">        String[] columnNames = <span class="keyword">new</span> <span class="title class_">String</span>[metaData.getColumnCount()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= columnNames.length; i++)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">columnName</span> <span class="operator">=</span> metaData.getColumnLabel(i);</span><br><span class="line">            Field field;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                field = clazz.getDeclaredField(columnName);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (NoSuchFieldException e)&#123;</span><br><span class="line">                <span class="comment">// 如果找不到同名属性, 则尝试将列名转换成驼峰命名法格式的属性名</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">propertyName</span> <span class="operator">=</span> StringUtils.toCamelCase(columnName);</span><br><span class="line">                field = clazz.getDeclaredField(propertyName);</span><br><span class="line">            &#125;</span><br><span class="line">            columnNames[i - <span class="number">1</span>] = field.getName();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">            <span class="comment">// 一行数据对应一个 T 类型的对象</span></span><br><span class="line">            <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> clazz.getDeclaredConstructor().newInstance();    <span class="comment">// 调用类的无参构造函数实例化对象</span></span><br><span class="line">            <span class="comment">// 自动遍历列: 注意, 要从 1 开始, 并且小于等于总列数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= columnNames.length; i++)&#123;</span><br><span class="line">                <span class="comment">// 对象的属性值</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> resultSet.getObject(i);</span><br><span class="line">                <span class="comment">// 获取属性名称</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">propertyName</span> <span class="operator">=</span> metaData.getColumnLabel(i);</span><br><span class="line">                <span class="comment">// 反射给对象的属性值赋值</span></span><br><span class="line">                Field field;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    field = clazz.getDeclaredField(propertyName);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (NoSuchFieldException e)&#123;</span><br><span class="line">                    <span class="comment">// 如果找不到同名属性, 则尝试将属性名转换成下划线分隔符格式的列名</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">columnName</span> <span class="operator">=</span> StringUtils.toUnderscoreCase(propertyName);</span><br><span class="line">                    field = clazz.getDeclaredField(columnName);</span><br><span class="line">                &#125;</span><br><span class="line">                field.setAccessible(<span class="literal">true</span>);    <span class="comment">// 属性可以设置, 取消 private 的修饰限制</span></span><br><span class="line">                field.set(t, value);</span><br><span class="line">            &#125;</span><br><span class="line">            list.add(t);</span><br><span class="line">        &#125;</span><br><span class="line">        resultSet.close();</span><br><span class="line">        preparedStatement.close();</span><br><span class="line">        <span class="keyword">if</span> (connection.getAutoCommit())&#123;</span><br><span class="line">            <span class="comment">// 没有事务, 可以关闭</span></span><br><span class="line">            JdbcUtilsVersion2.freeConnection();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>User</strong> 类</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String account;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String nickname;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, account=&#x27;&quot;</span> + account + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, nickname=&#x27;&quot;</span> + nickname + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>PreparedStatementCurdPart</strong> 类</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PreparedStatementCurdPart</span> <span class="keyword">extends</span> <span class="title class_">BaseDao</span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span> <span class="keyword">throws</span> SQLException&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_user(account, password, nickname) values(?, ?, ?);&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> executeUpdate(sql, <span class="string">&quot;DaoTest1&quot;</span>, <span class="string">&quot;test1&quot;</span>, <span class="string">&quot;Dao测试员1&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;rows = &quot;</span> + rows);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span> <span class="keyword">throws</span> SQLException&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_user set nickname = ? where id = ?;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> executeUpdate(sql, <span class="string">&quot;新的测试员&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;rows = &quot;</span> + rows);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span> <span class="keyword">throws</span> SQLException&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from t_user where id = ?;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> executeUpdate(sql, <span class="number">20004</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;rows = &quot;</span> + rows);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelect</span><span class="params">()</span> <span class="keyword">throws</span> SQLException, NoSuchFieldException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchMethodException&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id, account, password, nickname from t_user;&quot;</span>;</span><br><span class="line">        List&lt;User&gt; list = executeQuery(User.class, sql);</span><br><span class="line">        System.out.println(<span class="string">&quot;list = &quot;</span> + list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Bank</strong> 类</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bank</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String account;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal money;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Bank&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, account=&#x27;&quot;</span> + account + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, money=&quot;</span> + money +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>JavaWeb</title>
    <url>/2024/01/28/JavaWeb/</url>
    <content><![CDATA[<h2 id="第一节Servlet简介"><a href="#第一节Servlet简介" class="headerlink" title="第一节	Servlet简介"></a>第一节	Servlet简介</h2><ul>
<li><strong>Servlet简介</strong>：<strong>Server Applet</strong> 的简称，即服务程序，它是由 <strong>Sun</strong> 公司提供的一门用于开发动态 <strong>Web</strong> 资源的技术，用 <strong>Java</strong> 编写的服务器端程序，其主要功能在于交互式地浏览和修改数据，生成动态 <strong>Web</strong> 内容，从实现上讲，<strong>Servlet</strong> 可以响应任何类型的请求，但绝大多数情况下 <strong>Servlet</strong> 只用来扩展基于 <strong>HTTP</strong> 协议的 <strong>Web</strong> 服务器</li>
<li><strong>Idea 创建 Servlet项目流程</strong><ul>
<li>创建 <strong>Java</strong> 项目</li>
<li>添加 <strong>Web Application</strong> 框架支持</li>
<li>在 <strong>WEB-INF</strong> 目录下添加 <strong>classes</strong> 目录和 <strong>lib</strong> 目录，并在项目结构中配置为输出路径</li>
<li>复制 <strong>servelet-api.jar</strong>包 和 <strong>Tomcat-api.jar</strong> 包到 <strong>lib</strong> 目录，并在项目结构中导入</li>
<li>在构建配置中配置 <strong>Tomcat</strong> 服务器，并部署项目</li>
</ul>
</li>
</ul>
<h2 id="第二节Servlet-API概述"><a href="#第二节Servlet-API概述" class="headerlink" title="第二节	Servlet API概述"></a>第二节	Servlet API概述</h2><ul>
<li><p><strong>Servlet API</strong> 主要包括</p>
<ul>
<li><strong>jakarta.servlet.Servlet</strong>：其中包含定义 <strong>servlet</strong> 和 <strong>servlet</strong> 容器之间契约的类和接口</li>
<li>**jakarta.servlet.http.***：其中包含定义 <strong>HTTP Servlet</strong> 和 <strong>Servlet</strong> 容器之间的关系</li>
<li><em>*jakarta.servlet.annotation.<em><strong>：其中包含标注</strong>servlet</em>*，</em>*Filter<strong>，</strong>Listener**的标注</li>
<li>**jakarta.servlet.descriptor.**：其中包含提供程序化登录 <strong>Web</strong> 应用程序的配置信息的类型</li>
</ul>
</li>
<li><p><strong>Servlet</strong>：核心接口，被具体的类实现以达到不同的功能</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>init()</strong></td>
<td align="center">初始化 <strong>Servlet</strong> 类</td>
</tr>
<tr>
<td align="center"><strong>getServletConfig()</strong></td>
<td align="center">返回 <strong>Servlet</strong> 配置类</td>
</tr>
<tr>
<td align="center"><strong>service()</strong></td>
<td align="center">向对象提供服务</td>
</tr>
<tr>
<td align="center"><strong>getServletInfo()</strong></td>
<td align="center">返回一个描述字符串</td>
</tr>
<tr>
<td align="center"><strong>destroy()</strong></td>
<td align="center">在对象销毁前关闭资源</td>
</tr>
</tbody></table>
</li>
<li><p><strong>ServletConfig</strong>：在<strong>Web</strong> 服务器在加载 <strong>Servlet</strong> 时，用于获取 <strong>Servlet</strong> 的初始化参数，以及获取 <strong>Servlet</strong> 的配置信息，侧重于某个 <strong>Servlet</strong> 实例</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>getInitParameter()</strong></td>
<td align="center">根据参数名获取 <strong>Servlet</strong> 的初始化参数值</td>
</tr>
<tr>
<td align="center"><strong>getInitParameterNames()</strong></td>
<td align="center">获取所有初始化参数的参数名的枚举</td>
</tr>
<tr>
<td align="center"><strong>getServletContext()</strong></td>
<td align="center">获取 <strong>Servlet</strong> 上下文对象，可以用于获取更全局的配置信息</td>
</tr>
<tr>
<td align="center"><strong>getServletName()</strong></td>
<td align="center">获取 <strong>Servlet</strong> 的名称</td>
</tr>
</tbody></table>
</li>
<li><p><strong>ServletRequest</strong>：定义了与 <strong>HTTP</strong> 请求相关的属性和方法，可以用于获取请求的信息和数据</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>getParameter()</strong></td>
<td align="center">根据参数名获取请求的参数值</td>
</tr>
<tr>
<td align="center"><strong>getParameterNames()</strong></td>
<td align="center">获取所有请求参数的参数名的枚举</td>
</tr>
<tr>
<td align="center"><strong>getParameterValues()</strong></td>
<td align="center">根据参数名获取请求参数的多个值</td>
</tr>
<tr>
<td align="center"><strong>getParameterMap()</strong></td>
<td align="center">获取所有请求参数的 <strong>Map</strong>，其中键为参数名，值为参数值数组</td>
</tr>
<tr>
<td align="center"><strong>getReader()</strong></td>
<td align="center">获取请求体的字符输入流，可以用于读取 <strong>POST</strong> 请求的内容</td>
</tr>
<tr>
<td align="center"><strong>getContentLength()</strong></td>
<td align="center">获取请求体的字节数</td>
</tr>
<tr>
<td align="center"><strong>getContentType()</strong></td>
<td align="center">获取请求体的内容类型</td>
</tr>
<tr>
<td align="center"><strong>getMethod()</strong></td>
<td align="center">获取 <strong>HTTP</strong> 请求的方法（<strong>GET</strong>、<strong>POST</strong>等）</td>
</tr>
<tr>
<td align="center"><strong>getProtocol()</strong></td>
<td align="center">获取请求的协议（例如，<strong>HTTP&#x2F;1.1</strong>）</td>
</tr>
<tr>
<td align="center"><strong>getRemoteAddr()</strong></td>
<td align="center">获取客户端的 <strong>IP</strong> 地址</td>
</tr>
<tr>
<td align="center"><strong>getSession()</strong></td>
<td align="center">获取与该请求关联的会话对象</td>
</tr>
<tr>
<td align="center"><strong>getInputStream()</strong></td>
<td align="center">获取请求体的字节输入流，可以用于读取 <strong>POST</strong> 请求的内容</td>
</tr>
<tr>
<td align="center"><strong>getRequestDispatcher()</strong></td>
<td align="center">获取请求分派器，用于在服务器内部转发请求</td>
</tr>
<tr>
<td align="center"><strong>setAttribute()</strong></td>
<td align="center">设置请求属性</td>
</tr>
<tr>
<td align="center"><strong>getAttribute()</strong></td>
<td align="center">根据属性名获取请求属性的值</td>
</tr>
</tbody></table>
</li>
<li><p><strong>ServletResponse</strong>：定义了与 <strong>HTTP</strong> 响应相关的属性和方法，可以用于设置响应的状态和内容</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>setContentType()</strong></td>
<td align="center">设置响应的内容类型</td>
</tr>
<tr>
<td align="center"><strong>getContentType()</strong></td>
<td align="center">获取响应的内容类型</td>
</tr>
<tr>
<td align="center"><strong>setContentLength()</strong></td>
<td align="center">设置响应体的长度</td>
</tr>
<tr>
<td align="center"><strong>getWriter()</strong></td>
<td align="center">获取用于向客户端发送字符数据的 <strong>PrintWriter</strong> 对象</td>
</tr>
<tr>
<td align="center"><strong>getOutputStream()</strong></td>
<td align="center">获取用于向客户端发送字节数据的 <strong>ServletOutputStream</strong> 对象</td>
</tr>
<tr>
<td align="center"><strong>setStatus()</strong></td>
<td align="center">设置响应的状态码</td>
</tr>
<tr>
<td align="center"><strong>sendRedirect()</strong></td>
<td align="center">将请求重定向到指定的 <strong>URL</strong></td>
</tr>
<tr>
<td align="center"><strong>addHeader()</strong></td>
<td align="center">添加一个响应头</td>
</tr>
<tr>
<td align="center"><strong>setHeader()</strong></td>
<td align="center">设置一个响应头</td>
</tr>
<tr>
<td align="center"><strong>addCookie()</strong></td>
<td align="center">添加一个 <strong>Cookie</strong> 到响应中</td>
</tr>
<tr>
<td align="center"><strong>setDateHeader()</strong></td>
<td align="center">设置一个响应头的日期值</td>
</tr>
<tr>
<td align="center"><strong>setIntHeader()</strong></td>
<td align="center">设置一个响应头的整数值</td>
</tr>
<tr>
<td align="center"><strong>setCharacterEncoding()</strong></td>
<td align="center">设置响应的字符编码</td>
</tr>
</tbody></table>
</li>
<li><p><strong>ServletContext</strong>：代表着整个 <strong>Web</strong> 应用程序，并提供了访问 <strong>Web</strong> 应用程序的上下文信息、共享数据和其他服务的方法，侧重于全局的配置，多个 <strong>ServletConfig</strong> 对应一个 <strong>ServletContext</strong>*</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>getInitParameter()</strong></td>
<td align="center">获取指定名称的初始化参数的值</td>
</tr>
<tr>
<td align="center"><strong>getInitParameterNames()</strong></td>
<td align="center">获取所有初始化参数的名称的枚举</td>
</tr>
<tr>
<td align="center"><strong>getAttribute()</strong></td>
<td align="center">获取指定名称的属性值</td>
</tr>
<tr>
<td align="center"><strong>setAttribute()</strong></td>
<td align="center">设置指定名称的属性值</td>
</tr>
<tr>
<td align="center"><strong>getAttributeNames()</strong></td>
<td align="center">获取所有属性的名称的枚举</td>
</tr>
<tr>
<td align="center"><strong>getServletContextName()</strong></td>
<td align="center">获取 <strong>Web</strong> 应用程序的名称</td>
</tr>
<tr>
<td align="center"><strong>getServerInfo()</strong></td>
<td align="center">获取 <strong>Web</strong> 容器的服务器信息</td>
</tr>
<tr>
<td align="center"><strong>getContextPath()</strong></td>
<td align="center">获取 <strong>Web</strong> 应用程序的上下文路径</td>
</tr>
<tr>
<td align="center"><strong>getResource()</strong></td>
<td align="center">获取指定路径的资源 <strong>URL</strong></td>
</tr>
<tr>
<td align="center"><strong>getRealPath()</strong></td>
<td align="center">获取指定路径在服务器上的实际路径</td>
</tr>
<tr>
<td align="center"><strong>getRequestDispatcher()</strong></td>
<td align="center">获取用于将请求转发到指定路径的请求调度器</td>
</tr>
<tr>
<td align="center"><strong>log()</strong></td>
<td align="center">将日志消息写入 <strong>ServletContext</strong> 日志文件</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="第三节Servlet的生命周期"><a href="#第三节Servlet的生命周期" class="headerlink" title="第三节	Servlet的生命周期"></a>第三节	Servlet的生命周期</h2><ul>
<li><p><strong>生命周期方法</strong></p>
<ul>
<li><strong>无参构造器</strong>：只会被调用一次，用于创建对象</li>
<li>**init()**：只在第一次创建时被调用一次，用于初始化数据，这些数据将被用于 <strong>Servlet</strong> 的整个生命周期</li>
<li><strong>service()<strong>：执行实际任务的主要方法，</strong>Web</strong> 服务器调用 <strong>service()</strong> 方法来处理来自客户端（浏览器）的请求，并把格式化的响应写回给客户端</li>
<li><strong>destroy()<strong>：只会在 <strong>Servlet</strong> 生命周期结束时被调用一次，</strong>destroy()</strong> 方法可以让 <strong>Servlet</strong> 关闭数据库连接、停止后台线程、把 <strong>Cookie</strong> 列表或点击计数器写入到磁盘，并执行其他类似的清理活动</li>
</ul>
</li>
<li><p><strong>示例图</strong></p>
<p>  <img src="C:\Users\86172\Pictures\Markdown\JavaWeb\生命周期.jpg"></p>
</li>
</ul>
<h2 id="第三节Servlet详解"><a href="#第三节Servlet详解" class="headerlink" title="第三节	Servlet详解"></a>第三节	Servlet详解</h2><ul>
<li><p><strong>web.xml 文件</strong></p>
<ul>
<li><p>添加映射使浏览器可以访问到 <strong>Servlet</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.baidu.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加初始化信息，可以用 <strong>ServletConfig</strong> 类中的方法访问</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>映射注解</strong>：使用 <strong>@WebServlet()</strong> 注解代替 <strong>web.xml</strong> 文件进行映射，括号内的参数即为映射路径</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo2&quot;)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Servlet</strong> 的层次结构：<strong>GenericServlet</strong> 实现 <strong>Servlet</strong> 接口，同时 <strong>HttpServlet</strong> 继承 <strong>GenericServlet</strong>，主要用于处理 <strong>HTTP</strong> 请求信息，主要包括 <strong>doGet</strong> 方法和 <strong>doPost</strong> 方法，分别用于处理 <strong>Get</strong> 请求和 <strong>Post</strong> 请求</p>
</li>
</ul>
<h2 id="第四节JSP介绍"><a href="#第四节JSP介绍" class="headerlink" title="第四节	JSP介绍"></a>第四节	JSP介绍</h2><ul>
<li><p><strong>JSP介绍</strong>：全称为<strong>Java Server Pages</strong>，是一种动态网页开发技术，本质上就是一个 <strong>Servlet</strong>，主要负责与用户交互，将最终的界面呈现给用户，是 <strong>HTML</strong>，<strong>CSS</strong> 和 <strong>JavaScript</strong> 的混合文件</p>
</li>
<li><p><strong>嵌入代码方式</strong></p>
<ul>
<li><p>直接嵌入 <strong>Java</strong> 代码</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    System.out.ln(<span class="string">&quot;hello,world&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用声明的方式定义 <strong>Java</strong> 的方法</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="string">&quot;hello,world&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>JSP</strong> 表达式直接在页面输出 <strong>Java</strong> 对象</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%=</span><br><span class="line">    str</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第五章JSP内置对象"><a href="#第五章JSP内置对象" class="headerlink" title="第五章	JSP内置对象"></a>第五章	JSP内置对象</h2><ul>
<li><p><strong>JSP 内置对象</strong></p>
<table>
<thead>
<tr>
<th align="center">内置对象</th>
<th align="center">产生类</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>request</strong></td>
<td align="center"><strong>HttpServletRequest</strong></td>
<td align="center">表示一次请求</td>
</tr>
<tr>
<td align="center"><strong>response</strong></td>
<td align="center"><strong>HttpServletResponse</strong></td>
<td align="center">表示一次响应</td>
</tr>
<tr>
<td align="center"><strong>pageContext</strong></td>
<td align="center"><strong>PageContext</strong></td>
<td align="center">表示页面上下文，用于获取页面信息</td>
</tr>
<tr>
<td align="center"><strong>session</strong></td>
<td align="center"><strong>HttpSession</strong></td>
<td align="center">表示一次会话，用于保存用户信息</td>
</tr>
<tr>
<td align="center"><strong>application</strong></td>
<td align="center"><strong>ServletContext</strong></td>
<td align="center">表示当前 <strong>Web</strong> 应用，用于保存所有用户共享信息</td>
</tr>
<tr>
<td align="center"><strong>config</strong></td>
<td align="center"><strong>ServletConfig</strong></td>
<td align="center">表示当前 <strong>JSP</strong> 的 <strong>ServletConfig</strong> 对象，用于获取当前 <strong>Servlet</strong> 的信息</td>
</tr>
<tr>
<td align="center"><strong>out</strong></td>
<td align="center"><strong>JspWriter</strong></td>
<td align="center">向页面输出内容</td>
</tr>
<tr>
<td align="center"><strong>page</strong></td>
<td align="center"><strong>Servlet</strong></td>
<td align="center">当前 <strong>JSP</strong> 对应的 <strong>Servlet</strong> 对象</td>
</tr>
<tr>
<td align="center"><strong>excerption</strong></td>
<td align="center"><strong>Exception</strong></td>
<td align="center"><strong>JSP</strong> 页面发生的异常</td>
</tr>
</tbody></table>
</li>
<li><p><strong>request对象常用方法</strong></p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>getParameter()</strong></td>
<td align="center">获取客户端传来的参数</td>
</tr>
<tr>
<td align="center"><strong>setAttribute()</strong></td>
<td align="center">通过键值对的形式保存数据</td>
</tr>
<tr>
<td align="center"><strong>getAttritube()</strong></td>
<td align="center">通过键取出值</td>
</tr>
<tr>
<td align="center"><strong>getRequestDispatcher()</strong></td>
<td align="center">返回一个对象，用于请求转发(转发是服务器端进行跳转，地址栏不会转换，数据不会丢失)</td>
</tr>
<tr>
<td align="center"><strong>getParameterValues()</strong></td>
<td align="center">获取客户端传来的多个同名参数</td>
</tr>
<tr>
<td align="center"><strong>setCharacterEncoding()</strong></td>
<td align="center">指定字符编码</td>
</tr>
</tbody></table>
</li>
<li><p><strong>response对象常用方法</strong></p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>setContentType()</strong></td>
<td align="center">设置响应的内容类型</td>
</tr>
<tr>
<td align="center"><strong>setStatus()</strong></td>
<td align="center">设置响应的状态码</td>
</tr>
<tr>
<td align="center"><strong>sendRedirect()</strong></td>
<td align="center">重定向到指定的 <strong>URL</strong>(重定向是浏览器端进行跳转，地址栏会发生转换，数据会丢失)</td>
</tr>
<tr>
<td align="center"><strong>setHeader()</strong></td>
<td align="center">设置响应头的指定名称的值</td>
</tr>
<tr>
<td align="center"><strong>addHeader()</strong></td>
<td align="center">添加响应头的指定名称和值</td>
</tr>
<tr>
<td align="center"><strong>getWriter()</strong></td>
<td align="center">获取一个 <strong>PrintWriter</strong> 对象，用于向客户端输出文本</td>
</tr>
<tr>
<td align="center"><strong>getOutputStream()</strong></td>
<td align="center">获取一个 <strong>ServletOutputStream</strong> 对象，用于向客户端输出二进制数据</td>
</tr>
</tbody></table>
</li>
<li><p><strong>session对象常用方法</strong></p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>getId()</strong></td>
<td align="center">获取 <strong>session ID</strong></td>
</tr>
<tr>
<td align="center"><strong>setMaxInactiveInterval()</strong></td>
<td align="center">设置最大 <strong>session</strong> 失效时间</td>
</tr>
<tr>
<td align="center"><strong>getMaxInactiveInterval()</strong></td>
<td align="center">获取最大 <strong>session</strong> 失效时间</td>
</tr>
<tr>
<td align="center"><strong>invalidate()</strong></td>
<td align="center">设置 <strong>session</strong> 立即失效</td>
</tr>
<tr>
<td align="center"><strong>setAttribute()</strong></td>
<td align="center">通过键值对的形式保存数据</td>
</tr>
<tr>
<td align="center"><strong>getAttribute()</strong></td>
<td align="center">通过键取出值</td>
</tr>
<tr>
<td align="center"><strong>removeAttribute()</strong></td>
<td align="center">通过键删除对应的数据</td>
</tr>
</tbody></table>
</li>
<li><p><strong>内置对象的作用域</strong></p>
<ul>
<li><strong>page</strong>：只在当前页面有效</li>
<li><strong>request</strong>：在一次请求内有效</li>
<li><strong>session</strong>：在一次会话内有效</li>
<li><strong>application</strong>：在整个 <strong>Web</strong> 应用内都有效</li>
</ul>
</li>
</ul>
<h2 id="第六章Cookie简介"><a href="#第六章Cookie简介" class="headerlink" title="第六章	Cookie简介"></a>第六章	Cookie简介</h2><ul>
<li><p><strong>创建 Cookie</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>读取 Cookie</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie[] cookies = request.getCookies();</span><br><span class="line"><span class="keyword">for</span>(Cookie cookie : cookies)&#123;</span><br><span class="line">    <span class="keyword">if</span>(cookie.getName().equals(<span class="string">&quot;name&quot;</span>))&#123;</span><br><span class="line">        out.write(cookie.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Cookie常用方法</strong></p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>setMaxAge()</strong></td>
<td align="center">设置 <strong>Cookie</strong> 有效时间</td>
</tr>
<tr>
<td align="center"><strong>getMaxAge()</strong></td>
<td align="center">获取 <strong>Cookie</strong> 有效时间，默认时间为 -1</td>
</tr>
<tr>
<td align="center"><strong>getName()</strong></td>
<td align="center">获取 <strong>Cookie</strong> 的 <strong>name</strong></td>
</tr>
<tr>
<td align="center"><strong>setValue()</strong></td>
<td align="center">获取 <strong>Cookie</strong> 的 <strong>value</strong></td>
</tr>
</tbody></table>
</li>
<li><p><strong>Cookie</strong> 和 <strong>Session</strong> 的区别</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">存储位置</th>
<th align="center">数据类型</th>
<th align="center">存储时间</th>
<th align="center">信息类型</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>Cookie</strong></td>
<td align="center">浏览器</td>
<td align="center"><strong>String</strong></td>
<td align="center">长期保存在浏览器中</td>
<td align="center">保存不重要信息</td>
</tr>
<tr>
<td align="center"><strong>Session</strong></td>
<td align="center">服务器</td>
<td align="center"><strong>Object</strong></td>
<td align="center">随着绘画的结束而销毁</td>
<td align="center">可以保存重要信息</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="第七章EL表达式"><a href="#第七章EL表达式" class="headerlink" title="第七章	EL表达式"></a>第七章	EL表达式</h2><ul>
<li><p><strong>EL表达式简介</strong>：全称为 <strong>Expression Language</strong>，即 <strong>JSP</strong> 表达式语言，用来更方便的读取对象</p>
</li>
<li><p><strong>EL表达式基本语法</strong>：可以非常便捷地读取对象的数据</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$&#123;变量名&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>读取优先级</strong></p>
<ul>
<li><p><strong>默认查找</strong>：<strong>EL</strong> 表达式读取数据的优先级正好与对象的作用域相反，<strong>page</strong> &gt; <strong>request</strong> &gt; <strong>session</strong> &gt; <strong>application</strong></p>
</li>
<li><p><strong>指定查找</strong>：添加前缀对象名</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$&#123;sessionScope.name&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第八章JSTL简介"><a href="#第八章JSTL简介" class="headerlink" title="第八章	JSTL简介"></a>第八章	JSTL简介</h2><ul>
<li><p><strong>JSTL简介</strong>：全称为 <strong>JSP Standard Tag Library</strong>，即 <strong>JSP</strong> 标准标签库，是一个 <strong>JSP</strong> 标签集合，它封装了 <strong>JSP</strong> 应用的通用核心功能，为开发者提供一系列的可以完成逻辑处理的标签，使代码更加简洁</p>
</li>
<li><p><strong>JSTL 的使用步骤</strong></p>
<ul>
<li><p>导入两个 <strong>jar</strong> 包（<strong>standard.jar</strong> 和 <strong>jstl.jar</strong>）</p>
</li>
<li><p>在 <strong>JSP</strong> 页面开始处导入标签库</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>JSTL 标签的使用</strong></p>
<ul>
<li><p>循环遍历，类似于增强 <strong>for</strong> 循环语句</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123;list&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;user&quot;</span>&gt;&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加和修改数据，类似于 <strong>setAttribute()</strong> 方法</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;Tom&quot;</span>&gt;&lt;/c:set&gt;</span><br><span class="line">&lt;c:set target=<span class="string">&quot;$&#123;user&#125;&quot;</span> property=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;Jack&quot;</span>&gt;&lt;/c:set&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>输出数据</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;c:out value=<span class="string">&quot;$&#123;name&#125;&quot;</span> <span class="keyword">default</span>=<span class="string">&quot;未定义&quot;</span>&gt;&lt;/c:out&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除数据</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;c:remove <span class="keyword">var</span>=<span class="string">&quot;name&quot;</span> scope=<span class="string">&quot;request&quot;</span>&gt;&lt;/c:remove&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第九章Filter过滤器"><a href="#第九章Filter过滤器" class="headerlink" title="第九章	Filter过滤器"></a>第九章	Filter过滤器</h2><ul>
<li><p><strong>Filter简介</strong>：<strong>Servlet</strong> 中的一项使用的技术，通过 <strong>Filter</strong> 技术，对 <strong>Web</strong> 服务器管理的所有资源进行拦截，从而实现一些特殊的功能</p>
</li>
<li><p><strong>过滤器的使用</strong>：实现 <strong>Filter</strong> 接口并实现其中的 <strong>doFilter</strong> 方法</p>
</li>
<li><p><strong>过滤器映射</strong></p>
<ul>
<li><p><strong>web.xml 文件映射</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.baidu.servlet.HelloFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>注解映射</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebFilter(&quot;/demo&quot;)</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>filterChain类</strong>：表示过滤器链，实现 <strong>doFilter</strong> 方法时需要将 <strong>ServletRequest</strong> 和 <strong>ServletResponse</strong> 添加到 <strong>filterChain</strong> 中，否则会导致整个过滤器无法使用</p>
</li>
</ul>
<h2 id="第十章文件的上传与下载"><a href="#第十章文件的上传与下载" class="headerlink" title="第十章	文件的上传与下载"></a>第十章	文件的上传与下载</h2><ul>
<li><strong>文件上传步骤</strong><ul>
<li>设置类型为 <strong>file</strong> 的 <strong>input</strong> 标签，使用 <strong>post</strong> 的请求方式</li>
<li>将表单的 <strong>enctype</strong> 属性设置为 <strong>multipart&#x2F;form-data</strong>，使用二进制的形式传输</li>
<li>使用 <strong>getInputSream()</strong> 将上传的文件转换为字节流，根据需要再转换为字符流</li>
<li>在 <strong>out</strong> 文件夹新建路径，并使用 <strong>getServletContext()</strong> 方法和 <strong>getRealPath()</strong> 获取绝对路径</li>
<li>使用输出流将得到的字符流写入服务端指定的文件夹中</li>
</ul>
</li>
<li><strong>fileupload组件的使用</strong><ul>
<li>导入两个 <strong>jar</strong> 包</li>
<li>使用 <strong>fileupload</strong> 组件将所有的请求信息都构建为 <strong>FileItem</strong> 对象，再根据需要来操作文件完成上传</li>
</ul>
</li>
<li><strong>文件下载的步骤</strong><ul>
<li>在 <strong>Servlet</strong> 中设置响应方式和下载后的文件名</li>
<li>获取输出流，将文件下载到客户端中</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Jakarta</title>
    <url>/2024/01/28/Jakarta/</url>
    <content><![CDATA[<h2 id="第一章Tomcat服务器"><a href="#第一章Tomcat服务器" class="headerlink" title="第一章	Tomcat服务器"></a>第一章	Tomcat服务器</h2><ul>
<li><strong>Tomcat简介</strong>：<strong>Apache</strong> 软件基金会 <strong>Apache Software Foundation</strong> 的 <strong>Jakarta</strong> 项目中的一个核心项目，由<strong>Apache</strong>、<strong>Sun</strong> 和其他一些公司及个人共同开发而成，最新的 <strong>Servlet</strong> 和 <strong>JSP</strong> 规范能在 <strong>Tomcat</strong> 中得到体现，因为 <strong>Tomcat</strong> 技术先进、性能稳定，而且免费，因而深受 <strong>Java</strong> 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的 <strong>Web</strong> 应用服务器</li>
<li><strong>Tomcat文件夹信息</strong><ul>
<li><strong>bin</strong>：二进制可执行文件，<strong>startup.bat</strong>用来启动 <strong>Tomcat</strong>，<strong>shutdawn.bat</strong> 用来停止 <strong>Tomcat</strong></li>
<li><strong>conf</strong>：配置文件目录<ul>
<li><strong>server.xml</strong>：配置整个服务器信息，例如修改端口号</li>
<li><strong>tomcat-users.xml</strong>：存储 <strong>tomcat</strong> 用户的文件，例如用户名，密码，以及用户的角色信息</li>
<li><strong>web.xml</strong>：部署描述符文件，这个文件中注册了文档类型，用来说明文档的内容是什么类型的</li>
<li><strong>context.xml</strong>：对所有应用的统一配置</li>
</ul>
</li>
<li><strong>lib</strong>：<strong>Tomcat</strong>的类库，里面是 <strong>jar</strong> 文件</li>
<li><strong>logs</strong>：这个目录中都是日志文件，记录了 <strong>Tomcat</strong> 启动，关闭和错误的信息</li>
<li><strong>temp</strong>：存放 <strong>Tomcat</strong> 的临时文件，这个目录下的东西可以在停止 <strong>Tomcat</strong> 后删除</li>
<li><strong>webapps</strong>：存放 <strong>web</strong> 项目的目录，其中 <strong>ROOT</strong> 是一个特殊的默认项目</li>
<li><strong>work</strong>：运行时生成的文件，最终运行的文件都在这里</li>
<li><strong>LICENSE</strong>：许可证</li>
<li><strong>NOTICE</strong>：说明文件</li>
</ul>
</li>
<li><strong>开发项目目录结构说明</strong><ul>
<li><strong>src</strong>：存放 <strong>Java</strong> 源代码的目录</li>
<li><strong>web</strong>：存放的是需要部署到服务器的文件</li>
<li><strong>WEB-INF</strong>：这个目录下的文件，是不能被客户端直接访问的<ul>
<li><strong>lib</strong>：用于存放该工程用到的库</li>
<li><strong>web.xml</strong>：<strong>web</strong> 工程的配置文件，完成用户请求的逻辑名称到真正的 <strong>servlet</strong> 类的映射</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="第二章Servlet组件"><a href="#第二章Servlet组件" class="headerlink" title="第二章	Servlet组件"></a>第二章	Servlet组件</h2><h2 id="2-1Servlet简介"><a href="#2-1Servlet简介" class="headerlink" title="2.1	Servlet简介"></a>2.1	Servlet简介</h2><ul>
<li><p><strong>操作步骤</strong></p>
<ul>
<li><p>搭建 <strong>Web</strong> 开发环境，创建动态 <strong>Web</strong> 工程</p>
</li>
<li><p>创建 <strong>javax.servlet.Servlet</strong> 接口的实现类</p>
</li>
<li><p>在 <strong>service()</strong> 方法中编写代码输出响应信息</p>
</li>
<li><p>在 <strong>web.xml</strong> 配置文件中注册</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 声明一个Servlet，配置的是Servlet的类信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 这是Servlet的别名，一个名字对应一个Servlet。相当于变量名 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyFirstServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- Servlet的全类名，服务器会根据全类名找到这个Servlet --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.atguigu.servlet.MyFirstServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 建立Servlet的请求映射信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- Servlet的别名，说明这个Servlet将会响应下面url-pattern的请求 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyFirstServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- Servlet响应的请求路径。如果访问这个路径，这个Servlet就会响应 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/MyFirstServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="2-2Servlet生命周期"><a href="#2-2Servlet生命周期" class="headerlink" title="2.2	Servlet生命周期"></a>2.2	Servlet生命周期</h2><ul>
<li><p><strong>Servlet 生命周期的主要过程</strong></p>
<ul>
<li><strong>Servlet</strong> 对象的创建：默认情况下，<strong>Servlet</strong> 容器第一次收到 <strong>HTTP</strong> 请求时使用反射技术创建对应 <strong>Servlet</strong> 对象</li>
<li><strong>Servlet</strong> 对象初始化：<strong>Servlet</strong> 容器创建 <strong>Servlet</strong> 对象之后，会调用 <strong>init()</strong> 方法执行一些初始化操作，例如读取一些资源文件、配置文件，或建立某种连接</li>
<li>处理请求：在 <strong>javax.servlet.Servlet</strong> 接口中，定义了 **service()**方法处理 <strong>HTTP</strong> 请求，在每次接到请求后都会执行</li>
<li><strong>Servlet</strong> 对象销毁：服务器重启、服务器停止执行或 <strong>Web</strong> 应用卸载时会销毁 <strong>Servlet</strong> 对象，会调用 <strong>destroy()</strong> 方法用于销毁之前执行一些诸如释放缓存、关闭连接、保存内存数据持久化等操作</li>
</ul>
</li>
<li><p><strong>Servlet请求过程</strong></p>
<ul>
<li>第一次请求：调用构造器，创建对象，执行 <strong>init()</strong> 方法，执行 <strong>service()</strong> 方法</li>
<li>后面请求：执行 <strong>service()</strong> 方法，对象销毁前，执行 <strong>destroy()</strong> 方法</li>
</ul>
</li>
</ul>
<h2 id="2-3Servlet接口"><a href="#2-3Servlet接口" class="headerlink" title="2.3	Servlet接口"></a>2.3	Servlet接口</h2><ul>
<li><p><strong>ServletConfig接口</strong>：封装了 <strong>Servlet</strong> 配置信息，每一个 <strong>Servlet</strong> 都有一个唯一对应的 <strong>ServletConfig</strong> 对象，代表当前 <strong>Web</strong> 应用的<strong>ServletContext</strong> 对象也封装到了 <strong>ServletConfig</strong> 对象中，使 <strong>ServletConfig</strong> 对象成为了获取 <strong>ServletContext</strong> 对象的一座桥梁</p>
</li>
<li><p><strong>ServletConfig对象的主要功能</strong></p>
<ul>
<li>获取 <strong>Servlet</strong> 名称：<strong>getServletName()</strong></li>
<li>获取全局上下文 <strong>ServletContext</strong> 对象：<strong>getServletContext()</strong></li>
<li>获取 <strong>Servlet</strong> 初始化参数：<strong>getInitParameter(String) &#x2F; getInitParameterNames()</strong></li>
</ul>
</li>
<li><p><strong>ServletContext接口</strong>：<strong>Web</strong> 容器在启动时为每个 <strong>Web</strong> 应用程序创建唯一对应的 <strong>ServletContext</strong> 对象，代表当前 <strong>Web</strong> 应用，一个<strong>Web</strong> 应用程序中的所有 <strong>Servlet</strong> 都共享同一个 <strong>ServletContext</strong> 对象，对象由 <strong>Servlet</strong> 容器在项目启动时创建，通过 <strong>ServletConfig</strong> 对象的 <strong>getServletContext()</strong> 方法获取，在项目卸载时销毁</p>
</li>
<li><p><strong>ServletContext对象的主要功能</strong></p>
<ul>
<li><p>获取项目的上下文路径(带&#x2F;的项目名): <strong>getContextPath()</strong></p>
</li>
<li><p>获取虚拟路径所映射的本地真实路径：<strong>getRealPath(String path)</strong></p>
</li>
<li><p>作为域对象共享数据</p>
</li>
</ul>
</li>
</ul>
<h2 id="2-4Servlet技术体系"><a href="#2-4Servlet技术体系" class="headerlink" title="2.4	Servlet技术体系"></a>2.4	Servlet技术体系</h2><ul>
<li><p><strong>GenericServlet抽象类</strong>：<strong>GenericServlet</strong> 对 <strong>Servlet</strong> 功能进行了封装和完善，重写了 <strong>init()</strong> 方法，用来获取 <strong>ServletConfig</strong> 对象，<br>  如果想要进行初始化操作，可以重写 <strong>GenericServlet</strong> 提供的无参的 <strong>init()</strong> 方法，这样就不会影响 <strong>ServletConfig</strong> 对象的获取</p>
</li>
<li><p><strong>HttpServlet抽象类</strong>：专门用来处理 <strong>Http</strong> 请求的 <strong>Servlet</strong>，对 <strong>GenericServlet</strong> 进行进一步的封装和扩展，在 <strong>service()</strong> 方法中，将<strong>ServletRequest</strong> 和 <strong>ServletResponse</strong> 转换为 <strong>HttpServletRequest</strong> 和 <strong>HttpServletResponse</strong>，根据不同 <strong>HTTP</strong> 请求类型调用专门的方法进行处理，重写 <strong>doGet()</strong> 和 <strong>doPost()</strong> 方法实现请求处理</p>
</li>
</ul>
<h2 id="2-5处理请求响应"><a href="#2-5处理请求响应" class="headerlink" title="2.5	处理请求响应"></a>2.5	处理请求响应</h2><ul>
<li><p><strong>HttpServletRequest接口</strong>：该接口是 <strong>ServletRequest</strong> 接口的子接口，封装了 <strong>HTTP</strong> 请求的相关信息</p>
</li>
<li><p><strong>HttpServletRequest对象的主要功能</strong></p>
<ul>
<li><p>获取请求参数</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] soccerTeams = request.getParameterValues(<span class="string">&quot;soccerTeam&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; soccerTeams.length; i++)&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;team &quot;</span>+i+<span class="string">&quot;=&quot;</span>+soccerTeams[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取 <strong>url</strong> 地址参数</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getContextPath();</span><br><span class="line">System.out.println(<span class="string">&quot;上下文路径：&quot;</span>+path);</span><br><span class="line">System.out.println(<span class="string">&quot;端口号：&quot;</span>+request.getServerPort());</span><br><span class="line">System.out.println(<span class="string">&quot;主机名：&quot;</span>+request.getServerName());</span><br><span class="line">System.out.println(<span class="string">&quot;协议：&quot;</span>+request.getScheme());</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取请求头信息</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">header</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;User-Agent&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;user-agent:&quot;</span>+header);</span><br><span class="line"><span class="type">String</span> <span class="variable">referer</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Referer&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;上个页面的地址：&quot;</span>+referer);</span><br></pre></td></tr></table></figure>
</li>
<li><p>请求的转发：将请求转发给另外一个 <strong>URL</strong> 地址</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RequestDispatcher</span> <span class="variable">dispatcher</span> <span class="operator">=</span> request.getRequestDispatcher(<span class="string">&quot;success.html&quot;</span>);</span><br><span class="line">dispatcher.forward(request, response);</span><br></pre></td></tr></table></figure>
</li>
<li><p>向请求域中保存数据</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.setAttribute(<span class="string">&quot;attrName&quot;</span>, <span class="string">&quot;attrValueInRequest&quot;</span>);</span><br><span class="line">request.getRequestDispatcher(<span class="string">&quot;/ReceiveServlet&quot;</span>).forward(request, response);</span><br><span class="line"><span class="type">Object</span> <span class="variable">attribute</span> <span class="operator">=</span> request.getAttribute(<span class="string">&quot;attrName&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;attrValue=&quot;</span>+attribute);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>HttpServletResponse接口</strong>：该接口是 <strong>ServletResponse</strong> 接口的子接口，封装了服务器针对于HTTP响应的相关信息</p>
</li>
<li><p><strong>HttpServletResponse对象的主要功能</strong></p>
<ul>
<li><p>使用 <strong>PrintWriter</strong> 对象向浏览器输出数据</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> res.getWriter();</span><br><span class="line">writer.write(<span class="string">&quot;Servlet response&quot;</span>);</span><br><span class="line">writer.close();</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置响应头：响应头就是浏览器解析页面的配置</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>重定向请求：实现请求重定向</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.sendRedirect(“success.html”);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="2-6请求的转发与重定向"><a href="#2-6请求的转发与重定向" class="headerlink" title="2.6	请求的转发与重定向"></a>2.6	请求的转发与重定向</h2><ul>
<li><p><strong>请求的转发</strong>：在服务器内部将请求交给其它组件继续处理</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RequestDispatcher</span> <span class="variable">dispatcher</span> <span class="operator">=</span> request.getRequestDispatcher(<span class="string">&quot;/index.html&quot;</span>);</span><br><span class="line">dispatcher.forward(request, response);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>请求的重定向</strong>：浏览器访问另外一个资源，整个过程中浏览器端会发出两次请求，且在浏览器地址栏里面能够看到地址的改变</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.sendRedirect(<span class="string">&quot;index.html&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>转发和重定向的对比</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>转发</th>
<th>重定向</th>
</tr>
</thead>
<tbody><tr>
<td><strong>浏览器感知</strong></td>
<td>在服务器内部完成，浏览器感知不到</td>
<td>服务器以302状态码通知浏览器访问新地址，浏览器有感知</td>
</tr>
<tr>
<td><strong>浏览器地址栏</strong></td>
<td>不改变</td>
<td>改变</td>
</tr>
<tr>
<td><strong>整个过程发送请求次数</strong></td>
<td>一次</td>
<td>两次</td>
</tr>
<tr>
<td><strong>能否共享request对象数据</strong></td>
<td>能</td>
<td>否</td>
</tr>
<tr>
<td><strong>WEB-INF下的资源</strong></td>
<td>能访问</td>
<td>不能访问</td>
</tr>
<tr>
<td><strong>目标资源</strong></td>
<td>必须是当前 <strong>web</strong> 应用中的资源</td>
<td>不局限于当前 <strong>web</strong> 应用</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="2-7请求与响应中的字符编码设置"><a href="#2-7请求与响应中的字符编码设置" class="headerlink" title="2.7	请求与响应中的字符编码设置"></a>2.7	请求与响应中的字符编码设置</h2><ul>
<li><p><strong>请求乱码</strong></p>
<ul>
<li><p><strong>GET</strong> 请求：在 <strong>server.xml</strong> 文件修改 <strong>Connector</strong> 标签，添加 <strong>URIEncoding&#x3D;”utf-8”</strong> 属性</p>
</li>
<li><p><strong>POST</strong> 请求</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>响应乱码</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第三章Thymeleaf"><a href="#第三章Thymeleaf" class="headerlink" title="第三章	Thymeleaf"></a>第三章	Thymeleaf</h2><h2 id="3-1Thymeleaf基本语法"><a href="#3-1Thymeleaf基本语法" class="headerlink" title="3.1	Thymeleaf基本语法"></a>3.1	Thymeleaf基本语法</h2><ul>
<li><p><strong>MVC概念</strong>：在表述层开发中运用的一种设计理念，主张把封装数据的<strong>模型</strong>、显示用户界面的<strong>视图</strong>、协调调度的<strong>控制器</strong>分开</p>
<ul>
<li><strong>M</strong>：<strong>Model</strong> 模型（<strong>javabean</strong>）</li>
<li><strong>V</strong>：<strong>View</strong>视图（<strong>html</strong> + 动态数据）</li>
<li><strong>C</strong>：<strong>Controller</strong>控制器（<strong>servlet</strong>）</li>
</ul>
</li>
<li><p><strong>Thymeleaf概念</strong>：一款用于渲染 <strong>XML&#x2F;XHTML&#x2F;HTML5</strong> 内容的模板引擎，类似 <strong>JSP</strong>，<strong>Velocity</strong>，<strong>FreeMaker</strong> 等， 它可以轻易的与<strong>Spring MVC</strong> 等 <strong>Web</strong> 框架进行集成作为 <strong>Web</strong> 应用的模板引擎，它的主要作用是在静态页面上渲染显示动态数据</p>
</li>
<li><p><strong>视图</strong></p>
<ul>
<li>物理视图：请求转发时使用的完整的转发路径，例如 <strong>&#x2F;pages&#x2F;user&#x2F;login_success.html</strong></li>
<li>逻辑视图：物理视图去除视图前缀和视图后缀后的路径 <strong>login_success</strong></li>
</ul>
</li>
<li><p><strong>Thymeleaf基本步骤</strong></p>
<ul>
<li><p>导入 <strong>jar</strong> 包</p>
</li>
<li><p>配置上下文参数</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在上下文参数中配置视图前缀和视图后缀 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>view-prefix<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/view/<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>view-suffix<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>.html<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建 <strong>Servlet</strong> 基类</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ViewBaseServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> TemplateEngine templateEngine;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="comment">// 1.获取ServletContext对象</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        <span class="comment">// 2.创建Thymeleaf解析器对象</span></span><br><span class="line">        <span class="type">ServletContextTemplateResolver</span> <span class="variable">templateResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletContextTemplateResolver</span>(servletContext);</span><br><span class="line">        <span class="comment">// 3.给解析器对象设置参数</span></span><br><span class="line">        <span class="comment">// ①HTML是默认模式，明确设置是为了代码更容易理解</span></span><br><span class="line">        templateResolver.setTemplateMode(TemplateMode.HTML);</span><br><span class="line">        <span class="comment">// ②设置前缀</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">viewPrefix</span> <span class="operator">=</span> servletContext.getInitParameter(<span class="string">&quot;view-prefix&quot;</span>);</span><br><span class="line">        templateResolver.setPrefix(viewPrefix);</span><br><span class="line">        <span class="comment">// ③设置后缀</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">viewSuffix</span> <span class="operator">=</span> servletContext.getInitParameter(<span class="string">&quot;view-suffix&quot;</span>);</span><br><span class="line">        templateResolver.setSuffix(viewSuffix);</span><br><span class="line">        <span class="comment">// ④设置缓存过期时间（毫秒）</span></span><br><span class="line">        templateResolver.setCacheTTLMs(<span class="number">60000L</span>);</span><br><span class="line">        <span class="comment">// ⑤设置是否缓存</span></span><br><span class="line">        templateResolver.setCacheable(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// ⑥设置服务器端编码方式</span></span><br><span class="line">        templateResolver.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 4.创建模板引擎对象</span></span><br><span class="line">        templateEngine = <span class="keyword">new</span> <span class="title class_">TemplateEngine</span>();</span><br><span class="line">        <span class="comment">// 5.给模板引擎对象设置模板解析器</span></span><br><span class="line">        templateEngine.setTemplateResolver(templateResolver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">processTemplate</span><span class="params">(String templateName, HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1.设置响应体内容类型和字符集</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.创建WebContext对象</span></span><br><span class="line">        <span class="type">WebContext</span> <span class="variable">webContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebContext</span>(req, resp, getServletContext());</span><br><span class="line">        <span class="comment">// 3.处理模板数据</span></span><br><span class="line">        templateEngine.process(templateName, webContext, resp.getWriter());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>页面代码示例</p>
</li>
<li><p>服务端代码示例</p>
</li>
</ul>
</li>
<li><p><strong>Thymeleaf基本语法</strong></p>
<ul>
<li>th名称空间</li>
<li>表达式语法</li>
<li>域对象</li>
<li>获取请求参数</li>
<li>内置对象</li>
<li>OGNL</li>
<li>分支与迭代</li>
<li>其他模板文件</li>
</ul>
</li>
</ul>
<h2 id="3-2Thymeleaf增删改查操作"><a href="#3-2Thymeleaf增删改查操作" class="headerlink" title="3.2	Thymeleaf增删改查操作"></a>3.2	Thymeleaf增删改查操作</h2><ul>
<li>数据建模</li>
<li>总体架构</li>
<li>搭建环境</li>
<li>需要实现的功能列表</li>
<li>显示首页功能</li>
<li>显示列表</li>
<li>删除功能</li>
<li>前往新增信息的表单页面</li>
<li>执行保存</li>
<li>前往修改信息的表单页面</li>
<li>执行更新</li>
</ul>
<h2 id="第四章会话"><a href="#第四章会话" class="headerlink" title="第四章	会话"></a>第四章	会话</h2><h2 id="4-1会话"><a href="#4-1会话" class="headerlink" title="4.1	会话"></a>4.1	会话</h2><h2 id="4-2Cookie"><a href="#4-2Cookie" class="headerlink" title="4.2	Cookie"></a>4.2	Cookie</h2><h2 id="4-3Session"><a href="#4-3Session" class="headerlink" title="4.3	Session"></a>4.3	Session</h2><h1 id="第五章异步请求"><a href="#第五章异步请求" class="headerlink" title="第五章	异步请求"></a>第五章	异步请求</h1><h2 id="5-1Ajax"><a href="#5-1Ajax" class="headerlink" title="5.1	Ajax"></a>5.1	Ajax</h2><h2 id="5-2Axios"><a href="#5-2Axios" class="headerlink" title="5.2	Axios"></a>5.2	Axios</h2><h1 id="第六章Filter"><a href="#第六章Filter" class="headerlink" title="第六章	Filter"></a>第六章	Filter</h1><h2 id="6-1Filter"><a href="#6-1Filter" class="headerlink" title="6.1	Filter"></a>6.1	Filter</h2><h2 id="6-2Listener"><a href="#6-2Listener" class="headerlink" title="6.2	Listener"></a>6.2	Listener</h2>]]></content>
  </entry>
  <entry>
    <title>MyBatis</title>
    <url>/2024/01/28/MyBatis/</url>
    <content><![CDATA[<h2 id="第一节Mybatis简介"><a href="#第一节Mybatis简介" class="headerlink" title="第一节	Mybatis简介"></a>第一节	Mybatis简介</h2><ul>
<li><strong>Mybatis简介</strong>：<strong>MyBatis</strong> 最初是 <strong>Apache</strong> 的一个开源项目 <strong>iBatis</strong>, 后迁移到了 <strong>Google</strong> <strong>Code</strong>，正式更名为<strong>MyBatis</strong>，<strong>Mybatis</strong> 是一个基于 <strong>Java</strong> 的持久层框架，提供的持久层框架包括 <strong>SQL Maps</strong> 和 <strong>Data Access Objects</strong></li>
<li><strong>MyBatis的特性</strong><ul>
<li>支持定制化 <strong>SQL</strong>、存储过程以及高级映射的优秀的持久层框架</li>
<li>避免了几乎所有的 <strong>JDBC</strong> 代码和手动设置参数以及获取结果集</li>
<li>可以使用简单的 <strong>XML</strong> 或注解用于配置和原始映射，将接口和 <strong>Java</strong> 的 <strong>POJO</strong> 映射成数据库中的记录</li>
<li>半自动的  <strong>ORM</strong> 框架</li>
</ul>
</li>
<li><strong>技术优势</strong><ul>
<li><strong>JDBC</strong> 的特点：<ul>
<li><strong>SQL</strong> 夹杂在 <strong>Java</strong> 代码中耦合度高，导致硬编码内伤  </li>
<li>维护不易且实际开发需求中 <strong>SQL</strong> 有变化，频繁修改的情况多见  </li>
<li>代码冗长，开发效率低</li>
</ul>
</li>
<li><strong>Hibernate</strong> 和 <strong>JPA</strong> 的特点：<ul>
<li>操作简便，开发效率高  </li>
<li>程序中的长难复杂 <strong>SQL</strong> 需要绕过框架  </li>
<li>内部自动生产的 <strong>SQL</strong>，不容易做特殊优化  </li>
<li>基于全映射的全自动框架，大量字段的 <strong>POJO</strong> 进行部分映射时比较困难</li>
<li>反射操作太多，导致数据库性能下降</li>
</ul>
</li>
<li><strong>MyBatis</strong> 的特点：<ul>
<li>轻量级，性能出色  </li>
<li><strong>SQL</strong> 和 <strong>Java</strong> 编码分开，功能边界清晰，<strong>Java</strong> 代码专注业务、<strong>SQL</strong> 语句专注数据  </li>
<li>开发效率稍逊于 <strong>HIbernate</strong>，但是完全能够接受</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="第二节Mybatis的搭建"><a href="#第二节Mybatis的搭建" class="headerlink" title="第二节	Mybatis的搭建"></a>第二节	Mybatis的搭建</h2><h3 id="2-1搭建项目"><a href="#2-1搭建项目" class="headerlink" title="2.1	搭建项目"></a>2.1	搭建项目</h3><ul>
<li><p><strong>创建 Maven 工程</strong></p>
<ul>
<li><p><strong>添加依赖</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Mybatis核心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.33<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>设置打包方式</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>创建配置文件</strong></p>
<ul>
<li><p><strong>创建 mybatis-config.xml 核心配置文件</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span>  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span>  </span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span>  </span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">	<span class="comment">&lt;!--设置连接数据库的环境--&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span>  </span><br><span class="line">		<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span>  </span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span>  </span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/MyBatis&quot;</span>/&gt;</span>  </span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span>  </span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span>  </span><br><span class="line">		<span class="tag">&lt;/<span class="name">environment</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;/<span class="name">environments</span>&gt;</span>  </span><br><span class="line">	<span class="comment">&lt;!--引入映射文件--&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">mappers</span>&gt;</span>  </span><br><span class="line">		<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/UserMapper.xml&quot;</span>/&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;/<span class="name">mappers</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建 mapper 接口</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;  </span><br><span class="line">	<span class="comment">/**  </span></span><br><span class="line"><span class="comment">	* 添加用户信息  </span></span><br><span class="line"><span class="comment">	*/</span>  </span><br><span class="line">	<span class="type">int</span> <span class="title function_">insertUser</span><span class="params">()</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建映射文件</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span>  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span>  </span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>  </span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.UserMapper&quot;</span>&gt;</span>  </span><br><span class="line">	<span class="comment">&lt;!--int insertUser();--&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span>  </span><br><span class="line">		insert into t_user values(null,&#x27;张三&#x27;,&#x27;123&#x27;,23,&#x27;女&#x27;)  </span><br><span class="line">	<span class="tag">&lt;/<span class="name">insert</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>添加测试功能</strong></p>
<ul>
<li><p><strong>测试数据库功能</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsertUser</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">    <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.insertUser();</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    System.out.println(<span class="string">&quot;result:&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>开启自动提交</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>添加日志功能</strong></p>
<ul>
<li><p><strong>添加依赖</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- log4j日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>添加 log4j.xml 配置文件</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">log4j</span>:configuration <span class="keyword">SYSTEM</span> <span class="string">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span> <span class="attr">xmlns:log4j</span>=<span class="string">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;Encoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125; %m (%F:%L) \n&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;java.sql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.ibatis&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;info&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-2配置文件详解"><a href="#2-2配置文件详解" class="headerlink" title="2.2	配置文件详解"></a>2.2	配置文件详解</h3><ul>
<li><p><strong>映射文件规则</strong></p>
<ul>
<li><p><strong>命名规则</strong>：实体类的类名 + <strong>Mapper.xml</strong></p>
</li>
<li><p><strong>一致性保证</strong>：<strong>Mapper</strong> 接口的全类名和映射文件的命名空间保持一致，<strong>Mapper</strong> 接口中方法的方法名和映射文件中的 <strong>id</strong> 属性保持一致</p>
</li>
</ul>
</li>
<li><p><strong>核心配置文件详解</strong></p>
<ul>
<li><p><strong>标签顺序</strong>：<strong>properties</strong>、<strong>settings</strong>、<strong>typeAliases</strong>、<strong>typeHandlers</strong>、<strong>objectFactory</strong>、<strong>objectWrapperFactory</strong>、<strong>reflectorFactory</strong>、<strong>plugins</strong>、<strong>environments</strong>、<strong>databaseIdProvider</strong>、<strong>mappers</strong></p>
</li>
<li><p><strong>properties 标签</strong>：引入 <strong>properties</strong> 配置文件</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>settings 标签</strong>：配置相关设置</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--将表中字段的下划线自动转换为驼峰--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启延迟加载--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>typeAliases 标签</strong>：设置某个具体的类型的别名</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置某个具体的类型的别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.atguigu.mybatis.bean.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAlias</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--以包为单位，设置改包下所有的类型都拥有默认的别名，即类名且不区分大小写--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.mybatis.bean&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>environments 标签</strong>：设置多个连接数据库的环境</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql_test&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql_test&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--transactionManager：设置事务管理方式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--dataSource：设置数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--设置驱动类的全类名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--设置连接数据库的连接地址--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--设置连接数据库的用户名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--设置连接数据库的密码--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>mappers 标签</strong>：引入映射文件</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--以包为单位，将包下所有的映射文件引入核心配置文件--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mapper接口和mapper映射文件必须在相同的包下且名称一致--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>数据库操作</strong></p>
<ul>
<li><p><strong>添加数据</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">	insert into t_user values(null,&#x27;admin&#x27;,&#x27;123456&#x27;,23,&#x27;男&#x27;,&#x27;12345@qq.com&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>删除数据</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span>&gt;</span></span><br><span class="line">	delete from t_user where id = 6</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>修改数据</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span>&gt;</span></span><br><span class="line">	update t_user set username = &#x27;张三&#x27; where id = 5</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查询数据</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.bean.User&quot;</span>&gt;</span>  </span><br><span class="line">	select * from t_user where id = 2  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查询数据集合</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.bean.User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第三节Mybatis获取参数"><a href="#第三节Mybatis获取参数" class="headerlink" title="第三节	Mybatis获取参数"></a>第三节	Mybatis获取参数</h2><ul>
<li><p><strong>获取参数值的方式</strong></p>
<ul>
<li>**${}**：本质为字符串拼接，若为字符串类型或日期类型的字段进行赋值时，需要手动加单引号</li>
<li>**#{}**：本质为占位符赋值，若为字符串类型或日期类型的字段进行赋值时，会自动加单引号</li>
</ul>
</li>
<li><p><strong>单个字面量参数</strong>：可以使用 <strong>${}</strong> 和 <strong>#{}</strong> 以任意的名称（最好见名识意）获取参数的值</p>
<ul>
<li><p>使用 <strong>${}</strong> 获取参数</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span>  </span><br><span class="line">	select * from t_user where username = &#x27;$&#123;username&#125;&#x27;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 <strong>#{}</strong> 获取参数</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user where username = #&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>多个字面量参数</strong>：<strong>MyBatis</strong> 会自动将参数放在 <strong>Map</strong> 集合当中，可以使用 <strong>arg</strong> 从0开始或者 <strong>param</strong> 从1开始获取集合里面的参数</p>
<ul>
<li><p>使用 <strong>${}</strong> 获取参数</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLogin&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user where username = &#x27;$&#123;param1&#125;&#x27; and password = &#x27;$&#123;param2&#125;&#x27;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 <strong>#{}</strong> 获取参数</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLogin&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span>  </span><br><span class="line">	select * from t_user where username = #&#123;arg0&#125; and password = #&#123;arg1&#125;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>Map集合类型参数</strong>：可以手动创建 <strong>Map</strong> 集合来传递多个参数</p>
<ul>
<li><p>将参数放入创建的 <strong>Map</strong> 集合当中</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;usermane&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.checkLoginByMap(map);</span><br><span class="line">System.out.println(user);</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 <strong>#{}</strong> 获取参数</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLoginByMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user where username = #&#123;username&#125; and password = #&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>实体类类型参数</strong>：通过访问实体类对象中的属性名获取属性值</p>
<ul>
<li><p>通过实体类对象传递参数</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">User user = new User(null,&quot;Tom&quot;,&quot;123456&quot;,12,&quot;男&quot;,&quot;123@321.com&quot;);</span><br><span class="line">mapper.insertUser(user);</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 <strong>#{}</strong> 获取参数</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">	insert into t_user values(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>使用 @Param 标识参数</strong>：设置 <strong>value</strong> 属性，可以通过键名获取相对应的值</p>
<ul>
<li><p>使用 <strong>@param</strong> 注解标识方法参数</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User <span class="title function_">CheckLoginByParam</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username, <span class="meta">@Param(&quot;password&quot;)</span> String password)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 <strong>#{}</strong> 获取参数</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;CheckLoginByParam&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user where username = #&#123;username&#125; and password = #&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第四节Mybatis查询功能"><a href="#第四节Mybatis查询功能" class="headerlink" title="第四节	Mybatis查询功能"></a>第四节	Mybatis查询功能</h2><ul>
<li><p><strong>查询实体类对象</strong>：直接使用实体类对象接受查询结果</p>
<ul>
<li><p><strong>方法信息</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>映射文件信息</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查询结果</strong></p>
  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">user</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>查询实体类对象集合</strong>：使用 <strong>List</strong> 集合接受多条实体类对象查询结果</p>
<ul>
<li><p><strong>方法信息</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">getUserList</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>映射文件信息</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查询结果</strong></p>
  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">userList</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>查询单个数据</strong>：使用常用类型的别名接受查询结果</p>
<ul>
<li><p><strong>方法信息</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>映射文件信息</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getCount&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">	select count(id) from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查询结果</strong></p>
  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>查询单条 Map 集合数据</strong>：使用 <strong>Map</strong> 集合来接受非实体类对象查询结果</p>
<ul>
<li><p><strong>方法信息</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Object&gt; <span class="title function_">getUserToMap</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>映射文件信息</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查询结果</strong></p>
  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>name<span class="punctuation">:</span>&#x27;张三&#x27;<span class="punctuation">,</span>age<span class="punctuation">:</span><span class="number">18</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>查询多条 Map 集合数据</strong>：使用 <strong>Map</strong> 集合来接受多条非实体类对象查询结果</p>
<ul>
<li><p><strong>使用 List&lt;Map&lt;&gt;&gt; 类型接受查询结果</strong></p>
<ul>
<li><p><strong>方法信息</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>映射文件信息</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span>  </span><br><span class="line">	select * from t_user  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查询结果</strong></p>
  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="punctuation">&#123;</span>name<span class="punctuation">:</span>&#x27;张三&#x27;<span class="punctuation">,</span>age<span class="punctuation">:</span><span class="number">18</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span>name<span class="punctuation">:</span>&#x27;李四&#x27;<span class="punctuation">,</span>age<span class="punctuation">:</span><span class="number">28</span><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>使用 @MapKey 标识数据主键</strong></p>
<ul>
<li><p><strong>方法信息</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapKey(&quot;id&quot;)</span></span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>映射文件信息</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查询结果</strong></p>
  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="number">1</span>=name<span class="punctuation">:</span>&#x27;张三&#x27;<span class="punctuation">,</span>age<span class="punctuation">:</span><span class="number">18</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="number">2</span>=name<span class="punctuation">:</span>&#x27;李四&#x27;<span class="punctuation">,</span>age<span class="punctuation">:</span><span class="number">28</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="第五节特殊SQL的执行"><a href="#第五节特殊SQL的执行" class="headerlink" title="第五节	特殊SQL的执行"></a>第五节	特殊SQL的执行</h2><ul>
<li><p><strong>模糊查询</strong>：查询满足一定条件的数据</p>
<ul>
<li><p><strong>方法信息</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">getUserByLike</span><span class="params">(<span class="meta">@Param(&quot;mohu&quot;)</span> String mohu)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>映射文件信息</strong></p>
<ul>
<li><p>使用 <strong>${}</strong> 和 单引号综合查询</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user where username like &#x27;%$&#123;mohu&#125;%&#x27;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 <strong>concat</strong> 函数查询</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user where username like concat(&#x27;%&#x27;,#&#123;mohu&#125;,&#x27;%&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 <strong>#{}</strong> 和双引号综合查询</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from t_user where username like &quot;%&quot;#&#123;mohu&#125;&quot;%&quot;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>批量删除</strong>：删除满足一定条件的数据</p>
<ul>
<li><p><strong>方法信息</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">deleteMore</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> String ids)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>映射文件信息</strong>：使用 <strong>${}</strong> 删除</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMore&quot;</span>&gt;</span></span><br><span class="line">	delete from t_user where id in ($&#123;ids&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>动态设置表名</strong>：通过参数来设置表名</p>
<ul>
<li><p><strong>方法信息</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">getUserByTable</span><span class="params">(<span class="meta">@Param(&quot;tableName&quot;)</span> String tableName)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>映射文件信息</strong>：使用 <strong>${}</strong> 设置表名</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByTable&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from $&#123;tableName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>添加功能获取自增的主键</strong>：为数据自动设置自增的主键</p>
<ul>
<li><p><strong>方法信息</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>映射文件信息</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">	insert into t_user values (null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查询结果</strong></p>
  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="punctuation">&#123;</span>id=<span class="number">1</span><span class="punctuation">,</span>name<span class="punctuation">:</span>&#x27;张三&#x27;<span class="punctuation">,</span>age<span class="punctuation">:</span><span class="number">18</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span>id=<span class="number">2</span><span class="punctuation">,</span>name<span class="punctuation">:</span>&#x27;李四&#x27;<span class="punctuation">,</span>age<span class="punctuation">:</span><span class="number">28</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span>id=<span class="number">3</span><span class="punctuation">,</span>name<span class="punctuation">:</span>&#x27;王五&#x27;<span class="punctuation">,</span>age<span class="punctuation">:</span><span class="number">38</span><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第六节自定义映射resultMap"><a href="#第六节自定义映射resultMap" class="headerlink" title="第六节	自定义映射resultMap"></a>第六节	自定义映射resultMap</h2><h3 id="6-1字段和属性的映射关系"><a href="#6-1字段和属性的映射关系" class="headerlink" title="6.1	字段和属性的映射关系"></a>6.1	字段和属性的映射关系</h3><ul>
<li><p><strong>resultMap 自定义映射</strong></p>
<ul>
<li><strong>id 属性</strong>：表示不可重复的自定义映射标识</li>
<li><strong>type 属性</strong>：查询数据映射的实体类类型</li>
<li><strong>子标签</strong><ul>
<li><strong>id 标签</strong>：设置主键的映射关系，<strong>property</strong> 属性表示实体类的主键名，<strong>column</strong> 属性表示数据库的主键名</li>
<li><strong>result 标签</strong>：设置普通字段的字段关系，<strong>property</strong> 属性表示实体类的属性名，<strong>column</strong> 属性表示数据库的字段名</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>字段名和属性名映射</strong></p>
<ul>
<li><p><strong>属性名不一致</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>属性名不一致但符合驼峰和下划线规则</strong></p>
<ul>
<li><p><strong>为字段起别名</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllEmp&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select eid,emp_name empName,age,sex,email from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>设置全局配置信息</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="6-2多对一映射处理"><a href="#6-2多对一映射处理" class="headerlink" title="6.2	多对一映射处理"></a>6.2	多对一映射处理</h3><ul>
<li><p><strong>级联方式处理映射关系</strong></p>
<ul>
<li><p><strong>映射关系</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptResultMapOne&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dept.did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dept.deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查询语句</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDept&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptResultMapOne&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp left join t_dept on t_emp.eid = t_dept.did where t_emp.eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>使用 association 处理映射关系</strong></p>
<ul>
<li><p><strong>association 标签</strong>：处理多对一的映射关系</p>
<ul>
<li><strong>property 属性</strong>：需要处理多对一的映射关系的属性名</li>
<li><strong>javaType 属性</strong>：该属性的类型</li>
</ul>
</li>
<li><p><strong>映射关系</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptResultMapTwo&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查询语句</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDept&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptResultMapTwo&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp left join t_dept on t_emp.eid = t_dept.did where t_emp.eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>分步查询</strong></p>
<ul>
<li><p><strong>查询员工信息</strong></p>
<ul>
<li><p><strong>方法信息</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Emp <span class="title function_">getEmpAndDeptByStepOne</span><span class="params">(<span class="meta">@Param(&quot;eid&quot;)</span> Integer eid)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>映射关系</strong>：使用 <strong>select</strong> 属性设置下一步分步查询的方法全引用，使用 <strong>column</strong> 属性设置分步查询的条件</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span></span></span><br><span class="line"><span class="tag">				 <span class="attr">select</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag">				 <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查询语句</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByStepOne&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp where eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>查询部门信息</strong></p>
<ul>
<li><p><strong>方法信息</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Dept <span class="title function_">getEmpAndDeptByStepTwo</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> Integer did)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>映射关系</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;EmpAndDeptByStepTwoResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查询语句</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByStepTwo&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;EmpAndDeptByStepTwoResultMap&quot;</span>&gt;</span></span><br><span class="line">	select * from t_dept where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>延迟加载</strong></p>
<ul>
<li><p><strong>开启延迟加载</strong>：分步查询时，非必要不会查询所有关联对象</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--开启延迟加载--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>单独设置立即加载</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">fetchType</span>=<span class="string">&quot;eager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="6-3一对多映射处理"><a href="#6-3一对多映射处理" class="headerlink" title="6.3	一对多映射处理"></a>6.3	一对多映射处理</h3><ul>
<li><p><strong>使用 collection 处理映射关系</strong></p>
<ul>
<li><p><strong>collection标签</strong></p>
<ul>
<li><strong>property 属性</strong>：需要处理一对多的映射关系的属性名</li>
<li><strong>ofType 属性</strong>：表示该属性对象的集合中存储的数据的类型</li>
</ul>
</li>
<li><p><strong>映射关系</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;DeptAndEmpResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查询语句</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmp&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;DeptAndEmpResultMap&quot;</span>&gt;</span></span><br><span class="line">	select * from t_dept left join t_emp on t_dept.did = t_emp.did where t_dept.did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>分步查询</strong></p>
<ul>
<li><p><strong>查询部门信息</strong></p>
<ul>
<li><p><strong>方法信息</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Dept <span class="title function_">getDeptAndEmpByStepOne</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> Integer did)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>映射关系</strong>：使用 <strong>select</strong> 属性设置下一步分步查询的方法全引用，使用 <strong>column</strong> 属性设置分步查询的条件</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;DeptAndEmpByStepOneResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span></span></span><br><span class="line"><span class="tag">				<span class="attr">select</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.EmpMapper.getDeptAndEmpByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag">				<span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查询语句</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmpByStepOne&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;DeptAndEmpByStepOneResultMap&quot;</span>&gt;</span></span><br><span class="line">	select * from t_dept where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>查询员工信息</strong></p>
<ul>
<li><p><strong>方法信息</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Emp&gt; <span class="title function_">getDeptAndEmpByStepTwo</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> Integer did)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查询语句</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmpByStepTwo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="第七节动态SQL"><a href="#第七节动态SQL" class="headerlink" title="第七节	动态SQL"></a>第七节	动态SQL</h2><ul>
<li><p><strong>if 标签</strong></p>
<ul>
<li><p><strong>test 属性</strong>：通过判断表达式的布尔值决定标签内语句是否执行</p>
</li>
<li><p><strong>注意事项</strong>：在 <strong>where</strong> 后添加恒等条件以避免语法错误</p>
</li>
<li><p><strong>标签示例</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp where 1=1</span><br><span class="line">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">		and emp_name = #&#123;empName&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">		and age = #&#123;age&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>where 标签</strong></p>
<ul>
<li><p><strong>结合使用 if 标签</strong>：与 <strong>if</strong> 标签结合使用，动态生成 <strong>where</strong> 关键字并清除多余的连接词</p>
</li>
<li><p><strong>标签示例</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp</span><br><span class="line">	<span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">			emp_name = #&#123;empName&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">			and age = #&#123;age&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>trim 标签</strong></p>
<ul>
<li><p><strong>prefix|suffix 属性</strong>：在 <strong>trim</strong> 标签中的内容的前面&#x2F;后面添加某些内容  </p>
</li>
<li><p><strong>prefixOverrides|suffixOverrides 属性</strong>：在 <strong>trim</strong> 标签中的内容的前面&#x2F;后面去掉某些内容</p>
</li>
<li><p><strong>标签示例</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp</span><br><span class="line">	<span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;and|or&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">			emp_name = #&#123;empName&#125; and</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">			age = #&#123;age&#125; and</span><br><span class="line">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>choose、when、otherwise 标签</strong></p>
<ul>
<li><p><strong>分支选择标签</strong>：相当于 <strong>if…else if…else if…else</strong>，按照顺序只在分支·中选择一个结果</p>
</li>
<li><p><strong>标签示例</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByChoose&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	select * from t_emp</span><br><span class="line">	<span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">				emp_name = #&#123;empName&#125;</span><br><span class="line">			<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">				age = #&#123;age&#125;</span><br><span class="line">			<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">				did = 1</span><br><span class="line">			<span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>foreach 标签</strong></p>
<ul>
<li><p><strong>标签属性</strong></p>
<ul>
<li><strong>collection 属性</strong>：设置要循环的数组或集合  </li>
<li><strong>itm 属性</strong>：表示集合或数组中的每一个数据  </li>
<li><strong>separator 属性</strong>：设置循环体之间的分隔符，分隔符前后默认有一个空格</li>
<li><strong>open 属性</strong>：设置 <strong>foreach</strong> 标签中的内容的开始符  </li>
<li><strong>close 属性</strong>：设置 <strong>foreach</strong> 标签中的内容的结束符</li>
</ul>
</li>
<li><p><strong>批量删除</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMoreByArray&quot;</span>&gt;</span></span><br><span class="line">	delete from t_emp where eid in</span><br><span class="line">	<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;eids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">		#&#123;eid&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>批量添加</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertMoreByList&quot;</span>&gt;</span></span><br><span class="line">	insert into t_emp values</span><br><span class="line">	<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">		(null,#&#123;emp.empName&#125;,#&#123;emp.age&#125;,#&#123;emp.sex&#125;,#&#123;emp.email&#125;,null)</span><br><span class="line">	<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>sql 标签</strong>：可以记录一段公共 <strong>sql</strong> 片段，在使用的地方通过 <strong>include</strong> 标签进行引入</p>
<ul>
<li><p><strong>声明 sql 片段</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;empColumns&quot;</span>&gt;</span>eid,emp_name,age,sex,email<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>引用 sql 片段</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">	select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;empColumns&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span> from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第八节Mybatis缓存"><a href="#第八节Mybatis缓存" class="headerlink" title="第八节	Mybatis缓存"></a>第八节	Mybatis缓存</h2><h3 id="8-1一级缓存"><a href="#8-1一级缓存" class="headerlink" title="8.1	一级缓存"></a>8.1	一级缓存</h3><ul>
<li><p><strong>一级缓存</strong></p>
<ul>
<li>默认开启</li>
<li>通过同一个 <strong>SqlSession</strong> 查询的数据会被缓存，下次查询相同的数据，就会从缓存中直接获取，否则从数据库重新访问</li>
</ul>
</li>
<li><p><strong>失效的情况</strong></p>
<ul>
<li>不同的 <strong>SqlSession</strong> 对应不同的一级缓存</li>
</ul>
<ol start="2">
<li>同一个 <strong>SqlSession</strong> 但是查询条件不同</li>
<li>同一个 <strong>SqlSession</strong> 两次查询期间执行了任何一次增删改操作</li>
<li>同一个 <strong>SqlSession</strong> 两次查询期间使用 <strong>sqlSession.clearCache()方法</strong> 手动清空了缓存</li>
</ol>
</li>
</ul>
<h3 id="8-2二级缓存"><a href="#8-2二级缓存" class="headerlink" title="8.2	二级缓存"></a>8.2	二级缓存</h3><ul>
<li><p><strong>二级缓存</strong></p>
<ul>
<li>需要手动开启</li>
<li>二级缓存是 <strong>SqlSessionFactory</strong> 级别，通过同一个 <strong>SqlSessionFactory</strong> 创建的 <strong>SqlSession</strong> 查询的结果会被缓存，此后若再次执行相同的查询语句，结果就会从缓存中获取</li>
</ul>
</li>
<li><p><strong>开启二级缓存</strong></p>
<ul>
<li><p>在映射文件中设置 <strong>cache</strong> 标签</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>二级缓存必须在 <strong>SqlSession</strong> 关闭或提交之后有效</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sqlSession.close();</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询的数据所转换的实体类类型必须实现序列化的接口</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>失效的情况</strong>：两次查询之间执行了任意的增删改，会使一级和二级缓存同时失效</p>
</li>
<li><p><strong>二级缓存相关配置</strong></p>
<ul>
<li><strong>eviction</strong> 属性：缓存回收策略  <ul>
<li><strong>LRU</strong>：最近最少使用的：移除最长时间不被使用的对象</li>
<li><strong>FIFO</strong>：先进先出：按对象进入缓存的顺序来移除它们</li>
<li><strong>SOFT</strong>：软引用：移除基于垃圾回收器状态和软引用规则的对象</li>
<li><strong>WEAK</strong>：弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象</li>
</ul>
</li>
<li><strong>flushInterval</strong> 属性：刷新间隔，单位毫秒，默认情况是不设置</li>
<li><strong>size</strong> 属性：引用数目，正整数，代表缓存最多可以存储多少个对象，太大容易导致内存溢出</li>
<li><strong>readOnly</strong> 属性：只读属性，默认 <strong>false</strong> 读写缓存</li>
</ul>
</li>
<li><p><strong>缓存查询顺序</strong></p>
<ul>
<li>先查询二级缓存，因为二级缓存中可能会有其他程序已经查出来的数据，可以拿来直接使用  </li>
<li>如果二级缓存没有命中，再查询一级缓存  </li>
<li>如果一级缓存也没有命中，则查询数据库  </li>
<li><strong>SqlSession</strong> 关闭之后，一级缓存中的数据会写入二级缓存</li>
</ul>
</li>
</ul>
<h3 id="8-3整合第三方缓存"><a href="#8-3整合第三方缓存" class="headerlink" title="8.3	整合第三方缓存"></a>8.3	整合第三方缓存</h3><ul>
<li><p><strong>整合第三方缓存步骤</strong></p>
<ul>
<li><p><strong>添加依赖</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Mybatis EHCache整合包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- slf4j日志门面的一个具体实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建 ehcache.xml 配置文件</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;../config/ehcache.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 磁盘保存路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;D:\atguigu\ehcache&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;1000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsOnDisk</span>=<span class="string">&quot;10000000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">defaultCache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>设置二级缓存类型</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建 logback 配置文件</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定日志输出的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志输出的格式 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 按照顺序分别是：时间、日志级别、线程名称、打印日志的类、日志主体内容、换行 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger] [%msg]%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置全局日志级别。日志级别按顺序分别是：DEBUG、INFO、WARN、ERROR --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 根据特殊需求指定局部日志级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.crowd.mapper&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第九节Mybatis逆向工程"><a href="#第九节Mybatis逆向工程" class="headerlink" title="第九节	Mybatis逆向工程"></a>第九节	Mybatis逆向工程</h2><h3 id="9-1创建逆向工程"><a href="#9-1创建逆向工程" class="headerlink" title="9.1	创建逆向工程"></a>9.1	创建逆向工程</h3><ul>
<li><p><strong>逆向工程</strong>：先创建数据库表，由框架负责根据数据库表，反向生成 <strong>Java</strong> 实体类，<strong>Mapper</strong> 接口，<strong>Mapper</strong> 映射文件等</p>
</li>
<li><p><strong>创建逆向工程的步骤</strong></p>
<ul>
<li><p><strong>添加插件</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 插件的依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 逆向工程的核心依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.33<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建 generatorConfig.xml 逆向工程配置文件</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    targetRuntime: 执行生成的逆向工程的版本</span></span><br><span class="line"><span class="comment">    MyBatis3Simple: 生成基本的CRUD（清新简洁版）</span></span><br><span class="line"><span class="comment">    MyBatis3: 生成带条件的CRUD（奢华尊享版）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DB2Tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3Simple&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库的连接信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- javaBean的生成策略--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.pojo&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SQL映射文件的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\resources&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Mapper接口的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 逆向分析的表 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- domainObjectName属性指定生成出来的实体类的类名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_emp&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Emp&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_dept&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Dept&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="9-2QBC"><a href="#9-2QBC" class="headerlink" title="9.2	QBC"></a>9.2	QBC</h3><ul>
<li><p><strong>按条件查询</strong></p>
<ul>
<li><p><strong>selectByExample</strong>：按条件查询，需要传入一个 <strong>example</strong> 对象或者 <strong>null</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">EmpExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpExample</span>();</span><br><span class="line">List&lt;Emp&gt; emps = mapper.selectByExample(example);</span><br><span class="line">emps.forEach(System.out::println);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>example.createCriteria().xxx</strong>：创建条件对象，通过 <strong>andXXX</strong> 方法为 <strong>SQL</strong> 添加查询添加，每个条件之间是 <strong>and</strong> 关系</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">example.createCriteria().andEmpNameEqualTo(<span class="string">&quot;张三&quot;</span>).andAgeGreaterThanOrEqualTo(<span class="number">20</span>);	</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>example.or().xxx</strong>：将之前添加的条件通过 <strong>or</strong> 拼接其他条件</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">example.or().andDidIsNotNull();</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>按条件增改</strong></p>
<ul>
<li><p>**updateByPrimaryKey()**：通过主键进行数据修改，如果某一个值为 <strong>null</strong>，也会将对应的字段改为 <strong>null</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mapper.updateByPrimaryKey(<span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="number">1</span>,<span class="string">&quot;admin&quot;</span>,<span class="number">22</span>,<span class="literal">null</span>,<span class="string">&quot;456@qq.com&quot;</span>,<span class="number">3</span>));</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>updateByPrimaryKeySelective</strong>()：通过主键进行选择性数据修改，如果某个值为 <strong>null</strong>，则不修改这个字段</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mapper.updateByPrimaryKeySelective(<span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="number">2</span>,<span class="string">&quot;admin2&quot;</span>,<span class="number">22</span>,<span class="literal">null</span>,<span class="string">&quot;456@qq.com&quot;</span>,<span class="number">3</span>));</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第十节分页插件"><a href="#第十节分页插件" class="headerlink" title="第十节	分页插件"></a>第十节	分页插件</h2><h3 id="10-1分页插件配置步骤"><a href="#10-1分页插件配置步骤" class="headerlink" title="10.1	分页插件配置步骤"></a>10.1	分页插件配置步骤</h3><ul>
<li><p><strong>创建分页插件</strong></p>
<ul>
<li><p><strong>添加依赖</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>	</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>在 mybatis-config,xml 中配置插件</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--设置分页插件--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="10-2分页插件的使用"><a href="#10-2分页插件的使用" class="headerlink" title="10.2	分页插件的使用"></a>10.2	分页插件的使用</h3><ul>
<li><p><strong>开启分页功能</strong></p>
<ul>
<li><p><strong>pageNum 属性</strong>：当前页的页码  </p>
</li>
<li><p><strong>pageSize 属性</strong>：每页显示的条数</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PageHelper.startPage(<span class="number">1</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>分页相关数据</strong></p>
<ul>
<li><p><strong>直接输出</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Page&lt;Object&gt; page = PageHelper.startPage(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">List&lt;Emp&gt; emps = mapper.selectByExample(<span class="literal">null</span>);</span><br><span class="line">System.out.println(page);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用 PageInfo</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PageHelper.startPage(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">List&lt;Emp&gt; emps = mapper.selectByExample(<span class="literal">null</span>);</span><br><span class="line">PageInfo&lt;Emp&gt; page = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(emps,<span class="number">5</span>);</span><br><span class="line">System.out.println(page);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Spring</title>
    <url>/2024/01/28/Spring/</url>
    <content><![CDATA[<h2 id="第一节Spring概述"><a href="#第一节Spring概述" class="headerlink" title="第一节	Spring概述"></a>第一节	Spring概述</h2><ul>
<li><p><strong>Spring简介</strong>：<strong>Spring</strong> 是最受欢迎的企业级 <strong>Java</strong> 应用程序开发框架，最初是由 <strong>Rod Johnson</strong> 编写的，并且于 2003 年 6 月首次发布</p>
<p>  ，其核心特性是可以用于开发任何 <strong>Java</strong> 应用程序，目标是使 <strong>J2EE</strong> 开发变得更容易使用</p>
</li>
<li><p><strong>Spring的特点</strong></p>
<ul>
<li><p><strong>非侵入式</strong>：使用 <strong>Spring Framework</strong> 开发应用程序时，Spring 对应用程序本身的结构影响非常小。对领域模型可以做到零污染；对功能性组件也只需要使用几个简单的注解进行标记，完全不会破坏原有结构，反而能将组件结构进一步简化。这就使得基于 <strong>Spring Framework</strong> 开发应用程序时结构清晰、简洁优雅</p>
</li>
<li><p><strong>控制反转</strong>：翻转资源获取方向，把自己创建资源、向环境索取资源变成环境将资源准备好，我们享受资源注入</p>
</li>
<li><p><strong>面向切面编程</strong>：在不修改源代码的基础上增强代码功能</p>
</li>
<li><p><strong>容器</strong>：<strong>Spring IoC</strong> 是一个容器，因为它包含并且管理组件对象的生命周期。组件享受到了容器化的管理，替程序员屏蔽了组件创建过程中的大量细节，极大的降低了使用门槛，大幅度提高了开发效率</p>
</li>
<li><p><strong>组件化</strong>：<strong>Spring</strong> 实现了使用简单的组件配置组合成一个复杂的应用。在 <strong>Spring</strong> 中可以使用 <strong>XML</strong> 和 <strong>Java</strong> 注解组合这些对象。这使得我们可以基于一个个功能明确、边界清晰的组件有条不紊的搭建超大型复杂应用系统</p>
</li>
<li><p><strong>一站式</strong>：在 <strong>IoC</strong> 和 <strong>AOP</strong> 的基础上可以整合各种企业应用的开源框架和优秀的第三方类库。而且 <strong>Spring</strong> 旗下的项目已经覆盖了广泛领域，很多方面的功能性需求可以在 <strong>Spring Framework</strong> 的基础上全部使用 <strong>Spring</strong> 来实现</p>
</li>
</ul>
</li>
</ul>
<h2 id="第二节容器：IOC"><a href="#第二节容器：IOC" class="headerlink" title="第二节	容器：IOC"></a>第二节	容器：IOC</h2><h3 id="2-1控制反转IOC"><a href="#2-1控制反转IOC" class="headerlink" title="2.1	控制反转IOC"></a>2.1	控制反转IOC</h3><ul>
<li><strong>控制反转 IOC</strong>：即将对象的创建权利和对象与对象之间关系的维护权交出去，交给第三方容器负责，是为了降低程序耦合度，提高程序扩展力</li>
</ul>
<ul>
<li><strong>依赖注入 DI</strong>：指 <strong>Spring</strong> 创建对象的过程中，将对象依赖属性通过配置进行注入，实现了控制反转的思想</li>
</ul>
<h3 id="2-2基于XML获取Bean对象"><a href="#2-2基于XML获取Bean对象" class="headerlink" title="2.2	基于XML获取Bean对象"></a>2.2	基于XML获取Bean对象</h3><ul>
<li><p><strong>添加依赖</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>获取 Bean</strong></p>
<ul>
<li><p><strong>根据 id 获取</strong>：根据 <strong>Bean</strong> 标签的 <strong>id</strong> 属性可以精确获取到一个组件对象</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"><span class="type">HelloWorld</span> <span class="variable">helloworld</span> <span class="operator">=</span> (HelloWorld) ac.getBean(<span class="string">&quot;helloWorld&quot;</span>);</span><br><span class="line">helloworld.sayHello();</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>根据类型获取</strong>：要求 <strong>IOC</strong> 容器中指定类型的 <strong>Bean</strong> 有且只能有一个</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"><span class="type">HelloWorld</span> <span class="variable">bean</span> <span class="operator">=</span> ac.getBean(HelloWorld.class);</span><br><span class="line">bean.sayHello()</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>根据 id 和类型获取</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"><span class="type">HelloWorld</span> <span class="variable">bean</span> <span class="operator">=</span> ac.getBean(<span class="string">&quot;helloworld&quot;</span>, HelloWorld.class);</span><br><span class="line">bean.sayHello();</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-3基于XML管理Bean对象"><a href="#2-3基于XML管理Bean对象" class="headerlink" title="2.3	基于XML管理Bean对象"></a>2.3	基于XML管理Bean对象</h3><ul>
<li><p><strong>依赖注入</strong></p>
<ul>
<li><p><strong>setter 依赖注入</strong>：为变量创建 <strong>setter</strong> 方法，提供依赖注入的接口</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- property标签：通过组件类的setXxx()方法给组件对象设置属性 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- name属性：指定属性名（这个属性名是getXxx()、setXxx()方法定义的，和成员变量无关） --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- value属性：指定属性值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;23&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>构造器依赖注入</strong>：在类的有参构造器中提供依赖注入的接口</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;1002&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;33&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>特殊值处理</strong></p>
<ul>
<li><p><strong>null</strong> 值</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>xml</strong> 实体：小于号在 <strong>XML</strong> 文档中用来定义标签的开始，不能随便使用，可以使用 <strong>xml</strong> 实体替代</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;expression&quot;</span> <span class="attr">value</span>=<span class="string">&quot;a <span class="symbol">&amp;lt;</span> b&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>CDATA</strong> 节：<strong>CDATA</strong> 中的 <strong>C</strong> 代表 <strong>Character</strong>，是文本、字符的含义，<strong>CDATA</strong> 就表示纯文本数据</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;expression&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[a &lt; b]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>特殊类型处理</strong></p>
<ul>
<li><p><strong>为对象类型属性赋值</strong></p>
<ul>
<li><p><strong>引入外部 Bean</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>内部 Bean</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在一个bean中再声明一个bean就是内部bean --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 内部bean只能用于给属性赋值，不能在外部通过IOC容器获取，因此可以省略id属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzInner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Clazz&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2222&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;远大前程班&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>级联属性赋值</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz.clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3333&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz.clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;最强王者班&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>为数组类型属性赋值</strong>：使用 <strong>array</strong> 标签为数组赋值</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>抽烟<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>喝酒<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>烫头<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>为集合类型属性赋值</strong></p>
<ul>
<li><p><strong>List</strong> 类型集合：使用 <strong>list</strong> 标签</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;salaryList&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span> <span class="attr">value-type</span>=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Map</strong> 类型集合：使用 <strong>map</strong> 标签</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span> <span class="attr">key-type</span>=<span class="string">&quot;java.lang.Integer&quot;</span> <span class="attr">value-type</span>=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;11&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;22&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Bean 命名空间</strong></p>
<ul>
<li><p><strong>引入命名空间</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/util</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/util/spring-util.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>命名空间赋值</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentSix&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Student&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">p:id</span>=<span class="string">&quot;1006&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;小明&quot;</span> <span class="attr">p:clazz-ref</span>=<span class="string">&quot;clazzOne&quot;</span> <span class="attr">p:teacherMap-ref</span>=<span class="string">&quot;teacherMap&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>Bean 的作用域</strong></p>
<table>
<thead>
<tr>
<th align="center">scope属性</th>
<th align="center">描述</th>
<th align="center">创建对象的时机</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>singleton</strong>（默认）</td>
<td align="center">在 <strong>IOC</strong> 容器中，这个 <strong>bean</strong> 的对象始终为单实例</td>
<td align="center"><strong>IOC</strong> 容器初始化时</td>
</tr>
<tr>
<td align="center"><strong>prototype</strong></td>
<td align="center">这个 <strong>bean</strong> 在 <strong>IOC</strong> 容器中有多个实例</td>
<td align="center">获取 <strong>bean</strong> 时</td>
</tr>
</tbody></table>
</li>
<li><p><strong>Bean 的生命周期</strong></p>
<ul>
<li><p><strong>Bean</strong> 对象创建（调用无参构造器）</p>
</li>
<li><p>给 <strong>Bean</strong> 对象设置属性</p>
</li>
<li><p><strong>Bean</strong> 的后置处理器（初始化之前）</p>
</li>
<li><p><strong>Bean</strong> 对象初始化（需在配置 <strong>Bean</strong> 时指定初始化方法）</p>
</li>
<li><p><strong>Bean</strong> 的后置处理器（初始化之后）</p>
</li>
<li><p><strong>Bean</strong> 对象就绪可以使用</p>
</li>
<li><p><strong>Bean</strong> 对象销毁（需在配置  <strong>Bean</strong> 时指定销毁方法）</p>
</li>
<li><p><strong>IOC</strong>  容器关闭</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- bean的后置处理器要放入IOC容器才能生效 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBeanProcessor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.process.MyBeanProcessor&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>基于 XML 自动装配</strong></p>
<ul>
<li><p><strong>根据类型匹配</strong>：根据类型匹配 <strong>IOC</strong> 容器中的某个兼容类型的 <strong>Bean</strong>，为属性自动赋值</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userController&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.autowire.controller.UserController&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.autowire.service.impl.UserServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.autowire.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>根据名称匹配</strong>：将自动装配的属性的属性名，作为 <strong>Bean</strong> 的 <strong>id</strong> 在 <strong>IOC</strong> 容器中匹配相对应的 <strong>Bean</strong> 进行赋值</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userController&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.autowire.controller.UserController&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.autowire.service.impl.UserServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.autowire.service.impl.UserServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.autowire.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.autowire.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-4基于注解获取Bean对象"><a href="#2-4基于注解获取Bean对象" class="headerlink" title="2.4	基于注解获取Bean对象"></a>2.4	基于注解获取Bean对象</h3><ul>
<li><p><strong>获取 Bean</strong></p>
<ul>
<li><p><strong>根据 id 获取</strong>：根据 <strong>bean</strong> 标签的 <strong>id</strong> 属性可以精确获取到一个组件对象</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(springConfig.class);</span><br><span class="line"><span class="type">HelloWorld</span> <span class="variable">helloworld</span> <span class="operator">=</span> (HelloWorld) ac.getBean(<span class="string">&quot;helloWorld&quot;</span>);</span><br><span class="line">helloworld.sayHello();</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>根据类型获取</strong>：要求 <strong>IOC</strong> 容器中指定类型的 <strong>bean</strong> 有且只能有一个</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(springConfig.class);</span><br><span class="line"><span class="type">HelloWorld</span> <span class="variable">bean</span> <span class="operator">=</span> ac.getBean(HelloWorld.class);</span><br><span class="line">bean.sayHello()</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>根据 id 和类型获取</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(springConfig.class);</span><br><span class="line"><span class="type">HelloWorld</span> <span class="variable">bean</span> <span class="operator">=</span> ac.getBean(<span class="string">&quot;helloworld&quot;</span>, HelloWorld.class);</span><br><span class="line">bean.sayHello();</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-5基于注解管理Bean对象"><a href="#2-5基于注解管理Bean对象" class="headerlink" title="2.5	基于注解管理Bean对象"></a>2.5	基于注解管理Bean对象</h3><ul>
<li><p><strong>开启组件扫描</strong></p>
<ul>
<li><p><strong>基于 XML 文件配置</strong></p>
<ul>
<li><p><strong>基本扫描</strong>：指定 <strong>back-package</strong> 属性</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.spring6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>指定排除组件</strong>：<strong>annotation</strong> 根据注解排除，<strong>assignable</strong> 根据类型排除</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.spring6&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>指定扫描组件</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>基于配置类配置</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 配置类</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;Control&quot;,&quot;Service&quot;,&quot;Dao&quot;,&quot;Config&quot;&#125;)</span> <span class="comment">// 扫描路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Spring6Config</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>使用注解定义</strong> <strong>Bean</strong></p>
<table>
<thead>
<tr>
<th align="center">注解</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>@Component</strong></td>
<td align="center">该注解用于描述 <strong>Spring</strong> 中的 <strong>Bean</strong>，它是一个泛化的概念，仅仅表示容器中的一个组件，并且可以作用在应用的任何层次</td>
</tr>
<tr>
<td align="center"><strong>@Repository</strong></td>
<td align="center">该注解用于将数据访问层 <strong>Dao</strong> 的类标识为 <strong>Spring</strong> 中的 <strong>Bean</strong>，其功能与 <strong>@Component</strong> 相同</td>
</tr>
<tr>
<td align="center"><strong>@Service</strong></td>
<td align="center">该注解通常作用在业务层 <strong>Service</strong>，用于将业务层的类标识为 <strong>Spring</strong> 中的 <strong>Bean</strong>，其功能与 <strong>@Component</strong> 相同</td>
</tr>
<tr>
<td align="center"><strong>@Controller</strong></td>
<td align="center">该注解通常作用在控制层 <strong>Controller</strong>，用于将控制层的类标识为 <strong>Spring</strong> 中的 <strong>Bean</strong>，其功能与 <strong>@Component</strong> 相同</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="2-6依赖注入——Autowired注解"><a href="#2-6依赖注入——Autowired注解" class="headerlink" title="2.6	依赖注入——Autowired注解"></a>2.6	依赖注入——Autowired注解</h3><ul>
<li><p><strong>依赖注入</strong></p>
<ul>
<li><p><strong>属性注入</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserServiceImpl userServiceImpl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>setter 注入</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p><strong>构造器注入</strong>：当有参数的构造方法只有一个时，**@Autowired** 注解可以省略</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserServiceImpl</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p><strong>形参注入</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserServiceImpl</span><span class="params">(<span class="meta">@Autowired</span> UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>联合注解</strong>：配合 <strong>@Qualifier</strong> 注解一起使用，表示根据名称注入</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;userDaoImpl&quot;)</span> <span class="comment">// 指定bean的名字</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-7依赖注入——Resource注解"><a href="#2-7依赖注入——Resource注解" class="headerlink" title="2.7	依赖注入——Resource注解"></a>2.7	依赖注入——Resource注解</h3><ul>
<li><p><strong>Resource注解</strong>：<strong>JDK</strong> 扩展包注解，更具有通用性，默认根据名称注入，但是只适用于属性和 <strong>setter</strong> 方法</p>
</li>
<li><p><strong>依赖注入</strong></p>
<ul>
<li><p><strong>添加依赖</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>根据名称注入</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;myUserDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserDao myUserDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>未知名称注入</strong>：当没有指定 <strong>name</strong> 的时候，会将变量名称作为 <strong>name</strong> 进行查找</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserDao myUserDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第三节面向切片：AOP"><a href="#第三节面向切片：AOP" class="headerlink" title="第三节	面向切片：AOP"></a>第三节	面向切片：AOP</h2><h3 id="3-1AOP概述"><a href="#3-1AOP概述" class="headerlink" title="3.1	AOP概述"></a>3.1	AOP概述</h3><ul>
<li><strong>AOP</strong>：全称 <strong>Aspect Oriented Programming</strong>，即面向切面编程，它是面向对象编程的一种补充和完善，通过预编译方式和运行期动态代理方式实现，在不修改源代码的情况下，给程序动态统一添加额外功能的一种技术，利用 <strong>AOP</strong> 可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率</li>
<li><strong>相关术语</strong><ul>
<li><strong>横切关注点</strong>：分散在每个各个模块中解决同一样的问题，如用户验证、日志管理、事务处理、数据缓存都属于横切关注点</li>
<li><strong>通知</strong>：每个横切关注点上需要增强的功能，比如 安全，事务，日志等</li>
<li><strong>切面</strong>：封装通知方法的类</li>
<li><strong>目标</strong>：被代理的目标对象</li>
<li><strong>代理</strong>：向目标对象应用通知之后创建的代理对象</li>
<li><strong>连接点</strong>：允许使用通知的地方</li>
<li><strong>切入点</strong>：定位连接点的方式</li>
</ul>
</li>
<li><strong>动态代理</strong><ul>
<li><strong>JDK</strong> 代理：目标类有接口，使用 <strong>proxy</strong> 类和目标类实现相同的接口</li>
<li><strong>cglib</strong> 代理：目标类没有接口，继承目标类，位于相同的包下</li>
</ul>
</li>
</ul>
<h3 id="3-2AOP配置流程"><a href="#3-2AOP配置流程" class="headerlink" title="3.2	AOP配置流程"></a>3.2	AOP配置流程</h3><ul>
<li><p><strong>添加依赖</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建切面类</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span> <span class="comment">// 切面类</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">// 依赖注入</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line">    <span class="meta">@Before(&quot;execution(public int com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;)</span> <span class="comment">// 通知标识</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置文件</strong></p>
<ul>
<li><p><strong>XML 文件配置</strong>：使用 <strong>aop</strong> 标签和 <strong>component-scan</strong> 标签配置代理</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.aop.annotation&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置类配置</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.atguigu.aop.annotation&quot;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AOPConfig</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="3-3通知"><a href="#3-3通知" class="headerlink" title="3.3	通知"></a>3.3	通知</h3><ul>
<li><p><strong>通知分类</strong></p>
<table>
<thead>
<tr>
<th align="center">通知</th>
<th align="center">注解</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>前置通知</strong></td>
<td align="center"><strong>@Before</strong></td>
<td align="center">在被代理的目标方法前执行</td>
</tr>
<tr>
<td align="center"><strong>返回通知</strong></td>
<td align="center"><strong>@AfterReturning</strong></td>
<td align="center">在被代理的目标方法成功结束后执行</td>
</tr>
<tr>
<td align="center"><strong>异常通知</strong></td>
<td align="center"><strong>@AfterThrowing</strong></td>
<td align="center">在被代理的目标方法异常结束后执行</td>
</tr>
<tr>
<td align="center"><strong>后置通知</strong></td>
<td align="center"><strong>@After</strong></td>
<td align="center">在被代理的目标方法最终结束后执行</td>
</tr>
<tr>
<td align="center"><strong>环绕通知</strong></td>
<td align="center"><strong>@Around</strong></td>
<td align="center">使用 <strong>try…catch…finally</strong> 结构围绕整个被代理的目标方法，包括所有位置都可以执行</td>
</tr>
</tbody></table>
</li>
<li><p><strong>获取通知的相关信息</strong></p>
<ul>
<li><p><strong>获取连接点信息</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取连接点的签名信息</span></span><br><span class="line"><span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line"><span class="comment">//获取目标方法到的实参信息</span></span><br><span class="line"><span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> Arrays.toString(joinPoint.getArgs());</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>获取目标方法返回值</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturningMethod</span><span class="params">(JoinPoint joinPoint, Object result)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">    System.out.println(<span class="string">&quot;Logger--&gt;返回通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，结果：&quot;</span>+result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>获取目标方法的异常</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowingMethod</span><span class="params">(JoinPoint joinPoint, Throwable ex)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">    System.out.println(<span class="string">&quot;Logger--&gt;异常通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，异常：&quot;</span>+ex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>环绕通知</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">aroundMethod</span><span class="params">(ProceedingJoinPoint joinPoint)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">    <span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class="line">    <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        result = joinPoint.proceed();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">        throwable.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-4切入表达式"><a href="#3-4切入表达式" class="headerlink" title="3.4	切入表达式"></a>3.4	切入表达式</h3><ul>
<li><p><strong>切入表达式语法</strong>：示例 <strong>execution(public int com.atguigu.aop.annotation.CalculatorImpl.*(..))</strong></p>
<ul>
<li><strong>excution</strong>：固定格式</li>
<li><strong>权限修饰符</strong>：例如 <strong>public</strong>，<strong>private</strong> 等，***** 号表示任意修饰符</li>
<li><strong>返回值类型</strong>：例如 <strong>int</strong>，<strong>void</strong> 等，***** 号表示任意类型</li>
<li><strong>方法全类名</strong>：例如 <strong>com.example.spring.Utils.<strong>，</strong></strong>* 号表示任意包名或类名，类名部分使用 ***** 号使可以匹配符合条件的类，例如 *<strong>Service</strong></li>
<li><strong>方法名</strong>：例如 <strong>add</strong>，***** 号表示任意方法，方法名部分使用 ***** 号可以匹配符合条件的方法，例如 <strong>get</strong>*</li>
<li><strong>参数列表</strong>：例如 <strong>(int,int)<strong>，</strong>…</strong> 表示任意参数列表</li>
</ul>
</li>
<li><p><strong>切入表达式的重用</strong></p>
<ul>
<li><p><strong>声明表达式</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(* com.atguigu.aop.annotation.*.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>同一切面的使用</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>不同切面的使用</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;com.atguigu.aop.CommonPointCut.pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>切面的优先级</strong></p>
<ul>
<li><p>切面的优先级控制切面的内外嵌套顺序</p>
<ul>
<li>优先级高的切面：外面</li>
<li>优先级低的切面：里面</li>
</ul>
</li>
<li><p>使用 <strong>@Order</strong> 注解可以控制切面的优先级</p>
<ul>
<li><strong>@Order</strong>(较小的数)：优先级高</li>
<li><strong>@Order</strong>(较大的数)：优先级低</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="第四节单元测试：JUnit"><a href="#第四节单元测试：JUnit" class="headerlink" title="第四节	单元测试：JUnit"></a>第四节	单元测试：JUnit</h2><h3 id="4-1JUnit4单元测试"><a href="#4-1JUnit4单元测试" class="headerlink" title="4.1	JUnit4单元测试"></a>4.1	JUnit4单元测试</h3><ul>
<li><p><strong>添加依赖</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>测试类示例</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:beans.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringJUnit4Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUser</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-2Junit5单元测试"><a href="#4-2Junit5单元测试" class="headerlink" title="4.2	Junit5单元测试"></a>4.2	Junit5单元测试</h3><ul>
<li><p><strong>添加依赖</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 <strong>XML</strong> 文件</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.spring6.bean&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>测试类示例</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringJUnitConfig(Config.springConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringJUnit5Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUser</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第五节事务"><a href="#第五节事务" class="headerlink" title="第五节	事务"></a>第五节	事务</h2><h3 id="5-1JDBCTemplate"><a href="#5-1JDBCTemplate" class="headerlink" title="5.1	JDBCTemplate"></a>5.1	JDBCTemplate</h3><ul>
<li><p><strong>JDBCTemplate概念</strong>：<strong>Spring JDBC</strong> 核心包中的核心类，它可以通过配置文件、注解、<strong>Java</strong> 配置类等形式获取数据库的相关信息，实现了对 <strong>JDBC</strong> 开发过程中的驱动加载、连接的开启和关闭、SQL 语句的创建与执行、异常处理、事务处理、数据类型转换等操作的封装</p>
</li>
<li><p><strong>配置数据库文件</strong></p>
<ul>
<li><p><strong>添加依赖</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建jdbc.properties配置文件</strong></p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/spring?characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置spring文件</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入外部属性文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置 JdbcTemplate --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 装配数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>数据库操作</strong></p>
<ul>
<li><p><strong>测试类配置</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringJUnitConfig(locations = &quot;classpath:beans.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTemplateTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>增加数据</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_emp values(null,?,?,?)&quot;</span>;</span><br><span class="line">	<span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> jdbcTemplate.update(sql, <span class="string">&quot;张三&quot;</span>, <span class="number">23</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>删除数据</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from t_emp where id=?&quot;</span>;</span><br><span class="line">	<span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> jdbcTemplate.update(sql, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>修改数据</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_emp set name=? where id=?&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> jdbcTemplate.update(sql, <span class="string">&quot;张三atguigu&quot;</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查询数据</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectCount</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select count(id) from t_emp&quot;</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, Integer.class);</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="5-2声明式事务"><a href="#5-2声明式事务" class="headerlink" title="5.2	声明式事务"></a>5.2	声明式事务</h3><ul>
<li><strong>事务</strong>：数据库事务 <strong>transaction</strong> 是访问并可能操作各种数据项的一个数据库操作序列，这些操作要么全部执行,要么全部不执行，是一个不可分割的工作单位，事务由事务开始与事务结束之间执行的全部数据库操作组成</li>
<li><strong>事务的特性</strong><ul>
<li><strong>原子性</strong>：一个事务中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚到事务开始前的状态，就像这个事务从来没有执行过一样</li>
<li><strong>一致性</strong>：在一个事务执行之前和执行之后数据库都必须处于一致性状态。如果事务成功地完成，那么系统中所有变化将正确地应用，系统处于有效状态；如果在事务中出现错误，那么系统中的所有变化将自动地回滚，系统返回到原始状态</li>
<li><strong>隔离性</strong>：在并发环境中，当不同的事务同时操纵相同的数据时，每个事务都有各自的完整数据空间。由并发事务所做的修改必须与任何其他并发事务所做的修改隔离。事务查看数据更新时，数据所处的状态要么是另一事务修改它之前的状态，要么是另一事务修改它之后的状态，事务不会查看到中间状态的数据</li>
<li><strong>持久性</strong>：只要事务成功结束，它对数据库所做的更新就必须保存下来。即使发生系统崩溃，重新启动数据库系统后，数据库还能恢复到事务成功结束时的状态</li>
</ul>
</li>
<li><strong>声明式事务</strong>：代码框架将固定模式的代码抽取出来，进行相关的封装，只需要在配置文件中进行简单的配置即可完成数据库操作</li>
<li><strong>声明式事务的优点</strong><ul>
<li>提高开发效率</li>
<li>消除了冗余的代码</li>
<li>框架会综合考虑相关领域中在实际开发环境下有可能遇到的各种问题，进行了健壮性、性能等各个方面的优化</li>
</ul>
</li>
</ul>
<h3 id="5-3基于注解的声明式事务"><a href="#5-3基于注解的声明式事务" class="headerlink" title="5.3	基于注解的声明式事务"></a>5.3	基于注解的声明式事务</h3><ul>
<li><p><strong>配置数据库文件</strong></p>
<ul>
<li><p><strong>添加spring配置</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.spring6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建数据访问层组件</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getPriceByBookId</span><span class="params">(Integer bookId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select price from t_book where book_id = ?&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.queryForObject(sql, Integer.class, bookId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateStock</span><span class="params">(Integer bookId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_book set stock = stock - 1 where book_id = ?&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql, bookId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateBalance</span><span class="params">(Integer userId, Integer price)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_user set balance = balance - ? where user_id = ?&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql, price, userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建服务层组件</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">price</span> <span class="operator">=</span> bookDao.getPriceByBookId(bookId);</span><br><span class="line">        bookDao.updateStock(bookId);</span><br><span class="line">        bookDao.updateBalance(userId, price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建控制层组件</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span>&#123;</span><br><span class="line">        bookService.buyBook(bookId, userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>加入事务测试</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-4事务属性"><a href="#5-4事务属性" class="headerlink" title="5.4	事务属性"></a>5.4	事务属性</h3><ul>
<li><p><strong>@Transactional注解</strong>：事务属性注解</p>
<ul>
<li>标识在方法上，则只会影响该方法</li>
<li>标识的类上，则会影响类中所有的方法</li>
</ul>
</li>
<li><p><strong>事务属性：只读</strong></p>
<ul>
<li><p><strong>简述</strong>：不涉及写操作，这样数据库就能够针对查询操作来进行优化</p>
</li>
<li><p><strong>注解</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(readOnly = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>事务属性：超时</strong></p>
<ul>
<li><p><strong>简述</strong>：事务在执行过程中，有可能因为遇到某些问题，导致程序卡住，这个程序应该被回滚，撤销它已做的操作，事务结束，把资源让出来，让其他正常程序可以执行</p>
</li>
<li><p><strong>注解</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(timeout = 3)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>事务属性：回滚策略</strong></p>
<ul>
<li><p><strong>简述</strong>：默认只针对运行时异常回滚，编译时异常不回滚</p>
</li>
<li><p><strong>属性值</strong></p>
<ul>
<li><strong>rollbackFor</strong> 属性：需要设置一个 <strong>Class</strong> 类型的对象</li>
<li><strong>rollbackForClassName</strong> 属性：需要设置一个字符串类型的全类名</li>
<li><strong>noRollbackFor</strong> 属性：需要设置一个 <strong>Class</strong> 类型的对象</li>
<li><strong>noRollbackForClassName</strong> 属性：需要设置一个字符串类型的全类名</li>
</ul>
</li>
<li><p><strong>注解</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(noRollbackFor = ArithmeticException.class)</span></span><br><span class="line"><span class="comment">//@Transactional(noRollbackForClassName = &quot;java.lang.ArithmeticException&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>事务属性：隔离级别</strong></p>
<ul>
<li><p><strong>简述</strong>：一个事务与其他事务隔离的程度称为隔离级别，不同隔离级别对应不同的干扰程度，隔离级别越高，数据一致性就越好，但并发性越弱</p>
</li>
<li><p><strong>属性值</strong></p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>描述</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td><strong>READ UNCOMMITTED</strong></td>
<td>读未提交</td>
<td>有</td>
<td>有</td>
<td>有</td>
</tr>
<tr>
<td><strong>READ COMMITTED</strong></td>
<td>读已提交</td>
<td>无</td>
<td>有</td>
<td>有</td>
</tr>
<tr>
<td><strong>REPEATABLE READ</strong></td>
<td>可重复读</td>
<td>无</td>
<td>无</td>
<td>有</td>
</tr>
<tr>
<td><strong>SERIALIZABLE</strong></td>
<td>串行化</td>
<td>无</td>
<td>无</td>
<td>无</td>
</tr>
</tbody></table>
</li>
<li><p><strong>注解</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(isolation = Isolation.DEFAULT)</span><span class="comment">//使用数据库默认的隔离级别</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.READ_UNCOMMITTED)</span><span class="comment">//读未提交</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.READ_COMMITTED)</span><span class="comment">//读已提交</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.REPEATABLE_READ)</span><span class="comment">//可重复读</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.SERIALIZABLE)</span><span class="comment">//串行化</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>事务属性：传播行为</strong></p>
<ul>
<li><p><strong>简述</strong>：在一个事务中开启另一个事务，表示事务的传递模式</p>
</li>
<li><p><strong>属性值</strong></p>
<ul>
<li><strong>REQUIRED</strong>：支持当前事务，如果不存在就新建一个</li>
<li><strong>SUPPORTS</strong>：支持当前事务，如果当前没有事务，就以非事务方式执行</li>
<li><strong>MANDATORY</strong>：必须运行在一个事务中，如果当前没有事务正在发生，将抛出一个异常</li>
<li><strong>REQUIRES_NEW</strong>：开启一个新的事务，如果一个事务已经存在，则将这个存在的事务挂起</li>
<li><strong>NOT_SUPPORTED</strong>：以非事务方式运行，如果有事务存在，挂起当前事务</li>
<li><strong>NEVER</strong>：以非事务方式运行，如果有事务存在，抛出异常</li>
<li><strong>NESTED</strong>：如果当前正有一个事务在进行中，则该方法应当运行在一个嵌套式事务中，被嵌套的事务可以独立于外层事务进行提交或回滚；如果外层事务不存在，行为就像 <strong>REQUIRED</strong> 一样</li>
</ul>
</li>
<li><p><strong>注解</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="5-5全注解开发事务"><a href="#5-5全注解开发事务" class="headerlink" title="5.5	全注解开发事务"></a>5.5	全注解开发事务</h3><ul>
<li><p><strong>全注解开发事务配置类</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.atguigu.spring6&quot;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">getDataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring?characterEncoding=utf8&amp;useSSL=false&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;jdbcTemplate&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JdbcTemplate <span class="title function_">getJdbcTemplate</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line">        jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSourceTransactionManager <span class="title function_">getDataSourceTransactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">DataSourceTransactionManager</span> <span class="variable">dataSourceTransactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">        dataSourceTransactionManager.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> dataSourceTransactionManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第六节资源操作：Resources"><a href="#第六节资源操作：Resources" class="headerlink" title="第六节	资源操作：Resources"></a>第六节	资源操作：Resources</h2><h3 id="6-1Spring-Resource概述"><a href="#6-1Spring-Resource概述" class="headerlink" title="6.1	Spring Resource概述"></a>6.1	Spring Resource概述</h3><ul>
<li><strong>Spring Resource</strong>：<strong>Java</strong> 的标准 <strong>URL</strong> 类和各种 <strong>URL</strong> 前缀的标准处理程序无法满足所有对 <strong>low-level</strong> 资源的访问，并且缺少某些<strong>Spring</strong> 所需要的功能，而 <strong>Spring</strong> 的 <strong>Resource</strong> 声明了访问 <strong>low-level</strong> 资源的能力</li>
</ul>
<h3 id="6-2Resource接口"><a href="#6-2Resource接口" class="headerlink" title="6.2	Resource接口"></a>6.2	Resource接口</h3><ul>
<li><p><strong>Resource接口</strong>：位于 <strong>org.springframework.core.io</strong> 中，旨在成为一个更强大的接口，用于抽象对低级资源的访问，<strong>Resource</strong> 接口继承了 <strong>InputStreamSource</strong> 接口，提供了很多 <strong>InputStreamSource</strong> 所没有的方法</p>
</li>
<li><p><strong>常用方法</strong></p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>getInputStream()</strong></td>
<td align="center">找到并打开资源，返回一个 <strong>InputStream</strong> 以从资源中读取</td>
</tr>
<tr>
<td align="center"><strong>exists()</strong></td>
<td align="center">返回一个布尔值，表明某个资源是否以物理形式存在</td>
</tr>
<tr>
<td align="center"><strong>isOpen()</strong></td>
<td align="center">返回一个布尔值，指示此资源是否具有开放流的句柄</td>
</tr>
<tr>
<td align="center"><strong>getDescription()</strong></td>
<td align="center">返回资源的描述，用来输出错误的日志</td>
</tr>
<tr>
<td align="center"><strong>isReadable()</strong></td>
<td align="center">表明资源的目录读取是否通过 <strong>getInputStream()</strong> 进行读取</td>
</tr>
<tr>
<td align="center"><strong>isFile()</strong></td>
<td align="center">表明这个资源是否代表了一个文件系统的文件</td>
</tr>
<tr>
<td align="center"><strong>getURL()</strong></td>
<td align="center">返回一个 <strong>URL</strong> 句柄，如果资源不能够被解析为 <strong>URL</strong>，将抛出 <strong>IOException</strong></td>
</tr>
<tr>
<td align="center"><strong>getURI()</strong></td>
<td align="center">返回一个资源的 <strong>URI</strong> 句柄</td>
</tr>
<tr>
<td align="center"><strong>getFile()</strong></td>
<td align="center">返回某个文件，如果资源不能够被解析称为绝对路径，将会抛出 **FileNotFoundException **</td>
</tr>
<tr>
<td align="center"><strong>lastModified()</strong></td>
<td align="center">资源最后一次修改的时间戳</td>
</tr>
<tr>
<td align="center"><strong>createRelative()</strong></td>
<td align="center">创建此资源的相关资源</td>
</tr>
<tr>
<td align="center"><strong>getFilename()</strong></td>
<td align="center">返回资源的文件名</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="6-3Resource实现类"><a href="#6-3Resource实现类" class="headerlink" title="6.3	Resource实现类"></a>6.3	Resource实现类</h3><ul>
<li><p><strong>Resource实现类</strong>：<strong>Resource</strong> 接口是 <strong>Spring</strong> 资源访问策略的抽象，它本身并不提供任何资源访问实现，具体的资源访问由该接口的实现类完成，每个实现类代表一种资源访问策略</p>
</li>
<li><p><strong>实现类汇总</strong></p>
<table>
<thead>
<tr>
<th align="center">类名</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>UrlResource</strong></td>
<td align="center">用来访问网络资源，它支持 <strong>URL</strong> 的绝对路径</td>
</tr>
<tr>
<td align="center"><strong>ClassPathResource</strong></td>
<td align="center">用来访问类加载路径下的资源，可自动搜索位于 <strong>classes</strong> 下的资源文件，无须使用绝对路径访问</td>
</tr>
<tr>
<td align="center"><strong>FileSystemResource</strong></td>
<td align="center">用于访问文件系统资源</td>
</tr>
<tr>
<td align="center"><strong>ServletContextResource</strong></td>
<td align="center">解释相关 <strong>Web</strong> 应用程序根目录中的相对路径，始终支持流访问和 <strong>URL</strong> 访问</td>
</tr>
<tr>
<td align="center"><strong>InputStreamResource</strong></td>
<td align="center">给定的输入流的 <strong>Resource</strong> 实现，在没有特定的资源实现的时候使用，如果需要将资源描述符保留在某处或者需要多次读取流，请不要使用</td>
</tr>
<tr>
<td align="center"><strong>ByteArrayResource</strong></td>
<td align="center">通过给定的数组创建了，对于从任何给定的字节数组加载内容非常有用，而无需求助于单次使用的 <strong>InputStreamResource</strong></td>
</tr>
</tbody></table>
</li>
<li><p><strong>URLResource类</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loadAndReadUrlResource</span><span class="params">(String path)</span>&#123;</span><br><span class="line">    <span class="type">UrlResource</span> <span class="variable">url</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        url = <span class="keyword">new</span> <span class="title class_">UrlResource</span>(path);</span><br><span class="line">        System.out.println(url.getFilename());</span><br><span class="line">        System.out.println(url.getURI());</span><br><span class="line">        System.out.println(url.getDescription());</span><br><span class="line">        System.out.println(url.getInputStream().read());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>ClassPathResource类</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loadAndReadUrlResource</span><span class="params">(String path)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">ClassPathResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(path);</span><br><span class="line">    System.out.println(<span class="string">&quot;resource.getFileName = &quot;</span> + resource.getFilename());</span><br><span class="line">    System.out.println(<span class="string">&quot;resource.getDescription = &quot;</span>+ resource.getDescription());</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> resource.getInputStream();</span><br><span class="line">    <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">while</span>(in.read(b)!=-<span class="number">1</span>) &#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>FileSystemResource类</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loadAndReadUrlResource</span><span class="params">(String path)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">FileSystemResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemResource</span>(<span class="string">&quot;atguigu.txt&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;resource.getFileName = &quot;</span> + resource.getFilename());</span><br><span class="line">    System.out.println(<span class="string">&quot;resource.getDescription = &quot;</span>+ resource.getDescription());</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> resource.getInputStream();</span><br><span class="line">    <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">while</span>(in.read(b)!=-<span class="number">1</span>) &#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="6-4ResourceLoader接口"><a href="#6-4ResourceLoader接口" class="headerlink" title="6.4	ResourceLoader接口"></a>6.4	ResourceLoader接口</h3><ul>
<li><p><strong>ResourceLoader接口</strong>：该接口实现类的实例可以获得一个 <strong>Resource</strong> 实例，当 <strong>Spring</strong> 应用需要进行资源访问时，实际上并不需要直接使用 <strong>Resource</strong> 实现类，而是调用 <strong>ResourceLoader</strong> 实例的 <strong>getResource()</strong> 方法来获得资源，<strong>ReosurceLoader</strong> 将会负责选择 <strong>Reosurce</strong> 实现类，也就是确定具体的资源访问策略，从而将应用程序和具体的资源访问策略分离开</p>
</li>
<li><p><strong>获取Resource示例</strong></p>
<ul>
<li><p><strong>ClassPathXmlApplicationContext类</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>();</span><br><span class="line">    <span class="type">Resource</span> <span class="variable">res</span> <span class="operator">=</span> ctx.getResource(<span class="string">&quot;atguigu.txt&quot;</span>);</span><br><span class="line">    System.out.println(res.getFilename());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>FileSystemApplicationContext类</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span>();</span><br><span class="line">    <span class="type">Resource</span> <span class="variable">res</span> <span class="operator">=</span> ctx.getResource(<span class="string">&quot;atguigu.txt&quot;</span>);</span><br><span class="line">    System.out.println(res.getFilename());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="6-5ResourceLoaderAware接口"><a href="#6-5ResourceLoaderAware接口" class="headerlink" title="6.5	ResourceLoaderAware接口"></a>6.5	ResourceLoaderAware接口</h3><ul>
<li><p><strong>ResourceLoaderAware接口</strong>：该实现类的实例将获得一个 <strong>ResourceLoader</strong> 的引用，提供一个 <strong>setResourceLoader()</strong> 方法，由<strong>Spring</strong> 容器负责调用，<strong>Spring</strong> 容器会将将自身当成 <strong>ResourceLoader</strong> 对象作为该方法的参数传入</p>
</li>
<li><p><strong>获取ResourceLoader示例</strong></p>
<ul>
<li><p><strong>实现接口</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBean</span> <span class="keyword">implements</span> <span class="title class_">ResourceLoaderAware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ResourceLoader resourceLoader;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setResourceLoader</span><span class="params">(ResourceLoader resourceLoader)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ResourceLoader <span class="title function_">getResourceLoader</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.resourceLoader;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置文件</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;testBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.resouceloader.TestBean&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>测试</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">    <span class="type">TestBean</span> <span class="variable">testBean</span> <span class="operator">=</span> ctx.getBean(<span class="string">&quot;testBean&quot;</span>,TestBean.class);</span><br><span class="line">    <span class="type">ResourceLoader</span> <span class="variable">resourceLoader</span> <span class="operator">=</span> testBean.getResourceLoader();</span><br><span class="line">    <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> resourceLoader.getResource(<span class="string">&quot;atguigu.txt&quot;</span>);</span><br><span class="line">    System.out.println(resource.getFilename());</span><br><span class="line">    System.out.println(resource.getDescription());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="6-6使用Resource作为属性"><a href="#6-6使用Resource作为属性" class="headerlink" title="6.6	使用Resource作为属性"></a>6.6	使用Resource作为属性</h3><ul>
<li><p><strong>依赖注入资源属性</strong>：让 <strong>Spring</strong> 为 <strong>Bean</strong> 实例依赖注入资源，资源所在的物理位置不会被耦合到代码中，如果资源位置发生改变，不必改写程序</p>
</li>
<li><p><strong>注入资源属性示例</strong></p>
<ul>
<li><p><strong>创建依赖注入类</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResourceBean</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Resource res;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRes</span><span class="params">(Resource res)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.res = res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Resource <span class="title function_">getRes</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置文件</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;resourceBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.resouceloader.ResourceBean&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;res&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:atguigu.txt&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>测试</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">    <span class="type">ResourceBean</span> <span class="variable">resourceBean</span> <span class="operator">=</span> ctx.getBean(<span class="string">&quot;resourceBean&quot;</span>,ResourceBean.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="6-7应用程序上下文和资源路径"><a href="#6-7应用程序上下文和资源路径" class="headerlink" title="6.7	应用程序上下文和资源路径"></a>6.7	应用程序上下文和资源路径</h3><ul>
<li><p><strong>使用实现类确定资源访问策略</strong></p>
<table>
<thead>
<tr>
<th align="center">实现类</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>ClassPathXMLApplicationContext</strong></td>
<td align="center">对应使用 <strong>ClassPathResource</strong> 进行资源访问</td>
</tr>
<tr>
<td align="center"><strong>FileSystemXmlApplicationContext</strong></td>
<td align="center">对应使用 <strong>FileSystemResource</strong> 进行资源访问</td>
</tr>
<tr>
<td align="center"><strong>XmlWebApplicationContext</strong></td>
<td align="center">对应使用 <strong>ServletContextResource</strong> 进行资源访问</td>
</tr>
</tbody></table>
</li>
<li><p><strong>使用前缀指定资源访问策略</strong></p>
<ul>
<li><p><strong>classpath前缀使用</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath:bean.xml&quot;</span>);</span><br><span class="line">    <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> ctx.getResource(<span class="string">&quot;atguigu.txt&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>classpath通配符使用</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath*:bean.xml&quot;</span>);</span><br><span class="line">    <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> ctx.getResource(<span class="string">&quot;atguigu.txt&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第七节国际化：i18n"><a href="#第七节国际化：i18n" class="headerlink" title="第七节	国际化：i18n"></a>第七节	国际化：i18n</h2><h3 id="7-1国际化概述"><a href="#7-1国际化概述" class="headerlink" title="7.1	国际化概述"></a>7.1	国际化概述</h3><ul>
<li><strong>国际化i18n</strong>：英文单词 <strong>internationalization</strong> 的首末字符 <strong>i</strong> 和 <strong>n</strong>，18 为中间的字符数，即软件显示不同语言的过程，软件中的国际化是通过配置文件来实现的，假设要支撑两种语言，那么就需要两个版本的配置文件</li>
</ul>
<h3 id="7-2Java国际化"><a href="#7-2Java国际化" class="headerlink" title="7.2	Java国际化"></a>7.2	Java国际化</h3><ul>
<li><p><strong>Locale类</strong>：用于指定当前用户所属的语言环境等信息，包含 <strong>language</strong> 信息和 <strong>country</strong> 信息，使用 <strong>ResourceBundle</strong> 查找绑定对应的资源文件</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Locale <span class="title function_">createConstant</span><span class="params">(String lang, String country)</span> &#123;</span><br><span class="line">    <span class="type">BaseLocale</span> <span class="variable">base</span> <span class="operator">=</span> BaseLocale.createInstance(lang, country);</span><br><span class="line">    <span class="keyword">return</span> getInstance(base, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置文件命名规则</strong>：<strong>basename_language_country.properties</strong></p>
<ul>
<li><strong>basename</strong> 是必须的，语言和国家是可选的</li>
<li>如果同时提供了 <strong>messages.properties</strong> 和 <strong>messages_zh_CN.propertes</strong> 两个配置文件，优先查找<strong>messages_en_CN.propertes</strong> 配置文件，如果没查找到，再查找 <strong>messages.properties</strong> 配置文件</li>
</ul>
</li>
<li><p><strong>Java国际化示例</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(ResourceBundle.getBundle(<span class="string">&quot;messages&quot;</span>,<span class="keyword">new</span> <span class="title class_">Locale</span>(<span class="string">&quot;en&quot;</span>,<span class="string">&quot;GB&quot;</span>)).getString(<span class="string">&quot;test&quot;</span>));</span><br><span class="line">System.out.println(ResourceBundle.getBundle(<span class="string">&quot;messages&quot;</span>,<span class="keyword">new</span> <span class="title class_">Locale</span>(<span class="string">&quot;zh&quot;</span>,<span class="string">&quot;CN&quot;</span>)).getString(<span class="string">&quot;test&quot;</span>));</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="7-3Spring国际化"><a href="#7-3Spring国际化" class="headerlink" title="7.3	Spring国际化"></a>7.3	Spring国际化</h3><ul>
<li><p><strong>MessageSource接口</strong>：用于实现 <strong>Spring</strong> 国际化，可根据不同需求使用不同的实现类</p>
<table>
<thead>
<tr>
<th align="center">实现类</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>ResourceBundleMessageSource</strong></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">这个是基于Java的ResourceBundle基础类实现，允许仅通过资源名加载国际化资源</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><strong>ReloadableResourceBundleMessageSource</strong></td>
<td align="center"></td>
</tr>
</tbody></table>
</li>
<li><p><strong>Spring国际化示例</strong></p>
<ul>
<li><p><strong>创建资源文件</strong></p>
<ul>
<li><p><strong>创建atguigu_en_US.properties</strong></p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">www.atguigu.com</span>=<span class="string">welcome &#123;0&#125;,时间:&#123;1&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建atguigu_zh_CN.properties</strong></p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">www.atguigu.com</span>=<span class="string">欢迎 &#123;0&#125;,时间:&#123;1&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>配置文件</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;messageSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ResourceBundleMessageSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basenames&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>atguigu<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>测试</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">    Object[] objs = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;atguigu&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>().toString()&#125;;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> context.getMessage(<span class="string">&quot;www.atguigu.com&quot;</span>, objs, Locale.CHINA);</span><br><span class="line">    System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第八节数据校验Validation"><a href="#第八节数据校验Validation" class="headerlink" title="第八节	数据校验Validation"></a>第八节	数据校验Validation</h2><h3 id="8-1Spring-Validation概述"><a href="#8-1Spring-Validation概述" class="headerlink" title="8.1	Spring Validation概述"></a>8.1	Spring Validation概述</h3><ul>
<li><strong>Spring Validation概述</strong>：允许通过注解的方式来定义对象校验规则，把校验和业务逻辑分离开，用于对参数等是否符合规则的校验，让代码编写更加方便</li>
</ul>
<h3 id="8-2通过Validator接口实现"><a href="#8-2通过Validator接口实现" class="headerlink" title="8.2	通过Validator接口实现"></a>8.2	通过Validator接口实现</h3><ul>
<li><p><strong>接口实现校验</strong></p>
<ul>
<li><p><strong>添加依赖</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0.5.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.glassfish<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.el<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建实体类</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>实现校验接口</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonValidator</span> <span class="keyword">implements</span> <span class="title class_">Validator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Person.class.equals(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">validate</span><span class="params">(Object object, Errors errors)</span> &#123;</span><br><span class="line">        ValidationUtils.rejectIfEmpty(errors, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;name.empty&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) object;</span><br><span class="line">        <span class="keyword">if</span> (p.getAge() &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            errors.rejectValue(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;error value &lt; 0&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.getAge() &gt; <span class="number">110</span>) &#123;</span><br><span class="line">            errors.rejectValue(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;error value too old&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>测试</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    person.setName(<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line">    person.setAge(-<span class="number">1</span>);</span><br><span class="line">    <span class="type">DataBinder</span> <span class="variable">binder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataBinder</span>(person);</span><br><span class="line">    binder.setValidator(<span class="keyword">new</span> <span class="title class_">PersonValidator</span>());</span><br><span class="line">    binder.validate();</span><br><span class="line">    <span class="type">BindingResult</span> <span class="variable">results</span> <span class="operator">=</span> binder.getBindingResult();</span><br><span class="line">    System.out.println(results.getAllErrors());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="8-3通过注解实现"><a href="#8-3通过注解实现" class="headerlink" title="8.3	通过注解实现"></a>8.3	通过注解实现</h3><ul>
<li><p><strong>常用注解</strong></p>
<table>
<thead>
<tr>
<th align="center">注解</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>@NotNull</strong></td>
<td align="center">限制必须不为 <strong>null</strong></td>
</tr>
<tr>
<td align="center"><strong>@NotEmpty</strong></td>
<td align="center">只作用于字符串类型，字符串不为空，并且长度不为0</td>
</tr>
<tr>
<td align="center"><strong>@NotBlank</strong></td>
<td align="center">只作用于字符串类型，字符串不为空，并且 <strong>trim()</strong> 后不为空串</td>
</tr>
<tr>
<td align="center"><strong>@DecimalMax(value)</strong></td>
<td align="center">限制必须为一个不大于指定值的数字</td>
</tr>
<tr>
<td align="center"><strong>@DecimalMin(value)</strong></td>
<td align="center">限制必须为一个不小于指定值的数字</td>
</tr>
<tr>
<td align="center"><strong>@Max(value)</strong></td>
<td align="center">限制必须为一个不大于指定值的数字</td>
</tr>
<tr>
<td align="center"><strong>@Min(value)</strong></td>
<td align="center">限制必须为一个不小于指定值的数字</td>
</tr>
<tr>
<td align="center"><strong>@Pattern(value)</strong></td>
<td align="center">限制必须符合指定的正则表达式</td>
</tr>
<tr>
<td align="center"><strong>@Size(max,min)</strong></td>
<td align="center">限制字符长度必须在 <strong>min</strong> 到 <strong>max</strong> 之间</td>
</tr>
<tr>
<td align="center"><strong>@Email</strong></td>
<td align="center">验证注解的元素值是 <strong>Email</strong>，也可以通过正则表达式和 <strong>flag</strong> 指定自定义的 <strong>email</strong> 格式</td>
</tr>
</tbody></table>
</li>
<li><p><strong>注解实现校验</strong></p>
<ul>
<li><p><strong>创建配置类</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.atguigu.spring6.validation.method2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidationConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> LocalValidatorFactoryBean <span class="title function_">validator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LocalValidatorFactoryBean</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建实体类</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Min(0)</span></span><br><span class="line">    <span class="meta">@Max(120)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用校验器</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Validator validator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="type">boolean</span> <span class="title function_">validator</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        Set&lt;ConstraintViolation&lt;User&gt;&gt; sets =  validator.validate(user);</span><br><span class="line">        <span class="keyword">return</span> sets.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Validator validator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validaPersonByValidator</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="type">BindException</span> <span class="variable">bindException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BindException</span>(user, user.getName());</span><br><span class="line">        validator.validate(user, bindException);</span><br><span class="line">        <span class="keyword">return</span> bindException.hasErrors();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>测试</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMyService1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(ValidationConfig.class);</span><br><span class="line">    <span class="type">MyService1</span> <span class="variable">myService</span> <span class="operator">=</span> context.getBean(MyService1.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setAge(-<span class="number">1</span>);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">validator</span> <span class="operator">=</span> myService.validator(user);</span><br><span class="line">    System.out.println(validator);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="8-4基于方法实现"><a href="#8-4基于方法实现" class="headerlink" title="8.4	基于方法实现"></a>8.4	基于方法实现</h3><ul>
<li><p><strong>方法实现校验</strong></p>
<ul>
<li><p><strong>创建配置类</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.atguigu.spring6.validation.method3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidationConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MethodValidationPostProcessor <span class="title function_">validationPostProcessor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MethodValidationPostProcessor</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建实体类</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Min(0)</span></span><br><span class="line">    <span class="meta">@Max(120)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;^1(3|4|5|7|8)\\d&#123;9&#125;$&quot;,message = &quot;手机号码格式错误&quot;)</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;手机号码不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPhone</span><span class="params">(String phone)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>通过注解操作对象</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testParams</span><span class="params">(<span class="meta">@NotNull</span> <span class="meta">@Valid</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>测试</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMyService1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(ValidationConfig.class);</span><br><span class="line">    <span class="type">MyService</span> <span class="variable">myService</span> <span class="operator">=</span> context.getBean(MyService.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setAge(-<span class="number">1</span>);</span><br><span class="line">    myService.testParams(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="8-5自定义校验"><a href="#8-5自定义校验" class="headerlink" title="8.5	自定义校验"></a>8.5	自定义校验</h3><ul>
<li><p><strong>自定义校验注解</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy = &#123;CannotBlankValidator.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CannotBlank &#123;</span><br><span class="line">    <span class="comment">//默认错误消息</span></span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;不能包含空格&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分组</span></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//负载</span></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定多个时使用</span></span><br><span class="line">    <span class="meta">@Target(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.TYPE_USE&#125;)</span></span><br><span class="line">    <span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line">    <span class="meta">@Documented</span></span><br><span class="line">    <span class="meta">@interface</span> List &#123;</span><br><span class="line">        CannotBlank[] value();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建校验类</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CannotBlankValidator</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;CannotBlank, String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(CannotBlank constraintAnnotation)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String value, ConstraintValidatorContext context)</span> &#123;</span><br><span class="line">            <span class="comment">//null时不进行校验</span></span><br><span class="line">            <span class="keyword">if</span> (value != <span class="literal">null</span> &amp;&amp; value.contains(<span class="string">&quot; &quot;</span>)) &#123;</span><br><span class="line">                    <span class="comment">//获取默认提示信息</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">defaultConstraintMessageTemplate</span> <span class="operator">=</span> context.getDefaultConstraintMessageTemplate();</span><br><span class="line">                    System.out.println(<span class="string">&quot;default message :&quot;</span> + defaultConstraintMessageTemplate);</span><br><span class="line">                    <span class="comment">//禁用默认提示信息</span></span><br><span class="line">                    context.disableDefaultConstraintViolation();</span><br><span class="line">                    <span class="comment">//设置提示语</span></span><br><span class="line">                    context.buildConstraintViolationWithTemplate(<span class="string">&quot;can not contains blank&quot;</span>).addConstraintViolation();</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第九节提前编译：AOT"><a href="#第九节提前编译：AOT" class="headerlink" title="第九节	提前编译：AOT"></a>第九节	提前编译：AOT</h2><h3 id="9-1AOT概述"><a href="#9-1AOT概述" class="headerlink" title="9.1	AOT概述"></a>9.1	AOT概述</h3><ul>
<li><p><strong>JIT 与 AOT 的区别</strong></p>
<ul>
<li><strong>JIT</strong>：全称 <strong>Just-in-time</strong>，即动态即时编译，边运行边编译。在程序运行时，根据算法计算出热点代码，然后进行 <strong>JIT</strong> 实时编译，这种方式吞吐量高，有运行时性能加成，可以跑得更快，并可以做到动态生成代码等，但是相对启动速度较慢，并需要一定时间和调用频率才能触发 JIT 的分层机制</li>
<li><strong>AOT</strong>：全称 <strong>Ahead Of Time</strong>，即运行前编译，预先编译。直接将源代码转化为机器码，内存占用低，启动速度快，可以无需 <strong>runtime</strong> 运行，直接将 <strong>runtime</strong> 静态链接至最终的程序中，但是无运行时性能加成，不能根据程序运行情况做进一步的优化</li>
</ul>
</li>
<li><p><strong>AOT 的优缺点</strong></p>
<ul>
<li><p><strong>优点</strong></p>
<ul>
<li>不必等待及时编译器的预热，减少 <strong>Java</strong> 应用给人带来第一次运行慢的不良体验</li>
<li>在程序运行前编译，可以避免在运行时的编译性能消耗和内存消耗</li>
<li>可以在程序运行初期就达到最高性能，程序启动速度快</li>
<li>运行产物只有机器码，打包体积小</li>
</ul>
</li>
<li><p><strong>缺点</strong></p>
<ul>
<li>不能根据硬件情况或程序运行情况择优选择机器指令序列，理论峰值性能不如 <strong>JIT</strong></li>
<li>没有动态能力，同一份产物不能跨平台运行</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="9-2Graalvm"><a href="#9-2Graalvm" class="headerlink" title="9.2	Graalvm"></a>9.2	Graalvm</h3><ul>
<li><p><strong>GraalVM概述</strong>：<strong>Spring6</strong> 支持的 <strong>AOT</strong> 技术的底层支持，<strong>GraalVM</strong> 是一种高性能 <strong>JDK</strong>，旨在加速用 <strong>Java</strong> 和其他 <strong>JVM</strong> 语言编写的应用程序的执行，<strong>GraalVM</strong> 提供两种运行 <strong>Java</strong> 应用程序的方法：在 <strong>HotSpot JVM</strong> 上使用 <strong>Graal</strong> 即时编译器或作为提前编译的本机可执行文件</p>
</li>
<li><p><strong>GraalVM的特性</strong></p>
<ul>
<li>一种高级优化编译器，它生成更快、更精简的代码，需要更少的计算资源</li>
<li>AOT 本机图像编译提前将 Java 应用程序编译为本机二进制文件，立即启动，无需预热即可实现最高性能</li>
<li>Polyglot 编程在单个应用程序中利用流行语言的最佳功能和库，无需额外开销</li>
<li>高级工具在 Java 和多种语言中调试、监视、分析和优化资源消耗</li>
</ul>
</li>
<li><p><strong>GraalVM Native Image概述</strong>：另外一种实现 <strong>Java AOT</strong> 的思路，直接摒弃 <strong>JVM</strong>，和 <strong>C&#x2F;C++</strong> 一样通过编译器直接将代码编译成机器代码，然后运行。它通过 <strong>C</strong> 语言实现了一个超微缩的运行时组件 <strong>Substrate VM</strong>，基本实现了 <strong>JVM</strong> 的各种特性，但足够轻量、可以被轻松内嵌，这就让 <strong>Java</strong> 语言和工程摆脱 <strong>JVM</strong> 的限制，能够真正意义上实现和 <strong>C&#x2F;C++</strong> 一样的 <strong>AOT</strong> 编译</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>SpringMVC</title>
    <url>/2024/01/28/SpringMVC/</url>
    <content><![CDATA[<h2 id="第一章SpringMVC简介"><a href="#第一章SpringMVC简介" class="headerlink" title="第一章	SpringMVC简介"></a>第一章	SpringMVC简介</h2><h3 id="1-1SpringMVC"><a href="#1-1SpringMVC" class="headerlink" title="1.1	SpringMVC"></a>1.1	SpringMVC</h3><ul>
<li><strong>MVC概述</strong>：一种软件架构的思想，将软件按照模型、视图、控制器来划分<ul>
<li><strong>M</strong>：模型层，指工程中的 <strong>JavaBean</strong>，可分为实体类和 <strong>Service</strong> 或 <strong>Dao</strong> 业务处理类，用于存储业务数据或处理业务逻辑和数据访问</li>
<li><strong>V</strong>：视图层，指工程当中的 <strong>html</strong> 或 <strong>jsp</strong> 页面，用于与用户进行交互，展示数据</li>
<li><strong>C</strong>：控制层，指工程当中的 <strong>Servlet</strong>，用于接收请求和响应浏览器</li>
</ul>
</li>
<li><strong>SpringMVC简介</strong>：<strong>Spring</strong> 的一个后续产品，是 <strong>Spring</strong> 的一个子项目，为表述层开发提供的一整套完备的解决方案</li>
<li><strong>SpringMVC的特点</strong><ul>
<li><strong>Spring</strong> 家族原生产品，与 <strong>IOC</strong> 容器等基础设施无缝对接</li>
<li>基于原生的 <strong>Servlet</strong>，通过了功能强大的前端控制器 <strong>DispatcherServlet</strong>，对请求和响应进行统一处理</li>
<li>表述层各细分领域需要解决的问题全方位覆盖，提供全面解决方案</li>
<li>代码清新简洁，大幅度提升开发效率</li>
<li>内部组件化程度高，可插拔式组件即插即用，想要什么功能配置相应组件即可</li>
<li>性能卓著，尤其适合现代大型、超大型互联网项目要求</li>
</ul>
</li>
</ul>
<h3 id="1-2项目配置"><a href="#1-2项目配置" class="headerlink" title="1.2	项目配置"></a>1.2	项目配置</h3><ul>
<li><p><strong>创建Maven工程</strong></p>
<ul>
<li><p>添加 <strong>web</strong> 模块，新建 <strong>webapp</strong> 目录，使用 <strong>war</strong> 打包方式</p>
</li>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SpringMVC --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- ServletAPI --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Spring6和Thymeleaf整合包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring6<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>配置web.xml文件</strong>：注册前端控制器，对浏览器发送的请求统一进行处理</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:SpringMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建请求控制器</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">    	<span class="comment">//设置视图名称</span></span><br><span class="line">    	<span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建SpringMVC配置文件</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动扫描包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.mvc.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;springResourceTemplateResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring6.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;templateEngine&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring6.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;springResourceTemplateResolver&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring6.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;templateEngine&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第二章-RequestMapping注解"><a href="#第二章-RequestMapping注解" class="headerlink" title="第二章	@RequestMapping注解"></a>第二章	@RequestMapping注解</h2><h3 id="2-1-RequestMapping注解"><a href="#2-1-RequestMapping注解" class="headerlink" title="2.1	@RequestMapping注解"></a>2.1	@RequestMapping注解</h3><ul>
<li><strong>注解功能</strong>：将请求和处理请求的控制器方法关联起来，建立映射关系，当 <strong>SpringMVC</strong> 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求</li>
<li><strong>注解位置</strong><ul>
<li><strong>类注解</strong>：设置映射请求的请求路径的初始信息</li>
<li><strong>方法注解</strong>：设置映射请求请求路径的具体信息</li>
</ul>
</li>
</ul>
<h3 id="2-2-RequestMapping属性"><a href="#2-2-RequestMapping属性" class="headerlink" title="2.2	@RequestMapping属性"></a>2.2	@RequestMapping属性</h3><ul>
<li><p><strong>value属性</strong></p>
<ul>
<li><p><strong>功能</strong>：是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求</p>
</li>
<li><p><strong>示例</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>method属性</strong></p>
<ul>
<li><p><strong>功能</strong>：是一个 <strong>RequestMethod</strong> 类型的数组，表示该请求映射能够匹配多种请求方式的请求</p>
</li>
<li><p><strong>示例</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;,</span></span><br><span class="line"><span class="meta">        method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>派生注解</strong>：<strong>post</strong> 方式可以使用 <strong>PostMapping</strong> 注解，<strong>get</strong> 方式可以使用 <strong>GetMapping</strong> 注解</p>
</li>
</ul>
</li>
<li><p><strong>param属性</strong></p>
<ul>
<li><p><strong>功能</strong>：是一个字符串类型的数组，可以通过四种表达式设置请求参数和请求映射的匹配关系</p>
</li>
<li><p><strong>示例</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span></span><br><span class="line"><span class="meta">        ,method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span></span><br><span class="line"><span class="meta">        ,params = &#123;&quot;username&quot;,&quot;password!=123456&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>headers属性</strong></p>
<ul>
<li><p><strong>功能</strong>：是一个字符串类型的数组，可以通过四种表达式设置请求头信息和请求映射的匹配关系</p>
</li>
<li><p><strong>示例</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span></span><br><span class="line"><span class="meta">        ,header = &#123;&quot;Host=localhost:8080&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-3路径中的占位符"><a href="#2-3路径中的占位符" class="headerlink" title="2.3	路径中的占位符"></a>2.3	路径中的占位符</h3><ul>
<li><p><strong>Ant风格路径</strong></p>
<ul>
<li>**?**：表示任意的单个字符</li>
<li>*****：表示任意的0个或多个字符</li>
<li>******：表示任意的一层或多层目录</li>
</ul>
</li>
<li><p><strong>路径中的占位符</strong></p>
<ul>
<li><p>使用路径表示传入的参数，例如将 <strong>&#x2F;deleteUser?id&#x3D;1</strong> 改写成 <strong>&#x2F;deleteUser&#x2F;1</strong></p>
</li>
<li><p>在相应的 <strong>@RequestMapping</strong> 注解的 <strong>value</strong> 属性中通过占位符 <strong>{xxx}</strong> 表示传输的数据</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;a th:href=<span class="string">&quot;@&#123;/testRest/1/admin&#125;&quot;</span>&gt;测试路径中的占位符--&gt;/testRest&lt;/a&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/testRest/&#123;id&#125;/&#123;username&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRest</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id, <span class="meta">@PathVariable(&quot;username&quot;)</span> String username)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;id:&quot;</span>+id+<span class="string">&quot;,username:&quot;</span>+username);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第三章获取请求参数"><a href="#第三章获取请求参数" class="headerlink" title="第三章	获取请求参数"></a>第三章	获取请求参数</h2><h3 id="3-1通过ServletAPI获取"><a href="#3-1通过ServletAPI获取" class="headerlink" title="3.1	通过ServletAPI获取"></a>3.1	通过ServletAPI获取</h3><ul>
<li><p><strong>Servlet获取</strong>：使用 <strong>HttpServletRequest</strong> 的 <strong>getParameter</strong> 方法获取请求参数</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span>+username+<span class="string">&quot;,password:&quot;</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-2通过控制器方法的形参获取"><a href="#3-2通过控制器方法的形参获取" class="headerlink" title="3.2	通过控制器方法的形参获取"></a>3.2	通过控制器方法的形参获取</h3><ul>
<li><p><strong>控制器方法形参获取</strong>：在控制器方法的形参位置，设置和请求参数同名的形参获取参数</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;a th:href=<span class="string">&quot;@&#123;/testParam(username=&#x27;admin&#x27;,password=123456)&#125;&quot;</span>&gt;测试获取请求参数--&gt;/testParam&lt;/a&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam</span><span class="params">(String username, String password)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span>+username+<span class="string">&quot;,password:&quot;</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-3请求注解"><a href="#3-3请求注解" class="headerlink" title="3.3	请求注解"></a>3.3	请求注解</h3><ul>
<li><strong>@RequestParam</strong>：将请求参数和控制器方法的形参创建映射关系<ul>
<li><strong>value属性</strong>：指定为形参赋值的请求参数的参数名</li>
<li><strong>required属性</strong>：设置是否必须传输此请求参数，默认值为 <strong>true</strong></li>
<li><strong>defaultValue属性</strong>：不管 <strong>required</strong> 属性值为 <strong>true</strong> 或 <strong>false</strong>，当 <strong>value</strong> 所指定的请求参数没有传输或传输的值为空时，则使用默认值为形参赋值</li>
</ul>
</li>
<li><strong>@RequestHeader</strong>：将请求头信息和控制器方法的形参创建映射关系，属性及其用法同上</li>
<li><strong>@CookieValue</strong>：将 <strong>cookie</strong> 数据和控制器方法的形参创建映射关系，属性及其用法同上</li>
</ul>
<h3 id="3-4通过POJO获取参数"><a href="#3-4通过POJO获取参数" class="headerlink" title="3.4	通过POJO获取参数"></a>3.4	通过POJO获取参数</h3><ul>
<li><p><strong>POJO获取参数</strong>：在控制器方法的形参位置设置一个实体类类型的形参，此时若浏览器传输的请求参数的参数名和实体类中的属性名一致，那么请求参数就会为此属性赋值</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;form th:action=<span class="string">&quot;@&#123;/testpojo&#125;&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    密码：&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    性别：&lt;input type=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;sex&quot;</span> value=<span class="string">&quot;男&quot;</span>&gt;男&lt;input type=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;sex&quot;</span> value=<span class="string">&quot;女&quot;</span>&gt;女&lt;br&gt;</span><br><span class="line">    年龄：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;age&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    邮箱：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;email&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@RequestMapping(&quot;/testpojo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testPOJO</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-5解决乱码问题"><a href="#3-5解决乱码问题" class="headerlink" title="3.5	解决乱码问题"></a>3.5	解决乱码问题</h3><ul>
<li><p><strong>解决乱码问题</strong>：使用 <strong>SpringMVC</strong> 提供的编码过滤器 <strong>CharacterEncodingFilter</strong>，在 <strong>web.xml</strong> 当中进行注册</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第四章域对象共享数据"><a href="#第四章域对象共享数据" class="headerlink" title="第四章	域对象共享数据"></a>第四章	域对象共享数据</h2><h3 id="4-1request域对象共享数据"><a href="#4-1request域对象共享数据" class="headerlink" title="4.1	request域对象共享数据"></a>4.1	request域对象共享数据</h3><ul>
<li><p><strong>使用ServletAPI</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testServletAPI&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testServletAPI</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    request.setAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,servletAPI&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用ModelAndView</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModelAndView&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">testModelAndView</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">mav</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">    mav.addObject(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,ModelAndView&quot;</span>);</span><br><span class="line">    mav.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用Model</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testModel</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,Model&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用Map</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testMap&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testMap</span><span class="params">(Map&lt;String, Object&gt; map)</span>&#123;</span><br><span class="line">    map.put(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,Map&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-2session域对象共享数据"><a href="#4-2session域对象共享数据" class="headerlink" title="4.2	session域对象共享数据"></a>4.2	session域对象共享数据</h3><ul>
<li><p><strong>使用session</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testSession&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testSession</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    session.setAttribute(<span class="string">&quot;testSessionScope&quot;</span>, <span class="string">&quot;hello,session&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-3application域对象共享数据"><a href="#4-3application域对象共享数据" class="headerlink" title="4.3	application域对象共享数据"></a>4.3	application域对象共享数据</h3><ul>
<li><p><strong>使用application</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testApplication&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testApplication</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">application</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    application.setAttribute(<span class="string">&quot;testApplicationScope&quot;</span>, <span class="string">&quot;hello,application&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第五章视图"><a href="#第五章视图" class="headerlink" title="第五章	视图"></a>第五章	视图</h2><h3 id="5-1ThymeleafView"><a href="#5-1ThymeleafView" class="headerlink" title="5.1	ThymeleafView"></a>5.1	ThymeleafView</h3><ul>
<li><p><strong>视图解析器</strong>：视图名称被 <strong>SpringMVC</strong> 配置文件中所配置的视图解析器解析，视图名称拼接视图前缀和视图后缀所得到的最终路径，会通过转发的方式实现跳转</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testHello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testHello</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-2转发视图"><a href="#5-2转发视图" class="headerlink" title="5.2	转发视图"></a>5.2	转发视图</h3><ul>
<li><p><strong>转发视图</strong>：当控制器方法中所设置的视图名称以 <strong>forward:</strong> 为前缀时，创建 <strong>InternalResourceView</strong> 视图，此时的视图名称不会视图解析器解析，而是会去除前缀并将剩余部分作为最终路径通过转发的方式实现跳转</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testForward&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testForward</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/testHello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-3重定向视图"><a href="#5-3重定向视图" class="headerlink" title="5.3	重定向视图"></a>5.3	重定向视图</h3><ul>
<li><p><strong>重定向视图</strong>：当控制器方法中所设置的视图名称以 <strong>redirect:</strong> 为前缀时，创建 <strong>RedirectView</strong> 视图，此时的视图名称不会被视图解析器解析，而是会去除前缀并将剩余部分作为最终路径通过重定向的方式实现跳转</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRedirect&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRedirect</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/testHello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-4视图控制器"><a href="#5-4视图控制器" class="headerlink" title="5.4	视图控制器"></a>5.4	视图控制器</h3><ul>
<li><p><strong>控制器视图</strong>：仅仅用来实现页面跳转，即只需要设置视图名称时</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/testView&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;success&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第六章RESTful"><a href="#第六章RESTful" class="headerlink" title="第六章	RESTful"></a>第六章	RESTful</h2><h3 id="6-1RESTful简介"><a href="#6-1RESTful简介" class="headerlink" title="6.1	RESTful简介"></a>6.1	RESTful简介</h3><ul>
<li><p><strong>RESTful概述</strong>：全称 <strong>Representational State Transfer</strong>，表现层资源状态转移</p>
<ul>
<li><strong>资源</strong>：将服务器看作是由很多离散的资源组成，每个资源是服务器上一个可命名的抽象概念，不仅仅能代表服务器文件系统中的一个文件、数据库中的一张表等等具体的东西，可以将资源设计的要多抽象有多抽象，只要想象力允许而且客户端应用开发者能够理解</li>
<li><strong>资源的表述</strong>：一段对于资源在某个特定时刻的状态的描述，可以在客户端-服务器端之间转移（交换）</li>
<li><strong>状态转移</strong>：在客户端和服务器端之间转移代表资源状态的表述，通过转移和操作资源的表述，来间接实现操作资源的目的</li>
</ul>
</li>
<li><p><strong>RESTful的实现</strong>：使用不同类型报文实现不同操作，<strong>GET</strong> 用来获取资源，<strong>POST</strong> 用来新建资源，<strong>PUT</strong> 用来更新资源，<strong>DELETE</strong> 用来删除资源</p>
<table>
<thead>
<tr>
<th align="center">操作</th>
<th align="center">传统方式</th>
<th align="center">REST风格</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>查询操作</strong></td>
<td align="center">getUserById?id&#x3D;1</td>
<td align="center">user&#x2F;1–&gt;get请求方式</td>
</tr>
<tr>
<td align="center"><strong>保存操作</strong></td>
<td align="center">saveUser</td>
<td align="center">user–&gt;post请求方式</td>
</tr>
<tr>
<td align="center"><strong>删除操作</strong></td>
<td align="center">deleteUser?id&#x3D;1</td>
<td align="center">user&#x2F;1–&gt;delete请求方式</td>
</tr>
<tr>
<td align="center"><strong>更新操作</strong></td>
<td align="center">updateUser</td>
<td align="center">user–&gt;put请求方式</td>
</tr>
</tbody></table>
</li>
<li><p><strong>HiddenHttpMethodFilter</strong>：将 <strong>post</strong> 请求转换为 <strong>DELETE</strong> 或者 <strong>PUT</strong> 请求</p>
<ul>
<li><p><strong>注册过滤器</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>表单示例</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;delete_form&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;delete&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="6-2RTESTful案例"><a href="#6-2RTESTful案例" class="headerlink" title="6.2	RTESTful案例"></a>6.2	RTESTful案例</h3><ul>
<li><p><strong>访问首页</strong></p>
<ul>
<li><p><strong>创建html页面</strong></p>
</li>
<li><p><strong>配置视图控制器</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;index&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>查询数据</strong></p>
<ul>
<li><p><strong>创建html页面</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dataTable&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;5&quot;</span>&gt;</span>Employee Info<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>lastName<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>email<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>gender<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>options(<span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toAdd&#125;&quot;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">a</span>&gt;</span>)<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;employee : $&#123;employeeList&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;deleteA&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;deleteEmployee&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>控制器方法</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getEmployeeList</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    Collection&lt;Employee&gt; employeeList = employeeDao.getAll();</span><br><span class="line">    model.addAttribute(<span class="string">&quot;employeeList&quot;</span>, employeeList);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;employee_list&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>删除数据</strong></p>
<ul>
<li><p><strong>创建html页面</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;delete_form&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;delete&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>绑定点击事件</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;deleteA&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;deleteEmployee&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#dataTable&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">deleteEmployee</span>:<span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> delete_form = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;delete_form&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                delete_form.<span class="property">action</span> = event.<span class="property">target</span>.<span class="property">href</span>;</span></span><br><span class="line"><span class="language-javascript">                delete_form.<span class="title function_">submit</span>();</span></span><br><span class="line"><span class="language-javascript">                event.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>控制器方法</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;, method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">deleteEmployee</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">    employeeDao.delete(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>跳转页面</strong></p>
<ul>
<li><p><strong>创建html页面</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    lastName:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    email:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    gender:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>male</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>female<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;add&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置视图控制器</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/toAdd&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;employee_add&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>添加数据</strong></p>
<ul>
<li><p><strong>创建html页面</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    lastName:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    email:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    gender:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>male</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>female<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;add&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>控制器方法</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addEmployee</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">    employeeDao.save(employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>更新数据</strong></p>
<ul>
<li><p><strong>创建html页面</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;put&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.id&#125;&quot;</span>&gt;</span></span><br><span class="line">    lastName:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    email:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    gender:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">th:field</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span>male</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">th:field</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span>female<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;update&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>控制器方法</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getEmployeeById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id, Model model)</span>&#123;</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeDao.get(id);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;employee&quot;</span>, employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;employee_update&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第七章报文信息转换"><a href="#第七章报文信息转换" class="headerlink" title="第七章	报文信息转换"></a>第七章	报文信息转换</h2><h3 id="7-1请求报文"><a href="#7-1请求报文" class="headerlink" title="7.1	请求报文"></a>7.1	请求报文</h3><ul>
<li><p><strong>@RequestBody</strong>：获取请求体，为当前注解标识的形参赋值</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;form th:action=<span class="string">&quot;@&#123;/testRequestBody&#125;&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    密码：&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestBody&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestBody</span><span class="params">(<span class="meta">@RequestBody</span> String requestBody)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;requestBody:&quot;</span>+requestBody);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>RequestEntity</strong>：封装请求报文的一种类型，可以通过 <strong>getHeaders()</strong> 获取请求头信息，通过 <strong>getBody()</strong> 获取请求体信息</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestEntity&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestEntity</span><span class="params">(RequestEntity&lt;String&gt; requestEntity)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;requestHeader:&quot;</span>+requestEntity.getHeaders());</span><br><span class="line">    System.out.println(<span class="string">&quot;requestBody:&quot;</span>+requestEntity.getBody());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="7-2SpringMVC处理json"><a href="#7-2SpringMVC处理json" class="headerlink" title="7.2	SpringMVC处理json"></a>7.2	SpringMVC处理json</h3><ul>
<li><p><strong>响应报文处理json</strong></p>
<ul>
<li><p><strong>导入依赖</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.15.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>开启注解驱动</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>控制器方法返回Java对象</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testResponseUser&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">testResponseUser</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1001</span>,<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="7-3响应报文"><a href="#7-3响应报文" class="headerlink" title="7.3	响应报文"></a>7.3	响应报文</h3><ul>
<li><p><strong>@ResponseBody</strong>：用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到浏览器</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testResponseBody&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testResponseBody</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>ResponseEntity</strong>：用于控制器方法的返回值类型，该控制器方法的返回值就是响应到浏览器的响应报文</p>
</li>
<li><p><strong>@RestController</strong>：<strong>springMVC</strong> 提供的一个复合注解，标识在控制器的类上，就相当于为类添加了 <strong>@Controller</strong> 注解，并且为其中的每个方法添加了 <strong>@ResponseBody</strong> 注解</p>
</li>
</ul>
<h2 id="第八章文件上传和下载"><a href="#第八章文件上传和下载" class="headerlink" title="第八章	文件上传和下载"></a>第八章	文件上传和下载</h2><h3 id="8-1文件下载"><a href="#8-1文件下载" class="headerlink" title="8.1	文件下载"></a>8.1	文件下载</h3><ul>
<li><p><strong>使用ResponseEntity</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testDown&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="type">byte</span>[]&gt; testResponseEntity(HttpSession session) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//获取ServletContext对象</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    <span class="comment">//获取服务器中文件的真实路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;/static/img/1.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">//创建输入流</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(realPath);</span><br><span class="line">    <span class="comment">//创建字节数组</span></span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[is.available()];</span><br><span class="line">    <span class="comment">//将流读到字节数组中</span></span><br><span class="line">    is.read(bytes);</span><br><span class="line">    <span class="comment">//创建HttpHeaders对象设置响应头信息</span></span><br><span class="line">    MultiValueMap&lt;String, String&gt; headers = <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">    <span class="comment">//设置要下载方式以及下载文件的名字</span></span><br><span class="line">    headers.add(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=1.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">//设置响应状态码</span></span><br><span class="line">    <span class="type">HttpStatus</span> <span class="variable">statusCode</span> <span class="operator">=</span> HttpStatus.OK;</span><br><span class="line">    <span class="comment">//创建ResponseEntity对象</span></span><br><span class="line">    ResponseEntity&lt;<span class="type">byte</span>[]&gt; responseEntity = <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(bytes, headers, statusCode);</span><br><span class="line">    <span class="comment">//关闭输入流</span></span><br><span class="line">    is.close();</span><br><span class="line">    <span class="keyword">return</span> responseEntity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="8-2文件上传"><a href="#8-2文件上传" class="headerlink" title="8.2	文件上传"></a>8.2	文件上传</h3><ul>
<li><p><strong>文件上传</strong></p>
<ul>
<li><p><strong>添加依赖</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>添加bean配置</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.support.StandardServletMultipartResolver&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>添加Servlet配置</strong>：嵌入到前端控制器 <strong>servlet</strong> 标签中</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">multipart-config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--         上传文件最大为多少   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">max-file-size</span>&gt;</span>10485760<span class="tag">&lt;/<span class="name">max-file-size</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--         最大的请求大小   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">max-request-size</span>&gt;</span>10485760<span class="tag">&lt;/<span class="name">max-request-size</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--         多大以上的文件可以上传   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">file-size-threshold</span>&gt;</span>0<span class="tag">&lt;/<span class="name">file-size-threshold</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">multipart-config</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>前端代码</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/testUp&#125;&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;picture&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>控制器方法</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testUp&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testUpload</span><span class="params">(<span class="meta">@RequestParam(&quot;picture&quot;)</span>MultipartFile picture, HttpSession session)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//获取上传的文件的文件名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> picture.getOriginalFilename();</span><br><span class="line">    <span class="comment">//处理文件重名问题</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">hzName</span> <span class="operator">=</span> fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    fileName = UUID.randomUUID() + hzName;</span><br><span class="line">    <span class="comment">//获取服务器中photo目录的路径</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    <span class="type">String</span> <span class="variable">photoPath</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;picture&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(photoPath);</span><br><span class="line">    <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">        file.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">finalPath</span> <span class="operator">=</span> photoPath + File.separator + fileName;</span><br><span class="line">    <span class="comment">//实现上传功能</span></span><br><span class="line">    picture.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(finalPath));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;successs&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第九章拦截器"><a href="#第九章拦截器" class="headerlink" title="第九章	拦截器"></a>第九章	拦截器</h2><h3 id="9-1拦截器配置"><a href="#9-1拦截器配置" class="headerlink" title="9.1	拦截器配置"></a>9.1	拦截器配置</h3><ul>
<li><p><strong>拦截器</strong>：用于拦截控制器的执行，需要实现 <strong>HandlerInterceptor</strong> 接口</p>
</li>
<li><p><strong>拦截器的配置</strong></p>
<ul>
<li><p><strong>bean标签处理所有请求</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.interceptor.FirstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>ref标签处理所有请求</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>interceptor标签处理部分请求</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/testRequestEntity&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="9-2拦截器的抽象方法"><a href="#9-2拦截器的抽象方法" class="headerlink" title="9.2	拦截器的抽象方法"></a>9.2	拦截器的抽象方法</h3><ul>
<li><strong>preHandle</strong>：控制器方法执行之前执行 **preHandle()**，其返回值表示是否拦截或放行，返回 <strong>true</strong> 为放行，即调用控制器方法；返回 <strong>false</strong> 表示拦截，即不调用控制器方法</li>
<li><strong>postHandle</strong>：控制器方法执行之后执行 <strong>postHandle()</strong></li>
<li><strong>afterComplation</strong>：处理完视图和模型数据，渲染视图完毕之后执行 <strong>afterComplation()</strong></li>
</ul>
<h3 id="9-3拦截器的执行顺序"><a href="#9-3拦截器的执行顺序" class="headerlink" title="9.3	拦截器的执行顺序"></a>9.3	拦截器的执行顺序</h3><ul>
<li><strong>每个preHandle返回true</strong>：<strong>preHandle()</strong> 会按照配置的顺序执行，而 <strong>postHandle()</strong> 和 <strong>afterComplation()</strong> 会按照配置的反序执行</li>
<li><strong>每个preHandle都返回false</strong>：<strong>preHandle()</strong> 返回 <strong>false</strong> 和它之前的拦截器的 <strong>preHandle()</strong> 都会执行，<strong>postHandle()</strong> 都不执行，返回<strong>false</strong> 的拦截器之前的拦截器的 <strong>afterComplation()</strong> 会执行</li>
</ul>
<h2 id="第十章异常处理器"><a href="#第十章异常处理器" class="headerlink" title="第十章	异常处理器"></a>第十章	异常处理器</h2><h3 id="10-1基于配置的异常处理"><a href="#10-1基于配置的异常处理" class="headerlink" title="10.1	基于配置的异常处理"></a>10.1	基于配置的异常处理</h3><ul>
<li><p><strong>异常处理器</strong></p>
<ul>
<li><p><strong>bean配置</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionMappings&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--设置异常对应的视图--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;java.lang.ArithmeticException&quot;</span>&gt;</span>error<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置将异常信息共享在请求域中的键--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionAttribute&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>错误视图</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span> = <span class="string">&quot;$&#123;ex&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="10-2基于注解的异常处理"><a href="#10-2基于注解的异常处理" class="headerlink" title="10.2	基于注解的异常处理"></a>10.2	基于注解的异常处理</h3><ul>
<li><p><strong>异常处理器</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionController</span> &#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(ArithmeticException.class)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleArithmeticException</span><span class="params">(Exception ex, Model model)</span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;ex&quot;</span>, ex);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第十一章注解配置SpringMVC"><a href="#第十一章注解配置SpringMVC" class="headerlink" title="第十一章	注解配置SpringMVC"></a>第十一章	注解配置SpringMVC</h2><h3 id="11-1初始化类"><a href="#11-1初始化类" class="headerlink" title="11.1	初始化类"></a>11.1	初始化类</h3><ul>
<li><p><strong>初始化类代替web.xml</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebInit</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定spring的配置类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定SpringMVC的配置类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;WebConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定DispatcherServlet的映射规则，即url-pattern</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加过滤器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        <span class="type">CharacterEncodingFilter</span> <span class="variable">encodingFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">        encodingFilter.setEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        encodingFilter.setForceRequestEncoding(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">HiddenHttpMethodFilter</span> <span class="variable">hiddenHttpMethodFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HiddenHttpMethodFilter</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;encodingFilter, hiddenHttpMethodFilter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="11-2Spring配置类"><a href="#11-2Spring配置类" class="headerlink" title="11.2	Spring配置类"></a>11.2	Spring配置类</h3><ul>
<li><p><strong>SpringConfig类代替配置文件</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">    <span class="comment">//ssm整合之后，spring的配置信息写在此类中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="11-3Web配置类"><a href="#11-3Web配置类" class="headerlink" title="11.3	Web配置类"></a>11.3	Web配置类</h3><ul>
<li><p><strong>WebConfig类代替SpringMVC.xml</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//扫描组件</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.atguigu.mvc.controller&quot;)</span></span><br><span class="line"><span class="comment">//开启MVC注解驱动</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用默认的servlet处理静态资源</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> &#123;</span><br><span class="line">        configurer.enable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置文件上传解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CommonsMultipartResolver <span class="title function_">multipartResolver</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonsMultipartResolver</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="type">FirstInterceptor</span> <span class="variable">firstInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FirstInterceptor</span>();</span><br><span class="line">        registry.addInterceptor(firstInterceptor).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置视图控制</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public void addViewControllers(ViewControllerRegistry registry) &#123;</span></span><br><span class="line"><span class="comment">        registry.addViewController(&quot;/&quot;).setViewName(&quot;index&quot;);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置异常映射</span></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public void configureHandlerExceptionResolvers(List&lt;HandlerExceptionResolver&gt; resolvers) &#123;</span></span><br><span class="line"><span class="comment">        SimpleMappingExceptionResolver exceptionResolver = new SimpleMappingExceptionResolver();</span></span><br><span class="line"><span class="comment">        Properties prop = new Properties();</span></span><br><span class="line"><span class="comment">        prop.setProperty(&quot;java.lang.ArithmeticException&quot;, &quot;error&quot;);</span></span><br><span class="line"><span class="comment">        //设置异常映射</span></span><br><span class="line"><span class="comment">        exceptionResolver.setExceptionMappings(prop);</span></span><br><span class="line"><span class="comment">        //设置共享异常信息的键</span></span><br><span class="line"><span class="comment">        exceptionResolver.setExceptionAttribute(&quot;ex&quot;);</span></span><br><span class="line"><span class="comment">        resolvers.add(exceptionResolver);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置生成模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ITemplateResolver <span class="title function_">templateResolver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">webApplicationContext</span> <span class="operator">=</span> ContextLoader.getCurrentWebApplicationContext();</span><br><span class="line">        <span class="comment">// ServletContextTemplateResolver需要一个ServletContext作为构造参数，可通过WebApplicationContext 的方法获得</span></span><br><span class="line">        <span class="type">ServletContextTemplateResolver</span> <span class="variable">templateResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletContextTemplateResolver</span>(</span><br><span class="line">                webApplicationContext.getServletContext());</span><br><span class="line">        templateResolver.setPrefix(<span class="string">&quot;/WEB-INF/templates/&quot;</span>);</span><br><span class="line">        templateResolver.setSuffix(<span class="string">&quot;.html&quot;</span>);</span><br><span class="line">        templateResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        templateResolver.setTemplateMode(TemplateMode.HTML);</span><br><span class="line">        <span class="keyword">return</span> templateResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成模板引擎并为模板引擎注入模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SpringTemplateEngine <span class="title function_">templateEngine</span><span class="params">(ITemplateResolver templateResolver)</span> &#123;</span><br><span class="line">        <span class="type">SpringTemplateEngine</span> <span class="variable">templateEngine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringTemplateEngine</span>();</span><br><span class="line">        templateEngine.setTemplateResolver(templateResolver);</span><br><span class="line">        <span class="keyword">return</span> templateEngine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成视图解析器并未解析器注入模板引擎</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ViewResolver <span class="title function_">viewResolver</span><span class="params">(SpringTemplateEngine templateEngine)</span> &#123;</span><br><span class="line">        <span class="type">ThymeleafViewResolver</span> <span class="variable">viewResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThymeleafViewResolver</span>();</span><br><span class="line">        viewResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        viewResolver.setTemplateEngine(templateEngine);</span><br><span class="line">        <span class="keyword">return</span> viewResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Gradle</title>
    <url>/2024/01/28/Gradle/</url>
    <content><![CDATA[<h2 id="第一节Gradle概述"><a href="#第一节Gradle概述" class="headerlink" title="第一节	Gradle概述"></a>第一节	Gradle概述</h2><ul>
<li><p><strong>Gradle 简介</strong>：一款 <strong>Google</strong> 推出的基于 <strong>JVM</strong>、通用灵活的项目构建工具，支持 <strong>Maven</strong>，<strong>JCenter</strong> 多种第三方仓库，支持传递性依赖管理、废弃了繁杂的 <strong>xml</strong> 文件，转而使用简洁的、支持多种语言的 <strong>build</strong> 脚本文件</p>
</li>
<li><p><strong>Gradle 项目目录结构</strong></p>
<ul>
<li><strong>build</strong>：封装打包后的字节码，打成的包，测试报告等信息</li>
<li><strong>gradle</strong>：封装包装器文件夹</li>
<li><strong>src</strong><ul>
<li><strong>main</strong><ul>
<li><strong>java</strong></li>
<li><strong>resource</strong></li>
<li><strong>webapp</strong></li>
</ul>
</li>
<li><strong>test</strong><ul>
<li><strong>java</strong></li>
<li><strong>resource</strong></li>
</ul>
</li>
</ul>
</li>
<li><strong>gradlew</strong></li>
<li><strong>gradlew.bat</strong>：包装器启动脚本</li>
<li><strong>build.gradle</strong>：构建脚本</li>
<li><strong>settings.gradle</strong>：设置文件，定义项目及子项目名称信息</li>
</ul>
</li>
<li><p><strong>常用指令</strong></p>
<ul>
<li><p>清空 <strong>build</strong> 目录</p>
  <figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">gradle clean</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译业务代码和配置文件</p>
  <figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">gradle classes</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译测试代码，生成测试报告</p>
  <figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">gradle test</span><br></pre></td></tr></table></figure>
</li>
<li><p>构建项目</p>
  <figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">gradle build</span><br></pre></td></tr></table></figure>
</li>
<li><p>跳过测试构建项目</p>
  <figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">gradle build -x test</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>Wrapper 包装器</strong></p>
<ul>
<li></li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Git</title>
    <url>/2024/01/28/Git/</url>
    <content><![CDATA[<h2 id="第一节Git概述"><a href="#第一节Git概述" class="headerlink" title="第一节	Git概述"></a>第一节	Git概述</h2><ul>
<li><strong>Git 简介</strong>：一个免费的、开源的分布式版本控制系统，可以快速高效地处理从小型到大型的各种项目，<strong>Git</strong> 易于学习，体积小，性能极快，具有廉价的本地库，方便的暂存区域和多个工作流分支等特性</li>
<li><strong>版本控制工具</strong><ul>
<li><strong>集中式版本控制工具</strong>：有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新，例如 <strong>CVS</strong>,<strong>SVN</strong>,<strong>VSS</strong> 等</li>
<li><strong>分布式版本控制工具</strong>：客户端提取的不是最新版本的文件快照，而是把代码仓库完整地镜像下来，任何一处协同工作用的文件发生故障，事后都可以用其他客户端的本地仓库进行恢复，例如 <strong>Git</strong>，<strong>Mercurial</strong>，<strong>Bazaar</strong> 等</li>
</ul>
</li>
<li><strong>Git 工作机制</strong><ul>
<li><strong>工作区</strong>：存放项目代码的地方</li>
<li><strong>暂存区</strong>：用于临时存放代码的改动，它事实上是一个文件，保存即将提交的文件列表信息，一般存放于 <strong>index</strong> 文件中</li>
<li><strong>仓库区</strong>：安全存放数据的位置，包含提交的所有版本数据</li>
</ul>
</li>
</ul>
<h2 id="第二节Git常用命令"><a href="#第二节Git常用命令" class="headerlink" title="第二节	Git常用命令"></a>第二节	Git常用命令</h2><ul>
<li><p><strong>设置用户配置</strong></p>
<ul>
<li><p><strong>查看用户配置</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>设置用户名</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>设置邮箱</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.email</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>初始化本地库</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查看本地库状态</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>添加暂存区</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add [filename]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>提交到本地库</strong></p>
<ul>
<li><p><strong>添加提交备注</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m [message] [filename]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>跳过缓存步骤</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -am [message] [filename]</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>历史版本</strong></p>
<ul>
<li><p><strong>查看历史版本</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reflog // 查看版本信息</span><br><span class="line">git <span class="built_in">log</span> // 查看详细版本信息</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>版本穿梭</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard [version] // 切换版本</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第三节Git的分支操作"><a href="#第三节Git的分支操作" class="headerlink" title="第三节	Git的分支操作"></a>第三节	Git的分支操作</h2><ul>
<li><p><strong>分支</strong>：在版本控制过程中，同时推进多个任务，创建每个任务的单独分支，使用分支可以把自己的工作从开发主线上分离开来，开发自己分支的时候，不会影响主线分支的运行</p>
</li>
<li><p><strong>查看分支</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -v</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建分支</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch [branchname]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>切换分支</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout [branchname]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>合并分支</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge [branchname]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>解决冲突</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 手动合并冲突</span><br><span class="line">git add *</span><br><span class="line">git commit</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第四节GitHub操作"><a href="#第四节GitHub操作" class="headerlink" title="第四节	GitHub操作"></a>第四节	GitHub操作</h2><ul>
<li><p><strong>创建远程仓库别名</strong></p>
<ul>
<li><p><strong>查看远程地址别名</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote -v </span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建远程别名</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add [<span class="built_in">alias</span>] [address]</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>推送本地分支到远程仓库</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push [<span class="built_in">alias</span>] [branname]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>克隆远程仓库到本地</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> [address]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>拉取远程库内容</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull [<span class="built_in">alias</span>] [branchname]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>跨团队协作</strong>：使用 <strong>fork</strong> 命令复刻他人的项目地址，作出修改后提交推送申请，被同意后即可完成推送</p>
</li>
<li><p><strong>SSH 免密登录</strong></p>
<ul>
<li><p><strong>删除原有密钥</strong></p>
</li>
<li><p><strong>创建密钥</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;[address]&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>远程仓库添加密钥</strong></p>
</li>
<li><p><strong>克隆远程仓库</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> [address]</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第五节IDEA集成Git"><a href="#第五节IDEA集成Git" class="headerlink" title="第五节	IDEA集成Git"></a>第五节	IDEA集成Git</h2><ul>
<li><strong>Git 忽略文件</strong>：与项目的实际功能无关，不参与服务器上部署运行，把它们忽略掉能够屏蔽 <strong>IDE</strong> 工具之间的差异</li>
<li><strong>分支整合</strong><ul>
<li><strong>变基</strong>：是将一个分支的更改应用到另一个分支的过程，不同于合并操作，它会将分支上的提交重新应用在目标分支上</li>
<li><strong>合并</strong>：是将一个分支的更改合并到另一个分支中，它会创建一个新的提交，包含两个分支的更改，合并会在分支历史中保留各个分支的独立提交历史</li>
</ul>
</li>
<li><strong>获取变更</strong><ul>
<li><strong>提取</strong>：仅会从远程仓库中获取最新的提交记录，不会自动将其应用到本地分支，可以查看远程仓库上的变更情况，然后再决定是否将其合并到本地分支上</li>
<li><strong>拉取</strong>：先从远程仓库中获取最新的提交记录，然后将这些提交记录应用到本地分支上，可以更新本地分支，使其与远程分支保持同步，在执行拉取操作时，还可以选择将远程分支合并到当前本地分支上</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Makefile</title>
    <url>/2024/01/28/Makefile/</url>
    <content><![CDATA[<h2 id="第一节依赖关系"><a href="#第一节依赖关系" class="headerlink" title="第一节	依赖关系"></a>第一节	依赖关系</h2><p>通过 <strong>make</strong> 命令进行代码工程编译，其实际过程就是按照开发者在 <strong>Makefile</strong> 文件中所描述的模块与模块、模块与源代码文件之间的依赖关系，将源代码文件编译成 <strong>obj</strong> 文件，再将 <strong>obj</strong> 文件链接成库文件或可执行程序文件的过程</p>
<p>如果程序只有一个源代码文件 <strong>main.c</strong>，那么下面一条命令就可以完成程序 <strong>test</strong> 的编译，其依赖关系非常简单，就是可执行程序 <strong>test</strong> 依赖于源文件 <strong>main.c</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc main.c -o <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p>但软件项目中，模块之间的依赖关系一般比较复杂，想要通过一条命令 <strong>gcc</strong>命令完成项目的编译非常困难，并且不利于扩展和维护</p>
<p>下面给出一个简单工程示例，如何用 <strong>Makefile</strong> 规则为其快速编写一套编译脚本。</p>
<p><img src="C:\Users\86172\Pictures\Markdown\Makefile\v2-d7ed0199af5277cf04982e8502c65dfb_1440w.webp" alt="img"></p>
<p>简单的工程中目标文件与源文件依赖关系</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># test依赖于libtest.a main.o</span><br><span class="line">test: libtest.a main.o</span><br><span class="line">	gcc main.o -ltest -L. -o test</span><br><span class="line"># main.o依赖于main.c</span><br><span class="line">main.o:main.c</span><br><span class="line">	gcc main.c -c -o main.o</span><br><span class="line"># libtest.a依赖于test1.o test2.o</span><br><span class="line">libtest.a: test1.o test2.o</span><br><span class="line">	ar -r libtest.a test1.o test2.o</span><br><span class="line"># test1.o依赖于test1.c</span><br><span class="line">test1.o:test1.c</span><br><span class="line">	gcc test1.c -c -o test1.o</span><br><span class="line"># test2.o依赖于test2.c</span><br><span class="line">test2.o:test2.c</span><br><span class="line">	gcc test2.c -c -o test2.o</span><br></pre></td></tr></table></figure>

<p>将所有源文件和 <strong>Makefile</strong> 放在一个目录下，执行 <strong>make</strong> 命令，可以看到直接生成了可执行程序 <strong>test</strong>，这里没有使用<strong>Makefile</strong> 里面任何技巧，仅仅使用 <strong>Makefile</strong> 的规则描述了各个文件之间的依赖关系</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">target... : prerequisites ...</span><br><span class="line">          command</span><br><span class="line">          ......</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>target</strong>：可以是一个 <strong>object file</strong>（目标文件），也可以是一个执行文件，还可以是一个标签 <strong>label</strong></p>
<p><strong>prerequisites</strong>：生成该 <strong>target</strong> 所依赖的文件，可以有多个依赖</p>
<p><strong>command</strong>：该 <strong>target</strong> 要执行的命令（任意的 <strong>shell</strong> 命令）</p>
</blockquote>
<p>当要生成目标 <strong>test</strong> 时，<strong>make</strong> 工具会从 <strong>test</strong> 开始依次寻找依赖关系，由源文件逐步生成目标 <strong>test</strong>。<strong>test</strong> 依赖于 <strong>libtest.a</strong> 和 <strong>main.o</strong>，如果 <strong>libtest.a</strong> 和 <strong>main.o</strong> 存在，那么将直接使用命令 <strong>gcc main.o -ltest -L. -o test</strong> 生成 <strong>test</strong>；否则再向下遍历，寻找 <strong>libtest.a</strong> 和 <strong>main.o</strong> 的前置条件，去生成 <strong>libtest.a</strong> 和 <strong>main.o</strong>，就这样一直寻找到可以满足的前置条件，逐步生成目标 <strong>test</strong></p>
<p>在检查依赖关系时，同时会检查目标与源文件的时间戳，当源文件时间戳更新时，<strong>make</strong> 会更新依赖它的链路上所有目录</p>
<h2 id="第二节变量与函数"><a href="#第二节变量与函数" class="headerlink" title="第二节	变量与函数"></a>第二节	变量与函数</h2><p>上面的 <strong>Makefile</strong> 中，所有的依赖关系中直接使用文件名称，当新增加文件或者模块时，需要手动去添加新的依赖关系，那么这就比较麻烦，不利于扩展，因此可以使用变量，自动完成新依赖关系添加</p>
<p><strong>Makefile</strong> 中的变量类型基本上就可以直接理解为字符串类型</p>
<figure class="highlight make"><table><tr><td class="code"><pre><span class="line">SRC = test1.c test2.c main.c</span><br><span class="line">OBJ = test1.o test2.o main.o</span><br><span class="line"></span><br><span class="line"><span class="section">$&#123;OBJ&#125;:$&#123;SRC&#125;</span></span><br><span class="line">	gcc -c $&#123;SRC&#125;</span><br></pre></td></tr></table></figure>

<p>与 <strong>shell</strong> 脚本中的变量类似，定义变量时，直接使用等号赋值，使用变量时用 <strong>${VAR}</strong> 表示即可，上面 <strong>SRC</strong> 和 <strong>OBJ</strong> 变量分别表示 <strong>.c</strong> 与 <strong>.o</strong> 文件，但是展开写太麻烦了，这里可以用更为方便的办法</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">SRC = $(wildcard *.c)</span><br><span class="line">OBJ = $(patsubst %.c,%.o,$&#123;SRC&#125;)</span><br><span class="line"></span><br><span class="line">$&#123;OBJ&#125;:$&#123;SRC&#125;</span><br><span class="line">	gcc -c $&#123;SRC&#125;</span><br></pre></td></tr></table></figure>

<p>这里使用了 <strong>Makefile</strong> 中的函数，使用 <strong>$(<function> <arguments>)</strong> 的形式可以调用函数，<strong>Makefile</strong> 与 <strong>shell</strong> 脚本类似，支持通配符</p>
<table>
<thead>
<tr>
<th>通配符</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>匹配0个或者是任意个字符</td>
</tr>
<tr>
<td>？</td>
<td>匹配任意一个字符</td>
</tr>
<tr>
<td>[]</td>
<td>指定匹配的字符放在 “[]” 中</td>
</tr>
</tbody></table>
<p><strong>$(wildcard *.c)</strong> 表示将通配符 <em><strong>.c</strong> 展开，即 <strong>test1.c test2.c main.c</strong>，</em><em>patsubst</em>* 是模式替换函数，<strong>$(patsubst %.c,%.o,${SRC})</strong> 表示将变量 <strong>SRC</strong> 中符合 <strong>%.c</strong> 形式的字符串，修改为 <strong>%.o</strong> 形式</p>
<p>另外，这里的命令使用了自动化变量</p>
<table>
<thead>
<tr>
<th>自动化变量</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><strong>$@</strong></td>
<td>规则的目标文件名(依赖关系中冒号:左边的文件，如果 <strong>a: b c</strong>，那么 <strong>$@</strong> 指 <strong>a</strong>)</td>
</tr>
<tr>
<td><strong>$%</strong></td>
<td>当目标文件是一个静态库文件时，代表静态库的一个成员名</td>
</tr>
<tr>
<td><strong>$&lt;</strong></td>
<td>被依赖文件的第一项(如果 <strong>a: b c</strong>，那么 <strong>$&lt;</strong> 指 <strong>b</strong>)</td>
</tr>
<tr>
<td><strong>$?</strong></td>
<td>所有比目标文件更新的依赖文件列表，空格分隔</td>
</tr>
<tr>
<td><strong>$^</strong></td>
<td>所有依赖文件列表，使用空格分隔(如果 <strong>a: b c c</strong>，那么 <strong>$^</strong> 指 <strong>b c</strong>)，不包含重复文件</td>
</tr>
<tr>
<td><strong>$+</strong></td>
<td>所有依赖文件列表，使用空格分隔(如果 <strong>a: b c c</strong>，那么 <strong>$+</strong> 指 <strong>b c c</strong>)，包含重复文件</td>
</tr>
<tr>
<td><strong>$</strong>*</td>
<td>在模式规则和静态模式规则中的 <strong>%</strong> 所匹配的内容</td>
</tr>
</tbody></table>
<h2 id="第三节伪目标"><a href="#第三节伪目标" class="headerlink" title="第三节	伪目标"></a>第三节	伪目标</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">.PHONY : clean</span><br><span class="line">clean:</span><br><span class="line">	rm *.o *.a test</span><br></pre></td></tr></table></figure>

<p>这里定义了一个 <strong>clean</strong> 目标，它没有依赖，当执行 <strong>make clean</strong> 命令时，会删除所有的 <strong>.o</strong>、**.a** 文件和 <strong>test</strong> 文件，这样就可以利用 <strong>Makefile</strong> 来清除生成的文件。这里 <strong>make clean</strong> 并不是为了生成一个名称为 <strong>clean</strong> 的文件，为了防止文件同名，可以用 <strong>.PHONY</strong> 来声明伪目标</p>
<h2 id="第四节四种等号"><a href="#第四节四种等号" class="headerlink" title="第四节	四种等号"></a>第四节	四种等号</h2><p><strong>Makefile</strong> 中的等号有4种，**&#x3D;<strong>，</strong>:&#x3D;<strong>，</strong>?&#x3D;<strong>，</strong>+&#x3D;**</p>
<p><strong>?&#x3D;</strong> 表示，如果左边的变量没有被赋值，那么将等号右边的值赋给左边的变量</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">VAR_A ?= 123</span><br></pre></td></tr></table></figure>

<p>**+&#x3D; ** 表示将等号右边的值追加到左边变量中，类似于C语言中的 <strong>strcat</strong> 函数</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">VAR_B = 123</span><br><span class="line">VAR_B += 456</span><br></pre></td></tr></table></figure>

<p><strong>&#x3D;</strong> 与 <strong>:&#x3D;</strong> 是比较不好区分的两个等号，可以将 <strong>&#x3D;</strong> 理解为址传递或引用，**:&#x3D;** 理解为值传递，类似于浅拷贝和深拷贝</p>
<figure class="highlight make"><table><tr><td class="code"><pre><span class="line">var_a = 1 2 3</span><br><span class="line">var_b = <span class="variable">$(var_a)</span></span><br><span class="line">var_a += 4</span><br><span class="line"><span class="section">var_a:</span></span><br><span class="line">	echo $&#123;var_a&#125;</span><br><span class="line">	echo $&#123;var_b&#125;</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># 执行make var_a的结果:</span></span><br><span class="line">echo 1 2 3 4</span><br><span class="line">1 2 3 4</span><br><span class="line">echo 1 2 3 4</span><br><span class="line">1 2 3 4</span><br><span class="line"><span class="comment">###############################################################################</span></span><br><span class="line">var_a = 1 2 3</span><br><span class="line">var_b := <span class="variable">$(var_a)</span></span><br><span class="line">var_a += 4</span><br><span class="line"><span class="section">var_a:</span></span><br><span class="line">	echo $&#123;var_a&#125;</span><br><span class="line">	echo $&#123;var_b&#125;</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># 执行make var_a的结果:</span></span><br><span class="line">echo 1 2 3 4</span><br><span class="line">1 2 3 4</span><br><span class="line">echo 1 2 3</span><br><span class="line">1 2 3</span><br></pre></td></tr></table></figure>

<h2 id="第五节环境变量"><a href="#第五节环境变量" class="headerlink" title="第五节	环境变量"></a>第五节	环境变量</h2><p><strong>Makefile</strong> 的执行是受 <strong>shell</strong> 环境变量影响的，<strong>shell</strong> 环境变量会直接传递到 <strong>Makefile</strong> 的执行过程中</p>
<p>例如，针对语句 <strong>VAR_A ?&#x3D; yes</strong>，如果在 <strong>shell</strong> 中设置过环境变量 <strong>export VAR_A&#x3D;no</strong>，那么在执行 <strong>make</strong> 命令时 <strong>VAR_A</strong> 的值会是no，而不是 <strong>yes</strong>，另外可以在执行 <strong>make</strong> 命令时为传递变量的值，如果执行 <strong>make VAR_A&#x3D;maybe</strong> 命令，那么执行过程中 <strong>VAR_A</strong> 是 <strong>maybe</strong></p>
<p>利用这个特性，可以在 <strong>Shell</strong> 中设置环境变量来影响 <strong>Makefile</strong> 的执行过程，同样可以在 <strong>Makefile</strong> 中通过修改 <strong>PATH</strong> 等变量的值，来解决找不命令的问题</p>
<h2 id="第六节变量的嵌套使用"><a href="#第六节变量的嵌套使用" class="headerlink" title="第六节	变量的嵌套使用"></a>第六节	变量的嵌套使用</h2><p><strong>Makefile</strong> 允许变量的嵌套使用，下面的例子中 <strong>${var_a}</strong> 会解释为 <strong>b</strong>，<strong>var_${var_a}</strong> 变成 <strong>var_b</strong>，**${var_${var_a}}** 的值就变成了123</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">var_a = b</span><br><span class="line">var_b = 123</span><br><span class="line">var_c = $&#123;var_$&#123;var_a&#125;&#125;</span><br><span class="line">var_c:</span><br><span class="line">	echo $&#123;var_c&#125;</span><br><span class="line"># 执行make var_c结果</span><br><span class="line">echo 123</span><br><span class="line">123</span><br></pre></td></tr></table></figure>

<h2 id="第七节条件判断"><a href="#第七节条件判断" class="headerlink" title="第七节	条件判断"></a>第七节	条件判断</h2><p>下面给出了一个条件判断的示例，当 <strong>DEBUG_BUILD</strong> 的值是 <strong>yes</strong> 时，<strong>CFLAGS</strong> 中将包含 <strong>-ggdb -ggdb3 -gdwarf-2 -D_DEBUG_&#x3D;1 -g</strong>，否则将包含 <strong>-O3 -DNDEBUG</strong>，通过这段语句，可以在环境变量中设置 <strong>DEBUG_BUILD</strong>，是否生成调试版本的程序</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">ifeq ($&#123;DEBUG_BUILD&#125;,&quot;yes&quot;)</span><br><span class="line">CFLAGS += -ggdb -ggdb3 -gdwarf-2 -D_DEBUG_=1 -g</span><br><span class="line">else</span><br><span class="line">CFLAGS += -O3 -DNDEBUG</span><br><span class="line">endif</span><br></pre></td></tr></table></figure>

<h2 id="第八节关于-与"><a href="#第八节关于-与" class="headerlink" title="第八节	关于@与-"></a>第八节	关于@与-</h2><p>在执行 <strong>make</strong> 命令时，会打印 <strong>Makefile</strong> 里面执行的 <strong>command</strong> ，有时候 <strong>command</strong> 过长，不容易查看编译过程中出现的错误与警告，可以通过在 <strong>command</strong> 前加上 <strong>@</strong> 来取消打印 <strong>command</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">var_a = 123</span><br><span class="line">var_a:</span><br><span class="line">	echo $&#123;var_a&#125;</span><br><span class="line">-----------------------------</span><br><span class="line"># 执行make var_a输出</span><br><span class="line">echo 123</span><br><span class="line">123</span><br><span class="line">##############################</span><br><span class="line">var_a = 123</span><br><span class="line">var_a:</span><br><span class="line">	@echo $&#123;var_a&#125;</span><br><span class="line">------------------------------</span><br><span class="line"># 执行make var_a输出</span><br><span class="line">123</span><br></pre></td></tr></table></figure>

<p>生成 <strong>target</strong> 的过程中，可能需要执行多条命令，执行过程中也可能出现错误， 一般出现错误后，<strong>make</strong> 命令会立即退出，停止编译。如果想要忽略执行过程中的错误，可以在 <strong>command</strong> 前加上 <strong>-</strong> 来忽略这条命令的执行错误</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">var_a = 123</span><br><span class="line">var_a:</span><br><span class="line">	@ls dir1</span><br><span class="line">	@echo $&#123;var_a&#125;</span><br><span class="line">----------------------------------------------</span><br><span class="line"># 执行make var_a输出</span><br><span class="line">ls: 无法访问 &#x27;dir1&#x27;: 没有那个文件或目录</span><br><span class="line">make: [Makefile:19：var_a] 错误 2</span><br><span class="line">##############################################</span><br><span class="line">var_a = 123</span><br><span class="line">var_a:</span><br><span class="line">	-@ls dir1</span><br><span class="line">	@echo $&#123;var_a&#125;</span><br><span class="line">----------------------------------------------</span><br><span class="line"># 执行make var_a输出</span><br><span class="line">ls: 无法访问 &#x27;dir1&#x27;: 没有那个文件或目录</span><br><span class="line">make: [Makefile:19：var_a] 错误 2 (已忽略）</span><br><span class="line">123</span><br></pre></td></tr></table></figure>

<h2 id="第九节关于依赖中的头文件"><a href="#第九节关于依赖中的头文件" class="headerlink" title="第九节	关于依赖中的头文件"></a>第九节	关于依赖中的头文件</h2><p><strong>Makefile</strong> 与 <strong>C&#x2F;C++</strong> 一样，支持 <strong>include</strong> 另外一文件，这个机制允许 <strong>Makefile</strong> 可以根据不同的环境或者平台设置不同编译过程</p>
<p>但是这里更想提及的是另外一条语法 <strong>sinclude</strong> 的妙用，<strong>sinclude</strong> 在找不到文件时，并不会报错，会直接跳过，利用这个机制，可以更新目标文件的依赖关系</p>
<p>在上面举过的例子中，所有 <strong>.o</strong> 文件仅依赖于一个 <strong>.c</strong> 文件，而这个 <strong>.c</strong> 文件其实是包含了不少头文件的，所以更加正确的依赖关系应该是下面这样的</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">main.o: main.c include_file1.h include_file2.h include_file3.h ......</span><br><span class="line">    gcc @&lt; -o $@</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">main.o: include_file1.h include_file2.h include_file3.h ......</span><br><span class="line"></span><br><span class="line">main.o: main.c </span><br><span class="line">    gcc @&lt; -o $@</span><br></pre></td></tr></table></figure>

<h2 id="第十节make命令参数"><a href="#第十节make命令参数" class="headerlink" title="第十节	make命令参数"></a>第十节	make命令参数</h2><p>当直接运行 <strong>make</strong> 命令，后面不接 <strong>target</strong> 参数时，默认会生成 <strong>Makefile</strong> 中的第一个目标，如果要生成指定目标，需要在 <strong>make</strong> 命令后面接 <strong>target</strong> 名称</p>
<p><strong>make <target> VAR_A&#x3D;&lt;var*_*a&gt; -j <num></strong> 表示同时产生<num>个进程编译<target>，同时设置 <strong>Makefile</strong> 中变量<strong>VAR_A</strong> 的值为 <strong>var_a</strong>，如果 <strong>-j</strong> 后面不接数字参数，将会为每个目标文件产生一个进程进行编译，如果工程是源文件过多，可能导致进程数量过多而使计算机没有响应，所以直接使用 <strong>-j</strong> 参数而后面不接数字是一个不好的操作</p>
<p><strong>make -C &#x2F;build&#x2F;path -f make1.mak</strong> 表示在开始编译前，先将当前目录切换到 <strong>&#x2F;build&#x2F;path</strong> 路径下，再执行编译，相当于 <strong>cd &#x2F;build&#x2F;path &amp;&amp; make -f make1.mak</strong>，**-f** 参数用于指定要使用的 <strong>Makefile</strong> 文件，如果不使用 <strong>-f</strong> 参数，则默认使用当前目录下的名称为 <strong>Makefile</strong> 的文件</p>
<h2 id="第十一节简单Makefile模板"><a href="#第十一节简单Makefile模板" class="headerlink" title="第十一节	简单Makefile模板"></a>第十一节	简单Makefile模板</h2><p>这里给出了一个较为简单的 <strong>Makefile</strong> 模板，其最终生成目标为可执行程序，如果最终生成目标为库文件，需要进行简单调整</p>
<figure class="highlight make"><table><tr><td class="code"><pre><span class="line"><span class="comment">###################################################################################################</span></span><br><span class="line"><span class="comment"># 编译工具链设置</span></span><br><span class="line">PATH := $&#123;PATH&#125;:/your/tool_chain/path</span><br><span class="line">TOOL_CHAIN = </span><br><span class="line">CC = $&#123;TOOL_CHAIN&#125;gcc</span><br><span class="line">AR = $&#123;TOOL_CHAIN&#125;ar</span><br><span class="line"></span><br><span class="line">DEBUG_BUILD ?= yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># SHOW_COMMAND=yes，显示编译命令</span></span><br><span class="line"><span class="keyword">ifeq</span> ($&#123;SHOW_COMMAND&#125;, yes)</span><br><span class="line">QUIET :=</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">QUIET := @</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###################################################################################################</span></span><br><span class="line"><span class="comment"># 目录设置</span></span><br><span class="line"><span class="comment"># 工程根路径</span></span><br><span class="line">PROJ_ROOT = <span class="variable">$(<span class="built_in">abspath</span> ../..)</span></span><br><span class="line"><span class="comment"># 中间文件缓存文件夹</span></span><br><span class="line">TMP_PATH = <span class="variable">$(<span class="built_in">abspath</span> .)</span>/tmp</span><br><span class="line"><span class="comment"># 当前路径</span></span><br><span class="line">PWD_PATH = <span class="variable">$(<span class="built_in">abspath</span> .)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###################################################################################################</span></span><br><span class="line"><span class="comment"># 源文件.c</span></span><br><span class="line">SRC := $&#123;PROJ_ROOT&#125;/module1/*.c</span><br><span class="line">SRC += $&#123;PROJ_ROOT&#125;/module2/*.c</span><br><span class="line"><span class="comment"># 展开*匹配，获取所有源文件完整路径</span></span><br><span class="line">SRC := <span class="variable">$(<span class="built_in">wildcard</span> $&#123;SRC&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###################################################################################################</span></span><br><span class="line"><span class="comment"># 头文件路径设置</span></span><br><span class="line">INCLUDE_PATH += /<span class="keyword">include</span>/path1</span><br><span class="line">INCLUDE_PATH += /<span class="keyword">include</span>/path2</span><br><span class="line">INCLUDE_PATH += $&#123;PROJ_ROOT&#125;/<span class="keyword">include</span>/path1</span><br><span class="line">INCLUDE_PATH += $&#123;PROJ_ROOT&#125;/<span class="keyword">include</span>/path2</span><br><span class="line"></span><br><span class="line"><span class="comment">###################################################################################################</span></span><br><span class="line"><span class="comment"># 编译宏设定</span></span><br><span class="line">DEFINE_SETTINGS := LINUX</span><br><span class="line">DEFINE_SETTINGS += A72=<span class="string">&quot;A72&quot;</span></span><br><span class="line">DEFINE_SETTINGS += TARGET_NUM_CORES=1</span><br><span class="line">DEFINE_SETTINGS += TARGET_ARCH=64</span><br><span class="line">DEFINE_SETTINGS += ARCH_64</span><br><span class="line">DEFINE_SETTINGS += ARM</span><br><span class="line"></span><br><span class="line"><span class="comment">###################################################################################################</span></span><br><span class="line"><span class="comment"># 库路径设置</span></span><br><span class="line"><span class="comment"># 静态库.a文件夹路径</span></span><br><span class="line">STATIC_LIB_PATH := $&#123;PROJ_ROOT&#125;/moduleXXX1/lib</span><br><span class="line">STATIC_LIB_PATH += $&#123;PROJ_ROOT&#125;/moduleXXX2/lib</span><br><span class="line"><span class="comment"># 动态库.so文件夹路径</span></span><br><span class="line">DYNAMIC_LIB_PATH := $&#123;PROJ_ROOT&#125;/moduleXXX3/lib</span><br><span class="line"></span><br><span class="line"><span class="comment">###################################################################################################</span></span><br><span class="line"><span class="comment"># 库设置(静态库)</span></span><br><span class="line">STATIC_LIB += static_lib1</span><br><span class="line">STATIC_LIB += static_lib2</span><br><span class="line">STATIC_LIB += static_lib3</span><br><span class="line">STATIC_LIB += static_lib4</span><br><span class="line"><span class="comment"># 库设置(动态库)</span></span><br><span class="line">DYNAMIC_LIB := stdc++</span><br><span class="line">DYNAMIC_LIB += m</span><br><span class="line">DYNAMIC_LIB += rt</span><br><span class="line">DYNAMIC_LIB += pthread</span><br><span class="line"></span><br><span class="line"><span class="comment">###################################################################################################</span></span><br><span class="line"><span class="comment"># 编译选项</span></span><br><span class="line">CFLAGS := -fPIC -Wall -fms-extensions -Wno-write-strings -Wno-format-security</span><br><span class="line">CFLAGS += -fno-short-enums -Werror</span><br><span class="line">CFLAGS += -mlittle-endian  -Wno-format-truncation</span><br><span class="line"><span class="keyword">ifeq</span> (<span class="string">&quot;$&#123;DEBUG_BUILD&#125;&quot;</span>,<span class="string">&quot;yes&quot;</span>)</span><br><span class="line">CFLAGS += -ggdb -ggdb3 -gdwarf-2 -D_DEBUG_=1 -g</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">CFLAGS += -O3 -DNDEBUG</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###################################################################################################</span></span><br><span class="line"><span class="comment"># 生成的中间文件.o</span></span><br><span class="line">OBJ := <span class="variable">$(<span class="built_in">patsubst</span> $&#123;PROJ_ROOT&#125;/%.c,$&#123;TMP_PATH&#125;/%.o,$&#123;SRC&#125;)</span></span><br><span class="line"><span class="comment"># 头文件存放路径设置</span></span><br><span class="line">INC := <span class="variable">$(<span class="built_in">foreach</span> path,$&#123;INCLUDE_PATH&#125;,-I$&#123;path&#125;)</span></span><br><span class="line"><span class="comment"># 编译宏设置</span></span><br><span class="line">DEF := <span class="variable">$(<span class="built_in">foreach</span> macro,$&#123;DEFINE_SETTINGS&#125;,-D$&#123;macro&#125;)</span></span><br><span class="line"><span class="comment"># 库设置</span></span><br><span class="line">LIB := -rdynamic -Wl,--cref</span><br><span class="line">LIB += <span class="variable">$(<span class="built_in">foreach</span> path,$&#123;DYNAMIC_LIB_PATH&#125;,&quot;-Wl,-rpath-link=$&#123;path&#125;&quot;)</span></span><br><span class="line">LIB += <span class="variable">$(<span class="built_in">foreach</span> path,$&#123;STATIC_LIB_PATH&#125;,-L$&#123;path&#125;)</span></span><br><span class="line">LIB += -Wl,-Bstatic -Wl,--start-group</span><br><span class="line">LIB += <span class="variable">$(<span class="built_in">foreach</span> lib,$&#123;STATIC_LIB&#125;,-l$&#123;lib&#125;)</span></span><br><span class="line">LIB += -Wl,--end-group</span><br><span class="line">LIB += -Wl,-Bdynamic</span><br><span class="line">LIB += <span class="variable">$(<span class="built_in">foreach</span> lib,$&#123;DYNAMIC_LIB&#125;,-l$&#123;lib&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成目标</span></span><br><span class="line">TARGET := $&#123;PWD_PATH&#125;/demo/demo</span><br><span class="line"><span class="comment"># 生成目标中的详细符号信息文件</span></span><br><span class="line">DEP_FILE := -Wl,-Map=$&#123;TMP_PATH&#125;/<span class="variable">$(<span class="built_in">notdir</span> $&#123;TARGET&#125;)</span>.dep</span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: all clean</span></span><br><span class="line"><span class="section">all: $&#123;TARGET&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="section">$&#123;TARGET&#125;:$&#123;OBJ&#125;</span></span><br><span class="line">	@echo <span class="string">&quot;[Linking <span class="variable">$@</span>]&quot;</span></span><br><span class="line">	$&#123;QUIET&#125;$&#123;CC&#125; $&#123;OBJ&#125; $&#123;CFLAGS&#125; $&#123;LIB&#125; -o <span class="variable">$@</span> $&#123;DEP_FILE&#125; &gt;/dev/null</span><br><span class="line"></span><br><span class="line"><span class="section">$&#123;TMP_PATH&#125;/%.o:$&#123;PROJ_ROOT&#125;/%.c</span></span><br><span class="line">	@echo <span class="string">&quot;[Compiling <span class="variable">$@</span>]&quot;</span></span><br><span class="line">	@mkdir <span class="variable">$(<span class="built_in">dir</span> <span class="variable">$@</span>)</span> -p</span><br><span class="line">	$&#123;QUIET&#125;$&#123;CC&#125; -c <span class="variable">$&lt;</span> -o <span class="variable">$@</span> $&#123;CFLAGS&#125; $&#123;DEF&#125; $&#123;INC&#125; -MMD -MF <span class="variable">$(<span class="built_in">patsubst</span> %.o,%.dep,<span class="variable">$@</span>)</span> -MT &#x27;<span class="variable">$@</span>&#x27;</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	@echo <span class="string">&quot;[cleaning $&#123;TARGET&#125;]&quot;</span></span><br><span class="line">	$&#123;QUIET&#125;rm -rf $&#123;TARGET&#125;</span><br><span class="line">	$&#123;QUIET&#125;rm -rf $&#123;TMP_PATH&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>JSON</title>
    <url>/2024/01/28/JSON/</url>
    <content><![CDATA[<h2 id="第一节JSON简介"><a href="#第一节JSON简介" class="headerlink" title="第一节	JSON简介"></a>第一节	JSON简介</h2><ul>
<li><strong>JSON</strong>：全称是 <strong>JavaScript Object Notation</strong>，即 <strong>JavaScript</strong>对象标记法，是一种轻量级的数据交换格式，它既易于人阅读和编写，也易于机器解析和生成，而且相比 <strong>XML</strong> 文件更小，因此迅速成为网络上十分流行的交换格式</li>
</ul>
<h2 id="第二节JSON对象定义和基本使用"><a href="#第二节JSON对象定义和基本使用" class="headerlink" title="第二节	JSON对象定义和基本使用"></a>第二节	JSON对象定义和基本使用</h2><ul>
<li><p><strong>语法规则</strong></p>
<ul>
<li>数组 <strong>Array</strong> 用方括号 <strong>[]</strong> 表示</li>
<li>对象 <strong>0bject</strong> 用大括号 <strong>{}</strong> 表示</li>
<li>名称&#x2F;值对 <strong>name&#x2F;value</strong> 组合成数组和对象</li>
<li>名称 <strong>name</strong> 置于双引号中，值 <strong>value</strong> 有字符串、数值、布尔值、<strong>null</strong>、对象和数组</li>
<li>并列的数据之间用逗号 <strong>,</strong> 分隔</li>
</ul>
</li>
<li><p><strong>JSON的定义</strong></p>
  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Json 定义格式：</span></span><br><span class="line">var jsons = <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;key1&quot;</span><span class="punctuation">:</span><span class="string">&quot;abc&quot;</span><span class="punctuation">,</span> <span class="comment">// 字符串类型</span></span><br><span class="line"><span class="attr">&quot;key2&quot;</span><span class="punctuation">:</span><span class="number">1234</span><span class="punctuation">,</span> <span class="comment">// Number</span></span><br><span class="line"><span class="attr">&quot;key3&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="number">1234</span><span class="punctuation">,</span><span class="string">&quot;21341&quot;</span><span class="punctuation">,</span><span class="string">&quot;53&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 数组</span></span><br><span class="line"><span class="attr">&quot;key4&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span> <span class="comment">// json 类型</span></span><br><span class="line"><span class="attr">&quot;key4_1&quot;</span> <span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;key4_2&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;kkk&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">&quot;key5&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span> <span class="comment">// json 数组</span></span><br><span class="line"><span class="attr">&quot;key5_1_1&quot;</span> <span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;key5_1_2&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;abc&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;key5_2_1&quot;</span> <span class="punctuation">:</span> <span class="number">41</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;key5_2_2&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bbj&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第三节JSON的解析和生成"><a href="#第三节JSON的解析和生成" class="headerlink" title="第三节	JSON的解析和生成"></a>第三节	JSON的解析和生成</h2><ul>
<li><p>**JSON.parse()**：将 <strong>JSON</strong> 字符串转换为 <strong>JS</strong> 对象</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> str = <span class="string">&#x27;&#123;&quot;name&quot;: &quot;兮动人&quot;,&quot;age&quot;:22&#125;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(str);</span></span><br><span class="line"><span class="language-javascript">	<span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>**JSON.stringify()**：将 <strong>JS</strong> 对象转换为 <strong>JSON</strong> 字符串</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> str = <span class="string">&#x27;&#123;&quot;name&quot;: &quot;兮动人&quot;,&quot;age&quot;:22&#125;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(str);</span></span><br><span class="line"><span class="language-javascript">	<span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> jsonstr = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj);</span></span><br><span class="line"><span class="language-javascript">	<span class="variable language_">console</span>.<span class="title function_">log</span>(jsonstr);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第四节Java中的JSON"><a href="#第四节Java中的JSON" class="headerlink" title="第四节	Java中的JSON"></a>第四节	Java中的JSON</h2><ul>
<li><p><strong>Java 对象和 JSON 的转换</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// json 操作，一定要先 new 一个 gson 对象。</span></span><br><span class="line"><span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line"><span class="comment">// java 对象--json</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">12</span>, <span class="string">&quot;wzg168&quot;</span>);</span><br><span class="line"><span class="comment">// 把对象转成为 json 字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">personjson</span> <span class="operator">=</span> gson.toJson(person);</span><br><span class="line"><span class="comment">// 把 json 字符串转换成为 java 对象</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> gson.fromJson(personjson, Person.class);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Java 对象 list 集合和 JSON 的转换</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Person&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Person&gt;(); </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">10</span> * i, <span class="string">&quot;name-&quot;</span> + i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把  List 对象转换成为json 字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">jsonListString</span> <span class="operator">=</span> gson.toJson(list);</span><br><span class="line"><span class="comment">// 把 json 数组转换成为 List 对象</span></span><br><span class="line"><span class="comment">// 我们可以使用匿名内部类</span></span><br><span class="line">List&lt;Person&gt; ps = gson.fromJson(jsonListString, <span class="keyword">new</span> <span class="title class_">TypeToken</span>&lt;List&lt;Person&gt;&gt;() &#123;</span><br><span class="line">&#125;.getType());</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Map 对象和 JSON 的转换</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Person&gt; mapPerson = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, GsonTest.Person&gt;();</span><br><span class="line"><span class="comment">// 添加 person 到 map 中</span></span><br><span class="line">mapPerson.put(<span class="string">&quot;p1&quot;</span>, <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1</span>, <span class="string">&quot;person-1&quot;</span>));</span><br><span class="line">mapPerson.put(<span class="string">&quot;p2&quot;</span>, <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">2</span>, <span class="string">&quot;person-2&quot;</span>));</span><br><span class="line"><span class="comment">// 把 map 转换成为 json 对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">jsonMapString</span> <span class="operator">=</span> gson.toJson(mapPerson);</span><br><span class="line">System.out.println(jsonMapString);</span><br><span class="line"><span class="comment">// 通过使用匿名内部类的方式</span></span><br><span class="line">Map&lt;String, Person&gt; map = gson.fromJson(jsonMapString,<span class="keyword">new</span> <span class="title class_">TypeToken</span>&lt;HashMap&lt;String, Person&gt;&gt;() &#123;&#125;.getType());</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>RESTful</title>
    <url>/2024/01/28/RESTful/</url>
    <content><![CDATA[<h2 id="第一节RESTful概述"><a href="#第一节RESTful概述" class="headerlink" title="第一节	RESTful概述"></a>第一节	RESTful概述</h2><ul>
<li><strong>RESTful 简介</strong>：全称 <strong>Representational State Transfer</strong>，即表述性状态传递，在 2000 年被提出，基于 <strong>HTTP</strong>、<strong>URI</strong>、<strong>XML</strong>、<strong>JSON</strong> 等标准和协议，支持轻量级、跨平台、跨语言的架构设计，是Web服务的一种新的架构风格</li>
<li><strong>轻量级</strong>：代码不被侵入，轻量级跟包大小无关，耦合性越低，越轻量</li>
<li><strong>RESTful 主要原则</strong><ul>
<li>对网络上所有的资源都有一个资源标志符</li>
<li>对资源的操作不会改变标识符</li>
<li>同一资源有多种表现形式</li>
<li>所有操作都是无状态的</li>
</ul>
</li>
<li><strong>无状态性</strong>：使得客户端和服务器端不必保存对方的详细信息，服务器只需要处理当前的请求，不需了解请求的历史，可以更容易的释放资源，让服务器利用连接池技术来提高稳定性和性能</li>
</ul>
<h2 id="第二节RESTful介绍"><a href="#第二节RESTful介绍" class="headerlink" title="第二节	RESTful介绍"></a>第二节	RESTful介绍</h2><ul>
<li><p><strong>响应设计</strong>：数据接收到即可使用，无需拆箱，在一次请求中，内容正文仅仅用于传输数据，请求头中存放描述请求或请求的元数据</p>
</li>
<li><p><strong>RESTful 资源操作</strong></p>
<table>
<thead>
<tr>
<th align="center">HTTP方法</th>
<th align="center">资源操作</th>
<th align="center">幂等</th>
<th align="center">安全</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>GET</strong></td>
<td align="center">SELECT</td>
<td align="center">是</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center"><strong>POST</strong></td>
<td align="center">INSERT</td>
<td align="center">否</td>
<td align="center">否</td>
</tr>
<tr>
<td align="center"><strong>PUT</strong></td>
<td align="center">UPDATE</td>
<td align="center">是</td>
<td align="center">否</td>
</tr>
<tr>
<td align="center"><strong>DELETE</strong></td>
<td align="center">DELETE</td>
<td align="center">是</td>
<td align="center">否</td>
</tr>
</tbody></table>
</li>
<li><p><strong>接口示例</strong></p>
<ul>
<li><p><strong>查询</strong></p>
<ul>
<li><p>传统 <strong>URL</strong> 请求格式</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/user/query/1 GET</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>RESTful</strong> 请求格式</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/user/1 GET</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>新增</strong></p>
<ul>
<li><p>传统 <strong>URL</strong> 请求格式</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/user/save POST</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>RESTful</strong> 请求格式</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/user POST</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>修改</strong></p>
<ul>
<li><p>传统 <strong>URL</strong> 请求格式</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/user/update POST</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>RESTful</strong> 请求格式</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/user PUT</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>删除</strong></p>
<ul>
<li><p>传统 <strong>URL</strong> 请求格式</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/user/delete GET/POST</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>RESTful</strong> 请求格式</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/user DELETE</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>HTTP 响应状态码</strong></p>
<table>
<thead>
<tr>
<th align="center">响应码</th>
<th align="center">HTTP方法</th>
<th align="center">正文内容</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>200</strong></td>
<td align="center">GET，PUT</td>
<td align="center">资源</td>
<td align="center">操作成功</td>
</tr>
<tr>
<td align="center"><strong>201</strong></td>
<td align="center">POST</td>
<td align="center">资源，元数据</td>
<td align="center">对象创建成功</td>
</tr>
<tr>
<td align="center"><strong>202</strong></td>
<td align="center">POST，PUT，DELETE，PATCH</td>
<td align="center">N&#x2F;A</td>
<td align="center">请求已经被接受</td>
</tr>
<tr>
<td align="center"><strong>204</strong></td>
<td align="center">DELETE，PUT，PATCH</td>
<td align="center">N&#x2F;A</td>
<td align="center">操作已经执行成功，但是没有返回数据</td>
</tr>
<tr>
<td align="center"><strong>301</strong></td>
<td align="center">GET</td>
<td align="center">link</td>
<td align="center">资源已被移除</td>
</tr>
<tr>
<td align="center"><strong>303</strong></td>
<td align="center">GET</td>
<td align="center">link</td>
<td align="center">重定向</td>
</tr>
<tr>
<td align="center"><strong>304</strong></td>
<td align="center">GET</td>
<td align="center">N&#x2F;A</td>
<td align="center">资源没有被修改</td>
</tr>
<tr>
<td align="center"><strong>400</strong></td>
<td align="center">GET，POST，PUT，DELETE，PATCH</td>
<td align="center">错误提示</td>
<td align="center">参数列表错误</td>
</tr>
<tr>
<td align="center"><strong>401</strong></td>
<td align="center">GET，POST，PUT，DELETE，PATCH</td>
<td align="center">错误提示</td>
<td align="center">未授权</td>
</tr>
<tr>
<td align="center"><strong>403</strong></td>
<td align="center">GET，POST，PUT，DELETE，PATCH</td>
<td align="center">错误提示</td>
<td align="center">访问受限，授权过期</td>
</tr>
<tr>
<td align="center"><strong>404</strong></td>
<td align="center">GET，POST，PUT，DELETE，PATCH</td>
<td align="center">错误提示</td>
<td align="center">资源，服务未找到</td>
</tr>
<tr>
<td align="center"><strong>405</strong></td>
<td align="center">GET，POST，PUT，DELETE，PATCH</td>
<td align="center">错误提示</td>
<td align="center">不允许的 <strong>HTTP</strong> 方法</td>
</tr>
<tr>
<td align="center"><strong>409</strong></td>
<td align="center">GET，POST，PUT，DELETE，PATCH</td>
<td align="center">错误提示</td>
<td align="center">资源冲突，或者资源被锁定</td>
</tr>
<tr>
<td align="center"><strong>415</strong></td>
<td align="center">GET，POST，PUT，DELETE，PATCH</td>
<td align="center">错误提示</td>
<td align="center">不支持的数据类型</td>
</tr>
<tr>
<td align="center"><strong>429</strong></td>
<td align="center">GET，POST，PUT，DELETE，PATCH</td>
<td align="center">错误提示</td>
<td align="center">请求过多被限制</td>
</tr>
<tr>
<td align="center"><strong>500</strong></td>
<td align="center">GET，POST，PUT，DELETE，PATCH</td>
<td align="center">错误提示</td>
<td align="center">系统内部错误</td>
</tr>
<tr>
<td align="center"><strong>501</strong></td>
<td align="center">GET，POST，PUT，DELETE，PATCH</td>
<td align="center">错误提示</td>
<td align="center">接口未实现</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="第三节RESTful的使用"><a href="#第三节RESTful的使用" class="headerlink" title="第三节	RESTful的使用"></a>第三节	RESTful的使用</h2><ul>
<li><p><strong>注入业务层组件</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> NewUserService newUserService;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查询 GET</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;&#123;userId&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title function_">queryUserById</span> <span class="params">(PathVariable (<span class="string">&quot;userId&quot;</span>)</span> Long userId)&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.newUserService.queryUserById(userId);</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> = user)&#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NOT_FOUND).body(<span class="literal">null</span>);<span class="comment">// 资源不存在，响应404</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(user);<span class="comment">// 响应200</span></span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(<span class="literal">null</span>);<span class="comment">// 响应500</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>新增 POST</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequsetMapping(method = RequestMothod.POST)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title function_">saveUser</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.userService.saveUser(user);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).build();<span class="comment">// 响应201</span></span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();<span class="comment">// 响应500</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>更新 PUT</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequsetMapping(method = RequestMothod.PUT)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title function_">updateUser</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="built_in">this</span>.userService.updateUser(user);</span><br><span class="line">        <span class="keyword">if</span>(count == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NO_CONTENT).build();<span class="comment">// 响应204</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();<span class="comment">// 响应500</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>删除 DELETE</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequsetMapping(method = RequestMothod.DELETE)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title function_">deleteUserById</span><span class="params">(<span class="meta">@RequestParam(value = &quot;id&quot;, defaultValue = &quot;0&quot;)</span> Long id)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(id.intVlaue() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST).build();<span class="comment">// 响应400</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="built_in">this</span>.userService.deleteUserById(id);</span><br><span class="line">        <span class="keyword">if</span>(count.intVlaue() == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.NO_CONTENT).build();<span class="comment">// 响应204</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();<span class="comment">// 响应500</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Maven</title>
    <url>/2024/01/28/Maven/</url>
    <content><![CDATA[<h2 id="第一节为什么需要Maven"><a href="#第一节为什么需要Maven" class="headerlink" title="第一节	为什么需要Maven"></a>第一节	为什么需要Maven</h2><p><strong>一个项目就是一个工程</strong></p>
<p>如果项目非常庞大，就不适合使用 <strong>package</strong> 来划分模块，最好是每一个模块对应一个工程，利于分工协作，借助于<strong>maven</strong> 就可以将一个项目拆分成多个工程</p>
<p><strong>项目中使用 jar 包，需要“复制”、“粘贴”项目的 lib 中</strong></p>
<p>同样的 <strong>jar</strong> 包重复的出现在不同的项目工程中，你需要做不停的复制粘贴的重复工作，借助于 <strong>maven</strong>，可以将 <strong>jar</strong> 包保存在“仓库”中，不管在哪个项目只要使用引用即可就行</p>
<p><strong>jar 包需要的时候每次都要自己准备好或到官网下载</strong></p>
<p>借助于 <strong>maven</strong> 我们可以使用统一的规范方式下载 <strong>jar</strong> 包，规范</p>
<p><strong>jar 包版本不一致的风险</strong></p>
<p>不同的项目在使用 <strong>jar</strong> 包的时候，有可能会导致各个项目的 <strong>jar</strong> 包版本不一致，导致未执行错误，借助于 <strong>maven</strong>，所有的 <strong>jar</strong> 包都放在“仓库”中，所有的项目都使用仓库的一份 <strong>jar</strong> 包</p>
<p><strong>一个 jar 包依赖其他的 jar 包需要自己手动的加入到项目中</strong></p>
<p><strong>jar</strong> 的依赖关系极大的浪费了我们导入包的时间成本，也极大的增加了学习成本，借助于 <strong>maven</strong>，它会自动的将依赖的 <strong>jar</strong> 包导入进来</p>
<h2 id="第二节Maven介绍"><a href="#第二节Maven介绍" class="headerlink" title="第二节	Maven介绍"></a>第二节	Maven介绍</h2><ul>
<li><p><strong>maven介绍</strong>：<strong>maven 是一款服务于 java 平台的自动化构建工具</strong></p>
</li>
<li><p><strong>构建</strong></p>
<ul>
<li><strong>构建定义</strong>：把动态的 <strong>Web</strong> 工程经过编译得到的编译结果部署到服务器上的整个过程</li>
<li><strong>编译</strong>：<strong>java</strong> 源文件 <strong>[.java]</strong> -&gt;编译-&gt; <strong>Classz</strong> 字节码文件 <strong>[.class]</strong></li>
<li><strong>部署</strong>：最终在 <strong>servlet</strong> 容器中部署的不是动态 <strong>web</strong> 工程，而是编译后的文件</li>
</ul>
</li>
<li><p><strong>构建的各个环节</strong></p>
<ul>
<li><p>清理 <strong>clean</strong>：将以前编译得到的旧文件 <strong>class</strong> 字节码文件删除</p>
</li>
<li><p>编译 <strong>compile</strong>：将 <strong>java</strong> 源程序编译成 <strong>class</strong> 字节码文件</p>
</li>
<li><p>测试 <strong>test</strong>：自动测试，自动调用 <strong>junit</strong> 程序</p>
</li>
<li><p>报告 <strong>report</strong>：测试程序执行的结果</p>
</li>
<li><p>打包 <strong>package</strong>：动态 <strong>Web</strong> 工程打 <strong>War</strong> 包，<strong>java</strong> 工程打 <strong>jar</strong> 包</p>
</li>
<li><p>安装 <strong>install</strong>：<strong>Maven</strong> 特定的概念—–将打包得到的文件复制到“仓库”中的指定位置</p>
</li>
<li><p>部署 <strong>deploy</strong>：将动态 <strong>Web</strong> 工程生成的 <strong>war</strong> 包复制到 <strong>Servlet</strong> 容器下，使其可以运行</p>
</li>
</ul>
</li>
</ul>
<h2 id="第三节Maven入门"><a href="#第三节Maven入门" class="headerlink" title="第三节	Maven入门"></a>第三节	Maven入门</h2><ul>
<li><strong>创建约定的目录结构</strong></li>
</ul>
<blockquote>
<p>根目录：工程名<br>|—src：源码<br>|—|—main:存放主程序<br>|—|—|—java：java源码文件<br>|—|—|—resource：存放框架的配置文件<br>|—|—test：存放测试程序<br>|—pop.xml：maven的核心配置文件</p>
</blockquote>
<ul>
<li><p><strong>常用的maven命令</strong></p>
<ul>
<li><p><strong>mvn clean</strong>：清理</p>
</li>
<li><p><strong>mvn compile</strong>：编译主程序</p>
</li>
<li><p><strong>mvn test-compile</strong>：编译测试程序</p>
</li>
<li><p><strong>mvn test</strong>：执行测试</p>
</li>
<li><p><strong>mvn package</strong>：打包</p>
</li>
<li><p><strong>mvn install</strong>：安装</p>
</li>
</ul>
</li>
</ul>
<h2 id="第四节仓库和坐标"><a href="#第四节仓库和坐标" class="headerlink" title="第四节	仓库和坐标"></a>第四节	仓库和坐标</h2><ul>
<li><p><strong>pom.xml</strong>：<strong>Project Object Model</strong> 项目对象模型，它是  <strong>maven</strong> 的核心配置文件，所有的构建的配置都在这里设置</p>
</li>
<li><p><strong>坐标：</strong>使用下面的三个向量 <strong>groupId</strong>，<strong>artifactid</strong>，<strong>version</strong> 在仓库中唯一的定位一个 <strong>maven</strong>工程</p>
</li>
</ul>
<p><img src="C:\Users\86172\Pictures\Markdown\Maven\向量-1706454533232-3" alt="img"></p>
<ul>
<li><p><strong>仓库</strong></p>
<ul>
<li><p><strong>本地仓库：</strong>当前电脑上的仓库</p>
</li>
<li><p><strong>远程仓库</strong></p>
<ul>
<li><strong>私服</strong>：搭建在局域网中，一般公司都会有私服，私服一般使用 <strong>nexus</strong> 来搭建</li>
<li><strong>中央仓库</strong>：架设在 <strong>Internet</strong> 上</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="第五节依赖"><a href="#第五节依赖" class="headerlink" title="第五节	依赖"></a>第五节	依赖</h2><ul>
<li><p><strong>maven 解析依赖信息时会到本地仓库中取查找被依赖的 jar 包</strong></p>
<ul>
<li><p>对于本地仓库中没有的会去中央仓库去查找 <strong>maven</strong> 坐标来获取 <strong>jar</strong> 包，获取到 <strong>jar</strong> 之后会下载到本地仓库</p>
</li>
<li><p>对于中央仓库也找不到依赖的 <strong>jar</strong> 包的时候，就会编译失败了</p>
</li>
<li><p>如果依赖的是自己或者团队开发的 <strong>maven</strong> 工程，需要先使用 <strong>install</strong> 命令把被依赖的 <strong>maven</strong> 工程的 <strong>jar</strong> 包导入到本地仓库中</p>
</li>
</ul>
</li>
<li><p><strong>依赖范围</strong>：<strong>scope</strong>就是依赖的范围</p>
<ul>
<li><strong>compile</strong>：默认值，适用于所有阶段（开发、测试、部署、运行），该 <strong>jar</strong> 会一直存在所有阶段</li>
<li><strong>provided</strong>：只在开发、测试阶段使用，目的是不让 <strong>Servlet</strong> 容器和你本地仓库的 <strong>jar</strong> 包冲突 </li>
<li><strong>runtime</strong>：只在运行时使用，如 <strong>JDBC</strong> 驱动，适用运行和测试阶段</li>
<li><strong>test</strong>：只在测试时使用，用于编译和运行测试代码，不会随项目发布。</li>
<li><strong>system</strong>：类似 <strong>provided</strong>，需要显式提供包含依赖的 <strong>jar</strong>，<strong>Maven</strong> 不会在 <strong>Repository</strong> 中查找它</li>
</ul>
</li>
</ul>
<h2 id="第六节生命周期"><a href="#第六节生命周期" class="headerlink" title="第六节	生命周期"></a>第六节	生命周期</h2><ul>
<li><p><strong>Maven</strong> 有三套相互独立的生命周期，不论执行生命周期的哪一个阶段，<strong>maven</strong> 都是从这个生命周期的开始执行</p>
<ul>
<li><p><strong>Clean</strong>生命周期：在进行真正的构建之前进行一些清理工作</p>
<ul>
<li><strong>pre-clean</strong>：执行一些需要在 <strong>clean</strong> 之前完成的工作</li>
<li><strong>clean</strong>：移除所有上一次构建生成的文件</li>
</ul>
<ul>
<li><strong>post-clean</strong>：执行一些需要在 <strong>clean</strong> 之后立刻完成的工作</li>
</ul>
</li>
<li><p><strong>Default</strong>生命周期：构建的核心部分，编译，测试，打包，部署等等</p>
<ul>
<li><strong>validate</strong>：校验项目是否正确并且所有必要的信息可以完成项目的构建过程</li>
<li><strong>generate-sources</strong>：生成包含在编译阶段中的任何源代码</li>
<li><strong>process-sources</strong>：处理源代码，比如说，过滤任意值</li>
<li><strong>generate-resources</strong>：生成将会包含在项目包中的资源文件</li>
<li><strong>process-resources</strong>：复制并处理资源文件，至目标目录，准备打包</li>
<li><strong>compile</strong>：编译项目的源代码</li>
<li><strong>process-classes</strong>：处理编译生成的文件，比如说对Java class文件做字节码改善优化</li>
<li><strong>generate-test-sources</strong>：生成包含在编译阶段中的任何测试源代码</li>
<li><strong>process-test-sources</strong>：处理测试源代码，比如说，过滤任意值</li>
<li><strong>generate-test-resources</strong>：为测试创建资源文件</li>
<li><strong>process-test-resources</strong>：复制并处理资源文件，至目标测试目录</li>
<li><strong>test-compile</strong>：编译测试源代码</li>
<li><strong>process-test-classes</strong>：处理测试源码编译生成的文件</li>
<li><strong>test</strong>：使用合适的单元测试框架运行测试。这些测试代码不会被打包或部署</li>
<li><strong>prepare-package</strong>：在实际打包之前，执行任何的必要的操作为打包做准备</li>
<li><strong>package</strong>：将编译后的代码打包成可分发格式的文件，比如JAR、WAR或者EAR文件</li>
<li><strong>pre-integration-test</strong>：在执行集成测试前进行必要的动作。比如说，搭建需要的环境</li>
<li><strong>integration-test</strong>：处理和部署项目到可以运行集成测试环境中</li>
<li><strong>post-integration-test</strong>：在执行集成测试完成后进行必要的动作。比如说，清理集成测试环境</li>
<li><strong>verify</strong>：运行任意的检查来验证项目包有效且达到质量标准</li>
<li><strong>install</strong>：将包安装至本地仓库，以让其它项目依赖。</li>
<li><strong>deploy</strong>：将最终的包复制到远程的仓库，以让其它开发人员与项目共享</li>
</ul>
</li>
<li><p><strong>Site</strong>生命周期：创建新的报告文档、部署站点等</p>
<ul>
<li><strong>pre-site</strong>：执行一些需要在生成站点文档之前完成的工作</li>
<li><strong>site</strong>：生成项目的站点文档</li>
<li><strong>post-site</strong>： 执行一些需要在生成站点文档之后完成的工作，并且为部署做准备</li>
<li><strong>site-deploy</strong>：将生成的站点文档部署到特定的服务器上</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>插件：</strong>每个阶段都有插件，插件的职责就是执行它对应的命令</p>
</li>
</ul>
<h2 id="第七节maven工程的依赖高级特性"><a href="#第七节maven工程的依赖高级特性" class="headerlink" title="第七节	maven工程的依赖高级特性"></a>第七节	maven工程的依赖高级特性</h2><ul>
<li><p><strong>依赖的传递性</strong>：在项目往往需要引入多个依赖， 而引入的依赖又会引入其他的依赖，形成依赖的传递性</p>
</li>
<li><p><strong>依赖版本的原则</strong></p>
<ul>
<li><strong>最短路径原则</strong>：对于多级依赖出现相同 <strong>jar</strong> 的不同版本，<strong>maven</strong> 会选择路径最短的依赖</li>
<li><strong>声明优先原则</strong>：对于多级依赖出现相同 <strong>jar</strong> 的不同版本，并且所经历的路径相同时，<strong>maven</strong> 会选择最先声明的依赖版本</li>
<li><strong>同级依赖，后声明会覆盖先声明原则</strong>：对于同一级的依赖出现相同 <strong>jar</strong> 的不同版本，**maven **会根据依赖声明的先后顺序，选择后声明的依赖版本</li>
</ul>
</li>
<li><p><strong>统一管理依赖的版本</strong>：为了统一管理版本号，可以使用 <strong>properties</strong> 标签，里面可以自定义版本的标签名</p>
</li>
</ul>
<h2 id="第八节build配置"><a href="#第八节build配置" class="headerlink" title="第八节	build配置"></a>第八节	build配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">　　<span class="comment">&lt;!-- 项目的名字 --&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">finalName</span>&gt;</span>WebMavenDemo<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">　　<span class="comment">&lt;!-- 描述项目中资源的位置 --&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">　　　　<span class="comment">&lt;!-- 自定义资源1 --&gt;</span></span><br><span class="line">　　　　<span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">　　　　　　<span class="comment">&lt;!-- 资源目录 --&gt;</span></span><br><span class="line">　　　　　　<span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">　　　　　　<span class="comment">&lt;!-- 包括哪些文件参与打包 --&gt;</span></span><br><span class="line">　　　　　　<span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">　　　　　　　　<span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">　　　　　　<span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">　　　　　　<span class="comment">&lt;!-- 排除哪些文件不参与打包 --&gt;</span></span><br><span class="line">　　　　　　<span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">　　　　　　　　<span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.txt<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">　　　　　　　　　　<span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.doc<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">　　　　　　<span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">　　　　<span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">　　<span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">　　<span class="comment">&lt;!-- 设置构建时候的插件 --&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">　　　　<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">　　　　　　<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">　　　　　　<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">　　　　　　<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">　　　　　　<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">　　　　　　　　<span class="comment">&lt;!-- 源代码编译版本 --&gt;</span></span><br><span class="line">　　　　　　　　<span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">　　　　　　　　<span class="comment">&lt;!-- 目标平台编译版本 --&gt;</span></span><br><span class="line">　　　　　　　　<span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">　　　　　　<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">　　　　<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">　　　　<span class="comment">&lt;!-- 资源插件（资源的插件） --&gt;</span>  </span><br><span class="line">　　　　<span class="tag">&lt;<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">　　　　　　<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">　　　　　　<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">　　　　　　<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">　　　　　　<span class="tag">&lt;<span class="name">executions</span>&gt;</span>  </span><br><span class="line">　　　　　　　　<span class="tag">&lt;<span class="name">execution</span>&gt;</span>  </span><br><span class="line">　　　　　　　　　　<span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span>  </span><br><span class="line">　　　　　　　　<span class="tag">&lt;/<span class="name">execution</span>&gt;</span>  </span><br><span class="line">　　　　　　<span class="tag">&lt;/<span class="name">executions</span>&gt;</span>  </span><br><span class="line">　　　　　　<span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">　　　　　　　　<span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span>  </span><br><span class="line">　　　　　　<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span> </span><br><span class="line">　　　　<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">　　　　<span class="comment">&lt;!-- war插件(将项目打成war包) --&gt;</span>  </span><br><span class="line">　　　　<span class="tag">&lt;<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">　　　　　　<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">　　　　　　<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">　　　　　　<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">　　　　　　<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">　　　　　　　　<span class="comment">&lt;!-- war包名字 --&gt;</span>  </span><br><span class="line">　　　　　　　　<span class="tag">&lt;<span class="name">warName</span>&gt;</span>WebMavenDemo1<span class="tag">&lt;/<span class="name">warName</span>&gt;</span></span><br><span class="line">　　　　　　<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">　　　　<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">　　<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>XML</title>
    <url>/2024/01/28/XML/</url>
    <content><![CDATA[<h2 id="第一节XML简介"><a href="#第一节XML简介" class="headerlink" title="第一节	XML简介"></a>第一节	XML简介</h2><ul>
<li><strong>XML简介</strong>：全称为 <strong>Extensible Markup Language</strong>，即可扩展标记语言，是万维网协会推出的一套数据交换标准，被设计用来传输和存储数据，可用于定义 <strong>Web</strong> 网页上的文档元素以及复杂数据的表述和传输</li>
<li><strong>XML的特点</strong><ul>
<li><strong>XML</strong> 被设计用来传输和存储数据，其焦点在于数据的内容</li>
<li><strong>XML</strong> 标签没有被预定义，需要自行定义标签</li>
<li><strong>XML</strong> 不会替代 <strong>HTML</strong>，在 <strong>Web</strong> 应用程序中，<strong>XML</strong> 用于传输数据，而 <strong>HTML</strong> 用于格式化并显示数据</li>
</ul>
</li>
</ul>
<h2 id="第二节XML语法规则"><a href="#第二节XML语法规则" class="headerlink" title="第二节	XML语法规则"></a>第二节	XML语法规则</h2><ul>
<li><p><strong>XML文档声明</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> standalone=<span class="string">&quot;yes&quot;</span> ?&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>version</strong>：版本规范声明</li>
<li><strong>encoding</strong>：文档字符编码</li>
<li><strong>standalone</strong>：文档定义是否独立使用</li>
</ul>
</li>
<li><p><strong>XML元素</strong></p>
<ul>
<li><p>每个 <strong>XML</strong> 文档必须有且只有一个根元素</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>XML</strong> 元素指的是 <strong>XML</strong> 文件中出现的标签，一个标签分为开始标签和结束标签</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>www.sohu.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>一个标签中也可以嵌套若干子标签</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>对于 <strong>XML</strong> 标签中出现的所有空格和换行，<strong>XML</strong> 解析程序都会当做标签内容进行处理，下列内容有不同的意义</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">stu</span>&gt;</span>xiaoming<span class="tag">&lt;/<span class="name">stu</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">stu</span>&gt;</span></span><br><span class="line">    xiaoming</span><br><span class="line"><span class="tag">&lt;/<span class="name">stu</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>命名规范</strong>：一个 <strong>XML</strong> 元素可以包含字母、数字以及其它一些可见字符，但必须遵守以下规范</p>
<ul>
<li>区分大小写</li>
<li>不能以数字或下划线 <strong>_</strong> 开头</li>
<li>元素内不能包含空格</li>
<li>名称中间不能包含冒号 <strong>:</strong></li>
<li>可以使用中文，但一般不这么用</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>XML属性</strong></p>
<ul>
<li><p>属性值用双引号或单引号分隔</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">student</span> <span class="attr">id</span>=<span class="string">&quot;100&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>一个元素可以有多个属性</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">元素名</span> <span class="attr">属性名1</span>=<span class="string">&quot;属性值1&quot;</span> <span class="attr">属性名2</span>=<span class="string">&quot;属性值2&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>预定义实体字符</strong></p>
<table>
<thead>
<tr>
<th align="center">实体字符</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>&amp;lt</strong></td>
<td align="center"><strong>&lt;</strong></td>
</tr>
<tr>
<td align="center"><strong>&amp;gt</strong></td>
<td align="center"><strong>&gt;</strong></td>
</tr>
<tr>
<td align="center"><strong>&amp;amp</strong></td>
<td align="center"><strong>&amp;</strong></td>
</tr>
<tr>
<td align="center"><strong>&amp;apos</strong></td>
<td align="center"><strong>‘</strong></td>
</tr>
<tr>
<td align="center"><strong>&amp;quot</strong></td>
<td align="center"><strong>“</strong></td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p><strong>XML注释</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--这是一个注释--&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>XML CDATA节</strong>：避免让解析引擎解析执行，而是将数据当做原始内容处理，不会因为非法字符而报错</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;![CDATA[</span><br><span class="line">    ......</span><br><span class="line">]]&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>XML处理指令</strong>：用来指示解析引擎如何解析 <strong>XML</strong> 文件</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;gb2312&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet href=<span class="string">&quot;my.css&quot;</span> type=<span class="string">&quot;text/css&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">stu</span> <span class="attr">id</span>=<span class="string">&quot;001&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>杨过<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">sex</span>&gt;</span>男<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>20<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">stu</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">stu</span> <span class="attr">id</span>=<span class="string">&quot;002&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>小龙女<span class="tag">&lt;/<span class="name">name</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">sex</span>&gt;</span>女<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>21<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">stu</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第三节XML实例"><a href="#第三节XML实例" class="headerlink" title="第三节	XML实例"></a>第三节	XML实例</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Axios</title>
    <url>/2024/01/28/Axios/</url>
    <content><![CDATA[<h2 id="第一节Axios概述"><a href="#第一节Axios概述" class="headerlink" title="第一节	Axios概述"></a>第一节	Axios概述</h2><ul>
<li><strong>Axios 简介</strong>：一个基于 <strong>promise</strong> 的 <strong>HTTP</strong>库，类似于 <strong>jQuery</strong> 的 <strong>Ajax</strong>，用于 <strong>HTTP</strong> 请求，可以应用于浏览器端和 <strong>node.js</strong>，既可以用于客户端，也可以用于服务端</li>
<li><strong>Axios的特点</strong><ul>
<li>支持 <strong>Promise API</strong></li>
<li>拦截请求与响应，例如在请求前添加授权和响应前做一些事情</li>
<li>转换请求数据和响应数据，例如进行请求加密或者响应数据加密</li>
<li>取消请求</li>
<li>自动转换 <strong>JSON</strong> 数据</li>
<li>客户端支持防御 <strong>XSRF</strong></li>
</ul>
</li>
<li><strong>网络请求的发展历史</strong><ul>
<li><strong>传统 Ajax</strong>：基于 <strong>XMLHttpRequest</strong> 对象，可以直接使用，但是使用起来配置较为麻烦，实际开发中使用非常少</li>
<li><strong>JQuery-Ajax</strong>：需要引入 <strong>JQuery</strong> 库，其底层原理也是对传统的 <strong>XMLHttpRequest</strong> 对象进行封装</li>
<li><strong>Axios</strong>：在浏览器中发送 <strong>XMLHttpRequest</strong> 请求，在 <strong>node</strong> 中发送 <strong>HTTP</strong> 请求、支持 <strong>romise</strong> <strong>API</strong>、拦截请求和相应、转换请求和响应数据等</li>
</ul>
</li>
</ul>
<h2 id="第二节Axios基本使用"><a href="#第二节Axios基本使用" class="headerlink" title="第二节	Axios基本使用"></a>第二节	Axios基本使用</h2><ul>
<li><p><strong>GET 方法</strong></p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:8000/user&#x27;</span>,&#123;</span><br><span class="line">	<span class="attr">params</span>:&#123;</span><br><span class="line">		<span class="attr">id</span>:<span class="number">12</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>POST 方法</strong></p>
<ul>
<li><p><strong>表单提交</strong></p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">formData.<span class="title function_">append</span>(key,data[key]);</span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;http://localhost:8000/user&#x27;</span>,formData).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123; </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>json 文件提交</strong></p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;http://localhost:8000/user&#x27;</span>, data).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123; </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>PUT 方法</strong></p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">put</span>(<span class="string">&#x27;http://localhost:8000/user&#x27;</span>, data).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>PATCH 方法</strong></p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">patch</span>(<span class="string">&#x27;http://localhost:8000/user&#x27;</span>, data).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123; </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>DELETE 方法</strong></p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">delete</span>(<span class="string">&#x27;http://localhost:8000/user&#x27;</span>, &#123;</span><br><span class="line">	<span class="attr">params</span>:&#123;</span><br><span class="line">		<span class="attr">id</span>: <span class="number">12</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(res, <span class="string">&quot;delete&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>并发请求</strong></p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">all</span>([axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:8000/user&#x27;</span>), axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:8000/info&#x27;</span>)]).<span class="title function_">then</span>(</span><br><span class="line">   axios.<span class="title function_">spread</span>(<span class="function">(<span class="params">uerRes, infoRes</span>) =&gt;</span> &#123; </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(uerRes, infoRes);</span><br><span class="line">   &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第三节Axios实例"><a href="#第三节Axios实例" class="headerlink" title="第三节	Axios实例"></a>第三节	Axios实例</h2><ul>
<li><p><strong>Axios 实例</strong></p>
<ul>
<li><p><strong>创建实例</strong>：使用 <strong>axios.create()</strong> 方法创建实例</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> instance = axios.<span class="title function_">create</span>(&#123; </span><br><span class="line">  <span class="attr">baseURL</span>:<span class="string">&#x27;http://loacalhost:8080&#x27;</span>,</span><br><span class="line">  <span class="attr">timeout</span>:<span class="number">1000</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用实例对象</strong></p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">instance.<span class="title function_">get</span>(<span class="string">&#x27;/data.json&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123; </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>Axios 实例相关配置</strong></p>
<ul>
<li><p><strong>baseURL</strong>：请求的域名</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">baseURL</span>:<span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>timeout</strong>：请求的超时时长，超出后后端返回401</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">timeout</span>:<span class="number">2000</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>url</strong>：请求路径</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">url</span>:<span class="string">&#x27;/user&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>method</strong>：请求方法</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>headers</strong>：请求头</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">headers</span>:&#123;</span><br><span class="line">	<span class="attr">token</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>params</strong>：将请求参数拼接到url上</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">params</span>:&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>data</strong>：将请求参数放置到请求体里</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">data</span>:&#123;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>配置方式</strong></p>
<ul>
<li><p><strong>全局配置</strong></p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;http://localhost:8080&#x27;</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">timeout</span> = <span class="number">2000</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>实例配置</strong></p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> instance = axios.<span class="title function_">create</span>();</span><br><span class="line">instance.<span class="property">defaults</span>.<span class="property">timeout</span> = <span class="number">3000</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>请求配置</strong></p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">instance.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">timeout</span>:<span class="number">5000</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第四节Axios拦截器"><a href="#第四节Axios拦截器" class="headerlink" title="第四节	Axios拦截器"></a>第四节	Axios拦截器</h2><ul>
<li><p><strong>请求拦截器</strong></p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123; </span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span>=&gt;</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>响应拦截器</strong></p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123; </span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span>=&gt;</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>取消拦截器</strong></p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> interceptor = axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span>=&gt;</span>&#123;</span><br><span class="line">    config.<span class="property">header</span>=&#123; </span><br><span class="line">        <span class="attr">auth</span>:<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;)</span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">eject</span>(interceptor);</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第五节Axios封装和使用"><a href="#第五节Axios封装和使用" class="headerlink" title="第五节	Axios封装和使用"></a>第五节	Axios封装和使用</h2><ul>
<li><p><strong>添加 request.js 配置文件</strong></p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>:<span class="string">&#x27;http://localhost:8080/&#x27;</span>,</span><br><span class="line">    <span class="attr">timeout</span>:<span class="number">5000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    config.<span class="property">headers</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/json;charset=utf-8&#x27;</span>;</span><br><span class="line">	<span class="comment">// config.headers[&#x27;token&#x27;] = user.token;</span></span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> res = response.<span class="property">data</span>;</span><br><span class="line">        <span class="keyword">if</span> (response.<span class="property">config</span>.<span class="property">responseType</span> === <span class="string">&#x27;blob&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> res === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">            res = res ? <span class="title class_">JSON</span>.<span class="title function_">parse</span>(res) : res</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error&#x27;</span> + error)</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>引入 vue-axios 插件</strong></p>
<ul>
<li><p><strong>在 vue 中的 axios 使用方式</strong></p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$http</span> = axios</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">get</span>(<span class="string">&#x27;/user?id=666&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>)</span><br><span class="line">&#125;).<span class="title function_">catch</span>( <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>在 vue 中的 vue-axios 使用方式</strong></p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueAxios</span> <span class="keyword">from</span> <span class="string">&#x27;vue-axios&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueAxios</span>, axios)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">axios</span>.<span class="title function_">get</span>(api).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>使用 vue-axios-plugin 插件</strong></p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;Vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueAxiosPlugin</span> <span class="keyword">from</span> <span class="string">&#x27;vue-axios-plugin&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueAxiosPlugin</span>, &#123;</span><br><span class="line">  <span class="attr">reqHandleFunc</span>: <span class="function"><span class="params">config</span> =&gt;</span> config,</span><br><span class="line">  <span class="attr">reqErrorFunc</span>: <span class="function"><span class="params">error</span> =&gt;</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error),</span><br><span class="line">  <span class="attr">resHandleFunc</span>: <span class="function"><span class="params">response</span> =&gt;</span> response,</span><br><span class="line">  <span class="attr">resErrorFunc</span>: <span class="function"><span class="params">error</span> =&gt;</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>CSS</title>
    <url>/2024/01/28/CSS/</url>
    <content><![CDATA[<h2 id="第一节CSS简介"><a href="#第一节CSS简介" class="headerlink" title="第一节	CSS简介"></a>第一节	CSS简介</h2><ul>
<li><p><strong>CSS</strong>：全称 <strong>Cascading Style Sheets</strong>，即层叠样式表，样式定义如何显示 <strong>HTML</strong> 元素，解决了内容与表现分离的问题</p>
</li>
<li><p><strong>CSS</strong> 规则：由两个主要的部分构成：选择器，以及一条或多条声明</p>
<ul>
<li>选择器通常是需要改变样式的 <strong>HTML</strong> 元素</li>
<li>每条声明由一个属性和一个值组成，属性是需要设置的样式属性，每个属性有一个值，属性和值被冒号分开</li>
</ul>
</li>
<li><p><strong>CSS</strong> 注释：以 <strong>&#x2F;*</strong> 开始, 以 ***&#x2F;** 结束</p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*这是个注释*/</span></span><br><span class="line"><span class="selector-tag">p</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">    <span class="comment">/*这是另一个注释*/</span></span><br><span class="line">    <span class="attribute">color</span>:black;</span><br><span class="line">    <span class="attribute">font-family</span>:arial;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第二节CSS引用方式"><a href="#第二节CSS引用方式" class="headerlink" title="第二节	CSS引用方式"></a>第二节	CSS引用方式</h2><ul>
<li><p><strong>内联定义方式</strong>：指定各标签 <strong>style</strong> 属性</p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> style=&quot;<span class="attribute">background-color</span> : <span class="number">#CCCC33</span>; </span><br><span class="line">    <span class="attribute">width</span> : <span class="number">300px</span>; </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;&quot;&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>样式块</strong>：使用 <strong>style</strong> 标签</p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    <span class="selector-id">#username</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">        <span class="attribute">border-color</span>: black;</span><br><span class="line">        <span class="attribute">border-style</span>: solid;</span><br><span class="line">        <span class="attribute">border-width</span>: <span class="number">1px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>外部引用</strong>：引入外部独立的 <strong>CSS</strong> 样式文件</p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/<span class="number">1</span><span class="selector-class">.css</span>&quot;/&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>优先级规则：</strong>行内样式 &gt; 内部样式 &#x3D; 外部样式</p>
</li>
</ul>
<h2 id="第三节选择器"><a href="#第三节选择器" class="headerlink" title="第三节	选择器"></a>第三节	选择器</h2><h3 id="3-1基本选择器"><a href="#3-1基本选择器" class="headerlink" title="3.1	基本选择器"></a>3.1	基本选择器</h3><ul>
<li><p><strong>通配选择器</strong>：选中所有的 <strong>html</strong> 元素</p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">color</span>: orange;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>元素选择器</strong>：为页面中某类元素统一设置样式</p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: orange;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>类选择器</strong>：根据元素的 <strong>class</strong> 值选择一类元素</p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.answer</span> &#123;</span><br><span class="line">	<span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>ID选择器</strong>：根据元素的 <strong>id</strong> 值选择某一特定元素</p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#earthy</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-2复合选择器"><a href="#3-2复合选择器" class="headerlink" title="3.2	复合选择器"></a>3.2	复合选择器</h3><ul>
<li><p><strong>交集选择器</strong>：选中同时符合多个条件的元素</p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.beauty</span> &#123;</span><br><span class="line">	<span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>并集选择器</strong>：选中多个选择器对应的元素</p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#peiqi</span>,</span><br><span class="line"><span class="selector-class">.rich</span>,</span><br><span class="line"><span class="selector-class">.beauty</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>后代选择器</strong>：选中符合条件的后代元素</p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">	<span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>子代选择器</strong>：选中符合条件的子代元素</p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.persons</span>&gt;<span class="selector-tag">a</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>兄弟选择器</strong>：选中符合条件的兄弟元素</p>
<ul>
<li><p><strong>相邻兄弟选择器</strong></p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>+<span class="selector-tag">p</span> &#123;</span><br><span class="line">	<span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>通用兄弟选择器</strong></p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>~<span class="selector-tag">p</span> &#123;</span><br><span class="line">	<span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>属性选择器</strong>：选中属性值符合一定条件的元素</p>
<ul>
<li><p>选中具有某个属性的元素</p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[title]</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>选中包含某个属性，且属性值等于指定值的元素</p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[title=<span class="string">&quot;atguigu&quot;</span>]</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>选中包含某个属性，且属性值以指定的值开头的元素</p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[title^=<span class="string">&quot;a&quot;</span>]</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>选中包含某个属性，且属性值以指定的值结尾的元素</p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[title$=<span class="string">&quot;u&quot;</span>]</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>选择包含某个属性，属性值包含指定值的元素</p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[title*=<span class="string">&quot;g&quot;</span>]</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>伪类选择器</strong>：选中特殊状态的元素</p>
<ul>
<li><p><strong>动态伪类</strong>：遵循 <strong>link</strong>、<strong>visited</strong>、<strong>hover</strong>、 <strong>active</strong> 的顺序</p>
<table>
<thead>
<tr>
<th align="center">动态伪类</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>:link</strong></td>
<td align="center">超链接未被访问的状态</td>
</tr>
<tr>
<td align="center"><strong>:visited</strong></td>
<td align="center">超链接访问过的状态</td>
</tr>
<tr>
<td align="center"><strong>:hover</strong></td>
<td align="center">鼠标悬停在元素上的状态</td>
</tr>
<tr>
<td align="center"><strong>:active</strong></td>
<td align="center">元素激活的状态</td>
</tr>
<tr>
<td align="center"><strong>:focus</strong></td>
<td align="center">获取焦点的元素</td>
</tr>
</tbody></table>
</li>
<li><p><strong>结构伪类</strong></p>
<table>
<thead>
<tr>
<th align="center">结构伪类</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>:first-child</strong></td>
<td align="center">所有兄弟元素中的第一个</td>
</tr>
<tr>
<td align="center"><strong>:last-child</strong></td>
<td align="center">所有兄弟元素中的最后一个</td>
</tr>
<tr>
<td align="center"><strong>:nth-child(n)</strong></td>
<td align="center">所有兄弟元素中的第 <strong>n</strong> 个</td>
</tr>
<tr>
<td align="center"><strong>:first-of-type</strong></td>
<td align="center">所有同类型兄弟元素中的第一个</td>
</tr>
<tr>
<td align="center"><strong>:last-of-type</strong></td>
<td align="center">所有同类型兄弟元素中的最后一个</td>
</tr>
<tr>
<td align="center"><strong>:nth-of-type(n)</strong></td>
<td align="center">所有同类型兄弟元素中的 第n个</td>
</tr>
</tbody></table>
</li>
<li><p><strong>否定伪类</strong>：排除满足括号中条件的元素</p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.not</span>(<span class="selector-class">.p3</span>)&#123;</span><br><span class="line">    <span class="attribute">background-color</span>:yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>UI伪类</strong></p>
<table>
<thead>
<tr>
<th align="center">UI伪类</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>:checked</strong></td>
<td align="center">被选中的复选框或单选按钮</td>
</tr>
<tr>
<td align="center"><strong>:enable</strong></td>
<td align="center">可用的表单元素（没有 disabled 属性）</td>
</tr>
<tr>
<td align="center"><strong>:disabled</strong></td>
<td align="center">不可用的表单元素（有 disabled 属性）</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p><strong>伪元素选择器</strong>：选中元素中的一些特殊位置</p>
<table>
<thead>
<tr>
<th align="center">伪元素</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>::first-letter</strong></td>
<td align="center">选中元素中的第一个文字</td>
</tr>
<tr>
<td align="center"><strong>::first-line</strong></td>
<td align="center">选中元素中的第一行文字</td>
</tr>
<tr>
<td align="center"><strong>::selection</strong></td>
<td align="center">选中被鼠标选中的内容</td>
</tr>
<tr>
<td align="center"><strong>::placeholder</strong></td>
<td align="center">选中输入框的提示文字</td>
</tr>
<tr>
<td align="center"><strong>::before</strong></td>
<td align="center">在元素最开始的位置，创建一个子元素（必须用 <strong>content</strong> 属性指定内容）</td>
</tr>
<tr>
<td align="center"><strong>::after</strong></td>
<td align="center">在元素最后的位置，创建一个子元素（必须用 <strong>content</strong> 属性指定内容）</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="3-3选择器的优先级"><a href="#3-3选择器的优先级" class="headerlink" title="3.3	选择器的优先级"></a>3.3	选择器的优先级</h3><ul>
<li><strong>选择器的优先级</strong>：行内选择器 &gt; <strong>ID</strong> 选择器 &gt; 类选择器 &gt; 元素选择器 &gt; 通配选择器</li>
</ul>
<h2 id="第四节CSS三大特性"><a href="#第四节CSS三大特性" class="headerlink" title="第四节	CSS三大特性"></a>第四节	CSS三大特性</h2><ul>
<li><strong>层叠性</strong>：如果发生了样式冲突，那就会根据一定的规则（选择器优先级），进行样式的层叠覆盖</li>
<li><strong>继承性</strong>：元素会自动拥有其父元素、或其祖先元素上所设置的某些样式</li>
<li><strong>优先级</strong>：样式按照一定规则为元素进行修饰</li>
</ul>
<h2 id="第五节CSS常用属性"><a href="#第五节CSS常用属性" class="headerlink" title="第五节	CSS常用属性"></a>第五节	CSS常用属性</h2><h3 id="5-1字体属性"><a href="#5-1字体属性" class="headerlink" title="5.1	字体属性"></a>5.1	字体属性</h3><table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
<th align="center">属性值</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>font-size</strong></td>
<td align="center">字体大小</td>
<td align="center">20px，30%</td>
</tr>
<tr>
<td align="center"><strong>font-weight</strong></td>
<td align="center">字体粗细</td>
<td align="center">normal，bold，400~700</td>
</tr>
<tr>
<td align="center"><strong>font-family</strong></td>
<td align="center">字体</td>
<td align="center">Microsoft YaHei，Hiragino Sans GB</td>
</tr>
<tr>
<td align="center"><strong>font-style</strong></td>
<td align="center">字体样式</td>
<td align="center">normal，italic(斜体)</td>
</tr>
<tr>
<td align="center"><strong>font</strong></td>
<td align="center">简写属性</td>
<td align="center">font:font-style font-weight font-size font-family</td>
</tr>
</tbody></table>
<h3 id="5-2文本属性"><a href="#5-2文本属性" class="headerlink" title="5.2	文本属性"></a>5.2	文本属性</h3><table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
<th align="center">属性值</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>color</strong></td>
<td align="center">颜色</td>
<td align="center">#00FF00，rgb(red,green,blue)，rbga(red,green,blue,alpha)</td>
</tr>
<tr>
<td align="center"><strong>text-align</strong></td>
<td align="center">文本对齐</td>
<td align="center">left，center，right</td>
</tr>
<tr>
<td align="center"><strong>text-decoration</strong></td>
<td align="center">文本修饰</td>
<td align="center">none，underline(下划线)，overline(上划线)，line-through(删除线)</td>
</tr>
<tr>
<td align="center"><strong>text-indent</strong></td>
<td align="center">首行缩进</td>
<td align="center">2em，6px</td>
</tr>
<tr>
<td align="center"><strong>line-height</strong></td>
<td align="center">行间距</td>
<td align="center">20px</td>
</tr>
</tbody></table>
<h3 id="5-3列表属性"><a href="#5-3列表属性" class="headerlink" title="5.3	列表属性"></a>5.3	列表属性</h3><table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
<th align="center">属性值</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>list-style-type</strong></td>
<td align="center">列表符号</td>
<td align="center">none，square(实心方块)，disc(圆形)，decimal(数字)，lower-roman(小写罗马字母)，upper-roman(大写罗马字母)，lower-alpha(小写字母)，upper-alpha(大写字母)</td>
</tr>
<tr>
<td align="center"><strong>list-style-position</strong></td>
<td align="center">列表符号位置</td>
<td align="center">inside，outside</td>
</tr>
<tr>
<td align="center"><strong>list-style-image</strong></td>
<td align="center">自定义列表符号</td>
<td align="center">url(图片位置)</td>
</tr>
<tr>
<td align="center"><strong>list-style</strong></td>
<td align="center">简写属性</td>
<td align="center">没有数量顺序要求</td>
</tr>
</tbody></table>
<h3 id="5-4表格属性"><a href="#5-4表格属性" class="headerlink" title="5.4	表格属性"></a>5.4	表格属性</h3><table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
<th align="center">属性值</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>table-layout</strong></td>
<td align="center">列宽度</td>
<td align="center">auto，fixed(固定平均列宽)</td>
</tr>
<tr>
<td align="center"><strong>border-spacing</strong></td>
<td align="center">单元格间距</td>
<td align="center">2px</td>
</tr>
<tr>
<td align="center"><strong>border-collapse</strong></td>
<td align="center">合并单元格边框</td>
<td align="center">collapse(合并)，separate(不合并)</td>
</tr>
<tr>
<td align="center"><strong>empty-cells</strong></td>
<td align="center">隐藏没有内容的单元格</td>
<td align="center">show，hide</td>
</tr>
<tr>
<td align="center"><strong>caption-side</strong></td>
<td align="center">表格标题位置</td>
<td align="center">top，bottom</td>
</tr>
</tbody></table>
<h3 id="5-5背景属性"><a href="#5-5背景属性" class="headerlink" title="5.5	背景属性"></a>5.5	背景属性</h3><table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
<th align="center">属性值</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>background-color</strong></td>
<td align="center">背景颜色</td>
<td align="center">transparent(默认)</td>
</tr>
<tr>
<td align="center"><strong>background-image</strong></td>
<td align="center">背景图片</td>
<td align="center">url(图片位置)</td>
</tr>
<tr>
<td align="center"><strong>background-repeat</strong></td>
<td align="center">背景重复方式</td>
<td align="center">repeat(重复)，repeat-x(水平重复)，repeat-y(垂直重复)，no-repeat(不重复)</td>
</tr>
<tr>
<td align="center"><strong>background-position</strong></td>
<td align="center">背景图片位置</td>
<td align="center">left，right，center</td>
</tr>
<tr>
<td align="center"><strong>background</strong></td>
<td align="center">简写属性</td>
<td align="center">没有数量顺序要求</td>
</tr>
</tbody></table>
<h3 id="5-6鼠标属性"><a href="#5-6鼠标属性" class="headerlink" title="5.6	鼠标属性"></a>5.6	鼠标属性</h3><table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
<th align="center">属性值</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>cuisor</strong></td>
<td align="center">光标样式</td>
<td align="center">pointer(小手)，move(移动图标)，text(文字选择器)，crosshair(十字架)，wait(等待)，help(帮助)</td>
</tr>
</tbody></table>
<h2 id="第六节盒子模型"><a href="#第六节盒子模型" class="headerlink" title="第六节	盒子模型"></a>第六节	盒子模型</h2><h3 id="6-1CSS长度单位"><a href="#6-1CSS长度单位" class="headerlink" title="6.1	CSS长度单位"></a>6.1	CSS长度单位</h3><ul>
<li><strong>长度单位</strong><ul>
<li><strong>px</strong>：像素</li>
<li><strong>em</strong>：相对于字体大小的倍数</li>
<li><strong>rem</strong>：相对于根字体的大小</li>
<li>**%**：相对父元素的比例</li>
</ul>
</li>
</ul>
<h3 id="6-2元素的显示模式"><a href="#6-2元素的显示模式" class="headerlink" title="6.2	元素的显示模式"></a>6.2	元素的显示模式</h3><ul>
<li><p><strong>元素的显示模式</strong></p>
<ul>
<li><strong>块元素</strong>：在页面中独占一行，从上到下排列，可以设置宽高</li>
<li><strong>行内元素</strong>：在页面中不独占一行，从左到右排列，无法设置宽高</li>
<li><strong>行内块元素</strong>：在页面中不独占一行，从左到右排列，可以设置宽高</li>
</ul>
</li>
<li><p><strong>修改元素的显示模式</strong>：修改元素的 <strong>display</strong> 属性</p>
<table>
<thead>
<tr>
<th align="center">属性值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>none</strong></td>
<td align="center">隐藏</td>
</tr>
<tr>
<td align="center"><strong>block</strong></td>
<td align="center">块元素</td>
</tr>
<tr>
<td align="center"><strong>inline</strong></td>
<td align="center">内联元素</td>
</tr>
<tr>
<td align="center"><strong>inline-block</strong></td>
<td align="center">行内块元素</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="6-3盒子模型的组成"><a href="#6-3盒子模型的组成" class="headerlink" title="6.3	盒子模型的组成"></a>6.3	盒子模型的组成</h3><ul>
<li><p><strong>盒子模型</strong>：将所有的 <strong>html</strong> 元素都看成一个盒子，所有的样式都是基于这个盒子</p>
</li>
<li><p><strong>盒子模型的组成</strong></p>
<ul>
<li><strong>margin</strong>：外边距，盒子与外界的距离</li>
<li><strong>border</strong>：边框，盒子的边框</li>
<li><strong>padding</strong>：内边距，紧贴内容的补白区域</li>
<li><strong>content</strong>：内容，元素中的文本或后代元素都是它的内容</li>
</ul>
</li>
<li><p><strong>盒子模型的内容区</strong></p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
<th align="center">属性值</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>width</strong></td>
<td align="center">宽度</td>
<td align="center">20px</td>
</tr>
<tr>
<td align="center"><strong>max-width</strong></td>
<td align="center">最大宽度</td>
<td align="center">20px</td>
</tr>
<tr>
<td align="center"><strong>min-width</strong></td>
<td align="center">最小宽度</td>
<td align="center">20px</td>
</tr>
<tr>
<td align="center"><strong>height</strong></td>
<td align="center">高度</td>
<td align="center">20px</td>
</tr>
<tr>
<td align="center"><strong>max-height</strong></td>
<td align="center">最大高度</td>
<td align="center">20px</td>
</tr>
<tr>
<td align="center"><strong>min-height</strong></td>
<td align="center">最小高度</td>
<td align="center">20px</td>
</tr>
</tbody></table>
</li>
<li><p><strong>盒子模型的内边距</strong></p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
<th align="center">属性值</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>padding-top</strong></td>
<td align="center">上内边距</td>
<td align="center">10px</td>
</tr>
<tr>
<td align="center"><strong>padding-right</strong></td>
<td align="center">右内边距</td>
<td align="center">10px</td>
</tr>
<tr>
<td align="center"><strong>padding-bottom</strong></td>
<td align="center">下内边距</td>
<td align="center">10px</td>
</tr>
<tr>
<td align="center"><strong>padding-left</strong></td>
<td align="center">左内边距</td>
<td align="center">10px</td>
</tr>
<tr>
<td align="center"><strong>padding</strong></td>
<td align="center">简写属性</td>
<td align="center">10px 10px 10px 10px，10px</td>
</tr>
</tbody></table>
</li>
<li><p><strong>盒子模型的边框</strong></p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
<th align="center">属性值</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>border-style</strong></td>
<td align="center">边框风格</td>
<td align="center">none，solid(实线)，dashed(虚线)，dotted(点线)，double(双实线)</td>
</tr>
<tr>
<td align="center"><strong>border-width</strong></td>
<td align="center">边框宽度</td>
<td align="center">3px</td>
</tr>
<tr>
<td align="center"><strong>border-color</strong></td>
<td align="center">边框颜色</td>
<td align="center">black</td>
</tr>
<tr>
<td align="center"><strong>border</strong></td>
<td align="center">简写属性</td>
<td align="center">没有数量和顺序要求</td>
</tr>
</tbody></table>
</li>
<li><p><strong>盒子模型的外边距</strong></p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
<th align="center">属性值</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>margin-top</strong></td>
<td align="center">上外边距</td>
<td align="center">3px</td>
</tr>
<tr>
<td align="center"><strong>margin-left</strong></td>
<td align="center">左外边距</td>
<td align="center">3px</td>
</tr>
<tr>
<td align="center"><strong>margin-right</strong></td>
<td align="center">右外边距</td>
<td align="center">3px</td>
</tr>
<tr>
<td align="center"><strong>margin-bottom</strong></td>
<td align="center">下外边距</td>
<td align="center">3px</td>
</tr>
<tr>
<td align="center"><strong>margin</strong></td>
<td align="center">简写属性</td>
<td align="center">3px 3px 3px 3px，3px</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="6-4处理内容溢出"><a href="#6-4处理内容溢出" class="headerlink" title="6.4	处理内容溢出"></a>6.4	处理内容溢出</h3><ul>
<li><p><strong>元素内容溢出</strong></p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
<th align="center">属性值</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>overflow</strong></td>
<td align="center">溢出内容处理方式</td>
<td align="center">visiable(显示)，hidden(隐藏)，scroll(显示滚动条)，auto(自动显示滚动条)</td>
</tr>
<tr>
<td align="center"><strong>overflow-x</strong></td>
<td align="center">水平方向处理方式</td>
<td align="center">同上</td>
</tr>
<tr>
<td align="center"><strong>overflow-y</strong></td>
<td align="center">垂直方向处理方式</td>
<td align="center">同上</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="6-5隐藏元素"><a href="#6-5隐藏元素" class="headerlink" title="6.5	隐藏元素"></a>6.5	隐藏元素</h3><ul>
<li><strong>隐藏元素</strong><ul>
<li><strong>visibility属性</strong>：设置为 <strong>hidden</strong> 占有原始位置但不显示</li>
<li><strong>display属性</strong>：设置为 <strong>none</strong> 不占用位置也不显示</li>
</ul>
</li>
</ul>
<h2 id="第七节浮动"><a href="#第七节浮动" class="headerlink" title="第七节	浮动"></a>第七节	浮动</h2><h3 id="7-1浮动简介"><a href="#7-1浮动简介" class="headerlink" title="7.1	浮动简介"></a>7.1	浮动简介</h3><ul>
<li><strong>浮动</strong>：最初用来实现文字环绕图片效果的，现在浮动是主流的页面布局方式之一</li>
<li><strong>元素浮动的特点</strong><ul>
<li>脱离文档流</li>
<li>浮动后的元素默认宽和高尽可能小</li>
<li>可以和其他元素共占一行</li>
</ul>
</li>
</ul>
<h3 id="7-2消除浮动的影响"><a href="#7-2消除浮动的影响" class="headerlink" title="7.2	消除浮动的影响"></a>7.2	消除浮动的影响</h3><ul>
<li><p><strong>元素浮动的影响</strong></p>
<ul>
<li>后面的兄弟元素会占据浮动元素之前的位置</li>
<li>不能撑起父元素的高度，导致父元素高度塌陷</li>
</ul>
</li>
<li><p><strong>消除浮动的影响(任意选择一个)</strong></p>
<ul>
<li><p>给父元素指定高度</p>
</li>
<li><p>给父元素也设置浮动</p>
</li>
<li><p>给父元素设置 <strong>overflow:hidden</strong></p>
</li>
<li><p>在所有浮动元素的最后面，添加一个块级元素，并给该块级元素设置 <strong>clear:both</strong></p>
</li>
<li><p>给浮动元素的父元素，设置伪元素，通过伪元素清除浮动</p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="7-3浮动布局"><a href="#7-3浮动布局" class="headerlink" title="7.3	浮动布局"></a>7.3	浮动布局</h3><ul>
<li><p><strong>浮动布局示例图</strong></p>
  <img src="C:\Users\86172\Pictures\Markdown\CSS\屏幕截图 2023-10-10 000345.png" style="zoom:50%;" />
</li>
<li><p><strong>代码示例</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.leftfix</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.rightfix</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">960px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.logo</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.banner1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">540px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.banner2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.logo</span>,<span class="selector-class">.banner1</span>,<span class="selector-class">.banner2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.menu</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.item1</span>,<span class="selector-class">.item2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">368px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">198px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">198px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.item3</span>,<span class="selector-class">.item4</span>,<span class="selector-class">.item5</span>,<span class="selector-class">.item6</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">178px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">198px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">198px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.bottom</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.item7</span>,<span class="selector-class">.item8</span>,<span class="selector-class">.item9</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">198px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">128px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">128px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.item8</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.footer</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 头部 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page-header clearfix&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo leftfix&quot;</span>&gt;</span>logo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;banner1 leftfix&quot;</span>&gt;</span>banner1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;banner2 leftfix&quot;</span>&gt;</span>banner2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 菜单 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu&quot;</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 内容区 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content clearfix&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 左侧 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left leftfix&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 上 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;top clearfix&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item1 leftfix&quot;</span>&gt;</span>栏目一<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item2 leftfix&quot;</span>&gt;</span>栏目二<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 下 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bottom clearfix&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item3 leftfix&quot;</span>&gt;</span>栏目三<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item4 leftfix&quot;</span>&gt;</span>栏目四<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item5 leftfix&quot;</span>&gt;</span>栏目五<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item6 leftfix&quot;</span>&gt;</span>栏目六<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 右侧 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right rightfix&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item7&quot;</span>&gt;</span>栏目七<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item8&quot;</span>&gt;</span>栏目八<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item9&quot;</span>&gt;</span>栏目九<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 页脚 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>页脚<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="7-4浮动相关属性"><a href="#7-4浮动相关属性" class="headerlink" title="7.4	浮动相关属性"></a>7.4	浮动相关属性</h3><table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
<th align="center">属性值</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>float</strong></td>
<td align="center">设置浮动</td>
<td align="center"><strong>left</strong>，<strong>right</strong>，<strong>none</strong></td>
</tr>
<tr>
<td align="center"><strong>clear</strong></td>
<td align="center">清除浮动</td>
<td align="center"><strong>left</strong>，<strong>right</strong>，<strong>both</strong></td>
</tr>
</tbody></table>
<h2 id="第八节定位"><a href="#第八节定位" class="headerlink" title="第八节	定位"></a>第八节	定位</h2><h3 id="8-1相对定位"><a href="#8-1相对定位" class="headerlink" title="8.1	相对定位"></a>8.1	相对定位</h3><ul>
<li><strong>设置相对定位</strong><ul>
<li>参考点为自己原来的位置</li>
<li>给元素设置 <strong>position:relative</strong> 实现相对定位</li>
<li>使用 <strong>left</strong>，<strong>right</strong>，<strong>top</strong>，<strong>bottom</strong> 四个属性调整位置</li>
</ul>
</li>
<li><strong>相对定位的特点</strong><ul>
<li>不会脱离文档流，不会对其他元素产生影响</li>
<li>定位的显示元素比普通元素层次高</li>
</ul>
</li>
</ul>
<h3 id="8-2绝对定位"><a href="#8-2绝对定位" class="headerlink" title="8.2	绝对定位"></a>8.2	绝对定位</h3><ul>
<li><strong>设置绝对定位</strong><ul>
<li>参考点为自己的包含块，即父元素或整个页面</li>
<li>给元素设置 <strong>position:absolute</strong> 实现绝对定位</li>
<li>使用 <strong>left</strong>，<strong>right</strong>，<strong>top</strong>，<strong>bottom</strong> 四个属性调整位置</li>
</ul>
</li>
<li><strong>绝对定位的特点</strong><ul>
<li>会脱离文档流，会对其他元素产生影响</li>
<li>绝对定位、浮动不能同时设置，如果同时设置，浮动失效，以定位为主</li>
<li>无论是什么元素（行内、行内块、块级）设置为绝对定位之后，都变成了定位元素</li>
</ul>
</li>
</ul>
<h3 id="8-3固定定位"><a href="#8-3固定定位" class="headerlink" title="8.3	固定定位"></a>8.3	固定定位</h3><ul>
<li><strong>设置固定定位</strong><ul>
<li>参考点为自己的视口</li>
<li>给元素设置 <strong>position:fixed</strong> 实现固定定位</li>
<li>使用 <strong>left</strong>，<strong>right</strong>，<strong>top</strong>，<strong>bottom</strong> 四个属性调整位置</li>
</ul>
</li>
<li><strong>固定定位的特点</strong><ul>
<li>会脱离文档流，会对其他元素产生影响</li>
<li>固定定位和浮动不能同时设置，如果同时设置，浮动失效，以固定定位为主</li>
<li>无论是什么元素（行内、行内块、块级）设置为固定定位之后，都变成了定位元素</li>
</ul>
</li>
</ul>
<h3 id="8-4粘性定位"><a href="#8-4粘性定位" class="headerlink" title="8.4	粘性定位"></a>8.4	粘性定位</h3><ul>
<li><strong>设置粘性定位</strong><ul>
<li>参考点为最近的一个拥有滚动机制的祖先元素</li>
<li>给元素设置 <strong>position:sticky</strong> 实现固定定位</li>
<li>使用 <strong>left</strong>，<strong>right</strong>，<strong>top</strong>，<strong>bottom</strong> 四个属性调整位置</li>
</ul>
</li>
<li><strong>粘性定位的特点</strong><ul>
<li>不会脱离文档流，使用一种专门用于窗口流动的定位方式</li>
<li>最常用的值是 <strong>top</strong> 值</li>
</ul>
</li>
</ul>
<h3 id="8-5定位的特殊应用"><a href="#8-5定位的特殊应用" class="headerlink" title="8.5	定位的特殊应用"></a>8.5	定位的特殊应用</h3><ul>
<li><strong>定位层次</strong><ul>
<li>定位元素的显示层级比普通元素高</li>
<li>如果位置发生重叠，默认情况是：后面的元素，会显示在前面元素之上</li>
<li>可以通过 <strong>z-index</strong> 属性调整元素的显示层级，值越大显示层级越高</li>
</ul>
</li>
<li><strong>让定位元素充满包含块</strong><ul>
<li>宽度与包含块保持一致，给定位元素同时设置 <strong>left</strong> 和 <strong>right</strong> 设置为0</li>
<li>高度与包含块保持一致，给定位元素同时设置 <strong>top</strong> 和 <strong>bottom</strong> 设置为0</li>
</ul>
</li>
<li><strong>让定位元素在包含块中居中</strong><ul>
<li>四个定位属性都设置为0</li>
<li><strong>margin</strong> 属性设置为 <strong>auto</strong></li>
</ul>
</li>
</ul>
<h2 id="第九节布局"><a href="#第九节布局" class="headerlink" title="第九节	布局"></a>第九节	布局</h2><h3 id="9-1常用布局名词"><a href="#9-1常用布局名词" class="headerlink" title="9.1	常用布局名词"></a>9.1	常用布局名词</h3><ul>
<li><p><strong>版心</strong></p>
<ul>
<li><p>表示一个固定宽度且水平居中的盒子，来显示网页的主要内容</p>
</li>
<li><p>宽度一般是 960 ~ 1200 像素之间</p>
</li>
<li><p>可以是一个，也可以是多个</p>
</li>
</ul>
</li>
<li><p><strong>常用布局名词</strong></p>
<table>
<thead>
<tr>
<th align="center">位置</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>顶部导航条</strong></td>
<td align="center">topbar</td>
</tr>
<tr>
<td align="center"><strong>页头</strong></td>
<td align="center">header，page-header</td>
</tr>
<tr>
<td align="center"><strong>导航</strong></td>
<td align="center">nav，navigator，navbar</td>
</tr>
<tr>
<td align="center"><strong>搜索框</strong></td>
<td align="center">search，search-box</td>
</tr>
<tr>
<td align="center"><strong>横幅</strong>，<strong>广告</strong>，<strong>宣传图</strong></td>
<td align="center">banner</td>
</tr>
<tr>
<td align="center"><strong>主要内容</strong></td>
<td align="center">content，main</td>
</tr>
<tr>
<td align="center"><strong>侧边栏</strong></td>
<td align="center">aside，sidebar</td>
</tr>
<tr>
<td align="center"><strong>页脚</strong></td>
<td align="center">footer，page-footer</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="9-2重置默认样式"><a href="#9-2重置默认样式" class="headerlink" title="9.2	重置默认样式"></a>9.2	重置默认样式</h3><ul>
<li><p><strong>重置默认样式</strong></p>
<ul>
<li><p>使用全局选择器</p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 <strong>reset.css</strong> 清除默认样式</p>
</li>
<li><p>使用 <strong>Normalize.css</strong> 在清除了一部分默认样式时，同时保护了有价值的默认样式</p>
</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Ajax</title>
    <url>/2024/01/28/Ajax/</url>
    <content><![CDATA[<h2 id="第一节Ajax概述"><a href="#第一节Ajax概述" class="headerlink" title="第一节	Ajax概述"></a>第一节	Ajax概述</h2><ul>
<li><strong>Ajax 简介</strong>：全称为 <strong>async Javascript and XML</strong>，即异步 <strong>JavaScript</strong> 和 <strong>XML</strong>，是一种用于创建快速动态网页的技术，它通过在后台与服务器进行少量数据交换，可以使网页实现异步更新，是前后台交互的工具</li>
<li><strong>同步与异步的区别</strong><ul>
<li><strong>同步提交</strong>：当用户发送请求时，当前页面不可以使用，服务器响应页面到客户端，响应完成，用户才可以使用页面</li>
<li><strong>异步提交</strong>：当用户发送请求时，当前页面还可以继续使用，当异步请求的数据响应给页面，页面把数据显示出来</li>
</ul>
</li>
<li><strong>Ajax 的特点</strong><ul>
<li>不需要插件的⽀持，原⽣ <strong>JavaScript</strong> 就可以使⽤</li>
<li>⽤户体验好，不需要刷新⻚⾯就可以更新数据</li>
<li>减轻服务端和带宽的负担</li>
</ul>
</li>
<li><strong>Ajax 的工作原理</strong>：客户端发送请求，请求交给 <strong>Ajax</strong>，<strong>Ajax</strong> 把请求提交给服务，服务器进行业务处理，把响应数据交给 <strong>Ajax</strong> 对象，<strong>Ajax</strong> 对象接收数据，由 <strong>JavaScrip</strong> 把数据写到页面上</li>
</ul>
<h2 id="第二节Ajax基本步骤"><a href="#第二节Ajax基本步骤" class="headerlink" title="第二节	Ajax基本步骤"></a>第二节	Ajax基本步骤</h2><ul>
<li><p><strong>创建 XMLHttpRequest 对象</strong></p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xmlHttpRequest = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建 HTTP 请求</strong></p>
<ul>
<li><strong>method</strong>：该参数用于指定 <strong>HTTP</strong> 的请求方法，一共有 <strong>get</strong>、<strong>post</strong>、<strong>head</strong>、<strong>put</strong>、<strong>delete</strong> 五种方法</li>
<li><strong>URL</strong>：该参数用于指定 <strong>HTTP</strong> 请求的 <strong>URL</strong> 地址，可以是绝对 <strong>URL</strong>，也可以是相对 <strong>URL</strong></li>
<li><strong>flag</strong>：该参数为可选，参数值为布尔型，用于指定是否使用异步方式，<strong>true</strong> 表示异步、<strong>false</strong> 表示同步，默认为 <strong>true</strong></li>
<li><strong>name</strong>：该参数为可选参数，用于输入用户名，如果服务器需要验证，则必须使用该参数</li>
<li><strong>password</strong>：该参数为可选，用于输入密码，若服务器需要验证，则必须使用该参数</li>
</ul>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">XMLHttpRequest</span>.<span class="title function_">open</span>(method,<span class="variable constant_">URL</span>,flag,name,password);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>设置响应 HTTP 请求状态变化的函数</strong></p>
<ul>
<li><p><strong>设置当对象状态改变时调用的函数</strong></p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xmlHttpRequest.<span class="property">onreadystatechange</span> = getData;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>定义响应函数</strong></p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(xmlHttpRequest.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="comment">//设置获取数据的语句</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>设置获取数据的语句</strong></p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(xmlHttpRequest.<span class="property">status</span> == <span class="number">200</span>)&#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(xmlHttpRequest.<span class="property">responseText</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>发送 HTTP 请求</strong></p>
<ul>
<li><strong>data</strong> 参数的格式与在 <strong>URL</strong> 中传递参数的格式类似</li>
<li>如果请求的数据不需要参数，即可以使用 <strong>nul</strong> 来替代</li>
</ul>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">XMLHttpRequest</span>.<span class="title function_">send</span>(data);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>局部更新</strong>：在通过 <strong>Ajax</strong> 的异步调用获得服务器端数据之后，可以使用 <strong>JavaScript</strong> 或 <strong>DOM</strong> 来将网页中的数据进行局部更新</p>
</li>
</ul>
<h2 id="第三节Ajax状态码"><a href="#第三节Ajax状态码" class="headerlink" title="第三节	Ajax状态码"></a>第三节	Ajax状态码</h2><ul>
<li><p><strong>XMLHttpResponse 的状态</strong></p>
<ul>
<li><strong>未初始化状态</strong>：在创建完 <strong>XMLHttpRequest</strong> 对象时，该对象处于未初始化状态</li>
<li><strong>初始化状态</strong>：在创建完 <strong>XMLHttpRequest</strong> 对象后使用 <strong>open()</strong> 方法创建了 <strong>HTTP</strong> 请求时，该对象处于初始化状态</li>
<li><strong>发送数据状态</strong>：在初始化 <strong>XMLHttpRequest</strong> 对象后，使用 <strong>send()</strong> 方法发送数据时，该对象处于发送数据状态</li>
<li><strong>接收数据状态</strong>：<strong>Web</strong> 服务器接收完数据并进行处理完毕之后，向客户端传送返回的结果</li>
<li><strong>完成状态</strong>：<strong>XMLHttpRequest</strong> 对象接收数据完毕后，此时接收完毕后的数据存入在客户端计算机的内存中，可以使用 <strong>responseText</strong> 属性或<strong>responseXml</strong> 属性来获取数据</li>
</ul>
</li>
<li><p><strong>Ajax 状态码</strong></p>
<table>
<thead>
<tr>
<th align="center">Ajax状态码</th>
<th align="center">状态</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>0</strong></td>
<td align="center">未初始化状态</td>
</tr>
<tr>
<td align="center"><strong>1</strong></td>
<td align="center">初始化状态</td>
</tr>
<tr>
<td align="center"><strong>2</strong></td>
<td align="center">发送数据状态</td>
</tr>
<tr>
<td align="center"><strong>3</strong></td>
<td align="center">接收数据状态</td>
</tr>
<tr>
<td align="center"><strong>4</strong></td>
<td align="center">完成状态</td>
</tr>
</tbody></table>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>HTML</title>
    <url>/2024/01/28/HTML/</url>
    <content><![CDATA[<h3 id="第一节HTML概述"><a href="#第一节HTML概述" class="headerlink" title="第一节	HTML概述"></a>第一节	HTML概述</h3><ul>
<li><strong>HTML</strong>：全称 <strong>Hyper Text Markup Language</strong>，即超文本标记语言，是用来描述网页的一种标记语言，它使用标记标签来描述网页，文档中包含了标签及其文本内容</li>
</ul>
<ul>
<li><strong>HTML</strong> 标签：是由尖括号包围的关键词，通常是成对出现的，标签对中的第一个标签是开始标签，第二个标签是结束标签</li>
</ul>
<ul>
<li><p><strong>HTML</strong> 元素：<strong>HTML</strong> 标签和 <strong>HTML</strong> 元素通常都是描述同样的意思，但是严格来讲，一个 <strong>HTML</strong> 元素包含了开始标签与结束标签</p>
</li>
<li><p><strong>HTML</strong> 注释</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这是一个注释 --&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>HTML</strong> 文档基本结构</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	...</span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>/&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	...</span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>版本声明</strong>：表示 <strong>HTML5</strong> 文档</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>中文编码</strong>：目前在大部分浏览器中，直接输出中文会出现中文乱码的情况，这时候我们就需要在头部将字符声明为 <strong>UTF-8</strong> 或 <strong>GBK</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="第二节基本标签"><a href="#第二节基本标签" class="headerlink" title="第二节	基本标签"></a>第二节	基本标签</h3><ul>
<li><p><strong>html</strong> 标签：整个网页是从 <strong>&lt;html&gt;</strong> 这里开始的，然后到 <strong>&lt;&#x2F;html&gt;</strong> 结束</p>
</li>
<li><p><strong>head</strong> 标签：<strong>head</strong> 标签代表页面的头，定义一些特殊内容，这些内容往往都是不可见内容（在浏览器不可见）</p>
<table>
<thead>
<tr>
<th align="center">标签</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>&lt;title&gt;</strong></td>
<td align="center">定义网页的标题</td>
</tr>
<tr>
<td align="center"><strong>&lt;meta&gt;</strong></td>
<td align="center">定义网页的基本信息（供搜索引擎）</td>
</tr>
<tr>
<td align="center"><strong>&lt;style&gt;</strong></td>
<td align="center">定义 <strong>CSS</strong> 样式</td>
</tr>
<tr>
<td align="center"><strong>&lt;link&gt;</strong></td>
<td align="center">链接外部 <strong>CSS</strong> 文件或脚本文件</td>
</tr>
<tr>
<td align="center"><strong>&lt;script&gt;</strong></td>
<td align="center">定义脚本语言</td>
</tr>
<tr>
<td align="center"><strong>&lt;base&gt;</strong></td>
<td align="center">定义页面所有链接的基础定位</td>
</tr>
</tbody></table>
</li>
<li><p><strong>body</strong> 标签：<strong>body</strong> 标签代表页面的身，定义网页展示内容，这些内容往往都是可见内容（在浏览器可见）</p>
</li>
</ul>
<h3 id="第三节meta元信息"><a href="#第三节meta元信息" class="headerlink" title="第三节	meta元信息"></a>第三节	meta元信息</h3><ul>
<li><p><strong>meta标签</strong>：定义网页的基本信息，提供给搜素引擎使用</p>
</li>
<li><p><strong>meta属性</strong></p>
<ul>
<li><p>配置字符编码</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>针对 <strong>IE</strong> 浏览器的兼容性配置</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>针对移动端的配置</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置网页关键字</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;8-12个以英文逗号隔开的单词/词语&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置网页描述信息</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;80字以内的一段话，与网站内容相关&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>针对搜索引擎爬虫配置</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置网页作者</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;tony&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置网页生成工具</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;generator&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Visual Studio Code&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置定义网页版权信息</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;copyright&quot;</span> <span class="attr">content</span>=<span class="string">&quot;2023-2027©版权所有&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置网页自动刷新</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;10;url=http://www.baidu.com&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="第四节段落与文字"><a href="#第四节段落与文字" class="headerlink" title="第四节	段落与文字"></a>第四节	段落与文字</h3><ul>
<li><p><strong>段落与文字标签</strong></p>
<table>
<thead>
<tr>
<th align="center">标签</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>&lt;h1&gt;~&lt;h6&gt;</strong></td>
<td align="center">标题</td>
</tr>
<tr>
<td align="center"><strong>&lt;p&gt;</strong></td>
<td align="center">段落</td>
</tr>
<tr>
<td align="center"><strong>&lt;br&gt;</strong></td>
<td align="center">换行</td>
</tr>
<tr>
<td align="center"><strong>&lt;hr&gt;</strong></td>
<td align="center">水平线</td>
</tr>
<tr>
<td align="center"><strong>&lt;div&gt;</strong></td>
<td align="center">分割</td>
</tr>
<tr>
<td align="center"><strong>&lt;span&gt;</strong></td>
<td align="center">区域</td>
</tr>
</tbody></table>
</li>
<li><p><strong>文本格式化标签</strong></p>
<table>
<thead>
<tr>
<th align="center">标签</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>&lt;b&gt;</strong></td>
<td align="center">粗体</td>
</tr>
<tr>
<td align="center"><strong>&lt;em&gt;</strong></td>
<td align="center">着重</td>
</tr>
<tr>
<td align="center"><strong>&lt;i&gt;</strong></td>
<td align="center">斜体字</td>
</tr>
<tr>
<td align="center"><strong>&lt;small&gt;</strong></td>
<td align="center">小号字</td>
</tr>
<tr>
<td align="center"><strong>&lt;strong&gt;</strong></td>
<td align="center">加重语气</td>
</tr>
<tr>
<td align="center"><strong>&lt;sub&gt;</strong></td>
<td align="center">下标字</td>
</tr>
<tr>
<td align="center"><strong>&lt;sup&gt;</strong></td>
<td align="center">上标字</td>
</tr>
<tr>
<td align="center"><strong>&lt;ins&gt;</strong></td>
<td align="center">插入字</td>
</tr>
<tr>
<td align="center"><strong>&lt;del&gt;</strong></td>
<td align="center">删除字</td>
</tr>
</tbody></table>
</li>
<li><p><strong>网页特殊符号</strong></p>
<table>
<thead>
<tr>
<th align="center">标签</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>&amp;nbsp</strong></td>
<td align="center">空格</td>
</tr>
<tr>
<td align="center"><strong>&amp;lt</strong></td>
<td align="center">小于</td>
</tr>
<tr>
<td align="center"><strong>&amp;gt</strong></td>
<td align="center">大于</td>
</tr>
<tr>
<td align="center"><strong>&amp;le</strong></td>
<td align="center">小于等于</td>
</tr>
<tr>
<td align="center"><strong>&amp;ge</strong></td>
<td align="center">大于等于</td>
</tr>
</tbody></table>
</li>
<li><p><strong>自闭合标签</strong>：只有开始符号而没有结束符号，例如 <strong>&lt;br&#x2F;&gt;</strong> 和 <strong>&lt;hr&#x2F;&gt;</strong></p>
</li>
<li><p><strong>块元素和行内元素</strong></p>
<ul>
<li><strong>块元素特点</strong>：独占一行，排斥其他元素跟其位于同一行，块元素内部可以容纳其他块元素或行元素，例如<strong>&lt;h1~h6&gt;<strong>、</strong>&lt;p&gt;<strong>、</strong>&lt;hr&gt;<strong>、</strong>&lt;div&gt;</strong></li>
<li><strong>行内元素特点</strong>：可以与其他行内元素位于同一行，行内内部可以容纳其他行内元素，但不可以容纳块元素，例如<strong>&lt;strong&gt;<strong>、</strong>&lt;em&gt;<strong>、</strong>&lt;span&gt;</strong></li>
</ul>
</li>
</ul>
<h3 id="第五节列表"><a href="#第五节列表" class="headerlink" title="第五节	列表"></a>第五节	列表</h3><ul>
<li><p><strong>有序列表</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>无序列表</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>无序列表属性</strong></p>
<table>
<thead>
<tr>
<th align="center">type 属性值</th>
<th align="center">列表项的序号类型</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>disc</strong></td>
<td align="center">默认值，实心圆</td>
</tr>
<tr>
<td align="center"><strong>circle</strong></td>
<td align="center">空心圆</td>
</tr>
<tr>
<td align="center"><strong>square</strong></td>
<td align="center">实心正方形</td>
</tr>
</tbody></table>
</li>
<li><p><strong>自定义列表</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>定义名词<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>定义描述<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="第六节表格"><a href="#第六节表格" class="headerlink" title="第六节	表格"></a>第六节	表格</h3><ul>
<li><p><strong>表格结构标签</strong></p>
<table>
<thead>
<tr>
<th align="center">标签</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>&lt;table&gt;</strong></td>
<td align="center">表格</td>
</tr>
<tr>
<td align="center"><strong>&lt;tr&gt;</strong></td>
<td align="center">行</td>
</tr>
<tr>
<td align="center"><strong>&lt;td&gt;</strong></td>
<td align="center">单元格</td>
</tr>
<tr>
<td align="center"><strong>&lt;thead&gt;</strong></td>
<td align="center">表头</td>
</tr>
<tr>
<td align="center"><strong>&lt;tbody&gt;</strong></td>
<td align="center">表身</td>
</tr>
<tr>
<td align="center"><strong>&lt;tfoot&gt;</strong></td>
<td align="center">表脚</td>
</tr>
<tr>
<td align="center"><strong>&lt;th&gt;</strong></td>
<td align="center">表头单元格</td>
</tr>
</tbody></table>
</li>
<li><p><strong>表格基本结构</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>表格完整结构</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>表格标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--表头--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span><span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--表身--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--表脚--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span><span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>合并单元格</strong></p>
<ul>
<li><p><strong>合并行</strong>：<strong>&lt;td rowspan&#x3D;”跨度的行数”&gt;</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>喜欢水果:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>合并列</strong>：<strong>&lt;td colspan&#x3D;”跨度的列数”&gt;</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>精品教程<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>HTML教程<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>CSS教程<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>jQuery教程<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>SEO教程<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="第七节图像"><a href="#第七节图像" class="headerlink" title="第七节	图像"></a>第七节	图像</h3><ul>
<li><p><strong>图像标签</strong>：使用标签 <strong>&lt;img&gt;</strong> 来设置图像</p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>src</strong></td>
<td align="center">图像地址</td>
</tr>
<tr>
<td align="center"><strong>alt</strong></td>
<td align="center">无法显示图像时的提示文字</td>
</tr>
<tr>
<td align="center"><strong>title</strong></td>
<td align="center">鼠标移到图像上时的提示文字</td>
</tr>
</tbody></table>
</li>
<li><p><strong>图像格式</strong></p>
<ul>
<li><strong>JPG</strong>：可以很好处理大面积色调的图像，如相片、网页一般的图片</li>
<li><strong>PNG</strong>：图片体积小，而且无损压缩，能保证网页的打开速度，支持透明信息</li>
<li><strong>GIF</strong>：图像效果很差，但是可以制作动画</li>
</ul>
</li>
</ul>
<h3 id="第八节链接"><a href="#第八节链接" class="headerlink" title="第八节	链接"></a>第八节	链接</h3><ul>
<li><p><strong>链接标签</strong>：使用标签 <strong>&lt;a&gt;</strong> 来设置超文本链接</p>
</li>
<li><p><strong>href</strong> 属性：超链接所指向的 <strong>URL</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com/&quot;</span>&gt;</span>访问百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>target</strong> 属性：定义被链接的文档在何处显示</p>
<table>
<thead>
<tr>
<th align="center">属性值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>_self</strong></td>
<td align="center">默认方式，在当前窗口打开链接</td>
</tr>
<tr>
<td align="center"><strong>_blank</strong></td>
<td align="center">在一个全新的窗口打开链接</td>
</tr>
<tr>
<td align="center"><strong>_top</strong></td>
<td align="center">在顶层框架中打开链接</td>
</tr>
<tr>
<td align="center"><strong>_parent</strong></td>
<td align="center">在当前框架的上一层里打开链接</td>
</tr>
</tbody></table>
</li>
<li><p><strong>链接到锚点</strong></p>
<ul>
<li><p><strong>定义锚点</strong></p>
<ul>
<li><p><strong>name属性</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;test1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>id属性</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;test2&quot;</span>&gt;</span>我是一个位置<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>跳转锚点</strong></p>
<ul>
<li><p><strong>跳转到锚点</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#test1&quot;</span>&gt;</span>去test1锚点<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>跳转到页面顶部</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>回到顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>跳转到其他页面锚点</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;demo.html#test1&quot;</span>&gt;</span>去demo.html页面的test1锚点<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>刷新页面</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>刷新本页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>执行js代码</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(1);&quot;</span>&gt;</span>点我弹窗<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>链接到应用</strong></p>
<ul>
<li><p><strong>拨号</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;tel:10010&quot;</span>&gt;</span>电话联系<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>发送邮件</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:10010@qq.com&quot;</span>&gt;</span>邮件联系<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>发送短信</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;sms:10086&quot;</span>&gt;</span>短信联系<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="第九节区块"><a href="#第九节区块" class="headerlink" title="第九节	区块"></a>第九节	区块</h3><ul>
<li><p><strong>div标签</strong>：可用于组合其他 <strong>HTML</strong> 元素的容器，会自动换行</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color:#0000FF&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是一个在 div 元素中的标题。<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个在 div 元素中的文本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>span标签</strong>：可用作文本的容器，不会自动换行</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我的母亲有 <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color:blue&quot;</span>&gt;</span>蓝色<span class="tag">&lt;/<span class="name">span</span>&gt;</span> 的眼睛。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="第十节表单"><a href="#第十节表单" class="headerlink" title="第十节	表单"></a>第十节	表单</h3><ul>
<li><p><strong>表单标签</strong>：使用标签 <strong>&lt;form&gt;</strong> 来设置表单</p>
</li>
<li><p><strong>action</strong> 属性：处理表单提交的 <strong>URL</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://www.baidu.com/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>输入控件标签</strong>：使用标签 **&lt;input&gt;**来设置输入控件</p>
<ul>
<li><p><strong>文本输入框text</strong>：输入文本</p>
<ul>
<li><p><strong>name</strong> 属性：数据的名称</p>
</li>
<li><p><strong>value</strong> 属性：输入框的默认输入值</p>
</li>
<li><p><strong>maxlength</strong> 属性：输入框最大可输入长度</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">		  </span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>密码输入框password</strong>：输入密码</p>
<ul>
<li><p><strong>name</strong> 属性：数据的名称</p>
</li>
<li><p><strong>value</strong> 属性：输入框的默认输入值</p>
</li>
<li><p><strong>maxlength</strong> 属性：输入框最大可输入长度</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>单选框radio</strong>：选择一个属性</p>
<ul>
<li><p><strong>name</strong> 属性：数据的名称，多个 <strong>radio</strong> 的 <strong>name</strong> 属性值要保持一致</p>
</li>
<li><p><strong>value</strong> 属性：提交的数据值</p>
</li>
<li><p><strong>checked</strong> 属性：让该单选按钮默认选中</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span>男</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>复选框checkbox</strong>：选择多个属性</p>
<ul>
<li><p><strong>name</strong> 属性：数据的名称</p>
</li>
<li><p><strong>value</strong> 属性：提交的数据值</p>
</li>
<li><p><strong>checked</strong> 属性：让该复选框默认选中</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;smoke&quot;</span>&gt;</span>抽烟</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;drink&quot;</span>&gt;</span>喝酒</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;perm&quot;</span>&gt;</span>烫头</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>隐藏域hidden</strong>：用户不可见的输入区域，用于携带固定数据</p>
<ul>
<li><p><strong>name</strong> 属性：指定数据的名称</p>
</li>
<li><p><strong>value</strong> 属性：指定的是真正提交的数据</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tag&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>提交按钮submit</strong>：提交表单</p>
<ul>
<li><p><strong>value</strong> 属性：指定按钮文字</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点我提交表单&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>重置按钮reset</strong>：重置表单数据，使用 <strong>button</strong> 标签生成按钮</p>
<ul>
<li><p><strong>value</strong> 属性：指定按钮文字</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点我重置&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>普通按钮button</strong>：绑定特定事件</p>
<ul>
<li><p><strong>value</strong> 属性：指定按钮文字</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;普通按钮&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>文本域textarea</strong>：输入文本框，使用 <strong>textarea</strong> 标签生成文本域</p>
<ul>
<li><p><strong>rows</strong> 属性：指定默认显示的行数，会影响文本域的高度</p>
</li>
<li><p><strong>cols</strong> 属性：指定默认显示的列数，会影响文本域的宽度</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;22&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;3&quot;</span>&gt;</span>我是文本域<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>下拉框option</strong>：下拉选择属性，使用 <strong>select</strong> 和 <strong>option</strong> 嵌套标签</p>
<ul>
<li><p><strong>name</strong> 属性：指定数据的名称</p>
</li>
<li><p><strong>value</strong> 属性：提交数据的值</p>
</li>
<li><p><strong>selected</strong> 属性，表示默认选中</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;from&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;黑&quot;</span>&gt;</span>黑龙江<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;辽&quot;</span>&gt;</span>辽宁<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;吉&quot;</span>&gt;</span>吉林<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;粤&quot;</span> <span class="attr">selected</span>&gt;</span>广东<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>禁用表单控件</strong>：给表单控件设置禁用属性</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;smoke&quot;</span>&gt;</span>抽烟</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">disabled</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;drink&quot;</span>&gt;</span>喝酒</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;perm&quot;</span>&gt;</span>烫头</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>label标签</strong>：与表单控件相关联，点击后可以获取焦点</p>
<ul>
<li><p><strong>设置for属性</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>  <span class="attr">id</span>=<span class="string">&quot;sex&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>嵌套label标签</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span> 用户名： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;usename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span>   <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="第十一节框架"><a href="#第十一节框架" class="headerlink" title="第十一节	框架"></a>第十一节	框架</h3><ul>
<li><p><strong>iframe标签</strong>：在网页中嵌入其他文件</p>
<ul>
<li><p><strong>src属性</strong>：框架引用的网址</p>
</li>
<li><p><strong>name属性</strong>：框架名称</p>
</li>
<li><p><strong>width属性</strong>：框架的宽度</p>
</li>
<li><p><strong>height属性</strong>：框架的高度</p>
</li>
<li><p><strong>frameborder属性</strong>：是否显示边框，1表示是，0表示否</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;http://www.taobao.com&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="第十二节多媒体"><a href="#第十二节多媒体" class="headerlink" title="第十二节	多媒体"></a>第十二节	多媒体</h3><ul>
<li><strong>video标签</strong>：定义视频<ul>
<li><strong>src</strong> 属性：视频的地址</li>
<li><strong>width</strong> 属性：播放器的宽度</li>
<li><strong>height</strong> 属性：播放器的高度</li>
<li><strong>preload</strong> 属性：是否预加载视频</li>
</ul>
</li>
<li><strong>audio标签</strong>：定义音频<ul>
<li><strong>src</strong> 属性：音频的地址</li>
<li><strong>preload</strong> 属性：是否预加载音频</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>JavaScript</title>
    <url>/2024/01/28/JavaScript/</url>
    <content><![CDATA[<h2 id="第一章JavaScript简介"><a href="#第一章JavaScript简介" class="headerlink" title="第一章	JavaScript简介"></a>第一章	JavaScript简介</h2><ul>
<li><p><strong>JavaScript</strong> 是互联网上最流行的轻量级脚本语言，这门语言可用于 <strong>HTML</strong> 和 <strong>web</strong>，并由所有的现代浏览器执行，更可广泛用于服务器、<strong>PC</strong>、笔记本电脑、平板电脑和智能手机等设备</p>
</li>
<li><p><strong>JavaScript</strong> 的特点</p>
<ul>
<li>解释型语言</li>
<li>动态语言</li>
<li>类似于 <strong>C</strong> 和 <strong>Java</strong> 的语法结构</li>
<li>基于原型的面向对象</li>
<li>严格区分大小写</li>
</ul>
</li>
<li><p><strong>JavaScript</strong> 的使用</p>
<ul>
<li><p><strong>标签引用</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&quot;Hello,World!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>文件引用</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>JavaScript</strong> 的输出</p>
<ul>
<li><p><strong>页面输出</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;Hello,World!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>控制台输出</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;输出一条日志&quot;</span>);<span class="comment">//最常用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;输出一条信息&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;输出一条警告&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;输出一条错误&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>弹出框口输出</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&quot;Hello,World!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第二章JavaScript基础语法"><a href="#第二章JavaScript基础语法" class="headerlink" title="第二章	JavaScript基础语法"></a>第二章	JavaScript基础语法</h2><h3 id="2-1标识符"><a href="#2-1标识符" class="headerlink" title="2.1	标识符"></a>2.1	标识符</h3><ul>
<li><strong>标识符</strong><ul>
<li>第一个字符必须是一个字母、下划线 <strong>_</strong> 或一个美元符号 <strong>$</strong></li>
<li>其它字符可以是字母、下划线、美元符号或数字</li>
<li>按照惯例，<strong>ECMAScript</strong> 标识符采用驼峰命名法</li>
<li>标识符不能是关键字和保留字符</li>
</ul>
</li>
</ul>
<h3 id="2-2变量"><a href="#2-2变量" class="headerlink" title="2.2	变量"></a>2.2	变量</h3><ul>
<li><p><strong>变量的声明：</strong></p>
<ul>
<li><p><strong>全局变量</strong>：使用 <strong>var</strong> 关键字声明一个变量</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>局部变量</strong>：使用 <strong>let</strong> 关键字声明一个变量</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>变量的赋值：</strong> 使用 <strong>&#x3D;</strong> 为变量赋值，可与变量的声明同时进行</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-3数据类型"><a href="#2-3数据类型" class="headerlink" title="2.3	数据类型"></a>2.3	数据类型</h3><ul>
<li><p><strong>类型分类</strong></p>
<ul>
<li>字符串型 <strong>String</strong>：用于表示字符串，需要使用单引号或双引号括起来</li>
<li>数值型 <strong>Number</strong>：表示整数和浮点数</li>
<li>布尔型 <strong>Boolean</strong>：逻辑值类型，只能够取真和假两种数值</li>
<li>未定义型<strong>Undefined</strong>：只有一个值 <strong>undefined</strong>，表示声明变量但未对其加以初始化</li>
<li>空型 <strong>Null</strong>：只有一个值 <strong>null</strong>，表示的是一个空的对象</li>
</ul>
</li>
<li><p><strong>typedef 运算符</strong>：使用 <strong>typeof</strong> 操作符可以用来检查一个变量的数据类型</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">123</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-4强制类型转换"><a href="#2-4强制类型转换" class="headerlink" title="2.4	强制类型转换"></a>2.4	强制类型转换</h3><ul>
<li><p><strong>String 类型</strong></p>
<ul>
<li><p>调用被转换数据类型的 <strong>toString()</strong> 方法</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">a = a.<span class="title function_">toString</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> a);</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用 <strong>String()</strong> 函数</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">a = <span class="title class_">String</span>(a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> a);</span><br></pre></td></tr></table></figure>
</li>
<li><p>为任意的数据类型 <strong>+””</strong></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">a = a + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> a);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>Number 类型</strong></p>
<ul>
<li><p>使用 <strong>Number()</strong> 函数</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">a = <span class="title class_">Number</span>(a);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>parseInt()</strong> 函数把一个字符串转换为一个整数</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">a = <span class="built_in">parseInt</span>(a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> a);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>parseFloat()</strong> 函数把一个字符串转换为一个浮点数</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;123.456&quot;</span>;</span><br><span class="line">a = <span class="built_in">parseFloat</span>(a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> a);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>Boolean 类型</strong>：使用 <strong>Boolean()</strong> 函数</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;true&quot;</span>;</span><br><span class="line">a = <span class="title class_">Boolean</span>(a);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-5运算符"><a href="#2-5运算符" class="headerlink" title="2.5	运算符"></a>2.5	运算符</h3><ul>
<li><strong>算术运算符</strong>：表达式计算，+，-，*，&#x2F;，%，++，–</li>
<li><strong>关系运算符</strong>：测定变量或值是否相等，&gt;，&lt;，&gt;&#x3D;，&lt;&#x3D;</li>
<li><strong>赋值运算符</strong>：给变量赋值，&#x3D;，+&#x3D;，-&#x3D;，*&#x3D;，&#x2F;&#x3D;，%&#x3D;</li>
<li><strong>逻辑运算符</strong>：测定变量或值是否相等，&amp;&amp;，||，!</li>
<li><strong>比较运算符</strong>：比较两个值是否相等<ul>
<li>**&#x3D;&#x3D;**：相等运算，如果值的类型不同，则会自动进行类型转换为相同的类型再比较</li>
<li>**!&#x3D;**：不相等运算，如果值的类型不同，则会自动进行类型转换为相同的类型再比较</li>
<li>**&#x3D;&#x3D;&#x3D;**：全等运算，不会做自动的类型转换</li>
<li>**!&#x3D;&#x3D;**：不全等运算，不会做自动的类型转换</li>
</ul>
</li>
</ul>
<h3 id="2-6条件语句"><a href="#2-6条件语句" class="headerlink" title="2.6	条件语句"></a>2.6	条件语句</h3><ul>
<li><p><strong>if … else 语句</strong></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(expression1)</span><br><span class="line">    statement</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(expression2)</span><br><span class="line">    statement</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    statement</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>switch … case 语句</strong></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (语句) &#123;</span><br><span class="line">    <span class="keyword">case</span> 表达式<span class="number">1</span>:</span><br><span class="line">        语句...</span><br><span class="line">    <span class="keyword">case</span> 表达式<span class="number">2</span>:</span><br><span class="line">        语句...</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">        语句...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-7循环语句"><a href="#2-7循环语句" class="headerlink" title="2.7	循环语句"></a>2.7	循环语句</h3><ul>
<li><p><strong>while 语句</strong></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件表达式)&#123;</span><br><span class="line">    语句...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>do … while 语句</strong></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    语句...</span><br><span class="line">&#125;<span class="keyword">while</span>(条件表达式);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>for  语句</strong></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化表达式 ; 条件表达式 ; 更新表达式)&#123;</span><br><span class="line">    语句...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-8对象基础"><a href="#2-8对象基础" class="headerlink" title="2.8	对象基础"></a>2.8	对象基础</h3><ul>
<li><p><strong>对象概述</strong>：<strong>Object</strong> 类型，也称为一个对象，是 <strong>JavaScript</strong> 中的引用数据类型，它是一种复合值，它将很多值聚合到一起，可以通过名字访问这些值。对象也可以看做是属性的无序集合，每个属性都是一个名&#x2F;值对</p>
</li>
<li><p><strong>创建对象</strong></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;孙悟空&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>访问属性</strong></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">person.<span class="property">name</span><span class="comment">// 第一种方式</span></span><br><span class="line"></span><br><span class="line">person[<span class="string">&#x27;name&#x27;</span>]<span class="comment">// 第二种方式</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>删除属性</strong></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> person.<span class="property">name</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>遍历对象</strong></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> person)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-9函数"><a href="#2-9函数" class="headerlink" title="2.9	函数"></a>2.9	函数</h3><ul>
<li><p><strong>函数概述</strong>：函数是由一连串的子程序（语句的集合）所组成的，可以被外部程序调用，向函数传递参数之后，函数可以返回一定的值</p>
</li>
<li><p><strong>函数创建</strong></p>
<ul>
<li><p><strong>函数声明</strong></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名([形参<span class="number">1</span>,形参<span class="number">2</span>,...,形参N]) &#123;</span><br><span class="line">    语句...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>函数表达式</strong></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 函数名  = <span class="keyword">function</span>(<span class="params">[形参<span class="number">1</span>,形参<span class="number">2</span>,...,形参N]</span>) &#123;</span><br><span class="line">    语句....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>函数对象</strong></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 函数名 = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;执行语句&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>函数调用</strong></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">sum</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>函数返回值</strong></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = <span class="title function_">sum</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>匿名函数</strong>：没有名字的函数就是匿名函数，它可以让一个变量来接收，也就是用函数表达式方式创建和接收</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;我是一个匿名函数&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fun</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>对象中的函数</strong></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">sayHello</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(name + <span class="string">&quot; hello&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">person.<span class="title function_">sayHello</span>();</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第三章JavaScript常用对象"><a href="#第三章JavaScript常用对象" class="headerlink" title="第三章	JavaScript常用对象"></a>第三章	JavaScript常用对象</h2><h3 id="3-1Array对象"><a href="#3-1Array对象" class="headerlink" title="3.1	Array对象"></a>3.1	Array对象</h3><ul>
<li><p><strong>创建数组</strong></p>
<ul>
<li><p><strong>对象创建</strong></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>字面量创建</strong></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>数组属性</strong></p>
<ul>
<li><strong>constructor属性</strong>：返回创建数组对象的原型函数</li>
<li><strong>length属性</strong>：设置或返回数组元素的个数</li>
</ul>
</li>
<li><p><strong>数组方法</strong></p>
<table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>push()</strong></td>
<td align="center">向数组的末尾添加一个或多个元素，并返回数组的新的长度</td>
</tr>
<tr>
<td align="center"><strong>pop()</strong></td>
<td align="center">删除数组的最后一个元素，并将被删除的元素作为返回值返回</td>
</tr>
<tr>
<td align="center"><strong>unshift()</strong></td>
<td align="center">向数组开头添加一个或多个元素，并返回新的数组长度</td>
</tr>
<tr>
<td align="center"><strong>shift()</strong></td>
<td align="center">删除数组的第一个元素，并将被删除的元素作为返回值返回</td>
</tr>
<tr>
<td align="center"><strong>forEach()</strong></td>
<td align="center">用来遍历数组</td>
</tr>
<tr>
<td align="center"><strong>slice()</strong></td>
<td align="center">从数组提取指定元素，将截取到的元素封装到一个新数组中返回</td>
</tr>
<tr>
<td align="center"><strong>splice()</strong></td>
<td align="center">删除数组中的指定元素，会将指定元素从原数组中删除，并将被删除的元素作为返回值返回</td>
</tr>
<tr>
<td align="center"><strong>concat()</strong></td>
<td align="center">连接两个或多个数组，并将新的数组返回</td>
</tr>
<tr>
<td align="center"><strong>join()</strong></td>
<td align="center">将数组转换为一个字符串</td>
</tr>
<tr>
<td align="center"><strong>reverse()</strong></td>
<td align="center">反转数组，直接修改原数组</td>
</tr>
<tr>
<td align="center"><strong>sort()</strong></td>
<td align="center">对数组中的元素进行排序，直接修改原数组</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="3-2Function对象"><a href="#3-2Function对象" class="headerlink" title="3.2	Function对象"></a>3.2	Function对象</h3><ul>
<li><p><strong>call()方法</strong>：函数对象的方法，需要通过函数对象来调用，将一个对象指定为第一个参数，此时这个对象将会成为函数执行时的<strong>this</strong>，将实参在对象之后依次传递</p>
<ul>
<li><p><strong>函数定义</strong></p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b = &quot;</span> + b);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fun = &quot;</span> + <span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>对象声明</strong></p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;obj&quot;</span>,</span><br><span class="line">    <span class="attr">sayName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>方法调用</strong></p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fun.<span class="title function_">call</span>(obj, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>apply()方法</strong>：函数对象的方法，需要通过函数对象来调用，将一个对象指定为第一个参数，此时这个对象将会成为函数执行时的<strong>this</strong>，需要将实参封装到一个数组中统一传递</p>
<ul>
<li><p><strong>函数定义</strong></p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function fun(a, b) &#123;</span><br><span class="line">    console.log(&quot;a = &quot; + a);</span><br><span class="line">    console.log(&quot;b = &quot; + b);</span><br><span class="line">    console.log(&quot;fun = &quot; + this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>对象声明</strong></p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;obj&quot;</span>,</span><br><span class="line">    <span class="attr">sayName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>方法调用</strong></p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fun.<span class="title function_">apply</span>(obj, [<span class="number">2</span>, <span class="number">3</span>]);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>arguement 对象</strong>：函数对象内，自动创建的专门接收所有参数值得类数组对象</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>.<span class="property">length</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>.<span class="property">callee</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>.<span class="property">callee</span> == fun);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fun</span>(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-3Data对象"><a href="#3-3Data对象" class="headerlink" title="3.3	Data对象"></a>3.3	Data对象</h3><ul>
<li><p><strong>Data 对象</strong>：使用 <strong>Date</strong> 对象来表示一个时间，如果直接使用构造函数创建一个 <strong>Date</strong> 对象，则会封装为当前代码执行的时间</p>
</li>
<li><p><strong>时间方法</strong></p>
<table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>getFullYear()</strong></td>
<td align="center">获取当前日期对象的年份(四位数字年份)</td>
</tr>
<tr>
<td align="center"><strong>getMonth()</strong></td>
<td align="center">获取当前日期对象的月份(0 ~ 11)</td>
</tr>
<tr>
<td align="center"><strong>getDate()</strong></td>
<td align="center">获取当前日期对象的日数(1 ~ 31)</td>
</tr>
<tr>
<td align="center"><strong>getHours()</strong></td>
<td align="center">获取当前日期对象的小时(0 ~ 23)</td>
</tr>
<tr>
<td align="center"><strong>getMinutes()</strong></td>
<td align="center">获取当前日期对象的分钟(0 ~ 59)</td>
</tr>
<tr>
<td align="center"><strong>getSeconds()</strong></td>
<td align="center">获取当前日期对象的秒钟(0 ~ 59)</td>
</tr>
<tr>
<td align="center"><strong>getMilliseconds()</strong></td>
<td align="center">获取当前日期对象的毫秒(0 ~ 999)</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="3-4Math对象"><a href="#3-4Math对象" class="headerlink" title="3.4	Math对象"></a>3.4	Math对象</h3><ul>
<li><p><strong>Math 对象</strong>：属于一个工具类，不用创建对象，封装了数学运算相关的属性和方法</p>
</li>
<li><p><strong>数学函数</strong></p>
<table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>PI</strong></td>
<td align="center">圆周率</td>
</tr>
<tr>
<td align="center"><strong>E</strong></td>
<td align="center">自然对数</td>
</tr>
<tr>
<td align="center"><strong>abs()</strong></td>
<td align="center">绝对值</td>
</tr>
<tr>
<td align="center"><strong>ceil()</strong></td>
<td align="center">向上取整</td>
</tr>
<tr>
<td align="center"><strong>floor()</strong></td>
<td align="center">向下取整</td>
</tr>
<tr>
<td align="center"><strong>round()</strong></td>
<td align="center">四舍五入取整</td>
</tr>
<tr>
<td align="center"><strong>random()</strong></td>
<td align="center">生成 0~1 随机数</td>
</tr>
<tr>
<td align="center"><strong>pow()</strong></td>
<td align="center">x的y次幂</td>
</tr>
<tr>
<td align="center"><strong>sqrt()</strong></td>
<td align="center">x的平方根</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="3-5String对象"><a href="#3-5String对象" class="headerlink" title="3.5	String对象"></a>3.5	String对象</h3><ul>
<li><p><strong>字符串属性</strong></p>
<ul>
<li><p><strong>constructor属性</strong>：返回创建字符串对象的原型函数</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;Hello,World!&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">constructor</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>length属性</strong>：获取字符串的长度</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;Hello,World!&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">length</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>字符串方法</strong></p>
<table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>charAt()</strong></td>
<td align="center">根据索引获取指定位置的字符</td>
</tr>
<tr>
<td align="center"><strong>charCodeAt()</strong></td>
<td align="center">获取指定位置字符的字符编码（<strong>Unicode</strong> 编码）</td>
</tr>
<tr>
<td align="center"><strong>concat()</strong></td>
<td align="center">连接两个或多个字符串</td>
</tr>
<tr>
<td align="center"><strong>indexof()</strong></td>
<td align="center">检索一个字符串中是否含有指定内容，如果字符串中含有该内容，则会返回其第一次出现的索引，如果没有找到指定的内容，则返回 -1，可以指定一个第二个参数，指定开始查找的位置</td>
</tr>
<tr>
<td align="center"><strong>lastIndexOf()</strong></td>
<td align="center">类似于 **indexOf()**，从后往前查找，也可以指定开始查找的位置</td>
</tr>
<tr>
<td align="center"><strong>slice()</strong></td>
<td align="center">从字符串中截取指定的内容，不会影响原字符串，而是将截取到内容返回</td>
</tr>
<tr>
<td align="center"><strong>substring()</strong></td>
<td align="center">截取一个字符串，同 <strong>slice()</strong></td>
</tr>
<tr>
<td align="center"><strong>substr()</strong></td>
<td align="center">截取一个字符串，同 <strong>slice()</strong></td>
</tr>
<tr>
<td align="center"><strong>split()</strong></td>
<td align="center">将一个字符串拆分为一个数组，需要一个字符串作为参数，将会根据该字符串去拆分数组</td>
</tr>
<tr>
<td align="center"><strong>toUpperCase()</strong></td>
<td align="center">将一个字符串转换为大写并返回</td>
</tr>
<tr>
<td align="center"><strong>toLowerCase()</strong></td>
<td align="center">将一个字符串转换为小写并返回</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="3-6RegExp对象"><a href="#3-6RegExp对象" class="headerlink" title="3.6	RegExp对象"></a>3.6	RegExp对象</h3><ul>
<li><p><strong>正则匹配模式</strong></p>
<ul>
<li><strong>i</strong>：忽略大小写</li>
<li><strong>g</strong>：全局匹配模式</li>
<li><strong>ig</strong>：忽略大小写且全局匹配模式</li>
</ul>
</li>
<li><p><strong>创建正则对象</strong></p>
<ul>
<li><p><strong>对象创建</strong></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;ab&quot;</span>, <span class="string">&quot;i&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>字面量创建</strong></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a/i</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>正则方法</strong></p>
<table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>test()</strong></td>
<td align="center">检查字符串是否可以被表达式匹配</td>
</tr>
<tr>
<td align="center"><strong>split()</strong></td>
<td align="center">根据正则表达式将一个字符串拆分为一个数组</td>
</tr>
<tr>
<td align="center"><strong>search()</strong></td>
<td align="center">搜索字符串中是否含有指定内容，如果搜索到指定内容，则会返回第一次出现的索引，如果没有搜索到返回 -1</td>
</tr>
<tr>
<td align="center"><strong>match()</strong></td>
<td align="center">根据正则表达式，从一个字符串中将符合条件的内容提取出来</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="第四章JavaScript-DOM"><a href="#第四章JavaScript-DOM" class="headerlink" title="第四章	JavaScript DOM"></a>第四章	JavaScript DOM</h2><h3 id="4-1DOM-概述"><a href="#4-1DOM-概述" class="headerlink" title="4.1	DOM 概述"></a>4.1	DOM 概述</h3><ul>
<li><strong>DOM 简介</strong>：全称 <strong>document object model</strong>，即文档对象模型，当网页被加载时，浏览器会创建页面的文档对象模型 <strong>DOM</strong>，<strong>HTML DOM</strong> 模型被结构化为对象树，<strong>HTML DOM</strong> 是关于如何获取、更改、添加或删除 <strong>HTML</strong> 元素的标准</li>
</ul>
<h3 id="4-2DOM-文档节点"><a href="#4-2DOM-文档节点" class="headerlink" title="4.2	DOM 文档节点"></a>4.2	DOM 文档节点</h3><ul>
<li><p><strong>节点分类</strong></p>
<ul>
<li><strong>文档节点</strong>：代表整个 <strong>HTML</strong> 文档，网页中的所有节点都是它的子节点</li>
<li><strong>元素节点</strong>：<strong>HTML</strong> 文档中的 <strong>HTML</strong> 标签，浏览器会将页面中所有的标签都转换为一个元素节点</li>
<li><strong>属性节点</strong>：元素的属性，并非是元素节点的子节点，而是元素节点的一部分，可以通过元素节点来获取指定的属性节点</li>
<li><strong>文本节点</strong>：<strong>HTML</strong> 标签中的文本内容，任意非 <strong>HTML</strong> 的文本都是文本节点，它包括可以字面解释的纯文本内容</li>
</ul>
</li>
<li><p><strong>节点属性</strong></p>
<table>
<thead>
<tr>
<th></th>
<th align="center">nodeName</th>
<th align="center">nodeType</th>
<th align="center">nodeValue</th>
</tr>
</thead>
<tbody><tr>
<td><strong>文档节点</strong></td>
<td align="center">#document</td>
<td align="center">9</td>
<td align="center">null</td>
</tr>
<tr>
<td><strong>元素节点</strong></td>
<td align="center">标签名</td>
<td align="center">1</td>
<td align="center">null</td>
</tr>
<tr>
<td><strong>属性节点</strong></td>
<td align="center">属性名</td>
<td align="center">2</td>
<td align="center">属性值</td>
</tr>
<tr>
<td><strong>文本节点</strong></td>
<td align="center">#text</td>
<td align="center">3</td>
<td align="center">文本内容</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="4-3DOM-文档操作"><a href="#4-3DOM-文档操作" class="headerlink" title="4.3	DOM 文档操作"></a>4.3	DOM 文档操作</h3><ul>
<li><p><strong>查找 html 元素</strong></p>
<ul>
<li><p>通过元素 <strong>id</strong> 查找单个元素</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过标签名查找多个元素</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = documnet.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;p&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过类名查找多个元素</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> color = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;color&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过 <strong>css</strong> 选择器查找一个元素</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.box&quot;</span>);</span><br><span class="line">p.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;red&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过 <strong>css</strong> 选择器查找多个元素</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.box&quot;</span>);</span><br><span class="line">p[<span class="number">2</span>].<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;red&quot;</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>获取和修改 html 的值</strong></p>
<ul>
<li><p>元素的文本内容</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>).<span class="property">innerText</span> = <span class="string">&quot;hello&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>元素的 <strong>html</strong> 内容</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div&quot;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;&lt;p&gt;hello&lt;/p&gt;&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>元素的属性值</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;image&quot;</span>).<span class="property">src</span> = <span class="string">&quot;image.jpg&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>方法修改元素属性值</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;link&quot;</span>).<span class="title function_">setAttribute</span>(<span class="string">&quot;href&quot;</span>, <span class="string">&quot;https://www.baidu.com&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>元素的行内样式</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;link&quot;</span>).<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;black&quot;</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>document</strong> 属性</p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>body</strong></td>
<td align="center"><strong>body</strong> 标签</td>
</tr>
<tr>
<td align="center"><strong>documentElement</strong></td>
<td align="center"><strong>html</strong> 标签</td>
</tr>
<tr>
<td align="center"><strong>all</strong></td>
<td align="center">页面所有元素</td>
</tr>
</tbody></table>
</li>
<li><p><strong>修改 html 元素节点</strong></p>
<ul>
<li><p>创建元素节点</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div&quot;</span>).<span class="title function_">createElement</span>(<span class="string">&quot;span&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建属性节点</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">createAttribute</span>(<span class="string">&quot;style&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建文本节点</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;hello,world&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除子节点</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">removeChild</span>(div)</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加子节点</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">appendChild</span>(div)</span><br></pre></td></tr></table></figure>
</li>
<li><p>替换子节点</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">element.<span class="title function_">replaceChild</span>(newNode, element.<span class="property">childNodes</span>[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>
</li>
<li><p>插入子节点</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">list.<span class="title function_">insertBefore</span>(newNode, list.<span class="property">children</span>[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>查找 html 父子</strong></p>
<ul>
<li><p>返回元素的父节点（包含空白节点）</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>).<span class="property">parentNode</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>返回元素的父元素（不包含空白节点）</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>).<span class="property">parentElement</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>返回元素的子元素集合</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>).<span class="property">children</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>返回元素的第一个子元素</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>).<span class="property">firstChild</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>返回元素的最后一个子元素</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>).<span class="property">lastChild</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>返回元素的前一个兄弟元素</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>).<span class="property">previousSilbing</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>返回元素的后一个兄弟元素</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>).<span class="property">nextElementSibling</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>操作元素的样式</strong></p>
<ul>
<li><strong>style</strong> 属性：读取和修改元素的内联样式</li>
<li><strong>getComputedStyle()</strong> 方法：读取元素的实时样式</li>
</ul>
</li>
</ul>
<h3 id="4-4DOM-文档事件"><a href="#4-4DOM-文档事件" class="headerlink" title="4.4	DOM 文档事件"></a>4.4	DOM 文档事件</h3><ul>
<li><p><strong>事件</strong>：<strong>HTML</strong> 事件可以触发浏览器中的行为，比方说当用户点击某个 <strong>HTML</strong> 元素时启动一段 <strong>JavaScript</strong> 代码</p>
</li>
<li><p><strong>事件冒泡</strong></p>
<ul>
<li><p><strong>事件冒泡的产生</strong>：事件的向上传导，当后代元素上的事件被触发时，其祖先元素的相同事件也会被触发</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div1&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> div2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div2&quot;</span>);</span><br><span class="line">div1.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;div1 的单击事件触发了！&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">div2.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;div2 的单击事件触发了！&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>消除事件冒泡</strong>：如果不希望发生事件冒泡，可以通过事件对象来取消冒泡</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">stopBubble</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (event &amp;&amp; event.<span class="property">stopPropagation</span>) &#123;</span><br><span class="line">        event.<span class="title function_">stopPropagation</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">event</span>.<span class="property">cancelBubble</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>事件委派</strong>：</p>
<ul>
<li><p><strong>事件委派的产生</strong>：将事件统一绑定给元素的共同的祖先元素，这样当后代元素上的事件触发时，会一直冒泡到祖先元素，从而通过祖先元素的响应函数来处理事件</p>
</li>
<li><p><strong>事件委派示例</strong>：判断事件的 <strong>event</strong> 属性，如果来源于目标标签的冒泡事件则触发代码执行</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> u1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;u1&quot;</span>);</span><br><span class="line">u1.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    event = event || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line">    <span class="keyword">if</span> (event.<span class="property">target</span>.<span class="property">className</span> == <span class="string">&quot;link&quot;</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是ul的单击响应函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>事件绑定</strong></p>
<ul>
<li><p><strong>事件绑定的产生</strong>：一个事件对应多个函数，维持代码兼容性</p>
</li>
<li><p><strong>事件绑定示例</strong>：使用 <strong>addEventListener()</strong> 方法为标签绑定事件监听器</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, f1, <span class="literal">false</span>);</span><br><span class="line"><span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, f2, <span class="literal">false</span>);</span><br><span class="line"><span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, f3, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>常用事件汇总</strong></p>
<ul>
<li><p><strong>窗口事件</strong></p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>onblur</strong></td>
<td align="center">当窗口失去焦点时运行脚本</td>
</tr>
<tr>
<td align="center"><strong>onfocus</strong></td>
<td align="center">当窗口获得焦点时运行脚本</td>
</tr>
<tr>
<td align="center"><strong>onload</strong></td>
<td align="center">当文档加载之后运行脚本</td>
</tr>
<tr>
<td align="center"><strong>onresize</strong></td>
<td align="center">当调整窗口大小时运行脚本</td>
</tr>
<tr>
<td align="center"><strong>onstorage</strong></td>
<td align="center">当 <strong>Web Storage</strong> 区域更新时（存储空间中的数据发生变化时）运行脚本</td>
</tr>
</tbody></table>
</li>
<li><p><strong>表单事件</strong></p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>onblur</strong></td>
<td align="center">当元素失去焦点时运行脚本</td>
</tr>
<tr>
<td align="center"><strong>onfocus</strong></td>
<td align="center">当元素获得焦点时运行脚本</td>
</tr>
<tr>
<td align="center"><strong>onchange</strong></td>
<td align="center">当元素改变时运行脚本</td>
</tr>
<tr>
<td align="center"><strong>oninput</strong></td>
<td align="center">当元素获得用户输入时运行脚本</td>
</tr>
<tr>
<td align="center"><strong>oninvalid</strong></td>
<td align="center">当元素无效时运行脚本</td>
</tr>
<tr>
<td align="center"><strong>onselect</strong></td>
<td align="center">当选取元素时运行脚本</td>
</tr>
<tr>
<td align="center"><strong>onsubmit</strong></td>
<td align="center">当提交表单时运行脚本</td>
</tr>
</tbody></table>
</li>
<li><p><strong>键盘事件</strong></p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>onkeydown</strong></td>
<td align="center">当按下按键时运行脚本</td>
</tr>
<tr>
<td align="center"><strong>onkeyup</strong></td>
<td align="center">当松开按键时运行脚本</td>
</tr>
<tr>
<td align="center"><strong>onkeypress</strong></td>
<td align="center">当按下并松开按键时运行脚本</td>
</tr>
</tbody></table>
</li>
<li><p><strong>鼠标事件</strong></p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>onclick</strong></td>
<td align="center">当单击鼠标时运行脚本</td>
</tr>
<tr>
<td align="center"><strong>ondblclick</strong></td>
<td align="center">当双击鼠标时运行脚本</td>
</tr>
<tr>
<td align="center"><strong>onmousedown</strong></td>
<td align="center">当按下鼠标按钮时运行脚本</td>
</tr>
<tr>
<td align="center"><strong>onmouseup</strong></td>
<td align="center">当松开鼠标按钮时运行脚本</td>
</tr>
<tr>
<td align="center"><strong>onmousemove</strong></td>
<td align="center">当鼠标指针移动时运行脚本</td>
</tr>
<tr>
<td align="center"><strong>onmouseover</strong></td>
<td align="center">当鼠标指针移至元素之上时运行脚本，不可以阻止冒泡</td>
</tr>
<tr>
<td align="center"><strong>onmouseout</strong></td>
<td align="center">当鼠标指针移出元素时运行脚本，不可以阻止冒泡</td>
</tr>
<tr>
<td align="center"><strong>onmouseenter</strong></td>
<td align="center">当鼠标指针移至元素之上时运行脚本，可以阻止冒泡</td>
</tr>
<tr>
<td align="center"><strong>onmouseleave</strong></td>
<td align="center">当鼠标指针移出元素时运行脚本，可以阻止冒泡</td>
</tr>
<tr>
<td align="center"><strong>onmousewheel</strong></td>
<td align="center">当转动鼠标滚轮时运行脚本</td>
</tr>
<tr>
<td align="center"><strong>onscroll</strong></td>
<td align="center">当滚动元素的滚动条时运行脚本</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ul>
<h2 id="第五章JavaScript-BOM"><a href="#第五章JavaScript-BOM" class="headerlink" title="第五章	JavaScript BOM"></a>第五章	JavaScript BOM</h2><h3 id="5-1BOM-概述"><a href="#5-1BOM-概述" class="headerlink" title="5.1	BOM 概述"></a>5.1	BOM 概述</h3><ul>
<li><strong>BOM简介</strong>：全称 <strong>browser object model</strong>，即浏览器对象模型，它可以使我们通过 <strong>JavaScript</strong> 来操作浏览器，在 <strong>BOM</strong> 中为我们提供了一组对象，用来完成对浏览器的操作</li>
</ul>
<h3 id="5-2Window对象"><a href="#5-2Window对象" class="headerlink" title="5.2	Window对象"></a>5.2	Window对象</h3><ul>
<li><p><strong>window对象</strong>：代表整个浏览器窗口，也是网页的全局对象</p>
</li>
<li><p><strong>弹出框</strong></p>
<ul>
<li><p><strong>警告框</strong>：确保信息传递给用户</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&quot;我是一个警告框！&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>确认框</strong>：希望用户验证或接受某个东西</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_">confirm</span>(<span class="string">&quot;请按按钮&quot;</span>))&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;您按了确认！&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;您按了取消！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>提示框</strong>：希望用户在进入页面前输入值</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="title function_">prompt</span>(<span class="string">&quot;请输入您的姓名&quot;</span>, <span class="string">&quot;默认名称&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (person != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>定时事件</strong></p>
<ul>
<li><p><strong>延时器</strong>：延迟给定时间执行函数，只执行一次</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>定时器</strong>：在每个给定的时间间隔重复给定的函数</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>清除定时器</strong>：清除设置的定时器</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">clearInterval</span>(timer);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>常用窗口属性</strong></p>
<ul>
<li><strong>innerHeight</strong>：浏览器窗口的内高度（以像素计）</li>
<li><strong>innerWidth</strong>：浏览器窗口的内宽度（以像素计）</li>
</ul>
</li>
<li><p><strong>常用窗口方法</strong></p>
<ul>
<li>**open()**：打开新的窗口</li>
<li>**close()**：关闭当前窗口</li>
<li>**moveTo()**：移动当前窗口</li>
<li>**resizeTo()**：调整当前窗口</li>
</ul>
</li>
</ul>
<h3 id="5-3Navigator对象"><a href="#5-3Navigator对象" class="headerlink" title="5.3	Navigator对象"></a>5.3	Navigator对象</h3><ul>
<li><p><strong>Navigator</strong>：代表的当前浏览器的信息，通过该对象可以来识别不同的浏览器</p>
</li>
<li><p><strong>userAgent</strong> 属性：字符串类型，包含描述浏览器信息的内容</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cosole.<span class="title function_">log</span>(navigator.<span class="property">userAgent</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-4Location对象"><a href="#5-4Location对象" class="headerlink" title="5.4	Location对象"></a>5.4	Location对象</h3><ul>
<li><p><strong>location对象</strong>：代表当前浏览器的地址栏信息，可以获取浏览器地址栏信息，或者控制浏览器跳转页面</p>
</li>
<li><p><strong>常用属性</strong></p>
<ul>
<li><strong>location.href</strong>：当前地址的全路径地址</li>
<li><strong>location.origin</strong>：当前地址的来源</li>
<li><strong>location.protocol</strong>：当前地址的协议</li>
<li><strong>location.hostname</strong>：当前地址的主机名</li>
<li><strong>location.host</strong>：当前地址的主机</li>
<li><strong>location.port</strong>：当前地址的端口号</li>
<li><strong>location.pathname</strong>：当前地址的路径部分</li>
<li><strong>location.search</strong>：当前地址的 <strong>?</strong> 后边的参数部分</li>
</ul>
</li>
<li><p><strong>常用方法</strong></p>
<ul>
<li>**assign()**：用来跳转到其它的页面，作用和直接修改 <strong>location</strong> 一样</li>
<li>**eload()**：用于重新加载当前页面，作用和刷新按钮一样，如果在方法中传递一个 <strong>true</strong>，作为参数，则会强制清空缓存刷新页面</li>
<li>**replace()**：可以使用一个新的页面替换当前页面，调用完毕也会跳转页面，它不会生成历史记录，不能使用回退按钮回退</li>
</ul>
</li>
</ul>
<h3 id="5-5History对象"><a href="#5-5History对象" class="headerlink" title="5.5	History对象"></a>5.5	History对象</h3><ul>
<li><p><strong>history对象</strong>：代表浏览器的历史记录，但是不能获取到具体的历史记录信息，只在当次访问有效</p>
</li>
<li><p><strong>length</strong> 属性：获取到当前访问的链接数量</p>
</li>
<li><p><strong>常用方法</strong></p>
<ul>
<li>**back()**：可以回退到上一个页面，作用和浏览器的回退按钮一样</li>
<li>**forward()**：可以跳转到下一个页面，作用和浏览器的前进按钮一样</li>
<li>**go()**：可以用来跳转到指定的页面，它需要一个整数作为参数</li>
</ul>
</li>
</ul>
<h3 id="5-6Screen对象"><a href="#5-6Screen对象" class="headerlink" title="5.6	Screen对象"></a>5.6	Screen对象</h3><ul>
<li><p><strong>screen对象</strong>：代表用户的屏幕信息，可以获取到用户的显示器信息</p>
</li>
<li><p><strong>常用属性</strong></p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>availHeight</strong></td>
<td align="center">返回显示屏幕的高度 (除 <strong>Windows</strong> 任务栏之外)</td>
</tr>
<tr>
<td align="center"><strong>availWidth</strong></td>
<td align="center">返回显示屏幕的宽度 (除 <strong>Windows</strong> 任务栏之外)</td>
</tr>
<tr>
<td align="center"><strong>bufferDepth</strong></td>
<td align="center">设置或返回调色板的比特深度</td>
</tr>
<tr>
<td align="center"><strong>colorDepth</strong></td>
<td align="center">返回目标设备或缓冲器上的调色板的比特深度</td>
</tr>
<tr>
<td align="center"><strong>deviceXDPI</strong></td>
<td align="center">返回显示屏幕的每英寸水平点数</td>
</tr>
<tr>
<td align="center"><strong>deviceYDPI</strong></td>
<td align="center">返回显示屏幕的每英寸垂直点数</td>
</tr>
<tr>
<td align="center"><strong>fontSmoothingEnabled</strong></td>
<td align="center">返回用户是否在显示控制面板中启用了字体平滑</td>
</tr>
<tr>
<td align="center"><strong>height</strong></td>
<td align="center">返回显示屏幕的高度</td>
</tr>
<tr>
<td align="center"><strong>logicalXDPI</strong></td>
<td align="center">返回显示屏幕每英寸的水平方向的常规点数</td>
</tr>
<tr>
<td align="center"><strong>logicalYDPI</strong></td>
<td align="center">返回显示屏幕每英寸的垂直方向的常规点数</td>
</tr>
<tr>
<td align="center"><strong>pixelDepth</strong></td>
<td align="center">返回显示屏幕的颜色分辨率（比特每像素）</td>
</tr>
<tr>
<td align="center"><strong>updateInterval</strong></td>
<td align="center">设置或返回屏幕的刷新率</td>
</tr>
<tr>
<td align="center"><strong>width</strong></td>
<td align="center">返回显示器屏幕的宽度</td>
</tr>
</tbody></table>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>HTTP</title>
    <url>/2024/01/28/HTTP/</url>
    <content><![CDATA[<h2 id="第一节HTTP概述"><a href="#第一节HTTP概述" class="headerlink" title="第一节	HTTP概述"></a>第一节	HTTP概述</h2><ul>
<li><strong>HTTP 简介</strong>：全称 <strong>HyperText Transfer Protocol</strong>，即超文本传输协议，是 <strong>TCP&#x2F;IP</strong> 协议集中的一个应用层协议，客户端与服务端进行交互时必须遵循的规则，用于定义 <strong>Web</strong> 浏览器与 <strong>Web</strong> 服务器之间交换数据的过程以及数据本身的格式，底层是靠 <strong>TCP</strong> 进行可靠地信息传输</li>
<li><strong>HTTP 完整过程</strong><ul>
<li><strong>跳转</strong>：开始时间，开始跳转，跳转，跳转结束</li>
<li><strong>应用缓存</strong>：<strong>fetch</strong> 开始，应用缓存</li>
<li><strong>DNS 查找</strong>：域名解析开始，<strong>DNS</strong> 查找，域名解析结果</li>
<li><strong>创建 TCP 链接</strong>：开始创建链接，创建 <strong>TCP</strong> 链接，创建链接结果</li>
<li><strong>发送请求</strong>：开始发送请求，发送请求</li>
<li><strong>接受响应</strong>：开始接受返回，接受响应，结束接受返回</li>
</ul>
</li>
</ul>
<h2 id="第二节网络模型介绍"><a href="#第二节网络模型介绍" class="headerlink" title="第二节	网络模型介绍"></a>第二节	网络模型介绍</h2><ul>
<li><strong>网络模型</strong>：客户端依次按照应用层，传输层，网络层，数据链路层，物理层等向互联网发送数据，与此同时，服务端按照反向顺序逐级接受数据</li>
<li><strong>应用层</strong>：决定了向用户提供应用服务时通信的活动，它构建于 <strong>TCP</strong> 协议之上，<strong>HTTP</strong> 协议也处于该层，<strong>TCP&#x2F;IP</strong> 协议族内预存了各类通用的应用服务，<strong>FTP</strong> 和 <strong>DNS</strong> 服务就是其中两类</li>
<li><strong>传输层</strong>：对上层应用层，提供处于网络连接中的两台计算机之间的数据传输，向用户提供可靠的端到端服务，并且传输层向上层屏蔽了下层数据通信的细节，主要有 <strong>TCP</strong> 和 <strong>UDP</strong> 两个协议</li>
<li><strong>网络层</strong>：为数据在结点之间传输创建逻辑链路，用来处理在网络上流动的数据包，数据包是网络传输的最小数据单位，该层规定了通过怎样的路径到达对方计算机，并把数据包传送给对方，与对方计算机之间通过多台计算机或网络设备进行传输时，网络层所起的作用就是在众多的选项内选择一条传输路线</li>
<li><strong>数据链路层</strong>：在通信的实体间建立数据链路连接，将两台物理设备通过软件服务建立起电路上的连接，使两台设备可以传输数据</li>
<li><strong>物理层</strong>：主要作用是定义物理设备如何传输数据，包括电脑硬件，网线等</li>
</ul>
<h2 id="第三节HTTP协议发展历史"><a href="#第三节HTTP协议发展历史" class="headerlink" title="第三节	HTTP协议发展历史"></a>第三节	HTTP协议发展历史</h2><ul>
<li><strong>HTTP 0.9</strong><ul>
<li>问世于 1990 年，并没有作为正式的标准被建立</li>
<li>只有一个命令 <strong>GET</strong></li>
<li>没有 <strong>Header</strong> 等描述数据的信息</li>
<li>服务器在发送数据完毕后，就关闭 <strong>TCP</strong> 连接</li>
</ul>
</li>
<li><strong>HTTP 1.0</strong><ul>
<li>增加了很多命令，如 <strong>POST</strong>，<strong>PUT</strong>，<strong>HEAD</strong></li>
<li>增加了 <strong>Status Code</strong> 和 <strong>Header</strong> 相关内容</li>
<li>增加了多字符集支持、多部分发送、权限、缓存、内容编码等</li>
</ul>
</li>
<li><strong>HTTP 1.1</strong><ul>
<li>目前主流的 <strong>HTTP</strong> 版本，有比较完善的功能</li>
<li>增加了 <strong>PATCH</strong>、<strong>OPTIONS</strong>、<strong>DELETE</strong> 命令</li>
<li>持久连接，即 <strong>TCP</strong> 连接默认不关闭，可以被多个请求复用，提高了请求性能</li>
<li>管道机制，即在同一个 <strong>TCP</strong> 连接里面，客户端可以同时发送多个请求</li>
<li>增加 <strong>Host</strong> 字段，可以将请求发往同一个服务器的不同网站，为虚拟主机打下了基础，在同一个物理服务器中可以同时部署多个 <strong>Web</strong> 服务，提高物理服务器的使用效率</li>
</ul>
</li>
<li><strong>HTTP 2</strong><ul>
<li>主要解决了传输性能的问题</li>
<li>所有数据以二进制传输，统称为帧</li>
<li>多工，同一个连接里面发送多个请求不再需要按照顺序来进行返回处理，而是同时返回</li>
<li>头信息压缩，对头信息进行了压缩，减少了对带宽的占用</li>
<li>服务器推送，允许服务器未经请求，主动向客户端发送资源</li>
</ul>
</li>
</ul>
<h2 id="第四节HTTP三次握手"><a href="#第四节HTTP三次握手" class="headerlink" title="第四节	HTTP三次握手"></a>第四节	HTTP三次握手</h2><ul>
<li><strong>三次握手</strong>：发送端首先发送一个带 <strong>SYN</strong> 标志的数据包给对方，接收端收到后，回传一个带有 <strong>SYN&#x2F;ACK</strong> 标志的数据包以示传达确认信息，最后，发送端再回传一个带 <strong>ACK</strong> 标志的数据包，代表握手结束</li>
<li><strong>数据包标志</strong><ul>
<li>SYN &#x3D; 1，Seq &#x3D; X</li>
<li>SYN &#x3D; 1，ACK &#x3D; X + 1，Seq &#x3D; Y</li>
<li>ACK &#x3D; Y  + 1，Seq &#x3D; Z</li>
</ul>
</li>
</ul>
<h2 id="第五节URI，URL和URN"><a href="#第五节URI，URL和URN" class="headerlink" title="第五节	URI，URL和URN"></a>第五节	URI，URL和URN</h2><ul>
<li><p><strong>URI</strong>：全称 <strong>Uniform Resource Identifier</strong>，即统一资源标识符，主要用于定位某一类特定的资源而设计，用来唯一标识互联网上的信息资源，包括 <strong>URL</strong> 和 <strong>URN</strong></p>
</li>
<li><p><strong>URL</strong>：全称 <strong>Uniform Resource Locator</strong>，即统一资源定位符，用来找到资源所在的位置，并且去访问和得到资源，例如 <strong><a href="http://user:pass@host.com/path?query=string#hash">http://user:pass@host.com:80/path?query=string#hash</a></strong></p>
<ul>
<li><strong>协议</strong>：获取资源时要指定协议类型，例如 <strong>http</strong>、<strong>https</strong>、<strong>ftp</strong> 等协议</li>
<li><strong>登录信息</strong>：指定用户名和密码作为从服务器端获取资源时必要的登录信息</li>
<li><strong>服务器地址</strong>：指定资源所在服务器在互联网中的位置，可以是 <strong>ip</strong> 地址，也可以是 <strong>DNS</strong> 可解析的地址</li>
<li><strong>服务器端口号</strong>：指定服务器连接的网络端口号</li>
<li><strong>资源路径</strong>：指定服务器上的文件路径来定位特指的资源</li>
<li><strong>查询字符串</strong>：针对已指定的文件路径内的资源，可以使用查询字符串传入任意参数</li>
<li><strong>片段标识符</strong>：使用片段标识符通常可标记出已获取资源中的子资源</li>
</ul>
</li>
<li><p><strong>URN</strong>：全称 <strong>Uniform Resource Name</strong>，即永久统一资源定位符，作为 HTTP 服务，即便是资源改变了位置，通过 <strong>URN</strong> 还是可以访问到</p>
</li>
</ul>
<h2 id="第六节HTTP报文格式"><a href="#第六节HTTP报文格式" class="headerlink" title="第六节	HTTP报文格式"></a>第六节	HTTP报文格式</h2><ul>
<li><strong>请求报文格式</strong><ul>
<li><strong>请求行</strong>：描述请求的基本信息<ul>
<li><strong>请求方法</strong>：是一个动词，例如 <strong>GET&#x2F;POST</strong>，表示对资源的操作</li>
<li><strong>请求目标</strong>：通常是一个 <strong>URI</strong>，标记了请求方法要操作的资源</li>
<li><strong>版本号</strong>：表示报文使用的 <strong>HTTP</strong> 协议版本</li>
</ul>
</li>
<li><strong>请求头部</strong>：使用键值对形式更详细地说明报文<ul>
<li><strong>User-Agent</strong>：产生请求的浏览器类型</li>
<li><strong>Accept</strong>：客户端可识别的响应内容类型列表</li>
<li><strong>Accept-Language</strong>：客户端可接受的自然语言</li>
<li><strong>Accept-Encoding</strong>：客户端可接受的编码压缩格式</li>
<li><strong>Cookie</strong>：存储于客户端扩展字段，向同一域名的服务端发送属于该域的 <strong>cookie</strong></li>
</ul>
</li>
<li><strong>消息正文</strong>：实际传输的数据，它不一定是纯文本，可以是图片、视频等二进制数据<ul>
<li>不在 <strong>GET</strong> 方法中使用，而是在 <strong>POST</strong> 方法中使用</li>
<li><strong>Content-Type</strong>：正文类型 </li>
<li><strong>Content-Length</strong>：正文长度</li>
</ul>
</li>
</ul>
</li>
<li><strong>响应报文格式</strong><ul>
<li><strong>响应行</strong>：描述响应的基本信息<ul>
<li><strong>版本号</strong>：表示报文使用的 <strong>HTTP</strong> 协议版本</li>
<li><strong>状态码</strong>：由三位数字组成，第一位数字表示响应的类型<ul>
<li>1xx：服务器已接收了客户端请求，客户端可继续发送请求</li>
<li>2xx：服务器已成功接收到请求并进行处理</li>
<li>3xx：服务器要求客户端重定向</li>
<li>4xx：客户端的请求有非法内容</li>
<li>5xx：服务器未能正常处理客户端的请求而出现意外错误</li>
</ul>
</li>
<li><strong>状态码描述</strong>：对状态码内容的文本描述<ul>
<li>200 OK：客户端请求成功</li>
<li>400 Bad Request：客户端请求有语法错误，不能被服务器所理解</li>
<li>401 Unauthonzed：请求未经授权，该状态代码必须与报头域一起使用</li>
<li>403 Forbidden：服务器收到请求，但是拒绝提供服务，通常会在响应正文中给出不提供服务的原因</li>
<li>404 Not Found：的资源不存在，例如输入了错误的 URL</li>
<li>500 Internal Server Error：服务器发生不可预期的错误，导致无法完成客户端的请求</li>
<li>503 Service Unavailable：服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常</li>
</ul>
</li>
</ul>
</li>
<li><strong>响应头部</strong>：使用键值对形式更详细地说明报文<ul>
<li><strong>Location</strong>：响应报头域用于重定向接受者到一个新的位置</li>
<li><strong>Server</strong>：响应报头域包含了服务器用来处理请求的软件信息及其版本</li>
<li><strong>Vary</strong>：指示不可缓存的请求头列表</li>
<li><strong>Connection</strong>：连接方式</li>
</ul>
</li>
<li><strong>消息正文</strong>：服务器返回给客户端的文本信息</li>
</ul>
</li>
</ul>
<h2 id="第七节HTTP方法"><a href="#第七节HTTP方法" class="headerlink" title="第七节	HTTP方法"></a>第七节	HTTP方法</h2><ul>
<li><p><strong>GET 方法</strong>：请求访问已被 <strong>URL</strong> 识别的资源，指定的资源经服务器端解析后返回响应内容</p>
</li>
<li><p><strong>POST 方法</strong>：传输实体的主体，数据被包含在请求体中</p>
</li>
<li><p><strong>PUT 方法</strong>：传输文件，要求在请求报文的主体中包含文件内容，然后保存到请求 <strong>URL</strong> 指定的位置</p>
</li>
<li><p><strong>HEAD 方法</strong>：确认 <strong>URL</strong> 的有效性及资源更新的日期时间等</p>
</li>
<li><p><strong>DELETE 方法</strong>：删除文件，按请求 <strong>URL</strong> 删除指定的资源</p>
</li>
<li><p><strong>OPTIONS 方法</strong>：查询针对请求 <strong>URL</strong> 指定的资源支持的方法</p>
</li>
<li><p><strong>TRACE 方法</strong>：让 <strong>Web</strong> 服务器端将之前的请求通信环回给客户端的方法</p>
</li>
<li><p><strong>CONNECT 方法</strong>：要求在与代理服务器通信时建立隧道，实现用隧道协议进行 <strong>TCP</strong> 通信</p>
</li>
</ul>
<h2 id="第八节HTTP访问控制"><a href="#第八节HTTP访问控制" class="headerlink" title="第八节	HTTP访问控制"></a>第八节	HTTP访问控制</h2>]]></content>
  </entry>
  <entry>
    <title>SQL</title>
    <url>/2024/01/28/SQL/</url>
    <content><![CDATA[<h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><ul>
<li><p>登录</p>
<ul>
<li><p>显式密码</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">-</span>uroot <span class="operator">-</span>p123456</span><br></pre></td></tr></table></figure>
</li>
<li><p>隐式密码</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">-</span>uroot <span class="operator">-</span>p</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>退出</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看所有数据库</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用数据库</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use [name];</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建数据库</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database [name];</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询数据库的表</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看数据库版本号</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> version();</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询数据库名称</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> database();</span><br></pre></td></tr></table></figure>
</li>
<li><p>导入数据库文件</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">source [path];</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h2><ul>
<li><p>查询单个字段</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> [field_name] <span class="keyword">from</span> [table_name];</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询多个字段</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> [field_name_1] ,[field_name_2] <span class="keyword">from</span> [table_name];</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询所有字段</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> [table_name];</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询字段并起别名</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> [field_name] (<span class="keyword">as</span>) [new_name] <span class="keyword">from</span> [table_name];</span><br></pre></td></tr></table></figure>
</li>
<li><p>计算表格数据</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> [expression] <span class="keyword">as</span> [new_name] <span class="keyword">from</span> [tabke_name];</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><ul>
<li><p>语法格式</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">	[field_name1],[field_name2],[field_name3]...</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">	[table_name]</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    [<span class="keyword">condition</span>];</span><br></pre></td></tr></table></figure>
</li>
<li><p>条件类型</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">=</span> 等于</span><br><span class="line"></span><br><span class="line"><span class="operator">&lt;&gt;</span>或<span class="operator">!=</span> 不等于</span><br><span class="line">	</span><br><span class="line"><span class="operator">&lt;</span> 小于</span><br><span class="line">	</span><br><span class="line"><span class="operator">&lt;=</span> 小于等于</span><br><span class="line">	</span><br><span class="line"><span class="operator">&gt;</span> 大于</span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;=</span> 大于等于</span><br><span class="line"></span><br><span class="line"><span class="keyword">between</span> … <span class="keyword">and</span> …. 两个值之间, 等同于 <span class="operator">&gt;=</span> <span class="keyword">and</span> <span class="operator">&lt;=</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">is</span> <span class="keyword">null</span> 为 <span class="keyword">null</span>（<span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span> 不为空）</span><br></pre></td></tr></table></figure>
</li>
<li><p>关系连接词</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> 并且</span><br><span class="line">	</span><br><span class="line"><span class="keyword">or</span> 或者</span><br><span class="line">	</span><br><span class="line"><span class="keyword">in</span> 包含，相当于多个 <span class="keyword">or</span> （<span class="keyword">not</span> <span class="keyword">in</span> 不在这个范围中）</span><br><span class="line">		</span><br><span class="line"><span class="keyword">not</span> 可以取非，主要用在 <span class="keyword">is</span> 或 <span class="keyword">in</span> 中</span><br><span class="line">		</span><br><span class="line"><span class="keyword">like</span> 称为模糊查询，支持<span class="operator">%</span>或下划线匹配</span><br><span class="line">	 <span class="operator">%</span>匹配任意多个字符</span><br><span class="line">   	 下划线：任意一个字符。</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><ul>
<li><p>默认升序</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	[field_name1],[field_name2]...</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	[table_name]</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">	[filed_name] <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>降序</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	[field_name1],[field_name2]...</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	[table_name]</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">	[filed_name] <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>多字段排序</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	[field_name1],[field_name2]...</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	[table_name]</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">	[filed_name1],[file_name2] <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="数据处理函数"><a href="#数据处理函数" class="headerlink" title="数据处理函数"></a>数据处理函数</h2><ul>
<li><p>函数汇总</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">lower 转换小写</span><br><span class="line">		</span><br><span class="line">upper 转换大写		</span><br><span class="line"></span><br><span class="line">substr 取子串(substr( 被截取的字符串, 起始下标,截取的长度))</span><br><span class="line">		</span><br><span class="line">concat函数进行字符串的拼接</span><br><span class="line">		</span><br><span class="line">length 取长度		</span><br><span class="line"></span><br><span class="line">trim 去空格</span><br><span class="line">		</span><br><span class="line">str_to_date 将字符串转换成日期	</span><br><span class="line"></span><br><span class="line">date_format 格式化日期</span><br><span class="line"></span><br><span class="line">format 设置千分位	</span><br><span class="line"></span><br><span class="line">case..when..then..when..then..else..end</span><br><span class="line">		</span><br><span class="line">round 四舍五入</span><br><span class="line">		</span><br><span class="line">rand() 生成随机数</span><br><span class="line">		</span><br><span class="line">ifnull 可以将 <span class="keyword">null</span> 转换成一个具体值		</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h2><ul>
<li><p>函数汇总</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">count	计数</span><br><span class="line"></span><br><span class="line">sum		求和</span><br><span class="line"></span><br><span class="line">avg		平均值</span><br><span class="line"></span><br><span class="line">max		最大值</span><br><span class="line"></span><br><span class="line">min		最小值</span><br></pre></td></tr></table></figure>
</li>
<li><p>特点</p>
<ul>
<li>输入多行，最终输出一行</li>
<li>分组函数自动忽略NULL，不需要提前对NULL进行处理</li>
<li>分组函数不能够直接使用在where子句中，在执行where语句时还未分组</li>
</ul>
</li>
</ul>
<h2 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h2><ul>
<li><p>分组查询</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	...</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	...</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">	...</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">	...</span><br><span class="line"><span class="keyword">having</span></span><br><span class="line">	...</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">	...</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行顺序</p>
<ol>
<li><p>from    数据来源</p>
</li>
<li><p>where    过滤数据（分组前）</p>
</li>
<li><p>group by    分组</p>
</li>
<li><p>having    过滤数据（分组后）</p>
</li>
<li><p>select    查询属性</p>
</li>
<li><p>order by    排序</p>
</li>
</ol>
</li>
</ul>
<h2 id="distinct关键字"><a href="#distinct关键字" class="headerlink" title="distinct关键字"></a>distinct关键字</h2><ul>
<li>distinct：把查询结果去除重复记录</li>
<li>特点<ul>
<li>原表数据不会被修改，只是查询结果去重</li>
<li>多个字段协同查询只需要一个distinct关键字</li>
</ul>
</li>
</ul>
<h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><h3 id="连接查询-1"><a href="#连接查询-1" class="headerlink" title="连接查询"></a>连接查询</h3><ul>
<li>连接查询：跨表查询，多张表联合起来查询数据</li>
</ul>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul>
<li>语法的年代分类：SQL92，SQL99</li>
<li>表连接的方式<ul>
<li>内连接：等值连接，非等值连接，自连接</li>
<li>外连接：左连接，右连接</li>
<li>全连接</li>
</ul>
</li>
</ul>
<h3 id="添加限制条件"><a href="#添加限制条件" class="headerlink" title="添加限制条件"></a>添加限制条件</h3><ul>
<li><p>SQL92</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	ename,dname </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">	emp, dept</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">	emp.deptno <span class="operator">=</span> dept.deptno;	</span><br></pre></td></tr></table></figure>
</li>
<li><p>起别名简化代码</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	e.ename,d.dname </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">	emp e, dept d</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">	e.deptno <span class="operator">=</span> d.deptno;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h2><h3 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h3><ul>
<li><p>等值连接</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">SQL99语法：</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">	...</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	a</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">	b</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">	a和b的连接条件</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">	筛选条件</span><br></pre></td></tr></table></figure>
</li>
<li><p>案例</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="keyword">inner</span>可以省略（带着<span class="keyword">inner</span>可读性更好！！！一眼就能看出来是内连接）</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">	e.ename,d.dname</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	emp e</span><br><span class="line">(<span class="keyword">inner</span>) <span class="keyword">join</span></span><br><span class="line">	dept d</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">	e.deptno <span class="operator">=</span> d.deptno; <span class="operator">/</span><span class="operator">/</span> 条件是等量关系，所以被称为等值连接</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="非等值连接"><a href="#非等值连接" class="headerlink" title="非等值连接"></a>非等值连接</h3><ul>
<li><p>非等值连接：条件不是一个等量关系，称为非等值连接</p>
</li>
<li><p>案例</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	e.ename, e.sal, s.grade</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	emp e</span><br><span class="line">(<span class="keyword">inner</span>) <span class="keyword">join</span></span><br><span class="line">	salgrade s</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">	e.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><ul>
<li><p>自连接：将自身表的一个镜像当作另一个表来对待，从而能够得到一些特殊的数据</p>
</li>
<li><p>案例</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	a.ename <span class="keyword">as</span> <span class="string">&#x27;员工名&#x27;</span>, b.ename <span class="keyword">as</span> <span class="string">&#x27;领导名&#x27;</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	emp a</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">	emp b</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">	a.mgr <span class="operator">=</span> b.empno; <span class="operator">/</span><span class="operator">/</span>员工的领导编号 <span class="operator">=</span> 领导的员工编号</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h2><ul>
<li><p>外连接：产生主次关系，将主表的所有数据全部查询出来</p>
</li>
<li><p>左&#x2F;右外连接：以左&#x2F;右关键字作为主表</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	e.ename,d.dname</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	dept d </span><br><span class="line"><span class="keyword">left</span> (<span class="keyword">outer</span>) <span class="keyword">join</span> </span><br><span class="line">	emp e</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">	e.deptno <span class="operator">=</span> d.deptn;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">	e.ename,d.dname</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	emp e </span><br><span class="line"><span class="keyword">right</span> <span class="keyword">join</span> </span><br><span class="line">	dept d</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">	e.deptno <span class="operator">=</span> d.deptno;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="多表连接"><a href="#多表连接" class="headerlink" title="多表连接"></a>多表连接</h2><ul>
<li><p>语法</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">	...</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	a</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">	b</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">    a和b的连接条件</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">    c</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">    a和c的连接条件</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">    d</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">    a和d的连接条件</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><ul>
<li><p>子查询：select语句中嵌套select语句，被嵌套的select语句称为子查询</p>
</li>
<li><p>语法	</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">	..(<span class="keyword">select</span>).</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	..(<span class="keyword">select</span>).</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">	..(<span class="keyword">select</span>).</span><br></pre></td></tr></table></figure>
</li>
<li><p>where子句中的子查询</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(sal) <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">&gt;</span> <span class="number">800</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">&gt;</span> (<span class="keyword">select</span> <span class="built_in">min</span>(sal) <span class="keyword">from</span> emp);</span><br></pre></td></tr></table></figure>
</li>
<li><p>from子句中的子查询</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	t.<span class="operator">*</span>, s.grade</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	(<span class="keyword">select</span> job,<span class="built_in">avg</span>(sal) <span class="keyword">as</span> avgsal <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> job) t</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">	salgrade s</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">	t.avgsal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="union合并查询结果集"><a href="#union合并查询结果集" class="headerlink" title="union合并查询结果集"></a>union合并查询结果集</h2><ul>
<li><p>语法</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,job <span class="keyword">from</span> emp <span class="keyword">where</span> job <span class="operator">=</span> <span class="string">&#x27;MANAGER&#x27;</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> ename,job <span class="keyword">from</span> emp <span class="keyword">where</span> job <span class="operator">=</span> <span class="string">&#x27;SALESMAN&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意事项</p>
<ul>
<li>union在进行结果集合并的时候，要求两个结果集的列数相同</li>
<li>结果集合并时列和列的数据类型也要一致</li>
</ul>
</li>
</ul>
<h2 id="limit关键字"><a href="#limit关键字" class="headerlink" title="limit关键字"></a>limit关键字</h2><ul>
<li><p>limit作用：将查询结果集的一部分取出来，通常使用在分页查询当中</p>
</li>
<li><p>语法：limit startIndex, length，其中startIndex是起始下标，length是长度，起始下标默认从0开始</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">	ename,sal</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	emp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">	sal <span class="keyword">desc</span></span><br><span class="line">limit <span class="number">5</span>; <span class="operator">/</span><span class="operator">/</span>取前<span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">	ename,sal</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">	emp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">	sal <span class="keyword">desc</span></span><br><span class="line">limit <span class="number">0</span>,<span class="number">5</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>分页：limit (pageNo - 1) * pageSize  , pageSize</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">	<span class="comment">// 用户提交过来一个页码，以及每页显示的记录条数</span></span><br><span class="line">	<span class="type">int</span> <span class="variable">pageNo</span> <span class="operator">=</span> <span class="number">5</span>; <span class="comment">//第5页</span></span><br><span class="line">	<span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">//每页显示10条</span></span><br><span class="line">	<span class="type">int</span> <span class="variable">startIndex</span> <span class="operator">=</span> (pageNo - <span class="number">1</span>) * pageSize;</span><br><span class="line">	<span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select ...limit &quot;</span> + startIndex + <span class="string">&quot;, &quot;</span> + pageSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="表"><a href="#表" class="headerlink" title="表"></a>表</h2><h3 id="表的创建"><a href="#表的创建" class="headerlink" title="表的创建"></a>表的创建</h3><ul>
<li><p>语法</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(字段名<span class="number">1</span> 数据类型, 字段名<span class="number">2</span> 数据类型, 字段名<span class="number">3</span> 数据类型);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_student(</span><br><span class="line">		<span class="keyword">no</span> <span class="type">int</span>,</span><br><span class="line">		name <span class="type">varchar</span>(<span class="number">32</span>),</span><br><span class="line">		sex <span class="type">char</span>(<span class="number">1</span>),</span><br><span class="line">		age <span class="type">int</span>(<span class="number">3</span>),</span><br><span class="line">		email <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">	);</span><br></pre></td></tr></table></figure>
</li>
<li><p>数据结构</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="type">varchar</span>(最长<span class="number">255</span>)	可变长度的字符串</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>(最长<span class="number">255</span>)	定长字符串</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>(最长<span class="number">11</span>)	数字中的整数型</span><br><span class="line"></span><br><span class="line"><span class="type">bigint</span>	数字中的长整型</span><br><span class="line"></span><br><span class="line"><span class="type">float</span>	单精度浮点型数据</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span>	双精度浮点型数据</span><br><span class="line"></span><br><span class="line"><span class="type">date</span>	短日期类型</span><br><span class="line"></span><br><span class="line">datetime	长日期类型</span><br><span class="line"></span><br><span class="line"><span class="type">clob</span>	字符大对象，最多可以存储<span class="number">4</span>G的字符串</span><br><span class="line"></span><br><span class="line"><span class="type">blob</span>	二进制大对象，专门用来存储图片、声音、视频等流媒体数据</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="表的插入"><a href="#表的插入" class="headerlink" title="表的插入"></a>表的插入</h3><ul>
<li><p>语法</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(字段名<span class="number">1</span>,字段名<span class="number">2</span>,字段名<span class="number">3.</span>..) <span class="keyword">values</span>(值<span class="number">1</span>,值<span class="number">2</span>,值<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student(<span class="keyword">no</span>,name,sex,age,email) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;zhangsan@123.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_student <span class="keyword">values</span>(<span class="number">2</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;lisi@123.com&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>特点</p>
<ul>
<li>如果没有给其它字段指定值，默认值是NULL</li>
<li>如果将前面的字段名省略，默认按照表格顺序插入</li>
</ul>
</li>
<li><p>多个数据一次性插入</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user(id,name,birth,create_time) <span class="keyword">values</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;zs&#x27;</span>,<span class="string">&#x27;1980-10-11&#x27;</span>,now()), </span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;1981-10-11&#x27;</span>,now()),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;wangwu&#x27;</span>,<span class="string">&#x27;1982-10-11&#x27;</span>,now());</span><br></pre></td></tr></table></figure>
</li>
<li><p>插入日期</p>
<ul>
<li>format(数字, ‘格式’)：格式化数字</li>
<li>str_to_date（’字符串日期’, ‘日期格式’）：将字符串varchar类型转换成date类型</li>
<li>date_format(日期类型数据, ‘日期格式’)：将date类型转换成具有一定格式的varchar字符串类型</li>
<li>mysql的日期格式：%Y年，%m月，%d日，%h时，%i分，%s秒</li>
<li>mysql日期格式默认为：%Y-%m-%d</li>
</ul>
</li>
<li><p>data和datatime的区别</p>
<ul>
<li>date是短日期：只包括年月日信息</li>
<li>datetime是长日期：包括年月日时分秒信息</li>
</ul>
</li>
</ul>
<h3 id="表的更新"><a href="#表的更新" class="headerlink" title="表的更新"></a>表的更新</h3><ul>
<li><p>语法</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段名<span class="number">1</span><span class="operator">=</span>值<span class="number">1</span>,字段名<span class="number">2</span><span class="operator">=</span>值<span class="number">2</span>,字段名<span class="number">3</span><span class="operator">=</span>值<span class="number">3.</span>.. <span class="keyword">where</span> 条件;</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> t_user <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;jack&#x27;</span>, birth <span class="operator">=</span> <span class="string">&#x27;2000-10-11&#x27;</span>, create_time <span class="operator">=</span> now() <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意事项：如果没有where语句限制条件，会更新表内所有数据</p>
</li>
</ul>
<h3 id="表的删除"><a href="#表的删除" class="headerlink" title="表的删除"></a>表的删除</h3><ul>
<li><p>删除表格中的数据</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除表格本身</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> t_student; <span class="operator">/</span><span class="operator">/</span> 当这张表不存在的时候会报错！</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t_student;<span class="operator">/</span><span class="operator">/</span> 如果这张表存在的话，删除</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="快速创建表"><a href="#快速创建表" class="headerlink" title="快速创建表"></a>快速创建表</h3><ul>
<li><p>将查询结果视作一张新表</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp2 <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> mytable <span class="keyword">as</span> <span class="keyword">select</span> empno,ename <span class="keyword">from</span> emp <span class="keyword">where</span> job <span class="operator">=</span> <span class="string">&#x27;MANAGER&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="快速删除表中的数据"><a href="#快速删除表中的数据" class="headerlink" title="快速删除表中的数据"></a>快速删除表中的数据</h3><ul>
<li><p>delete &amp; truncate &amp; drop</p>
<ul>
<li>delete：表中的数据被删除了，但是这个数据在硬盘上的真实存储空间不会被释放，删除效率比较低，但是支持回滚</li>
<li>truncate：删除效率比较高，表被一次截断，物理删除，不支持回滚，但是删除速度快</li>
<li>drop：不是删除表中的数据，而是把表本身删除</li>
</ul>
</li>
<li><p>语法</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> dept_bak;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><ul>
<li><p>约束：在创建表的时候，我们可以给表中的字段加上一些约束，来保证这个表中数据的完整性、有效性</p>
</li>
<li><p>约束的种类</p>
<ul>
<li>非空约束：<code>not null</code></li>
<li>唯一性约束: <code>unique</code></li>
<li>主键约束: <code>primary key</code>（简称PK）</li>
<li>外键约束：<code>foreign key</code>（简称FK）</li>
<li>检查约束：<code>check</code>（mysql不支持，oracle支持）</li>
</ul>
</li>
<li><p>非空约束<code>not null</code>:约束的字段不能为NULL</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_vip(</span><br><span class="line">	id <span class="type">int</span>,</span><br><span class="line">	name <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span>  <span class="operator">/</span><span class="operator">/</span> <span class="keyword">not</span> <span class="keyword">null</span>只有列级约束，没有表级约束</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>唯一性约束<code>unique</code>:约束的字段不能重复，但是可以为NULL</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_vip(</span><br><span class="line">	id <span class="type">int</span>,</span><br><span class="line">	name <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">unique</span>,</span><br><span class="line">	email <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>联合唯一</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_vip(</span><br><span class="line">	id <span class="type">int</span>,</span><br><span class="line">	name <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">	email <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    <span class="keyword">unique</span>(name,email)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>主键约束<code>primary key</code></p>
<ul>
<li>主键字段：添加了主键约束的字段</li>
<li>主键值：主键字段的值，是每一行记录的唯一标识</li>
</ul>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_vip(</span><br><span class="line">	id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">	name <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>复合主键</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_vip(</span><br><span class="line">	id <span class="type">int</span>,</span><br><span class="line">	name <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    email <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    <span class="keyword">primary</span> key(name,email)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>主键值自增</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_vip(</span><br><span class="line">	id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">	name <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>外键约束<code>foreign key</code></p>
<ul>
<li>外键字段：添加了外键约束的字段</li>
<li>外键值：外键字段的值，与其他表中的字段产生关联</li>
</ul>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_class(</span><br><span class="line">	classno <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">	classname <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_student(</span><br><span class="line">	<span class="keyword">no</span> <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">	name <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">	cno <span class="type">int</span>,</span><br><span class="line">	<span class="keyword">foreign</span> key(cno) <span class="keyword">references</span> t_class(classno)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><ul>
<li><p>存储引擎：一个表存储&#x2F;组织数据的方式，不同的存储引擎，表存储数据的方式不同</p>
</li>
<li><p>存储引擎的指定</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_product(</span><br><span class="line">		id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">		name <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">)engine<span class="operator">=</span>InnoDB <span class="keyword">default</span> charset<span class="operator">=</span>gbk;</span><br></pre></td></tr></table></figure>
</li>
<li><p>mysql常用存储引擎</p>
<ul>
<li>MyISAM存储引擎：分为格式文件，数据文件和索引文件，可以被压缩来节省存储空间</li>
<li>InnoDB存储引擎：默认存储引擎，支持数据库自动恢复机制，安全性能高</li>
<li>MEMORY存储引擎：数据存储在内存中，且行的长度一定，查询效率高</li>
</ul>
</li>
</ul>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><ul>
<li><p>事务：一个事务就是一个完整的业务逻辑，是一个最小的工作单元，不可再分</p>
</li>
<li><p>开启事务：关闭自动提交事务机制</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">start</span> transaction;</span><br></pre></td></tr></table></figure>
</li>
<li><p>提交事务<code>commit</code>：清空事务性活动的日志文件，将数据全部彻底持久化到数据库表中，标志着事务的结束</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>回滚事务<code>rollback</code>：将之前所有的DML操作全部撤销，并且清空事务性活动的日志文件</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>事物的特性</p>
<ul>
<li>原子性：说明事务是最小的工作单元，不可再分</li>
<li>一致性：所有事务要求，在同一个事务当中，所有操作必须同时成功，或者同时失败，以保证数据的一致性</li>
<li>隔离性：一个事务不会被另一个事务影响，最理想的就是等待一个事务执行完成后再执行另一个事务，但处于性能上的考虑，一般都需要事务并发执行，就要求事务执行过程中不受到并行执行的事务的影响</li>
<li>持久性：指事务一旦提交，它对数据库的改变就应该是永久性的，不应该受到故障或其他原因的影响</li>
</ul>
</li>
<li><p>事物的隔离级别</p>
<ul>
<li>读未提交：<code>read uncommitted</code>最低的隔离级别，没有提交就读到了</li>
<li>读已提交：<code>read committed</code>提交之后才能读到，但是不可重复读取数据</li>
<li>可重复读：<code>repeatable read</code>提交之后也读不到，永远读取的都是刚开启事务时的数据</li>
<li>序列化&#x2F;串行化：<code>serializable</code>最高的隔离级别，表示事务排队，不能并发</li>
</ul>
</li>
</ul>
<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><ul>
<li><p>索引：是在数据库表的字段上添加的，为了提高查询效率存在的一种机制</p>
</li>
<li><p>添加索引的条件</p>
<ul>
<li>数据量庞大</li>
<li>经常以条件的形式出现，总是被扫描</li>
<li>该字段很少的DML操作</li>
</ul>
</li>
<li><p>索引的创建与删除</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">创建索引：</span><br><span class="line">	mysql<span class="operator">&gt;</span> <span class="keyword">create</span> index emp_ename_index <span class="keyword">on</span> emp(ename);</span><br><span class="line">	给emp表的ename字段添加索引，起名：emp_ename_index</span><br><span class="line"></span><br><span class="line">删除索引：</span><br><span class="line">	mysql<span class="operator">&gt;</span> <span class="keyword">drop</span> index emp_ename_index <span class="keyword">on</span> emp;</span><br><span class="line">	将emp表上的emp_ename_index索引对象删除</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><ul>
<li><p>视图：站在不同的角度去看待同一份数据</p>
</li>
<li><p>视图对象的创建与删除</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">创建视图对象：</span><br><span class="line">	<span class="keyword">create</span> <span class="keyword">view</span> dept2_view <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept2;</span><br><span class="line"></span><br><span class="line">删除视图对象：</span><br><span class="line">	<span class="keyword">drop</span> <span class="keyword">view</span> dept2_view;</span><br></pre></td></tr></table></figure>
</li>
<li><p>视图操作</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>面向视图查询</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept2_view; </span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 面向视图插入</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept2_view(deptno,dname,loc) <span class="keyword">values</span>(<span class="number">60</span>,<span class="string">&#x27;SALES&#x27;</span>, <span class="string">&#x27;BEIJING&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 面向视图删除</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">delete</span> <span class="keyword">from</span> dept2_view;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="DBA常用命令"><a href="#DBA常用命令" class="headerlink" title="DBA常用命令"></a>DBA常用命令</h2><ul>
<li><p>数据导出</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysqldump bjpowernode<span class="operator">&gt;</span>D:\bjpowernode.sql <span class="operator">-</span>uroot <span class="operator">-</span>p123456</span><br><span class="line">	</span><br><span class="line">mysqldump bjpowernode emp<span class="operator">&gt;</span>D:\bjpowernode.sql <span class="operator">-</span>uroot <span class="operator">-</span>p123456</span><br></pre></td></tr></table></figure>
</li>
<li><p>数据导入</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database bjpowernode;</span><br><span class="line"></span><br><span class="line">use bjpowernode</span><br><span class="line"></span><br><span class="line">source D:\bjpowernode.sql</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="数据库设计三范式"><a href="#数据库设计三范式" class="headerlink" title="数据库设计三范式"></a>数据库设计三范式</h2><ul>
<li><p>数据库设计范式：数据库表的设计依据</p>
</li>
<li><p>第一范式：最核心，最重要的范式，所有表的设计都需要满足，必须有主键，并且每一个字段都是原子性不可再分</p>
</li>
<li><p>第二范式：建立在第一范式的基础之上，要求所有非主键字段必须完全依赖主键，不要产生部分依赖</p>
</li>
<li><p>第三范式：第三范式建立在第二范式的基础之上，要求所有非主键字典必须直接依赖主键，不要产生传递依赖</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/2024/01/28/Linux/</url>
    <content><![CDATA[<h2 id="第一节Linux简介"><a href="#第一节Linux简介" class="headerlink" title="第一节	Linux简介"></a>第一节	Linux简介</h2><h3 id="1-1Linux介绍"><a href="#1-1Linux介绍" class="headerlink" title="1.1	Linux介绍"></a>1.1	Linux介绍</h3><p><strong>Linux</strong> 内核最初只是由芬兰人林纳斯·托瓦兹 <strong>Linus Torvalds</strong> 在赫尔辛基大学上学时出于个人爱好而编写的</p>
<p><strong>Linux</strong> 是一套免费使用和自由传播的类 <strong>Unix</strong> 操作系统，是一个基于 <strong>POSIX</strong> 和 <strong>UNIX</strong> 的多用户、多任务、支持多线程和多 <strong>CPU</strong> 的操作系统</p>
<p><strong>Linux</strong> 能运行主要的 <strong>UNIX</strong> 工具软件、应用程序和网络协议，它支持 32 位和 64 位硬件，<strong>Linux</strong> 继承了 <strong>Unix</strong> 以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统</p>
<h3 id="1-2Linux-的发行版"><a href="#1-2Linux-的发行版" class="headerlink" title="1.2	Linux 的发行版"></a>1.2	Linux 的发行版</h3><p><strong>Linux</strong> 的发行版说简单点就是将 <strong>Linux</strong> 内核与应用软件做一个打包</p>
<p><img src="C:\Users\86172\Pictures\Markdown\Linux\Linux内核" alt="img"></p>
<p>目前市面上较知名的发行版有：<strong>Ubuntu</strong>、<strong>RedHat</strong>、<strong>CentOS</strong>、<strong>Debian</strong>、<strong>Fedora</strong>、<strong>SuSE</strong>、<strong>OpenSUSE</strong>、<strong>Arch Linux</strong>、<strong>SolusOS</strong> 等</p>
<p><img src="C:\Users\86172\Pictures\Markdown\Linux\Linux发行版本" alt="img"></p>
<h3 id="1-3Linux-vs-Windows"><a href="#1-3Linux-vs-Windows" class="headerlink" title="1.3	Linux vs Windows"></a>1.3	Linux vs Windows</h3><p>目前国内 <strong>Linux</strong> 更多的是应用于服务器上，而桌面操作系统更多使用的是 <strong>Windows</strong>，主要区别如下</p>
<table>
<thead>
<tr>
<th align="left">比较</th>
<th align="left">Windows</th>
<th align="left">Linux</th>
</tr>
</thead>
<tbody><tr>
<td align="left">界面</td>
<td align="left">界面统一，外壳程序固定所有 **Windows **程序菜单几乎一致，快捷键也几乎相同</td>
<td align="left">图形界面风格依发布版不同而不同，可能互不兼容。<strong>GNU</strong>&#x2F;<strong>Linux</strong> 的终端机是从 <strong>UNIX</strong> 传承下来，基本命令和操作方法也几乎一致</td>
</tr>
<tr>
<td align="left">驱动程序</td>
<td align="left">驱动程序丰富，版本更新频繁。默认安装程序里面一般包含有该版本发布时流行的硬件驱动程序，之后所出的新硬件驱动依赖于硬件厂商提供。对于一些老硬件，如果没有了原配的驱动有时很难支持。另外，有时硬件厂商未提供所需版本的 <strong>Windows</strong> 下的驱动，也会比较头痛</td>
<td align="left">由志愿者开发，由 <strong>Linux</strong> 核心开发小组发布，很多硬件厂商基于版权考虑并未提供驱动程序，尽管多数无需手动安装，但是涉及安装则相对复杂，使得新用户面对驱动程序问题（是否存在和安装方法）会一筹莫展。但是在开源开发模式下，许多老硬件尽管在 <strong>Windows</strong> 下很难支持的也容易找到驱动。<strong>HP</strong>、<strong>Intel</strong>、<strong>AMD</strong> 等硬件厂商逐步不同程度支持开源驱动，问题正在得到缓解</td>
</tr>
<tr>
<td align="left">使用</td>
<td align="left">使用比较简单，容易入门。图形化界面对没有计算机背景知识的用户使用十分有利</td>
<td align="left">图形界面使用简单，容易入门。文字界面，需要学习才能掌握</td>
</tr>
<tr>
<td align="left">学习</td>
<td align="left">系统构造复杂、变化频繁，且知识、技能淘汰快，深入学习困难</td>
<td align="left">系统构造简单、稳定，且知识、技能传承性好，深入学习相对容易</td>
</tr>
<tr>
<td align="left">软件</td>
<td align="left">每一种特定功能可能都需要商业软件的支持，需要购买相应的授权</td>
<td align="left">大部分软件都可以自由获取，同样功能的软件选择较少</td>
</tr>
</tbody></table>
<h2 id="第二节Linux系统启动过程"><a href="#第二节Linux系统启动过程" class="headerlink" title="第二节	Linux系统启动过程"></a>第二节	Linux系统启动过程</h2><h3 id="2-1内核引导"><a href="#2-1内核引导" class="headerlink" title="2.1	内核引导"></a>2.1	内核引导</h3><p>当计算机打开电源后，首先是 <strong>BIOS</strong> 开机自检，按照 <strong>BIOS</strong> 中设置的启动设备（通常是硬盘）来启动</p>
<p>操作系统接管硬件以后，首先读入 <strong>&#x2F;boot</strong> 目录下的内核文件</p>
<p><img src="C:\Users\86172\Pictures\Markdown\Linux\BIOS" alt="img"></p>
<h3 id="2-2运行init"><a href="#2-2运行init" class="headerlink" title="2.2	运行init"></a>2.2	运行init</h3><p><strong>init</strong> 进程是系统所有进程的起点，你可以把它比拟成系统所有进程的老祖宗，没有这个进程，系统中任何进程都不会启动</p>
<p><strong>init</strong> 程序首先是需要读取配置文件 <strong>&#x2F;etc&#x2F;inittab</strong></p>
<p><img src="C:\Users\86172\Pictures\Markdown\Linux\init" alt="img"></p>
<h3 id="2-3运行级别"><a href="#2-3运行级别" class="headerlink" title="2.3	运行级别"></a>2.3	运行级别</h3><p>许多程序需要开机启动，它们在 <strong>Windows</strong> 叫做服务 <strong>service</strong>，在 <strong>Linux</strong> 就叫做守护进程 <strong>daemon</strong></p>
<p><strong>init</strong> 进程的一大任务，就是去运行这些开机启动的程序</p>
<p>但是，不同的场合需要启动不同的程序，<strong>Linux</strong> 允许为不同的场合，分配不同的开机启动程序，这就叫做运行级别 <strong>runlevel</strong></p>
<p><img src="C:\Users\86172\Pictures\Markdown\Linux\运行级别" alt="img"></p>
<p><strong>Linux</strong> 系统有7个运行级别：</p>
<ul>
<li>运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动</li>
<li>运行级别1：单用户工作状态，<strong>root</strong> 权限，用于系统维护，禁止远程登录</li>
<li>运行级别2：多用户状态(没有 <strong>NFS</strong> )</li>
<li>运行级别3：完全的多用户状态(有 <strong>NFS</strong> )，登录后进入控制台命令行模式</li>
<li>运行级别4：系统未使用，保留</li>
<li>运行级别5：<strong>X11</strong> 控制台，登录后进入图形 <strong>GUI</strong> 模式</li>
<li>运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</li>
</ul>
<h3 id="2-4系统初始化"><a href="#2-4系统初始化" class="headerlink" title="2.4	系统初始化"></a>2.4	系统初始化</h3><p>在 <strong>init</strong> 的配置文件中有这么一行： <strong>si::sysinit:&#x2F;etc&#x2F;rc.d&#x2F;rc.sysinit</strong>　它调用执行了 <strong>&#x2F;etc&#x2F;rc.d&#x2F;rc.sysinit</strong>，而<strong>rc.sysinit</strong>是一个 <strong>bash shell</strong> 的脚本，它主要是完成一些系统初始化的工作，<strong>rc.sysinit</strong> 是每一个运行级别都要首先运行的重要脚本</p>
<p>它主要完成的工作有：激活交换分区，检查磁盘，加载硬件模块以及其它一些需要优先执行任务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">l5:5:wait:/etc/rc.d/rc 5</span><br></pre></td></tr></table></figure>

<p>这一行表示以5为参数运行 <strong>&#x2F;etc&#x2F;rc.d&#x2F;rc</strong>，**&#x2F;etc&#x2F;rc.d&#x2F;rc** 是一个 <strong>Shell</strong> 脚本，它接受5作为参数，去执行 <strong>&#x2F;etc&#x2F;rc.d&#x2F;rc5.d&#x2F;</strong> 目录下的所有的 <strong>rc</strong> 启动脚本，**&#x2F;etc&#x2F;rc.d&#x2F;rc5.d&#x2F;** 目录中的这些启动脚本实际上都是一些连接文件，而不是真正的 <strong>rc</strong> 启动脚本，真正的 <strong>rc</strong> 启动脚本实际上都是放在 <strong>&#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;</strong> 目录下</p>
<p>而这些rc启动脚本有着类似的用法，它们一般能接受 <strong>start</strong>、<strong>stop</strong>、<strong>restart</strong>、<strong>status</strong> 等参数</p>
<p><strong>&#x2F;etc&#x2F;rc.d&#x2F;rc5.d&#x2F;</strong> 中的 <strong>rc</strong> 启动脚本通常是 <strong>K</strong> 或 <strong>S</strong> 开头的连接文件，对于以 <strong>S</strong> 开头的启动脚本，将以 <strong>start</strong> 参数来运行</p>
<p>而如果发现存在相应的脚本也存在K打头的连接，而且已经处于运行态了，则将首先以 <strong>stop</strong> 为参数停止这些已经启动了的守护进程，然后再重新运行</p>
<p>这样做是为了保证是当 <strong>init</strong> 改变运行级别时，所有相关的守护进程都将重启</p>
<p>至于在每个运行级中将运行哪些守护进程，用户可以通过 <strong>chkconfig</strong> 或 <strong>setup</strong> 中的 <strong>System Services</strong> 来自行设定</p>
<p><img src="C:\Users\86172\Pictures\Markdown\Linux\系统初始化" alt="img"></p>
<h3 id="2-5建立终端"><a href="#2-5建立终端" class="headerlink" title="2.5	建立终端"></a>2.5	建立终端</h3><p><strong>rc</strong> 执行完毕后，返回 <strong>init</strong>，这时基本系统环境已经设置好了，各种守护进程也已经启动了</p>
<p><strong>init</strong> 接下来会打开6个终端，以便用户登录系统，在 <strong>inittab</strong> 中的以下6行就是定义了6个终端：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1:2345:respawn:/sbin/mingetty tty1</span><br><span class="line">2:2345:respawn:/sbin/mingetty tty2</span><br><span class="line">3:2345:respawn:/sbin/mingetty tty3</span><br><span class="line">4:2345:respawn:/sbin/mingetty tty4</span><br><span class="line">5:2345:respawn:/sbin/mingetty tty5</span><br><span class="line">6:2345:respawn:/sbin/mingetty tty6</span><br></pre></td></tr></table></figure>

<p>同时它会显示一个文本登录界面，这个界面就是我们经常看到的登录界面，在这个登录界面中会提示用户输入用户名，而用户输入的用户将作为参数传给 <strong>login</strong> 程序来验证用户的身份</p>
<h3 id="2-6用户登录系统"><a href="#2-6用户登录系统" class="headerlink" title="2.6	用户登录系统"></a>2.6	用户登录系统</h3><p>一般来说，用户的登录方式有三种：</p>
<ul>
<li>命令行登录</li>
<li><strong>sh</strong> 登录</li>
<li>图形界面登录</li>
</ul>
<p><img src="C:\Users\86172\Pictures\Markdown\Linux\用户登录" alt="img"></p>
<h3 id="2-7图形模式与文字模式的切换方式"><a href="#2-7图形模式与文字模式的切换方式" class="headerlink" title="2.7	图形模式与文字模式的切换方式"></a>2.7	图形模式与文字模式的切换方式</h3><p><strong>Linux</strong> 预设提供了六个命令窗口终端机让我们来登录</p>
<p>默认我们登录的就是第一个窗口，也就是 <strong>tty1</strong>，这个六个窗口分别为 <strong>tty1</strong>,<strong>tty2</strong> … <strong>tty6</strong>，你可以按下 <strong>Ctrl + Alt + F1 ~ F6</strong> 来切换它们</p>
<p>如果你安装了图形界面，默认情况下是进入图形界面的，此时你就可以按 <strong>Ctrl + Alt + F1 ~ F6</strong> 来进入其中一个命令窗口界面</p>
<p>当你进入命令窗口界面后再返回图形界面只要按下 <strong>Ctrl + Alt + F7</strong> 就回来了</p>
<p><img src="C:\Users\86172\Pictures\Markdown\Linux\模式切换" alt="img"></p>
<h3 id="2-8Linux-关机"><a href="#2-8Linux-关机" class="headerlink" title="2.8	Linux 关机"></a>2.8	Linux 关机</h3><p>在 <strong>linux</strong> 领域内大多用在服务器上，很少遇到关机的操作</p>
<p>正确的关机流程为：<strong>sync</strong> &gt; <strong>shutdown</strong> &gt; <strong>reboot</strong> &gt; <strong>halt</strong></p>
<p>关机指令为：<strong>shutdown</strong> ，你可以 <strong>man shutdown</strong> 来看一下帮助文档</p>
<p>例如你可以运行如下命令关机：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sync 将数据由内存同步到硬盘中。</span><br><span class="line"></span><br><span class="line">shutdown 关机指令，你可以man shutdown 来看一下帮助文档。例如你可以运行如下命令关机：</span><br><span class="line"></span><br><span class="line">shutdown –h 10 ‘This server will shutdown after 10 mins’ 这个命令告诉大家，计算机将在10分钟后关机，并且会显示在登陆用户的当前屏幕中。</span><br><span class="line"></span><br><span class="line">shutdown –h now 立马关机</span><br><span class="line"></span><br><span class="line">shutdown –h 20:25 系统会在今天20:25关机</span><br><span class="line"></span><br><span class="line">shutdown –h +10 十分钟后关机</span><br><span class="line"></span><br><span class="line">shutdown –r now 系统立马重启</span><br><span class="line"></span><br><span class="line">shutdown –r +10 系统十分钟后重启</span><br><span class="line"></span><br><span class="line">reboot 就是重启，等同于 shutdown –r now</span><br><span class="line"></span><br><span class="line">halt 关闭系统，等同于shutdown –h now 和 poweroff</span><br></pre></td></tr></table></figure>

<h2 id="第三节Linux系统目录结构"><a href="#第三节Linux系统目录结构" class="headerlink" title="第三节	Linux系统目录结构"></a>第三节	Linux系统目录结构</h2><p>登录系统后，在当前命令窗口下输入命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls / </span><br></pre></td></tr></table></figure>

<p>你会看到如下图所示:</p>
<p><img src="C:\Users\86172\Pictures\Markdown\Linux\ls" alt="img"></p>
<p>树状目录结构：</p>
<p><img src="C:\Users\86172\Pictures\Markdown\Linux\树状目录结构" alt="img"></p>
<p>以下是对这些目录的解释：</p>
<table>
<thead>
<tr>
<th align="center">目录</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>&#x2F;bin</strong></td>
<td align="center"><strong>bin</strong> 是 <strong>Binaries</strong> 的缩写，这个目录存放着最经常使用的命令</td>
</tr>
<tr>
<td align="center"><strong>&#x2F;boot</strong></td>
<td align="center">这里存放的是启动 <strong>Linux</strong> 时使用的一些核心文件，包括一些连接文件以及镜像文件</td>
</tr>
<tr>
<td align="center"><strong>&#x2F;dev</strong></td>
<td align="center"><strong>dev</strong> 是 <strong>Device</strong> 的缩写，该目录下存放的是 <strong>Linux</strong> 的外部设备，在 <strong>Linux</strong> 中访问设备的方式和访问文件的方式是相同的</td>
</tr>
<tr>
<td align="center"><strong>&#x2F;etc</strong></td>
<td align="center"><strong>etc</strong> 是 <strong>Etcetera</strong> 的缩写，这个目录用来存放所有的系统管理所需要的配置文件和子目录。</td>
</tr>
<tr>
<td align="center"><strong>&#x2F;home</strong></td>
<td align="center">用户的主目录，在 <strong>Linux</strong> 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的</td>
</tr>
<tr>
<td align="center"><strong>&#x2F;lib</strong></td>
<td align="center"><strong>lib</strong> 是 <strong>Library</strong> 的缩写这个目录里存放着系统最基本的动态连接共享库，其作用类似于 <strong>Windows</strong> 里的 <strong>DLL</strong> 文件，几乎所有的应用程序都需要用到这些共享库</td>
</tr>
<tr>
<td align="center"><strong>&#x2F;lost+found</strong></td>
<td align="center">这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件</td>
</tr>
<tr>
<td align="center"><strong>&#x2F;media</strong></td>
<td align="center"><strong>linux</strong> 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，<strong>Linux</strong> 会把识别的设备挂载到这个目录下</td>
</tr>
<tr>
<td align="center"><strong>&#x2F;mnt</strong></td>
<td align="center">系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 <strong>&#x2F;mnt&#x2F;</strong> 上，然后进入该目录就可以查看光驱里的内容了</td>
</tr>
<tr>
<td align="center"><strong>&#x2F;opt</strong></td>
<td align="center"><strong>opt</strong> 是 <strong>optional</strong> 的缩写，这是给主机额外安装软件所摆放的目录</td>
</tr>
<tr>
<td align="center"><strong>&#x2F;proc</strong></td>
<td align="center"><strong>proc</strong> 是 <strong>Processes</strong> 的缩写，**&#x2F;proc** 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息</td>
</tr>
<tr>
<td align="center"><strong>&#x2F;root</strong></td>
<td align="center">该目录为系统管理员，也称作超级权限者的用户主目录</td>
</tr>
<tr>
<td align="center"><strong>&#x2F;sbin</strong></td>
<td align="center"><strong>s</strong> 就是 <strong>Super User</strong> 的意思，是 <strong>Superuser Binaries</strong>  的缩写，这里存放的是系统管理员使用的系统管理程序</td>
</tr>
<tr>
<td align="center"><strong>&#x2F;selinux</strong></td>
<td align="center">这个目录是 <strong>Redhat&#x2F;CentOS</strong> 所特有的目录，<strong>Selinux</strong> 是一个安全机制，类似于 <strong>Windows</strong> 的防火墙，但是这套机制比较复杂，这个目录就是存放 <strong>selinux</strong> 相关的文件的</td>
</tr>
<tr>
<td align="center"><strong>&#x2F;srv</strong></td>
<td align="center">该目录存放一些服务启动之后需要提取的数据。</td>
</tr>
<tr>
<td align="center"><strong>&#x2F;sys</strong></td>
<td align="center">该目录下安装了 2.6 内核中新出现的一个文件系统 <strong>sysfs</strong>，<strong>sysfs</strong> 文件系统集成了下面3种文件系统的信息：针对进程信息的 <strong>proc</strong> 文件系统、针对设备的 <strong>devfs</strong> 文件系统以及针对伪终端的 <strong>devpts</strong> 文件系统，该文件系统是内核设备树的一个直观反映。当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建</td>
</tr>
<tr>
<td align="center"><strong>&#x2F;tmp</strong></td>
<td align="center"><strong>tmp</strong> 是 <strong>temporary</strong> 的缩写这个目录是用来存放一些临时文件的</td>
</tr>
<tr>
<td align="center"><strong>&#x2F;usr</strong></td>
<td align="center"><strong>usr</strong> 是 <strong>unix shared resources</strong> 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 <strong>Windows</strong> 下的 <strong>program files</strong> 目录</td>
</tr>
<tr>
<td align="center"><strong>&#x2F;usr&#x2F;bin</strong></td>
<td align="center">系统用户使用的应用程序</td>
</tr>
<tr>
<td align="center"><strong>&#x2F;usr&#x2F;sbin</strong></td>
<td align="center">超级用户使用的比较高级的管理程序和系统守护程序</td>
</tr>
<tr>
<td align="center"><strong>&#x2F;usr&#x2F;src</strong></td>
<td align="center">内核源代码默认的放置目录</td>
</tr>
<tr>
<td align="center"><strong>&#x2F;var</strong></td>
<td align="center"><strong>var</strong> 是 <strong>variable</strong> 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件</td>
</tr>
<tr>
<td align="center"><strong>&#x2F;run</strong></td>
<td align="center">一个临时文件系统，存储系统启动以来的信息，当系统重启时，这个目录下的文件应该被删掉或清除，如果你的系统上有 <strong>&#x2F;var&#x2F;run</strong> 目录，应该让它指向 <strong>run</strong></td>
</tr>
</tbody></table>
<h2 id="第四节Linux文件基本属性"><a href="#第四节Linux文件基本属性" class="headerlink" title="第四节	Linux文件基本属性"></a>第四节	Linux文件基本属性</h2><h3 id="4-1Linux文件概述"><a href="#4-1Linux文件概述" class="headerlink" title="4.1	Linux文件概述"></a>4.1	Linux文件概述</h3><p><strong>Linux</strong> 系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限</p>
<p>为了保护系统的安全性，<strong>Linux</strong> 系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定</p>
<p>在 <strong>Linux</strong> 中我们通常使用以下两个命令来修改文件或目录的所属用户与权限：</p>
<ul>
<li><strong>chown</strong> (change owner) ： 修改所属用户与组</li>
<li><strong>chmod</strong> (change mode) ： 修改用户的权限</li>
</ul>
<p>在 Linux 中我们可以使用 <strong>ll</strong> 或者 <strong>ls –l</strong> 命令来显示一个文件的属性以及文件所属的用户和组，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www /]# ls -l</span><br><span class="line">total 64</span><br><span class="line">dr-xr-xr-x   2 root root 4096 Dec 14  2012 bin</span><br><span class="line">dr-xr-xr-x   4 root root 4096 Apr 19  2012 boot</span><br><span class="line">……</span><br></pre></td></tr></table></figure>

<p>实例中，<strong>bin</strong> 文件的第一个属性用 <strong>d</strong> 表示。<strong>d</strong> 在 Linux 中代表该文件是一个目录文件。</p>
<p>在 Linux 中第一个字符代表这个文件是目录、文件或链接文件等等。</p>
<ul>
<li>当为 <strong>d</strong> 则是目录</li>
<li>当为 <strong>-</strong> 则是文件；</li>
<li>若是 <strong>l</strong> 则表示为链接文档(link file)；</li>
<li>若是 <strong>b</strong> 则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；</li>
<li>若是 <strong>c</strong> 则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。</li>
</ul>
<p>接下来的字符中，以三个为一组，且均为 <strong>rwx</strong> 的三个参数的组合。其中， <strong>r</strong> 代表可读(read)、 <strong>w</strong> 代表可写(write)、 <strong>x</strong> 代表可执行(execute)。 要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号 <strong>-</strong> 而已。</p>
<p><img src="C:\Users\86172\Pictures\Markdown\Linux\file-llls22.jpg" alt="img"></p>
<p>每个文件的属性由左边第一部分的 10 个字符来确定（如下图）。</p>
<p><img src="C:\Users\86172\Pictures\Markdown\Linux\363003_1227493859FdXT.png" alt="363003_1227493859FdXT"></p>
<p>从左至右用 <strong>0-9</strong> 这些数字来表示。</p>
<p>第 <strong>0</strong> 位确定文件类型，第 <strong>1-3</strong> 位确定属主（该文件的所有者）拥有该文件的权限。</p>
<p>第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。</p>
<p>其中，第 <strong>1、4、7</strong> 位表示读权限，如果用 <strong>r</strong> 字符表示，则有读权限，如果用 <strong>-</strong> 字符表示，则没有读权限；</p>
<p>第 <strong>2、5、8</strong> 位表示写权限，如果用 <strong>w</strong> 字符表示，则有写权限，如果用 <strong>-</strong> 字符表示没有写权限；第 <strong>3、6、9</strong> 位表示可执行权限，如果用 <strong>x</strong> 字符表示，则有执行权限，如果用 <strong>-</strong> 字符表示，则没有执行权限。</p>
<h3 id="4-2Linux文件属主和属组"><a href="#4-2Linux文件属主和属组" class="headerlink" title="4.2	Linux文件属主和属组"></a>4.2	Linux文件属主和属组</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www /]# ls -l</span><br><span class="line">total 64</span><br><span class="line">drwxr-xr-x 2 root  root  4096 Feb 15 14:46 cron</span><br><span class="line">drwxr-xr-x 3 mysql mysql 4096 Apr 21  2014 mysql</span><br><span class="line">……</span><br></pre></td></tr></table></figure>

<p>对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。</p>
<p>同时，在Linux系统中，用户是按组分类的，一个用户属于一个或多个组。</p>
<p>文件所有者以外的用户又可以分为文件所属组的同组用户和其他用户。</p>
<p>因此，Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。</p>
<p>在以上实例中，mysql 文件是一个目录文件，属主和属组都为 mysql，属主有可读、可写、可执行的权限；与属主同组的其他用户有可读和可执行的权限；其他用户也有可读和可执行的权限。</p>
<p>对于 root 用户来说，一般情况下，文件的权限对其不起作用。</p>
<h3 id="4-3更改文件属性"><a href="#4-3更改文件属性" class="headerlink" title="4.3	更改文件属性"></a>4.3	更改文件属性</h3><h4 id="chgrp：更改文件属组"><a href="#chgrp：更改文件属组" class="headerlink" title="chgrp：更改文件属组"></a>chgrp：更改文件属组</h4><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chgrp [-R] 属组名 文件名</span><br></pre></td></tr></table></figure>

<p>参数选项</p>
<ul>
<li>-R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。</li>
</ul>
<h4 id="chown：更改文件属主，也可以同时更改文件属组"><a href="#chown：更改文件属主，也可以同时更改文件属组" class="headerlink" title="chown：更改文件属主，也可以同时更改文件属组"></a>chown：更改文件属主，也可以同时更改文件属组</h4><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown [–R] 属主名 文件名</span><br><span class="line">chown [-R] 属主名：属组名 文件名</span><br></pre></td></tr></table></figure>

<p>进入 &#x2F;root 目录（~）将install.log的拥有者改为bin这个账号：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~] cd ~</span><br><span class="line">[root@www ~]# chown bin install.log</span><br><span class="line">[root@www ~]# ls -l</span><br><span class="line">-rw-r--r--  1 bin  users 68495 Jun 25 08:53 install.log</span><br></pre></td></tr></table></figure>

<p>将install.log的拥有者与群组改回为root：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# chown root:root install.log</span><br><span class="line">[root@www ~]# ls -l</span><br><span class="line">-rw-r--r--  1 root root 68495 Jun 25 08:53 install.log</span><br></pre></td></tr></table></figure>

<h4 id="chmod：更改文件9个属性"><a href="#chmod：更改文件9个属性" class="headerlink" title="chmod：更改文件9个属性"></a>chmod：更改文件9个属性</h4><p>Linux文件属性有两种设置方法，一种是数字，一种是符号。</p>
<p>Linux 文件的基本权限就有九个，分别是 <strong>owner&#x2F;group&#x2F;others(拥有者&#x2F;组&#x2F;其他)</strong> 三种身份各有自己的 <strong>read&#x2F;write&#x2F;execute</strong> 权限。</p>
<p>先复习一下刚刚上面提到的数据：文件的权限字符为： <strong>-rwxrwxrwx</strong> ， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：</p>
<ul>
<li>r:4</li>
<li>w:2</li>
<li>x:1</li>
</ul>
<p>每种身份(owner&#x2F;group&#x2F;others)各自的三个权限(r&#x2F;w&#x2F;x)分数是需要累加的，例如当权限为： <strong>-rwxrwx—</strong> 分数则是：</p>
<ul>
<li>owner &#x3D; rwx &#x3D; 4+2+1 &#x3D; 7</li>
<li>group &#x3D; rwx &#x3D; 4+2+1 &#x3D; 7</li>
<li>others&#x3D; — &#x3D; 0+0+0 &#x3D; 0</li>
</ul>
<p>所以等一下我们设定权限的变更时，该文件的权限数字就是 <strong>770</strong>。变更权限的指令 chmod 的语法是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod [-R] xyz 文件或目录</span><br></pre></td></tr></table></figure>

<p>选项与参数：</p>
<ul>
<li><strong>xyz</strong> : 就是刚刚提到的数字类型的权限属性，为 <strong>rwx</strong> 属性数值的相加。</li>
<li><strong>-R</strong> : 进行递归(recursive)的持续变更，以及连同次目录下的所有文件都会变更</li>
</ul>
<p>举例来说，如果要将 <strong>.bashrc</strong> 这个文件所有的权限都设定启用，那么命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# ls -al .bashrc</span><br><span class="line">-rw-r--r--  1 root root 395 Jul  4 11:45 .bashrc</span><br><span class="line">[root@www ~]# chmod 777 .bashrc</span><br><span class="line">[root@www ~]# ls -al .bashrc</span><br><span class="line">-rwxrwxrwx  1 root root 395 Jul  4 11:45 .bashrc</span><br></pre></td></tr></table></figure>

<p>那如果要将权限变成 <em>-rwxr-xr–</em> 呢？那么权限的分数就成为 [4+2+1][4+0+1][4+0+0]&#x3D;754。</p>
<h4 id="符号类型改变文件权限"><a href="#符号类型改变文件权限" class="headerlink" title="符号类型改变文件权限"></a>符号类型改变文件权限</h4><p>还有一个改变权限的方法，从之前的介绍中我们可以发现，基本上就九个权限分别是：</p>
<ul>
<li>user：用户</li>
<li>group：组</li>
<li>others：其他</li>
</ul>
<p>那么我们就可以使用 <strong>u, g, o</strong> 来代表三种身份的权限。</p>
<p>此外， <strong>a</strong> 则代表 <strong>all</strong>，即全部的身份。读写的权限可以写成 <strong>r, w, x</strong>，也就是可以使用下表的方式来看：</p>
<table>
<thead>
<tr>
<th>chmod</th>
<th>u g o a</th>
<th>+(加入) -(除去) &#x3D;(设定)</th>
<th>r w x</th>
<th>文件或目录</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>如果我们需要将文件权限设置为 <strong>-rwxr-xr–</strong> ，可以使用 <strong>chmod u&#x3D;rwx,g&#x3D;rx,o&#x3D;r 文件名</strong> 来设定:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#  touch test1    // 创建 test1 文件</span><br><span class="line"># ls -al test1    // 查看 test1 默认权限</span><br><span class="line">-rw-r--r-- 1 root root 0 Nov 15 10:32 test1</span><br><span class="line"># chmod u=rwx,g=rx,o=r  test1    // 修改 test1 权限</span><br><span class="line"># ls -al test1</span><br><span class="line">-rwxr-xr-- 1 root root 0 Nov 15 10:32 test1</span><br></pre></td></tr></table></figure>

<p>而如果是要将权限去掉而不改变其他已存在的权限呢？例如要拿掉全部人的可执行权限，则：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#  chmod  a-x test1</span><br><span class="line"># ls -al test1</span><br><span class="line">-rw-r--r-- 1 root root 0 Nov 15 10:32 test1</span><br></pre></td></tr></table></figure>

<h2 id="第五节Linux文件与目录管理"><a href="#第五节Linux文件与目录管理" class="headerlink" title="第五节	Linux文件与目录管理"></a>第五节	Linux文件与目录管理</h2><h3 id="5-1路径"><a href="#5-1路径" class="headerlink" title="5.1	路径"></a>5.1	路径</h3><p>我们知道 Linux 的目录结构为树状结构，最顶级的目录为根目录 **&#x2F;**。</p>
<p>其他目录通过挂载可以将它们添加到树中，通过解除挂载可以移除它们。</p>
<p>在开始本教程前我们需要先知道什么是绝对路径与相对路径。</p>
<ul>
<li><p><strong>绝对路径：</strong><br>  路径的写法，由根目录 <strong>&#x2F;</strong> 写起，例如： &#x2F;usr&#x2F;share&#x2F;doc 这个目录。</p>
</li>
<li><p>  <strong>相对路径：</strong><br>  路径的写法，不是由 <strong>&#x2F;</strong> 写起，例如由 &#x2F;usr&#x2F;share&#x2F;doc 要到 &#x2F;usr&#x2F;share&#x2F;man 底下时，可以写成： <strong>cd ..&#x2F;man</strong> 这就是相对路径的写法。</p>
</li>
</ul>
<h3 id="5-2处理目录的常用命令"><a href="#5-2处理目录的常用命令" class="headerlink" title="5.2	处理目录的常用命令"></a>5.2	处理目录的常用命令</h3><p>接下来我们就来看几个常见的处理目录的命令吧：</p>
<ul>
<li>ls（英文全拼：list files）: 列出目录及文件名</li>
<li>cd（英文全拼：change directory）：切换目录</li>
<li>pwd（英文全拼：print work directory）：显示目前的目录</li>
<li>mkdir（英文全拼：make directory）：创建一个新的目录</li>
<li>rmdir（英文全拼：remove directory）：删除一个空的目录</li>
<li>cp（英文全拼：copy file）: 复制文件或目录</li>
<li>rm（英文全拼：remove）: 删除文件或目录</li>
<li>mv（英文全拼：move file）: 移动文件与目录，或修改文件与目录的名称</li>
</ul>
<p>你可以使用 <em>man [命令]</em> 来查看各个命令的使用文档，如 ：man cp。</p>
<h4 id="ls-列出目录"><a href="#ls-列出目录" class="headerlink" title="ls (列出目录)"></a>ls (列出目录)</h4><p>在Linux系统当中， ls 命令可能是最常被运行的。</p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# ls [-aAdfFhilnrRSt] 目录名称</span><br><span class="line">[root@www ~]# ls [--color=&#123;never,auto,always&#125;] 目录名称</span><br><span class="line">[root@www ~]# ls [--full-time] 目录名称</span><br></pre></td></tr></table></figure>

<p>选项与参数：</p>
<ul>
<li>-a ：全部的文件，连同隐藏文件( 开头为 . 的文件) 一起列出来(常用)</li>
<li>-d ：仅列出目录本身，而不是列出目录内的文件数据(常用)</li>
<li>-l ：长数据串列出，包含文件的属性与权限等等数据；(常用)</li>
</ul>
<p>将目录下的所有文件列出来(含属性与隐藏档)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# ls -al ~</span><br></pre></td></tr></table></figure>

<h4 id="cd-切换目录"><a href="#cd-切换目录" class="headerlink" title="cd (切换目录)"></a>cd (切换目录)</h4><p>cd是Change Directory的缩写，这是用来变换工作目录的命令。</p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> cd [相对路径或绝对路径]</span><br><span class="line">#使用 mkdir 命令创建 runoob 目录</span><br><span class="line">[root@www ~]# mkdir runoob</span><br><span class="line"></span><br><span class="line">#使用绝对路径切换到 runoob 目录</span><br><span class="line">[root@www ~]# cd /root/runoob/</span><br><span class="line"></span><br><span class="line">#使用相对路径切换到 runoob 目录</span><br><span class="line">[root@www ~]# cd ./runoob/</span><br><span class="line"></span><br><span class="line"># 表示回到自己的家目录，亦即是 /root 这个目录</span><br><span class="line">[root@www runoob]# cd ~</span><br><span class="line"></span><br><span class="line"># 表示去到目前的上一级目录，亦即是 /root 的上一级目录的意思；</span><br><span class="line">[root@www ~]# cd ..</span><br></pre></td></tr></table></figure>

<p>接下来大家多操作几次应该就可以很好的理解 cd 命令的。</p>
<h4 id="pwd-显示目前所在的目录"><a href="#pwd-显示目前所在的目录" class="headerlink" title="pwd (显示目前所在的目录)"></a>pwd (显示目前所在的目录)</h4><p>pwd 是 <strong>Print Working Directory</strong> 的缩写，也就是显示目前所在目录的命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# pwd [-P]</span><br></pre></td></tr></table></figure>

<p>选项与参数：</p>
<ul>
<li><strong>-P</strong> ：显示出确实的路径，而非使用链接 (link) 路径。</li>
</ul>
<p>实例：单纯显示出目前的工作目录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# pwd</span><br><span class="line">/root   &lt;== 显示出目录啦～</span><br></pre></td></tr></table></figure>

<p>实例显示出实际的工作目录，而非链接档本身的目录名而已。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# cd /var/mail   &lt;==注意，/var/mail是一个链接档</span><br><span class="line">[root@www mail]# pwd</span><br><span class="line">/var/mail         &lt;==列出目前的工作目录</span><br><span class="line">[root@www mail]# pwd -P</span><br><span class="line">/var/spool/mail   &lt;==怎么回事？有没有加 -P 差很多～</span><br><span class="line">[root@www mail]# ls -ld /var/mail</span><br><span class="line">lrwxrwxrwx 1 root root 10 Sep  4 17:54 /var/mail -&gt; spool/mail</span><br><span class="line"># 看到这里应该知道为啥了吧？因为 /var/mail 是链接档，链接到 /var/spool/mail </span><br><span class="line"># 所以，加上 pwd -P 的选项后，会不以链接档的数据显示，而是显示正确的完整路径啊！</span><br></pre></td></tr></table></figure>

<h4 id="mkdir-创建新目录"><a href="#mkdir-创建新目录" class="headerlink" title="mkdir (创建新目录)"></a>mkdir (创建新目录)</h4><p>如果想要创建新的目录的话，那么就使用mkdir (make directory)吧。</p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir [-mp] 目录名称</span><br></pre></td></tr></table></figure>

<p>选项与参数：</p>
<ul>
<li>-m ：配置文件的权限喔！直接配置，不需要看默认权限 (umask) 的脸色～</li>
<li>-p ：帮助你直接将所需要的目录(包含上一级目录)递归创建起来！</li>
</ul>
<p>实例：请到&#x2F;tmp底下尝试创建数个新目录看看：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# cd /tmp</span><br><span class="line">[root@www tmp]# mkdir test    &lt;==创建一名为 test 的新目录</span><br><span class="line">[root@www tmp]# mkdir test1/test2/test3/test4</span><br><span class="line">mkdir: cannot create directory `test1/test2/test3/test4&#x27;: </span><br><span class="line">No such file or directory       &lt;== 没办法直接创建此目录啊！</span><br><span class="line">[root@www tmp]# mkdir -p test1/test2/test3/test4</span><br></pre></td></tr></table></figure>

<p>加了这个 -p 的选项，可以自行帮你创建多层目录！</p>
<p>实例：创建权限为 <strong>rwx–x–x</strong> 的目录。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www tmp]# mkdir -m 711 test2</span><br><span class="line">[root@www tmp]# ls -l</span><br><span class="line">drwxr-xr-x  3 root  root 4096 Jul 18 12:50 test</span><br><span class="line">drwxr-xr-x  3 root  root 4096 Jul 18 12:53 test1</span><br><span class="line">drwx--x--x  2 root  root 4096 Jul 18 12:54 test2</span><br></pre></td></tr></table></figure>

<p>上面的权限部分，如果没有加上 -m 来强制配置属性，系统会使用默认属性。</p>
<p>如果我们使用 -m ，如上例我们给予 -m 711 来给予新的目录 drwx–x–x 的权限。</p>
<h4 id="rmdir-删除空的目录"><a href="#rmdir-删除空的目录" class="headerlink" title="rmdir (删除空的目录)"></a>rmdir (删除空的目录)</h4><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rmdir [-p] 目录名称</span><br></pre></td></tr></table></figure>

<p>选项与参数：</p>
<ul>
<li><strong>-p ：</strong>从该目录起，一次删除多级空目录</li>
</ul>
<p>删除 runoob 目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www tmp]# rmdir runoob/</span><br></pre></td></tr></table></figure>

<p>将 mkdir 实例中创建的目录(&#x2F;tmp 底下)删除掉！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www tmp]# ls -l   &lt;==看看有多少目录存在？</span><br><span class="line">drwxr-xr-x  3 root  root 4096 Jul 18 12:50 test</span><br><span class="line">drwxr-xr-x  3 root  root 4096 Jul 18 12:53 test1</span><br><span class="line">drwx--x--x  2 root  root 4096 Jul 18 12:54 test2</span><br><span class="line">[root@www tmp]# rmdir test   &lt;==可直接删除掉，没问题</span><br><span class="line">[root@www tmp]# rmdir test1  &lt;==因为尚有内容，所以无法删除！</span><br><span class="line">rmdir: `test1&#x27;: Directory not empty</span><br><span class="line">[root@www tmp]# rmdir -p test1/test2/test3/test4</span><br><span class="line">[root@www tmp]# ls -l        &lt;==您看看，底下的输出中test与test1不见了！</span><br><span class="line">drwx--x--x  2 root  root 4096 Jul 18 12:54 test2</span><br></pre></td></tr></table></figure>

<p>利用 -p 这个选项，立刻就可以将 test1&#x2F;test2&#x2F;test3&#x2F;test4 一次删除。</p>
<p>不过要注意的是，这个 rmdir 仅能删除空的目录，你可以使用 rm 命令来删除非空目录。</p>
<h4 id="cp-复制文件或目录"><a href="#cp-复制文件或目录" class="headerlink" title="cp (复制文件或目录)"></a>cp (复制文件或目录)</h4><p>cp 即拷贝文件和目录。</p>
<p>语法:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# cp [-adfilprsu] 来源档(source) 目标档(destination)</span><br><span class="line">[root@www ~]# cp [options] source1 source2 source3 .... directory</span><br></pre></td></tr></table></figure>

<p>选项与参数：</p>
<ul>
<li><strong>-a：</strong>相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)</li>
<li><strong>-d：</strong>若来源档为链接档的属性(link file)，则复制链接档属性而非文件本身；</li>
<li><strong>-f：</strong>为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</li>
<li><strong>-i：</strong>若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</li>
<li><strong>-l：</strong>进行硬式链接(hard link)的链接档创建，而非复制文件本身；</li>
<li><strong>-p：</strong>连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</li>
<li><strong>-r：</strong>递归持续复制，用於目录的复制行为；(常用)</li>
<li><strong>-s：</strong>复制成为符号链接档 (symbolic link)，亦即『捷径』文件；</li>
<li><strong>-u：</strong>若 destination 比 source 旧才升级 destination ！</li>
</ul>
<p>用 root 身份，将 root 目录下的 .bashrc 复制到 &#x2F;tmp 下，并命名为 bashrc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# cp ~/.bashrc /tmp/bashrc</span><br><span class="line">[root@www ~]# cp -i ~/.bashrc /tmp/bashrc</span><br><span class="line">cp: overwrite `/tmp/bashrc&#x27;? n  &lt;==n不覆盖，y为覆盖</span><br></pre></td></tr></table></figure>

<h4 id="rm-移除文件或目录"><a href="#rm-移除文件或目录" class="headerlink" title="rm (移除文件或目录)"></a>rm (移除文件或目录)</h4><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm [-fir] 文件或目录</span><br></pre></td></tr></table></figure>

<p>选项与参数：</p>
<ul>
<li>-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；</li>
<li>-i ：互动模式，在删除前会询问使用者是否动作</li>
<li>-r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！</li>
<li></li>
</ul>
<p>将刚刚在 cp 的实例中创建的 bashrc 删除掉！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www tmp]# rm -i bashrc</span><br><span class="line">rm: remove regular file `bashrc&#x27;? y</span><br></pre></td></tr></table></figure>

<p>如果加上 -i 的选项就会主动询问喔，避免你删除到错误的档名！</p>
<h4 id="mv-移动文件与目录，或修改名称"><a href="#mv-移动文件与目录，或修改名称" class="headerlink" title="mv (移动文件与目录，或修改名称)"></a>mv (移动文件与目录，或修改名称)</h4><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# mv [-fiu] source destination</span><br><span class="line">[root@www ~]# mv [options] source1 source2 source3 .... directory</span><br></pre></td></tr></table></figure>

<p>选项与参数：</p>
<ul>
<li>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</li>
<li>-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</li>
<li>-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)</li>
</ul>
<p>复制一文件，创建一目录，将文件移动到目录中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# cd /tmp</span><br><span class="line">[root@www tmp]# cp ~/.bashrc bashrc</span><br><span class="line">[root@www tmp]# mkdir mvtest</span><br><span class="line">[root@www tmp]# mv bashrc mvtest</span><br></pre></td></tr></table></figure>

<p>将某个文件移动到某个目录去，就是这样做！</p>
<p>将刚刚的目录名称更名为 mvtest2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www tmp]# mv mvtest mvtest2</span><br></pre></td></tr></table></figure>

<h3 id="5-3Linux-文件内容查看"><a href="#5-3Linux-文件内容查看" class="headerlink" title="5.3	Linux 文件内容查看"></a>5.3	Linux 文件内容查看</h3><p>Linux系统中使用以下命令来查看文件的内容：</p>
<ul>
<li>cat 由第一行开始显示文件内容</li>
<li>tac 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</li>
<li>nl  显示的时候，顺道输出行号！</li>
<li>more 一页一页的显示文件内容</li>
<li>less 与 more 类似，但是比 more 更好的是，他可以往前翻页！</li>
<li>head 只看头几行</li>
<li>tail 只看尾巴几行</li>
</ul>
<p>你可以使用 *man [命令]*来查看各个命令的使用文档，如 ：man cp。</p>
<h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h4><p>由第一行开始显示文件内容</p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat [-AbEnTv]</span><br></pre></td></tr></table></figure>

<p>选项与参数：</p>
<ul>
<li>-A ：相当於 -vET 的整合选项，可列出一些特殊字符而不是空白而已；</li>
<li>-b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！</li>
<li>-E ：将结尾的断行字节 $ 显示出来；</li>
<li>-n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同；</li>
<li>-T ：将 [tab] 按键以 ^I 显示出来；</li>
<li>-v ：列出一些看不出来的特殊字符</li>
</ul>
<p>检看 &#x2F;etc&#x2F;issue 这个文件的内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# cat /etc/issue</span><br><span class="line">CentOS release 6.4 (Final)</span><br><span class="line">Kernel \r on an \m</span><br></pre></td></tr></table></figure>

<h4 id="tac"><a href="#tac" class="headerlink" title="tac"></a>tac</h4><p>tac与cat命令刚好相反，文件内容从最后一行开始显示，可以看出 tac 是 cat 的倒着写！如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# tac /etc/issue</span><br><span class="line"></span><br><span class="line">Kernel \r on an \m</span><br><span class="line">CentOS release 6.4 (Final)</span><br></pre></td></tr></table></figure>

<h4 id="nl"><a href="#nl" class="headerlink" title="nl"></a>nl</h4><p>显示行号</p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nl [-bnw] 文件</span><br></pre></td></tr></table></figure>

<p>选项与参数：</p>
<ul>
<li>-b ：指定行号指定的方式，主要有两种：<br>  -b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；<br>  -b t ：如果有空行，空的那一行不要列出行号(默认值)；</li>
<li>-n ：列出行号表示的方法，主要有三种：<br>  -n ln ：行号在荧幕的最左方显示；<br>  -n rn ：行号在自己栏位的最右方显示，且不加 0 ；<br>  -n rz ：行号在自己栏位的最右方显示，且加 0 ；</li>
<li>-w ：行号栏位的占用的位数。</li>
</ul>
<p>实例一：用 nl 列出 &#x2F;etc&#x2F;issue 的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# nl /etc/issue</span><br><span class="line">     1  CentOS release 6.4 (Final)</span><br><span class="line">     2  Kernel \r on an \m</span><br></pre></td></tr></table></figure>

<h4 id="more"><a href="#more" class="headerlink" title="more"></a>more</h4><p>一页一页翻动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# more /etc/man_db.config </span><br><span class="line">#</span><br><span class="line"># Generated automatically from man.conf.in by the</span><br><span class="line"># configure script.</span><br><span class="line">#</span><br><span class="line"># man.conf from man-1.6d</span><br><span class="line">....(中间省略)....</span><br><span class="line">--More--(28%)  &lt;== 重点在这一行喔！你的光标也会在这里等待你的命令</span><br></pre></td></tr></table></figure>

<p>在 more 这个程序的运行过程中，你有几个按键可以按的：</p>
<ul>
<li>空白键 (space)：代表向下翻一页；</li>
<li>Enter     ：代表向下翻『一行』；</li>
<li>&#x2F;字串     ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；</li>
<li>:f      ：立刻显示出档名以及目前显示的行数；</li>
<li>q       ：代表立刻离开 more ，不再显示该文件内容。</li>
<li>b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。</li>
</ul>
<h4 id="less"><a href="#less" class="headerlink" title="less"></a>less</h4><p>一页一页翻动，以下实例输出&#x2F;etc&#x2F;man.config文件的内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# less /etc/man.config</span><br><span class="line">#</span><br><span class="line"># Generated automatically from man.conf.in by the</span><br><span class="line"># configure script.</span><br><span class="line">#</span><br><span class="line"># man.conf from man-1.6d</span><br><span class="line">....(中间省略)....</span><br><span class="line">:   &lt;== 这里可以等待你输入命令！</span><br></pre></td></tr></table></figure>

<p>less运行时可以输入的命令有：</p>
<ul>
<li>空白键  ：向下翻动一页；</li>
<li>[pagedown]：向下翻动一页；</li>
<li>[pageup] ：向上翻动一页；</li>
<li>&#x2F;字串   ：向下搜寻『字串』的功能；</li>
<li>?字串   ：向上搜寻『字串』的功能；</li>
<li>n     ：重复前一个搜寻 (与 &#x2F; 或 ? 有关！)</li>
<li>N     ：反向的重复前一个搜寻 (与 &#x2F; 或 ? 有关！)</li>
<li>q     ：离开 less 这个程序；</li>
</ul>
<h4 id="head"><a href="#head" class="headerlink" title="head"></a>head</h4><p>取出文件前面几行</p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">head [-n number] 文件 </span><br></pre></td></tr></table></figure>

<p>选项与参数：</p>
<ul>
<li>-n ：后面接数字，代表显示几行的意思</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# head /etc/man.config</span><br></pre></td></tr></table></figure>

<p>默认的情况中，显示前面 10 行！若要显示前 20 行，就得要这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# head -n 20 /etc/man.config</span><br></pre></td></tr></table></figure>

<h4 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h4><p>取出文件后面几行</p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tail [-n number] 文件 </span><br></pre></td></tr></table></figure>

<p>选项与参数：</p>
<ul>
<li>-n ：后面接数字，代表显示几行的意思</li>
<li>-f ：表示持续侦测后面所接的档名，要等到按下[ctrl]-c才会结束tail的侦测</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# tail /etc/man.config</span><br><span class="line"># 默认的情况中，显示最后的十行！若要显示最后的 20 行，就得要这样：</span><br><span class="line">[root@www ~]# tail -n 20 /etc/man.config</span><br></pre></td></tr></table></figure>

<h2 id="第六节Linux用户和用户组管理"><a href="#第六节Linux用户和用户组管理" class="headerlink" title="第六节	Linux用户和用户组管理"></a>第六节	Linux用户和用户组管理</h2><p>Linux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</p>
<p>用户的账号一方面可以帮助系统管理员对使用系统的用户进行跟踪，并控制他们对系统资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护。</p>
<p>每个用户账号都拥有一个唯一的用户名和各自的口令。</p>
<p>用户在登录时键入正确的用户名和口令后，就能够进入系统和自己的主目录。</p>
<p>实现用户账号的管理，要完成的工作主要有如下几个方面：</p>
<ul>
<li>用户账号的添加、删除与修改。</li>
<li>用户口令的管理。</li>
<li>用户组的管理。</li>
</ul>
<h3 id="6-1Linux系统用户账号的管理"><a href="#6-1Linux系统用户账号的管理" class="headerlink" title="6.1	Linux系统用户账号的管理"></a>6.1	Linux系统用户账号的管理</h3><p>用户账号的管理工作主要涉及到用户账号的添加、修改和删除。</p>
<p>添加用户账号就是在系统中创建一个新账号，然后为新账号分配用户号、用户组、主目录和登录Shell等资源。刚添加的账号是被锁定的，无法使用。</p>
<h4 id="1、添加新的用户账号使用useradd命令，其语法如下："><a href="#1、添加新的用户账号使用useradd命令，其语法如下：" class="headerlink" title="1、添加新的用户账号使用useradd命令，其语法如下："></a>1、添加新的用户账号使用useradd命令，其语法如下：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">useradd 选项 用户名</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li><p>选项:</p>
<ul>
<li>-c comment 指定一段注释性描述。</li>
<li>-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</li>
<li>-g 用户组 指定用户所属的用户组。</li>
<li>-G 用户组，用户组 指定用户所属的附加组。</li>
<li>-s Shell文件 指定用户的登录Shell。</li>
<li>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</li>
</ul>
</li>
<li><p>用户名:</p>
<p>  指定新账号的登录名。</p>
</li>
</ul>
<h4 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># useradd –d  /home/sam -m sam</span><br></pre></td></tr></table></figure>

<p>此命令创建了一个用户sam，其中-d和-m选项用来为登录名sam产生一个主目录 &#x2F;home&#x2F;sam（&#x2F;home为默认的用户主目录所在的父目录）。</p>
<h4 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># useradd -s /bin/sh -g group –G adm,root gem</span><br></pre></td></tr></table></figure>

<p>此命令新建了一个用户gem，该用户的登录Shell是 <code>/bin/sh</code>，它属于group用户组，同时又属于adm和root用户组，其中group用户组是其主组。</p>
<p>这里可能新建组：<code>#groupadd group及groupadd adm</code></p>
<p>增加用户账号就是在&#x2F;etc&#x2F;passwd文件中为新用户增加一条记录，同时更新其他系统文件如&#x2F;etc&#x2F;shadow, &#x2F;etc&#x2F;group等。</p>
<p>Linux提供了集成的系统管理工具userconf，它可以用来对用户账号进行统一管理。</p>
<h4 id="2、删除帐号"><a href="#2、删除帐号" class="headerlink" title="2、删除帐号"></a>2、删除帐号</h4><p>如果一个用户的账号不再使用，可以从系统中删除。删除用户账号就是要将&#x2F;etc&#x2F;passwd等系统文件中的该用户记录删除，必要时还删除用户的主目录。</p>
<p>删除一个已有的用户账号使用<code>userdel</code>命令，其格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">userdel 选项 用户名</span><br></pre></td></tr></table></figure>

<p>常用的选项是 <strong>-r</strong>，它的作用是把用户的主目录一起删除。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># userdel -r sam</span><br></pre></td></tr></table></figure>

<p>此命令删除用户sam在系统文件中（主要是&#x2F;etc&#x2F;passwd, &#x2F;etc&#x2F;shadow, &#x2F;etc&#x2F;group等）的记录，同时删除用户的主目录。</p>
<h4 id="3、修改帐号"><a href="#3、修改帐号" class="headerlink" title="3、修改帐号"></a>3、修改帐号</h4><p>修改用户账号就是根据实际情况更改用户的有关属性，如用户号、主目录、用户组、登录Shell等。</p>
<p>修改已有用户的信息使用<code>usermod</code>命令，其格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">usermod 选项 用户名</span><br></pre></td></tr></table></figure>

<p>常用的选项包括<code>-c, -d, -m, -g, -G, -s, -u以及-o等</code>，这些选项的意义与<code>useradd</code>命令中的选项一样，可以为用户指定新的资源值。</p>
<p>另外，有些系统可以使用选项：-l 新用户名</p>
<p>这个选项指定一个新的账号，即将原来的用户名改为新的用户名。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># usermod -s /bin/ksh -d /home/z –g developer sam</span><br></pre></td></tr></table></figure>

<p>此命令将用户sam的登录Shell修改为ksh，主目录改为&#x2F;home&#x2F;z，用户组改为developer。</p>
<h4 id="4、用户口令的管理"><a href="#4、用户口令的管理" class="headerlink" title="4、用户口令的管理"></a>4、用户口令的管理</h4><p>用户管理的一项重要内容是用户口令的管理。用户账号刚创建时没有口令，但是被系统锁定，无法使用，必须为其指定口令后才可以使用，即使是指定空口令。</p>
<p>指定和修改用户口令的Shell命令是<code>passwd</code>。超级用户可以为自己和其他用户指定口令，普通用户只能用它修改自己的口令。命令的格式为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">passwd 选项 用户名</span><br></pre></td></tr></table></figure>

<p>可使用的选项：</p>
<ul>
<li>-l 锁定口令，即禁用账号。</li>
<li>-u 口令解锁。</li>
<li>-d 使账号无口令。</li>
<li>-f 强迫用户下次登录时修改口令。</li>
</ul>
<p>如果默认用户名，则修改当前用户的口令。</p>
<p>例如，假设当前用户是sam，则下面的命令修改该用户自己的口令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ passwd </span><br><span class="line">Old password:****** </span><br><span class="line">New password:******* </span><br><span class="line">Re-enter new password:*******</span><br></pre></td></tr></table></figure>

<p>如果是超级用户，可以用下列形式指定任何用户的口令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># passwd sam </span><br><span class="line">New password:******* </span><br><span class="line">Re-enter new password:*******</span><br></pre></td></tr></table></figure>

<p>普通用户修改自己的口令时，passwd命令会先询问原口令，验证后再要求用户输入两遍新口令，如果两次输入的口令一致，则将这个口令指定给用户；而超级用户为用户指定口令时，就不需要知道原口令。</p>
<p>为了系统安全起见，用户应该选择比较复杂的口令，例如最好使用8位长的口令，口令中包含有大写、小写字母和数字，并且应该与姓名、生日等不相同。</p>
<p>为用户指定空口令时，执行下列形式的命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># passwd -d sam</span><br></pre></td></tr></table></figure>

<p>此命令将用户 sam 的口令删除，这样用户 sam 下一次登录时，系统就不再允许该用户登录了。</p>
<p>passwd 命令还可以用 -l(lock) 选项锁定某一用户，使其不能登录，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># passwd -l sam</span><br></pre></td></tr></table></figure>

<h3 id="6-2Linux系统用户组的管理"><a href="#6-2Linux系统用户组的管理" class="headerlink" title="6.2	Linux系统用户组的管理"></a>6.2	Linux系统用户组的管理</h3><p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同Linux 系统对用户组的规定有所不同，如Linux下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。</p>
<p>用户组的管理涉及用户组的添加、删除和修改。组的增加、删除和修改实际上就是对&#x2F;etc&#x2F;group文件的更新。</p>
<h4 id="1、增加一个新的用户组使用groupadd命令。其格式如下："><a href="#1、增加一个新的用户组使用groupadd命令。其格式如下：" class="headerlink" title="1、增加一个新的用户组使用groupadd命令。其格式如下："></a>1、增加一个新的用户组使用groupadd命令。其格式如下：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">groupadd 选项 用户组</span><br></pre></td></tr></table></figure>

<p>可以使用的选项有：</p>
<ul>
<li>-g GID 指定新用户组的组标识号（GID）。</li>
<li>-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同。</li>
</ul>
<h4 id="实例1："><a href="#实例1：" class="headerlink" title="实例1："></a>实例1：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># groupadd group1</span><br></pre></td></tr></table></figure>

<p>此命令向系统中增加了一个新组group1，新组的组标识号是在当前已有的最大组标识号的基础上加1。</p>
<h4 id="实例2："><a href="#实例2：" class="headerlink" title="实例2："></a>实例2：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># groupadd -g 101 group2</span><br></pre></td></tr></table></figure>

<p>此命令向系统中增加了一个新组group2，同时指定新组的组标识号是101。</p>
<h4 id="2、如果要删除一个已有的用户组，使用groupdel命令，其格式如下："><a href="#2、如果要删除一个已有的用户组，使用groupdel命令，其格式如下：" class="headerlink" title="2、如果要删除一个已有的用户组，使用groupdel命令，其格式如下："></a>2、如果要删除一个已有的用户组，使用groupdel命令，其格式如下：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">groupdel 用户组</span><br></pre></td></tr></table></figure>

<h4 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># groupdel group1</span><br></pre></td></tr></table></figure>

<p>此命令从系统中删除组group1。</p>
<h4 id="3、修改用户组的属性使用groupmod命令。其语法如下："><a href="#3、修改用户组的属性使用groupmod命令。其语法如下：" class="headerlink" title="3、修改用户组的属性使用groupmod命令。其语法如下："></a>3、修改用户组的属性使用groupmod命令。其语法如下：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">groupmod 选项 用户组</span><br></pre></td></tr></table></figure>

<p>常用的选项有：</p>
<ul>
<li>-g GID 为用户组指定新的组标识号。</li>
<li>-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。</li>
<li>-n新用户组 将用户组的名字改为新名字</li>
</ul>
<h4 id="实例1：-1"><a href="#实例1：-1" class="headerlink" title="实例1："></a>实例1：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># groupmod -g 102 group2</span><br></pre></td></tr></table></figure>

<p>此命令将组group2的组标识号修改为102。</p>
<h4 id="实例2：-1"><a href="#实例2：-1" class="headerlink" title="实例2："></a>实例2：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># groupmod –g 10000 -n group3 group2</span><br></pre></td></tr></table></figure>

<p>此命令将组group2的标识号改为10000，组名修改为group3。</p>
<h4 id="4、如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。"><a href="#4、如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。" class="headerlink" title="4、如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。"></a>4、如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。</h4><p>用户可以在登录后，使用命令newgrp切换到其他用户组，这个命令的参数就是目的用户组。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ newgrp root</span><br></pre></td></tr></table></figure>

<p>这条命令将当前用户切换到root用户组，前提条件是root用户组确实是该用户的主组或附加组。类似于用户账号的管理，用户组的管理也可以通过集成的系统管理工具来完成。</p>
<h3 id="6-3与用户账号有关的系统文件"><a href="#6-3与用户账号有关的系统文件" class="headerlink" title="6.3	与用户账号有关的系统文件"></a>6.3	与用户账号有关的系统文件</h3><p>完成用户管理的工作有许多种方法，但是每一种方法实际上都是对有关的系统文件进行修改。</p>
<p>与用户和用户组相关的信息都存放在一些系统文件中，这些文件包括&#x2F;etc&#x2F;passwd, &#x2F;etc&#x2F;shadow, &#x2F;etc&#x2F;group等。</p>
<p>下面分别介绍这些文件的内容。</p>
<h4 id="1、-etc-passwd文件是用户管理工作涉及的最重要的一个文件。"><a href="#1、-etc-passwd文件是用户管理工作涉及的最重要的一个文件。" class="headerlink" title="1、&#x2F;etc&#x2F;passwd文件是用户管理工作涉及的最重要的一个文件。"></a>1、&#x2F;etc&#x2F;passwd文件是用户管理工作涉及的最重要的一个文件。</h4><p>Linux系统中的每个用户都在&#x2F;etc&#x2F;passwd文件中有一个对应的记录行，它记录了这个用户的一些基本属性。</p>
<p>这个文件对所有用户都是可读的。它的内容类似下面的例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">＃ cat /etc/passwd</span><br><span class="line"></span><br><span class="line">root:x:0:0:Superuser:/:</span><br><span class="line">daemon:x:1:1:System daemons:/etc:</span><br><span class="line">bin:x:2:2:Owner of system commands:/bin:</span><br><span class="line">sys:x:3:3:Owner of system files:/usr/sys:</span><br><span class="line">adm:x:4:4:System accounting:/usr/adm:</span><br><span class="line">uucp:x:5:5:UUCP administrator:/usr/lib/uucp:</span><br><span class="line">auth:x:7:21:Authentication administrator:/tcb/files/auth:</span><br><span class="line">cron:x:9:16:Cron daemon:/usr/spool/cron:</span><br><span class="line">listen:x:37:4:Network daemon:/usr/net/nls:</span><br><span class="line">lp:x:71:18:Printer administrator:/usr/spool/lp:</span><br><span class="line">sam:x:200:50:Sam san:/home/sam:/bin/sh</span><br></pre></td></tr></table></figure>

<p>从上面的例子我们可以看到，&#x2F;etc&#x2F;passwd中一行记录对应着一个用户，每行记录又被冒号(:)分隔为7个字段，其格式和具体含义如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell</span><br></pre></td></tr></table></figure>

<h4 id="1）”用户名”是代表用户账号的字符串。"><a href="#1）”用户名”是代表用户账号的字符串。" class="headerlink" title="1）”用户名”是代表用户账号的字符串。"></a>1）”用户名”是代表用户账号的字符串。</h4><p>通常长度不超过8个字符，并且由大小写字母和&#x2F;或数字组成。登录名中不能有冒号(:)，因为冒号在这里是分隔符。</p>
<p>为了兼容起见，登录名中最好不要包含点字符(.)，并且不使用连字符(-)和加号(+)打头。</p>
<h4 id="2）“口令”一些系统中，存放着加密后的用户口令字。"><a href="#2）“口令”一些系统中，存放着加密后的用户口令字。" class="headerlink" title="2）“口令”一些系统中，存放着加密后的用户口令字。"></a>2）“口令”一些系统中，存放着加密后的用户口令字。</h4><p>虽然这个字段存放的只是用户口令的加密串，不是明文，但是由于&#x2F;etc&#x2F;passwd文件对所有用户都可读，所以这仍是一个安全隐患。因此，现在许多Linux 系统（如SVR4）都使用了shadow技术，把真正的加密后的用户口令字存放到&#x2F;etc&#x2F;shadow文件中，而在&#x2F;etc&#x2F;passwd文件的口令字段中只存放一个特殊的字符，例如“x”或者“*”。</p>
<h4 id="3）“用户标识号”是一个整数，系统内部用它来标识用户。"><a href="#3）“用户标识号”是一个整数，系统内部用它来标识用户。" class="headerlink" title="3）“用户标识号”是一个整数，系统内部用它来标识用户。"></a>3）“用户标识号”是一个整数，系统内部用它来标识用户。</h4><p>一般情况下它与用户名是一一对应的。如果几个用户名对应的用户标识号是一样的，系统内部将把它们视为同一个用户，但是它们可以有不同的口令、不同的主目录以及不同的登录Shell等。</p>
<p>通常用户标识号的取值范围是0～65 535。0是超级用户root的标识号，1～99由系统保留，作为管理账号，普通用户的标识号从100开始。在Linux系统中，这个界限是500。</p>
<h4 id="4）“组标识号”字段记录的是用户所属的用户组。"><a href="#4）“组标识号”字段记录的是用户所属的用户组。" class="headerlink" title="4）“组标识号”字段记录的是用户所属的用户组。"></a>4）“组标识号”字段记录的是用户所属的用户组。</h4><p>它对应着&#x2F;etc&#x2F;group文件中的一条记录。</p>
<h4 id="5-“注释性描述”字段记录着用户的一些个人情况。"><a href="#5-“注释性描述”字段记录着用户的一些个人情况。" class="headerlink" title="5)“注释性描述”字段记录着用户的一些个人情况。"></a>5)“注释性描述”字段记录着用户的一些个人情况。</h4><p>例如用户的真实姓名、电话、地址等，这个字段并没有什么实际的用途。在不同的Linux 系统中，这个字段的格式并没有统一。在许多Linux系统中，这个字段存放的是一段任意的注释性描述文字，用做finger命令的输出。</p>
<h4 id="6-“主目录”，也就是用户的起始工作目录。"><a href="#6-“主目录”，也就是用户的起始工作目录。" class="headerlink" title="6)“主目录”，也就是用户的起始工作目录。"></a>6)“主目录”，也就是用户的起始工作目录。</h4><p>它是用户在登录到系统之后所处的目录。在大多数系统中，各用户的主目录都被组织在同一个特定的目录下，而用户主目录的名称就是该用户的登录名。各用户对自己的主目录有读、写、执行（搜索）权限，其他用户对此目录的访问权限则根据具体情况设置。</p>
<h4 id="7-用户登录后，要启动一个进程，负责将用户的操作传给内核，这个进程是用户登录到系统后运行的命令解释器或某个特定的程序，即Shell。"><a href="#7-用户登录后，要启动一个进程，负责将用户的操作传给内核，这个进程是用户登录到系统后运行的命令解释器或某个特定的程序，即Shell。" class="headerlink" title="7)用户登录后，要启动一个进程，负责将用户的操作传给内核，这个进程是用户登录到系统后运行的命令解释器或某个特定的程序，即Shell。"></a>7)用户登录后，要启动一个进程，负责将用户的操作传给内核，这个进程是用户登录到系统后运行的命令解释器或某个特定的程序，即Shell。</h4><p>Shell是用户与Linux系统之间的接口。Linux的Shell有许多种，每种都有不同的特点。常用的有sh(Bourne Shell), csh(C Shell), ksh(Korn Shell), tcsh(TENEX&#x2F;TOPS-20 type C Shell), bash(Bourne Again Shell)等。</p>
<p>系统管理员可以根据系统情况和用户习惯为用户指定某个Shell。如果不指定Shell，那么系统使用sh为默认的登录Shell，即这个字段的值为&#x2F;bin&#x2F;sh。</p>
<p>用户的登录Shell也可以指定为某个特定的程序（此程序不是一个命令解释器）。</p>
<p>利用这一特点，我们可以限制用户只能运行指定的应用程序，在该应用程序运行结束后，用户就自动退出了系统。有些Linux 系统要求只有那些在系统中登记了的程序才能出现在这个字段中。</p>
<h4 id="8-系统中有一类用户称为伪用户（pseudo-users）。"><a href="#8-系统中有一类用户称为伪用户（pseudo-users）。" class="headerlink" title="8)系统中有一类用户称为伪用户（pseudo users）。"></a>8)系统中有一类用户称为伪用户（pseudo users）。</h4><p>这些用户在&#x2F;etc&#x2F;passwd文件中也占有一条记录，但是不能登录，因为它们的登录Shell为空。它们的存在主要是方便系统管理，满足相应的系统进程对文件属主的要求。</p>
<p>常见的伪用户如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">伪 用 户 含 义 </span><br><span class="line">bin 拥有可执行的用户命令文件 </span><br><span class="line">sys 拥有系统文件 </span><br><span class="line">adm 拥有帐户文件 </span><br><span class="line">uucp UUCP使用 </span><br><span class="line">lp lp或lpd子系统使用 </span><br><span class="line">nobody NFS使用</span><br></pre></td></tr></table></figure>

<h3 id="6-4拥有帐户文件"><a href="#6-4拥有帐户文件" class="headerlink" title="6.4	拥有帐户文件"></a>6.4	拥有帐户文件</h3><p><strong>1、除了上面列出的伪用户外，还有许多标准的伪用户，例如：audit, cron, mail, usenet等，它们也都各自为相关的进程和文件所需要。</strong></p>
<p>由于&#x2F;etc&#x2F;passwd文件是所有用户都可读的，如果用户的密码太简单或规律比较明显的话，一台普通的计算机就能够很容易地将它破解，因此对安全性要求较高的Linux系统都把加密后的口令字分离出来，单独存放在一个文件中，这个文件是&#x2F;etc&#x2F;shadow文件。 有超级用户才拥有该文件读权限，这就保证了用户密码的安全性。</p>
<p><strong>2、&#x2F;etc&#x2F;shadow中的记录行与&#x2F;etc&#x2F;passwd中的一一对应，它由pwconv命令根据&#x2F;etc&#x2F;passwd中的数据自动产生</strong></p>
<p>它的文件格式与&#x2F;etc&#x2F;passwd类似，由若干个字段组成，字段之间用”:”隔开。这些字段是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</span><br></pre></td></tr></table></figure>

<ol>
<li>“登录名”是与&#x2F;etc&#x2F;passwd文件中的登录名相一致的用户账号</li>
<li>“口令”字段存放的是加密后的用户口令字，长度为13个字符。如果为空，则对应用户没有口令，登录时不需要口令；如果含有不属于集合 { .&#x2F;0-9A-Za-z }中的字符，则对应的用户不能登录。</li>
<li>“最后一次修改时间”表示的是从某个时刻起，到用户最后一次修改口令时的天数。时间起点对不同的系统可能不一样。例如在SCO Linux 中，这个时间起点是1970年1月1日。</li>
<li>“最小时间间隔”指的是两次修改口令之间所需的最小天数。</li>
<li>“最大时间间隔”指的是口令保持有效的最大天数。</li>
<li>“警告时间”字段表示的是从系统开始警告用户到用户密码正式失效之间的天数。</li>
<li>“不活动时间”表示的是用户没有登录活动但账号仍能保持有效的最大天数。</li>
<li>“失效时间”字段给出的是一个绝对的天数，如果使用了这个字段，那么就给出相应账号的生存期。期满后，该账号就不再是一个合法的账号，也就不能再用来登录了。</li>
</ol>
<p>下面是&#x2F;etc&#x2F;shadow的一个例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">＃ cat /etc/shadow</span><br><span class="line"></span><br><span class="line">root:Dnakfw28zf38w:8764:0:168:7:::</span><br><span class="line">daemon:*::0:0::::</span><br><span class="line">bin:*::0:0::::</span><br><span class="line">sys:*::0:0::::</span><br><span class="line">adm:*::0:0::::</span><br><span class="line">uucp:*::0:0::::</span><br><span class="line">nuucp:*::0:0::::</span><br><span class="line">auth:*::0:0::::</span><br><span class="line">cron:*::0:0::::</span><br><span class="line">listen:*::0:0::::</span><br><span class="line">lp:*::0:0::::</span><br><span class="line">sam:EkdiSECLWPdSa:9740:0:0::::</span><br></pre></td></tr></table></figure>

<h4 id="3、用户组的所有信息都存放在-etc-group文件中。"><a href="#3、用户组的所有信息都存放在-etc-group文件中。" class="headerlink" title="3、用户组的所有信息都存放在&#x2F;etc&#x2F;group文件中。"></a>3、用户组的所有信息都存放在&#x2F;etc&#x2F;group文件中。</h4><p>将用户分组是Linux 系统中对用户进行管理及控制访问权限的一种手段。</p>
<p>每个用户都属于某个用户组；一个组中可以有多个用户，一个用户也可以属于不同的组。</p>
<p>当一个用户同时是多个组中的成员时，在&#x2F;etc&#x2F;passwd文件中记录的是用户所属的主组，也就是登录时所属的默认组，而其他组称为附加组。</p>
<p>用户要访问属于附加组的文件时，必须首先使用newgrp命令使自己成为所要访问的组中的成员。</p>
<p>用户组的所有信息都存放在&#x2F;etc&#x2F;group文件中。此文件的格式也类似于&#x2F;etc&#x2F;passwd文件，由冒号(:)隔开若干个字段，这些字段有：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">组名:口令:组标识号:组内用户列表</span><br></pre></td></tr></table></figure>

<ol>
<li>“组名”是用户组的名称，由字母或数字构成。与&#x2F;etc&#x2F;passwd中的登录名一样，组名不应重复。</li>
<li>“口令”字段存放的是用户组加密后的口令字。一般Linux 系统的用户组都没有口令，即这个字段一般为空，或者是*。</li>
<li>“组标识号”与用户标识号类似，也是一个整数，被系统内部用来标识组。</li>
<li>“组内用户列表”是属于这个组的所有用户的列表，不同用户之间用逗号(,)分隔。这个用户组可能是用户的主组，也可能是附加组。</li>
</ol>
<p>&#x2F;etc&#x2F;group文件的一个例子如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root::0:root</span><br><span class="line">bin::2:root,bin</span><br><span class="line">sys::3:root,uucp</span><br><span class="line">adm::4:root,adm</span><br><span class="line">daemon::5:root,daemon</span><br><span class="line">lp::7:root,lp</span><br><span class="line">users::20:root,sam</span><br></pre></td></tr></table></figure>

<h3 id="6-5添加批量用户"><a href="#6-5添加批量用户" class="headerlink" title="6.5	添加批量用户"></a>6.5	添加批量用户</h3><p>添加和删除用户对每位Linux系统管理员都是轻而易举的事，比较棘手的是如果要添加几十个、上百个甚至上千个用户时，我们不太可能还使用useradd一个一个地添加，必然要找一种简便的创建大量用户的方法。Linux系统提供了创建大量用户的工具，可以让您立即创建大量用户，方法如下：</p>
<h4 id="（1）先编辑一个文本用户文件。"><a href="#（1）先编辑一个文本用户文件。" class="headerlink" title="（1）先编辑一个文本用户文件。"></a>（1）先编辑一个文本用户文件。</h4><p>每一列按照<code>/etc/passwd</code>密码文件的格式书写，要注意每个用户的用户名、UID、宿主目录都不可以相同，其中密码栏可以留做空白或输入x号。一个范例文件user.txt内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user001::600:100:user:/home/user001:/bin/bash</span><br><span class="line">user002::601:100:user:/home/user002:/bin/bash</span><br><span class="line">user003::602:100:user:/home/user003:/bin/bash</span><br><span class="line">user004::603:100:user:/home/user004:/bin/bash</span><br><span class="line">user005::604:100:user:/home/user005:/bin/bash</span><br><span class="line">user006::605:100:user:/home/user006:/bin/bash</span><br></pre></td></tr></table></figure>

<h4 id="（2）以root身份执行命令-usr-sbin-newusers，从刚创建的用户文件user-txt中导入数据，创建用户："><a href="#（2）以root身份执行命令-usr-sbin-newusers，从刚创建的用户文件user-txt中导入数据，创建用户：" class="headerlink" title="（2）以root身份执行命令 /usr/sbin/newusers，从刚创建的用户文件user.txt中导入数据，创建用户："></a>（2）以root身份执行命令 <code>/usr/sbin/newusers</code>，从刚创建的用户文件<code>user.txt</code>中导入数据，创建用户：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># newusers &lt; user.txt</span><br></pre></td></tr></table></figure>

<p>然后可以执行命令 <code>vipw</code> 或 <code>vi /etc/passwd</code> 检查 <code>/etc/passwd</code> 文件是否已经出现这些用户的数据，并且用户的宿主目录是否已经创建。</p>
<h4 id="（3）执行命令-usr-sbin-pwunconv。"><a href="#（3）执行命令-usr-sbin-pwunconv。" class="headerlink" title="（3）执行命令&#x2F;usr&#x2F;sbin&#x2F;pwunconv。"></a>（3）执行命令&#x2F;usr&#x2F;sbin&#x2F;pwunconv。</h4><p>将 <code>/etc/shadow</code> 产生的 <code>shadow</code> 密码解码，然后回写到 <code>/etc/passwd</code> 中，并将<code>/etc/shadow</code>的<code>shadow</code>密码栏删掉。这是为了方便下一步的密码转换工作，即先取消 <code>shadow password</code> 功能。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># pwunconv</span><br></pre></td></tr></table></figure>

<h4 id="（4）编辑每个用户的密码对照文件。"><a href="#（4）编辑每个用户的密码对照文件。" class="headerlink" title="（4）编辑每个用户的密码对照文件。"></a>（4）编辑每个用户的密码对照文件。</h4><p>格式为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用户名:密码</span><br></pre></td></tr></table></figure>

<p>实例文件 <code>passwd.txt</code> 内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user001:123456</span><br><span class="line">user002:123456</span><br><span class="line">user003:123456</span><br><span class="line">user004:123456</span><br><span class="line">user005:123456</span><br><span class="line">user006:123456</span><br></pre></td></tr></table></figure>

<h4 id="（5）以-root-身份执行命令-usr-sbin-chpasswd。"><a href="#（5）以-root-身份执行命令-usr-sbin-chpasswd。" class="headerlink" title="（5）以 root 身份执行命令 /usr/sbin/chpasswd。"></a>（5）以 root 身份执行命令 <code>/usr/sbin/chpasswd</code>。</h4><p>创建用户密码，<code>chpasswd</code> 会将经过 <code>/usr/bin/passwd</code> 命令编码过的密码写入 <code>/etc/passwd</code> 的密码栏。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># chpasswd &lt; passwd.txt</span><br></pre></td></tr></table></figure>

<h4 id="（6）确定密码经编码写入-etc-passwd的密码栏后。"><a href="#（6）确定密码经编码写入-etc-passwd的密码栏后。" class="headerlink" title="（6）确定密码经编码写入&#x2F;etc&#x2F;passwd的密码栏后。"></a>（6）确定密码经编码写入&#x2F;etc&#x2F;passwd的密码栏后。</h4><p>执行命令 <code>/usr/sbin/pwconv</code> 将密码编码为 <code>shadow password</code>，并将结果写入 <code>/etc/shadow</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># pwconv</span><br></pre></td></tr></table></figure>

<p>这样就完成了大量用户的创建了，之后您可以到&#x2F;home下检查这些用户宿主目录的权限设置是否都正确，并登录验证用户密码是否正确。</p>
<h2 id="第七节Linux磁盘管理"><a href="#第七节Linux磁盘管理" class="headerlink" title="第七节	Linux磁盘管理"></a>第七节	Linux磁盘管理</h2><h3 id="7-1df"><a href="#7-1df" class="headerlink" title="7.1	df"></a>7.1	df</h3><p>df命令参数功能：检查文件系统的磁盘空间占用情况。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df [-ahikHTm] [目录或文件名]</span><br></pre></td></tr></table></figure>

<p>选项与参数：</p>
<ul>
<li>-a ：列出所有的文件系统，包括系统特有的 &#x2F;proc 等文件系统；</li>
<li>-k ：以 KBytes 的容量显示各文件系统；</li>
<li>-m ：以 MBytes 的容量显示各文件系统；</li>
<li>-h ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；</li>
<li>-H ：以 M&#x3D;1000K 取代 M&#x3D;1024K 的进位方式；</li>
<li>-T ：显示文件系统类型, 连同该 partition 的 filesystem 名称 (例如 ext3) 也列出；</li>
<li>-i ：不用硬盘容量，而以 inode 的数量来显示</li>
</ul>
<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例 1"></a>实例 1</h4><p>将系统内所有的文件系统列出来！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# df</span><br><span class="line">Filesystem      1K-blocks      Used Available Use% Mounted on</span><br><span class="line">/dev/hdc2         9920624   3823112   5585444  41% /</span><br><span class="line">/dev/hdc3         4956316    141376   4559108   4% /home</span><br><span class="line">/dev/hdc1          101086     11126     84741  12% /boot</span><br><span class="line">tmpfs              371332         0    371332   0% /dev/shm</span><br></pre></td></tr></table></figure>

<p>在 Linux 底下如果 df 没有加任何选项，那么默认会将系统内所有的 (不含特殊内存内的文件系统与 swap) 都以 1 Kbytes 的容量来列出来！</p>
<h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例 2"></a>实例 2</h4><p>将容量结果以易读的容量格式显示出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# df -h</span><br><span class="line">Filesystem            Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/hdc2             9.5G  3.7G  5.4G  41% /</span><br><span class="line">/dev/hdc3             4.8G  139M  4.4G   4% /home</span><br><span class="line">/dev/hdc1              99M   11M   83M  12% /boot</span><br><span class="line">tmpfs                 363M     0  363M   0% /dev/shm</span><br></pre></td></tr></table></figure>

<h4 id="实例-3"><a href="#实例-3" class="headerlink" title="实例 3"></a>实例 3</h4><p>将系统内的所有特殊文件格式及名称都列出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# df -aT</span><br><span class="line">Filesystem    Type 1K-blocks    Used Available Use% Mounted on</span><br><span class="line">/dev/hdc2     ext3   9920624 3823112   5585444  41% /</span><br><span class="line">proc          proc         0       0         0   -  /proc</span><br><span class="line">sysfs        sysfs         0       0         0   -  /sys</span><br><span class="line">devpts      devpts         0       0         0   -  /dev/pts</span><br><span class="line">/dev/hdc3     ext3   4956316  141376   4559108   4% /home</span><br><span class="line">/dev/hdc1     ext3    101086   11126     84741  12% /boot</span><br><span class="line">tmpfs        tmpfs    371332       0    371332   0% /dev/shm</span><br><span class="line">none   binfmt_misc         0       0         0   -  /proc/sys/fs/binfmt_misc</span><br><span class="line">sunrpc  rpc_pipefs         0       0         0   -  /var/lib/nfs/rpc_pipefs</span><br></pre></td></tr></table></figure>

<h4 id="实例-4"><a href="#实例-4" class="headerlink" title="实例 4"></a>实例 4</h4><p>将 &#x2F;etc 底下的可用的磁盘容量以易读的容量格式显示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# df -h /etc</span><br><span class="line">Filesystem            Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/hdc2             9.5G  3.7G  5.4G  41% /</span><br></pre></td></tr></table></figure>

<h3 id="7-2du"><a href="#7-2du" class="headerlink" title="7.2	du"></a>7.2	du</h3><p>Linux du 命令也是查看使用空间的，但是与 df 命令不同的是 Linux du 命令是对文件和目录磁盘使用的空间的查看，还是和df命令有一些区别的，这里介绍 Linux du 命令。</p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">du [-ahskm] 文件或目录名称</span><br></pre></td></tr></table></figure>

<p>选项与参数：</p>
<ul>
<li>-a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。</li>
<li>-h ：以人们较易读的容量格式 (G&#x2F;M) 显示；</li>
<li>-s ：列出总量而已，而不列出每个各别的目录占用容量；</li>
<li>-S ：不包括子目录下的总计，与 -s 有点差别。</li>
<li>-k ：以 KBytes 列出容量显示；</li>
<li>-m ：以 MBytes 列出容量显示；</li>
</ul>
<h4 id="实例-1-1"><a href="#实例-1-1" class="headerlink" title="实例 1"></a>实例 1</h4><p>只列出当前目录下的所有文件夹容量（包括隐藏文件夹）:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# du</span><br><span class="line">8       ./test4     &lt;==每个目录都会列出来</span><br><span class="line">8       ./test2</span><br><span class="line">....中间省略....</span><br><span class="line">12      ./.gconfd   &lt;==包括隐藏文件的目录</span><br><span class="line">220     .           &lt;==这个目录(.)所占用的总量</span><br></pre></td></tr></table></figure>

<p>直接输入 du 没有加任何选项时，则 du 会分析当前所在目录里的子目录所占用的硬盘空间。</p>
<h4 id="实例-2-1"><a href="#实例-2-1" class="headerlink" title="实例 2"></a>实例 2</h4><p>将文件的容量也列出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# du -a</span><br><span class="line">12      ./install.log.syslog   &lt;==有文件的列表了</span><br><span class="line">8       ./.bash_logout</span><br><span class="line">8       ./test4</span><br><span class="line">8       ./test2</span><br><span class="line">....中间省略....</span><br><span class="line">12      ./.gconfd</span><br><span class="line">220     .</span><br></pre></td></tr></table></figure>

<h4 id="实例-3-1"><a href="#实例-3-1" class="headerlink" title="实例 3"></a>实例 3</h4><p>检查根目录底下每个目录所占用的容量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# du -sm /*</span><br><span class="line">7       /bin</span><br><span class="line">6       /boot</span><br><span class="line">.....中间省略....</span><br><span class="line">0       /proc</span><br><span class="line">.....中间省略....</span><br><span class="line">1       /tmp</span><br><span class="line">3859    /usr     &lt;==系统初期最大就是他了啦！</span><br><span class="line">77      /var</span><br></pre></td></tr></table></figure>

<p>通配符 * 来代表每个目录。</p>
<p>与 df 不一样的是，du 这个命令其实会直接到文件系统内去搜寻所有的文件数据。</p>
<h3 id="7-3fdisk"><a href="#7-3fdisk" class="headerlink" title="7.3	fdisk"></a>7.3	fdisk</h3><p>fdisk 是 Linux 的磁盘分区表操作工具。</p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fdisk [-l] 装置名称</span><br></pre></td></tr></table></figure>

<p>选项与参数：</p>
<ul>
<li>-l ：输出后面接的装置所有的分区内容。若仅有 fdisk -l 时， 则系统将会把整个系统内能够搜寻到的装置的分区均列出来。</li>
</ul>
<h4 id="实例-1-2"><a href="#实例-1-2" class="headerlink" title="实例 1"></a>实例 1</h4><p>列出所有分区信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@AY120919111755c246621 tmp]# fdisk -l</span><br><span class="line"></span><br><span class="line">Disk /dev/xvda: 21.5 GB, 21474836480 bytes</span><br><span class="line">255 heads, 63 sectors/track, 2610 cylinders</span><br><span class="line">Units = cylinders of 16065 * 512 = 8225280 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk identifier: 0x00000000</span><br><span class="line"></span><br><span class="line">    Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/xvda1   *           1        2550    20480000   83  Linux</span><br><span class="line">/dev/xvda2            2550        2611      490496   82  Linux swap / Solaris</span><br><span class="line"></span><br><span class="line">Disk /dev/xvdb: 21.5 GB, 21474836480 bytes</span><br><span class="line">255 heads, 63 sectors/track, 2610 cylinders</span><br><span class="line">Units = cylinders of 16065 * 512 = 8225280 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk identifier: 0x56f40944</span><br><span class="line"></span><br><span class="line">    Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/xvdb2               1        2610    20964793+  83  Linux</span><br></pre></td></tr></table></figure>

<h4 id="实例-2-2"><a href="#实例-2-2" class="headerlink" title="实例 2"></a>实例 2</h4><p>找出你系统中的根目录所在磁盘，并查阅该硬盘内的相关信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# df /            &lt;==注意：重点在找出磁盘文件名而已</span><br><span class="line">Filesystem           1K-blocks      Used Available Use% Mounted on</span><br><span class="line">/dev/hdc2              9920624   3823168   5585388  41% /</span><br><span class="line"></span><br><span class="line">[root@www ~]# fdisk /dev/hdc  &lt;==仔细看，不要加上数字喔！</span><br><span class="line">The number of cylinders for this disk is set to 5005.</span><br><span class="line">There is nothing wrong with that, but this is larger than 1024,</span><br><span class="line">and could in certain setups cause problems with:</span><br><span class="line">1) software that runs at boot time (e.g., old versions of LILO)</span><br><span class="line">2) booting and partitioning software from other OSs</span><br><span class="line">   (e.g., DOS FDISK, OS/2 FDISK)</span><br><span class="line"></span><br><span class="line">Command (m for help):     &lt;==等待你的输入！</span><br></pre></td></tr></table></figure>

<p>输入 m 后，就会看到底下这些命令介绍</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Command (m for help): m   &lt;== 输入 m 后，就会看到底下这些命令介绍</span><br><span class="line">Command action</span><br><span class="line">   a   toggle a bootable flag</span><br><span class="line">   b   edit bsd disklabel</span><br><span class="line">   c   toggle the dos compatibility flag</span><br><span class="line">   d   delete a partition            &lt;==删除一个partition</span><br><span class="line">   l   list known partition types</span><br><span class="line">   m   print this menu</span><br><span class="line">   n   add a new partition           &lt;==新增一个partition</span><br><span class="line">   o   create a new empty DOS partition table</span><br><span class="line">   p   print the partition table     &lt;==在屏幕上显示分割表</span><br><span class="line">   q   quit without saving changes   &lt;==不储存离开fdisk程序</span><br><span class="line">   s   create a new empty Sun disklabel</span><br><span class="line">   t   change a partition&#x27;s system id</span><br><span class="line">   u   change display/entry units</span><br><span class="line">   v   verify the partition table</span><br><span class="line">   w   write table to disk and exit  &lt;==将刚刚的动作写入分割表</span><br><span class="line">   x   extra functionality (experts only)</span><br></pre></td></tr></table></figure>

<p>离开 fdisk 时按下 <code>q</code>，那么所有的动作都不会生效！相反的， 按下<code>w</code>就是动作生效的意思。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Command (m for help): p  &lt;== 这里可以输出目前磁盘的状态</span><br><span class="line"></span><br><span class="line">Disk /dev/hdc: 41.1 GB, 41174138880 bytes        &lt;==这个磁盘的文件名与容量</span><br><span class="line">255 heads, 63 sectors/track, 5005 cylinders      &lt;==磁头、扇区与磁柱大小</span><br><span class="line">Units = cylinders of 16065 * 512 = 8225280 bytes &lt;==每个磁柱的大小</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/hdc1   *           1          13      104391   83  Linux</span><br><span class="line">/dev/hdc2              14        1288    10241437+  83  Linux</span><br><span class="line">/dev/hdc3            1289        1925     5116702+  83  Linux</span><br><span class="line">/dev/hdc4            1926        5005    24740100    5  Extended</span><br><span class="line">/dev/hdc5            1926        2052     1020096   82  Linux swap / Solaris</span><br><span class="line"># 装置文件名 启动区否 开始磁柱    结束磁柱  1K大小容量 磁盘分区槽内的系统</span><br><span class="line"></span><br><span class="line">Command (m for help): q</span><br></pre></td></tr></table></figure>

<p>想要不储存离开吗？按下 q 就对了！不要随便按 w 啊！</p>
<p>使用 <code>p</code> 可以列出目前这颗磁盘的分割表信息，这个信息的上半部在显示整体磁盘的状态。</p>
<h3 id="7-4磁盘格式化"><a href="#7-4磁盘格式化" class="headerlink" title="7.4	磁盘格式化"></a>7.4	磁盘格式化</h3><p>磁盘分割完毕后自然就是要进行文件系统的格式化，格式化的命令非常的简单，使用 <code>mkfs</code>（make filesystem） 命令。</p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkfs [-t 文件系统格式] 装置文件名</span><br></pre></td></tr></table></figure>

<p>选项与参数：</p>
<ul>
<li>-t ：可以接文件系统格式，例如 ext3, ext2, vfat 等(系统有支持才会生效)</li>
</ul>
<h4 id="实例-1-3"><a href="#实例-1-3" class="headerlink" title="实例 1"></a>实例 1</h4><p>查看 mkfs 支持的文件格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# mkfs[tab][tab]</span><br><span class="line">mkfs         mkfs.cramfs  mkfs.ext2    mkfs.ext3    mkfs.msdos   mkfs.vfat</span><br></pre></td></tr></table></figure>

<p>按下两个[tab]，会发现 mkfs 支持的文件格式如上所示。</p>
<h4 id="实例-2-3"><a href="#实例-2-3" class="headerlink" title="实例 2"></a>实例 2</h4><p>将分区 &#x2F;dev&#x2F;hdc6（可指定你自己的分区） 格式化为 ext3 文件系统：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# mkfs -t ext3 /dev/hdc6</span><br><span class="line">mke2fs 1.39 (29-May-2006)</span><br><span class="line">Filesystem label=                &lt;==这里指的是分割槽的名称(label)</span><br><span class="line">OS type: Linux</span><br><span class="line">Block size=4096 (log=2)          &lt;==block 的大小配置为 4K </span><br><span class="line">Fragment size=4096 (log=2)</span><br><span class="line">251392 inodes, 502023 blocks     &lt;==由此配置决定的inode/block数量</span><br><span class="line">25101 blocks (5.00%) reserved for the super user</span><br><span class="line">First data block=0</span><br><span class="line">Maximum filesystem blocks=515899392</span><br><span class="line">16 block groups</span><br><span class="line">32768 blocks per group, 32768 fragments per group</span><br><span class="line">15712 inodes per group</span><br><span class="line">Superblock backups stored on blocks:</span><br><span class="line">        32768, 98304, 163840, 229376, 294912</span><br><span class="line"></span><br><span class="line">Writing inode tables: done</span><br><span class="line">Creating journal (8192 blocks): done &lt;==有日志记录</span><br><span class="line">Writing superblocks and filesystem accounting information: done</span><br><span class="line"></span><br><span class="line">This filesystem will be automatically checked every 34 mounts or</span><br><span class="line">180 days, whichever comes first.  Use tune2fs -c or -i to override.</span><br><span class="line"># 这样就创建起来我们所需要的 Ext3 文件系统了！简单明了！</span><br></pre></td></tr></table></figure>

<h3 id="7-5磁盘检验"><a href="#7-5磁盘检验" class="headerlink" title="7.5	磁盘检验"></a>7.5	磁盘检验</h3><p>fsck（file system check）用来检查和维护不一致的文件系统。</p>
<p>若系统掉电或磁盘发生问题，可利用fsck命令对文件系统进行检查。</p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fsck [-t 文件系统] [-ACay] 装置名称</span><br></pre></td></tr></table></figure>

<p>选项与参数：</p>
<ul>
<li>-t : 给定档案系统的型式，若在 &#x2F;etc&#x2F;fstab 中已有定义或 kernel 本身已支援的则不需加上此参数</li>
<li>-s : 依序一个一个地执行 fsck 的指令来检查</li>
<li>-A : 对&#x2F;etc&#x2F;fstab 中所有列出来的 分区（partition）做检查</li>
<li>-C : 显示完整的检查进度</li>
<li>-d : 打印出 e2fsck 的 debug 结果</li>
<li>-p : 同时有 -A 条件时，同时有多个 fsck 的检查一起执行</li>
<li>-R : 同时有 -A 条件时，省略 &#x2F; 不检查</li>
<li>-V : 详细显示模式</li>
<li>-a : 如果检查有错则自动修复</li>
<li>-r : 如果检查有错则由使用者回答是否修复</li>
<li>-y : 选项指定检测每个文件是自动输入yes，在不确定那些是不正常的时候，可以执行 # fsck -y 全部检查修复。</li>
</ul>
<h4 id="实例-1-4"><a href="#实例-1-4" class="headerlink" title="实例 1"></a>实例 1</h4><p>查看系统有多少文件系统支持的 fsck 命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# fsck[tab][tab]</span><br><span class="line">fsck         fsck.cramfs  fsck.ext2    fsck.ext3    fsck.msdos   fsck.vfat</span><br></pre></td></tr></table></figure>

<h4 id="实例-2-4"><a href="#实例-2-4" class="headerlink" title="实例 2"></a>实例 2</h4><p>强制检测 &#x2F;dev&#x2F;hdc6 分区:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# fsck -C -f -t ext3 /dev/hdc6 </span><br><span class="line">fsck 1.39 (29-May-2006)</span><br><span class="line">e2fsck 1.39 (29-May-2006)</span><br><span class="line">Pass 1: Checking inodes, blocks, and sizes</span><br><span class="line">Pass 2: Checking directory structure</span><br><span class="line">Pass 3: Checking directory connectivity</span><br><span class="line">Pass 4: Checking reference counts</span><br><span class="line">Pass 5: Checking group summary information</span><br><span class="line">vbird_logical: 11/251968 files (9.1% non-contiguous), 36926/1004046 blocks</span><br></pre></td></tr></table></figure>

<p>如果没有加上 -f 的选项，则由于这个文件系统不曾出现问题，检查的经过非常快速！若加上 -f 强制检查，才会一项一项的显示过程。</p>
<h3 id="7-6磁盘挂载与卸除"><a href="#7-6磁盘挂载与卸除" class="headerlink" title="7.6	磁盘挂载与卸除"></a>7.6	磁盘挂载与卸除</h3><p>Linux 的磁盘挂载使用 <code>mount</code> 命令，卸载使用 <code>umount</code> 命令。</p>
<p>磁盘挂载语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mount [-t 文件系统] [-L Label名] [-o 额外选项] [-n]  装置文件名  挂载点</span><br></pre></td></tr></table></figure>

<h4 id="实例-1-5"><a href="#实例-1-5" class="headerlink" title="实例 1"></a>实例 1</h4><p>用默认的方式，将刚刚创建的 &#x2F;dev&#x2F;hdc6 挂载到 &#x2F;mnt&#x2F;hdc6 上面！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# mkdir /mnt/hdc6</span><br><span class="line">[root@www ~]# mount /dev/hdc6 /mnt/hdc6</span><br><span class="line">[root@www ~]# df</span><br><span class="line">Filesystem           1K-blocks      Used Available Use% Mounted on</span><br><span class="line">.....中间省略.....</span><br><span class="line">/dev/hdc6              1976312     42072   1833836   3% /mnt/hdc6</span><br></pre></td></tr></table></figure>

<p>磁盘卸载命令 <code>umount</code> 语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">umount [-fn] 装置文件名或挂载点</span><br></pre></td></tr></table></figure>

<p>选项与参数：</p>
<ul>
<li>-f ：强制卸除！可用在类似网络文件系统 (NFS) 无法读取到的情况下；</li>
<li>-n ：不升级 &#x2F;etc&#x2F;mtab 情况下卸除。</li>
</ul>
<p>卸载&#x2F;dev&#x2F;hdc6</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# umount /dev/hdc6     </span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Mermaid</title>
    <url>/2024/01/28/Mermaid/</url>
    <content><![CDATA[<h2 id="第一节Mermaid简介"><a href="#第一节Mermaid简介" class="headerlink" title="第一节	Mermaid简介"></a>第一节	Mermaid简介</h2><p><strong>Mermaid</strong> 是一个用于画流程图、状态图、时序图、甘特图的库，使用 <strong>JS</strong> 进行本地渲染，广泛集成于许多 <strong>Markdown</strong> 编辑器中<br><strong>Mermaid</strong> 作为一个使用 <strong>JS</strong> 渲染的库，生成的不是一个图片，而是一段 <strong>HTML</strong> 代码，因此安全许多</p>
<h2 id="第二节流程图graph"><a href="#第二节流程图graph" class="headerlink" title="第二节	流程图graph"></a>第二节	流程图graph</h2><p>关键字 <strong>graph</strong> 表示一个流程图的开始</p>
<h3 id="2-1圆的方向"><a href="#2-1圆的方向" class="headerlink" title="2.1	圆的方向"></a>2.1	圆的方向</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">TB，从上到下</span><br><span class="line">BT，从下到上</span><br><span class="line">RL，从右到左</span><br><span class="line">LR，从左到右</span><br></pre></td></tr></table></figure>

<p>示例如下</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">    A--&gt;B</span><br><span class="line">    B--&gt;C</span><br><span class="line">    C--&gt;D</span><br><span class="line">    D--&gt;A</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">    A--&gt;B</span><br><span class="line">    B--&gt;C</span><br><span class="line">    C--&gt;D</span><br><span class="line">    D--&gt;A</span><br></pre></td></tr></table></figure>

<h3 id="2-2节点形状"><a href="#2-2节点形状" class="headerlink" title="2.2	节点形状"></a>2.2	节点形状</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">id[text]	矩形节点，也是默认节点形状</span><br><span class="line">id(text)	圆角矩形节点</span><br><span class="line">id((text))	圆形节点</span><br><span class="line">id&gt;text]	右向旗帜状节点</span><br><span class="line">id&#123;text&#125;	菱形节点</span><br><span class="line"></span><br><span class="line">id 是当前节点名字，类似于变量名，画图时便于引用</span><br><span class="line">text 是节点中显示的文字，默认节点的名字和显示的文字都为A</span><br></pre></td></tr></table></figure>

<p>示例如下</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">    A</span><br><span class="line">    B[bname]</span><br><span class="line">    C(cname)</span><br><span class="line">    D((dname))</span><br><span class="line">    E&gt;ename]</span><br><span class="line">    F&#123;fname&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">    A</span><br><span class="line">    B[bname]</span><br><span class="line">    C(cname)</span><br><span class="line">    D((dname))</span><br><span class="line">    E&gt;ename]</span><br><span class="line">    F&#123;fname&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3连线"><a href="#2-3连线" class="headerlink" title="2.3	连线"></a>2.3	连线</h3><p>节点间的连接线有多种形状，可以在连接线中加入标签：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">箭头连接 A1--&gt;B1</span><br><span class="line">开放连接 A2-B2</span><br><span class="line">标签连接 A3-text-B3</span><br><span class="line">箭头标签连接 A4-text-&gt;B4</span><br><span class="line">虚线开放连接 A5.-B5</span><br><span class="line">虚线箭头连接 A6-.-&gt;B6</span><br><span class="line">标签虚线连接 A7-.text.-B7</span><br><span class="line">标签虚线箭头连接 A8-.text.-&gt;B8</span><br><span class="line">粗线开放连接 A9===B9</span><br><span class="line">粗线箭头连接 A10==&gt;B10</span><br><span class="line">标签粗线开放连接 A11==text===B11</span><br><span class="line">标签粗线箭头连接 A12==text==&gt;B12</span><br></pre></td></tr></table></figure>

<p>示例如下</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">  A1--&gt;B1</span><br><span class="line">  A2--B2</span><br><span class="line">  A3--text--B3</span><br><span class="line">  A4--text--&gt;B4</span><br><span class="line">  A5-.-B5</span><br><span class="line">  A6-.-&gt;B6</span><br><span class="line">  A7-.text.-B7</span><br><span class="line">  A8-.text.-&gt;B8</span><br><span class="line">  A9===B9</span><br><span class="line">  A10==&gt;B10</span><br><span class="line">  A11==text===B11</span><br><span class="line">  A12==text==&gt;B12</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">  A1--&gt;B1</span><br><span class="line">  A2---B2</span><br><span class="line">  A3--text---B3</span><br><span class="line">  A4--text--&gt;B4</span><br><span class="line">  A5-.-B5</span><br><span class="line">  A6-.-&gt;B6</span><br><span class="line">  A7-.text.-B7</span><br><span class="line">  A8-.text.-&gt;B8</span><br><span class="line">  A9===B9</span><br><span class="line">  A10==&gt;B10</span><br><span class="line">  A11==text===B11</span><br><span class="line">  A12==text==&gt;B12</span><br></pre></td></tr></table></figure>

<h2 id="第三节子图subgraph"><a href="#第三节子图subgraph" class="headerlink" title="第三节	子图subgraph"></a>第三节	子图subgraph</h2><p>使用 <strong>subgraph</strong> 关键字表示子图</p>
<p>示例如下</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">  subgraph title1</span><br><span class="line">    a1--&gt;b1 </span><br><span class="line">  end</span><br><span class="line">  subgraph title2</span><br><span class="line">  	b1--&gt;a2</span><br><span class="line">    a2--&gt;b2 </span><br><span class="line">  end</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">  subgraph title1</span><br><span class="line">    a1--&gt;b1 </span><br><span class="line">  end</span><br><span class="line">  subgraph title2</span><br><span class="line">  	b1--&gt;a2</span><br><span class="line">    a2--&gt;b2 </span><br><span class="line">  end</span><br></pre></td></tr></table></figure>

<h2 id="第四节序列图sequence-diagraph"><a href="#第四节序列图sequence-diagraph" class="headerlink" title="第四节	序列图sequence diagraph"></a>第四节	序列图sequence diagraph</h2><p>使用 <strong>sequenceDiagraph</strong> 表示序列图</p>
<h3 id="4-1participant关键字"><a href="#4-1participant关键字" class="headerlink" title="4.1	participant关键字"></a>4.1	participant关键字</h3><p>参与者，相当先定义模块，可通过设定参与者的顺序控制展示顺序</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    participant 参与者 1</span><br><span class="line">    participant 参与者 2</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    participant 参与者 1</span><br><span class="line">    participant 参与者 2</span><br></pre></td></tr></table></figure>

<h3 id="4-2消息线"><a href="#4-2消息线" class="headerlink" title="4.2	消息线"></a>4.2	消息线</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">-&gt;	无箭头的实线</span><br><span class="line">--&gt;	无箭头的虚线</span><br><span class="line">-&gt;&gt;	有箭头的实线</span><br><span class="line">--&gt;&gt;	有箭头的虚线</span><br><span class="line">-X	末端为叉的实线(表示异步)</span><br><span class="line">--X	末端为叉的虚线(表示异步)</span><br></pre></td></tr></table></figure>

<p>示例如下</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">	张三-&gt;李四:吃了吗</span><br><span class="line">	张三--&gt;李四:吃了吗</span><br><span class="line">	张三-&gt;&gt;李四:吃了吗</span><br><span class="line">	张三--&gt;&gt;李四:吃了吗</span><br><span class="line">	张三-X李四:吃了吗</span><br><span class="line">	张三--X李四:吃了吗</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">	张三-&gt;李四:吃了吗</span><br><span class="line">	张三--&gt;李四:吃了吗</span><br><span class="line">	张三-&gt;&gt;李四:吃了吗</span><br><span class="line">	张三--&gt;&gt;李四:吃了吗</span><br><span class="line">	张三-X李四:吃了吗</span><br><span class="line">	张三--X李四:吃了吗</span><br></pre></td></tr></table></figure>

<h3 id="4-3note关键字"><a href="#4-3note关键字" class="headerlink" title="4.3	note关键字"></a>4.3	note关键字</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Note 位置表述 参与者: 标注文字</span><br><span class="line"></span><br><span class="line">其中，位置表述有 right of 右侧,left of 左侧,over 在当中</span><br></pre></td></tr></table></figure>

<p>示例如下</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">	participant 张三</span><br><span class="line">	note right of 张三:右侧</span><br><span class="line">	note left of 张三:左侧</span><br><span class="line">	note over 张三:中间</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">	participant 张三</span><br><span class="line">	note right of 张三:右侧</span><br><span class="line">	note left of 张三:左侧</span><br><span class="line">	note over 张三:中间</span><br></pre></td></tr></table></figure>

<h3 id="4-4循环"><a href="#4-4循环" class="headerlink" title="4.4	循环"></a>4.4	循环</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">loop 循环的条件</span><br><span class="line">    循环体描述语句</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p>示例如下</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    participant z as 张三</span><br><span class="line">    participant l as 李四</span><br><span class="line">    loop 日复一日</span><br><span class="line">        z-&gt;&gt;l: 吃了吗您呐？</span><br><span class="line">        l--&gt;&gt;z: 吃了，您呢？</span><br><span class="line">    end</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    participant z as 张三</span><br><span class="line">    participant l as 李四</span><br><span class="line">    loop 日复一日</span><br><span class="line">        z-&gt;&gt;l: 吃了吗您呐？</span><br><span class="line">        l--&gt;&gt;z: 吃了，您呢？</span><br><span class="line">    end</span><br></pre></td></tr></table></figure>

<h3 id="4-5选择"><a href="#4-5选择" class="headerlink" title="4.5	选择"></a>4.5	选择</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">opt 条件描述</span><br><span class="line">    分支描述语句</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p>多分支情况</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">alt 条件 1 描述</span><br><span class="line">    分支 1 描述语句</span><br><span class="line">else 条件 2 描述</span><br><span class="line">    分支 2 描述语句</span><br><span class="line">else ...</span><br><span class="line">    ...</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p>示例如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">　　Alice-&gt;&gt;Bob: Hello Bob, how are you?</span><br><span class="line">　　alt is sick</span><br><span class="line">　　　　Bob-&gt;&gt;Alice:not so good :(</span><br><span class="line">　　else is well</span><br><span class="line">　　　　Bob-&gt;&gt;Alice:good</span><br><span class="line">　　end</span><br><span class="line">　　opt Extra response</span><br><span class="line">　　　　Bob-&gt;&gt;Alice:Thanks for asking</span><br><span class="line">　　end</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">　　Alice-&gt;&gt;Bob: Hello Bob, how are you?</span><br><span class="line">　　alt is sick</span><br><span class="line">　　　　Bob-&gt;&gt;Alice:not so good :(</span><br><span class="line">　　else is well</span><br><span class="line">　　　　Bob-&gt;&gt;Alice:good</span><br><span class="line">　　end</span><br><span class="line">　　opt Extra response</span><br><span class="line">　　　　Bob-&gt;&gt;Alice:Thanks for asking</span><br><span class="line">　　end</span><br></pre></td></tr></table></figure>

<h2 id="第五节甘特图gantt-diagram"><a href="#第五节甘特图gantt-diagram" class="headerlink" title="第五节	甘特图gantt diagram"></a>第五节	甘特图gantt diagram</h2><p>甘特图是一类条形图，由 <strong>Karol Adamiechi</strong> 在1896年提出，而在1910年 <strong>Henry Gantt</strong> 也独立的提出了此种图形表示，通常用在对项目终端元素和总结元素的开始及完成时间进行的描述，使用 <strong>gantt</strong> 表示甘特图</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">title	标题</span><br><span class="line">dateFormat	日期格式</span><br><span class="line">section	模块</span><br><span class="line">Completed	已经完成</span><br><span class="line">Active	当前正在进行</span><br><span class="line">Future	后续待处理</span><br><span class="line">crit	关键阶段</span><br></pre></td></tr></table></figure>

<p>示例如下</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">gantt</span><br><span class="line">	dateFormat YYYY-MM-DD</span><br><span class="line">    section S1</span><br><span class="line">    T1: 2014-01-01, 9d</span><br><span class="line">    section S2</span><br><span class="line">    T2: 2014-01-11, 9d</span><br><span class="line">    section S3</span><br><span class="line">    T3: 2014-01-02, 9d</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gantt</span><br><span class="line">	dateFormat YYYY-MM-DD</span><br><span class="line">    section S1</span><br><span class="line">    T1: 2014-01-01, 9d</span><br><span class="line">    section S2</span><br><span class="line">    T2: 2014-01-11, 9d</span><br><span class="line">    section S3</span><br><span class="line">    T3: 2014-01-02, 9d</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>批处理</title>
    <url>/2024/01/28/%E6%89%B9%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h2 id="第一节BAT概述"><a href="#第一节BAT概述" class="headerlink" title="第一节	BAT概述"></a>第一节	BAT概述</h2><p>批处理脚本是为了自动执行重复的命令序列，脚本是一种可以通过自动化这些命令序列来减轻这种重复性工作的方法，以便让工作更容易和更高效，在大多数组织中，批处理脚本以某种方式被合并，以实现自动化</p>
<p>批处理脚本的一些功能有</p>
<ul>
<li>可以读取用户的输入，以便进一步处理。</li>
<li>有控制结构：<strong>for</strong> , <strong>if</strong> , <strong>while</strong> 和 <strong>switch</strong> 更好的自动化和脚本</li>
<li>支持高级功能，如函数和数组</li>
<li>支持正则表达式</li>
<li>可以包含其他编程代码，如 <strong>Perl</strong></li>
</ul>
<p>批处理脚本的一些常见用途是</p>
<ul>
<li>为不同的目的设置服务器</li>
<li>自动管理活动和日志，如删除不需要的文件或日志文件</li>
<li>自动将应用程序从一个环境部署到另一个环境</li>
<li>立即在各种机器上安装程序</li>
</ul>
<p>批处理脚本存储在简单的文本文件中，其中包含的命令按顺序依次执行，这些文件具有特殊的扩展名 <strong>.bat</strong> 或 <strong>.cmd</strong>，这种类型的文件通过称为命令解释器的系统文件提供的接口(有时称为 <strong>shell</strong>)来识别和执行，在 <strong>Windows</strong> 系统上，这个解释器被称为 <strong>cmd.exe</strong></p>
<p>运行批处理文件是一个简单的事情，只需双击它即可，批处理文件也可以在命令提示符或“开始 - 运行”行中运行，在这种情况下，除非文件的路径位于路径环境中，否则必须使用完整的路径名称</p>
<h2 id="第二节基础命令总结"><a href="#第二节基础命令总结" class="headerlink" title="第二节	基础命令总结"></a>第二节	基础命令总结</h2><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><p>可以在 <strong>cmd</strong> 窗口中显示消息，也有打开和关闭回显的功能</p>
<p>在屏幕上打印 hello world</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> hello world</span><br></pre></td></tr></table></figure>

<h3 id=""><a href="#" class="headerlink" title="@"></a>@</h3><p>加在其他命令行最前面，表示运行时不显示该命令行本身</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> Now starting the model...</span><br></pre></td></tr></table></figure>

<h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><p>从一个批处理程序调用其他批处理程序，而不终止原来的程序</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="keyword">call</span> D:\Commonsoftware\Anaconda\Scripts\activate.bat</span><br></pre></td></tr></table></figure>

<h3 id="pause"><a href="#pause" class="headerlink" title="pause"></a>pause</h3><p>在执行完命令后显示“请按任意键继续···”字样，该命令一般用来调试程序，确保批处理代码在执行中没有出现任何问题，常放在 <strong>bat</strong> 文件末尾和其他想终止程序的地方</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pause</span><br></pre></td></tr></table></figure>

<h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><p>用于更改进入不同的目录，或显示当前目录</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> program</span><br></pre></td></tr></table></figure>

<h3 id="cls"><a href="#cls" class="headerlink" title="cls"></a>cls</h3><p>清除屏幕</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cls</span></span><br></pre></td></tr></table></figure>

<h3 id="date"><a href="#date" class="headerlink" title="date"></a>date</h3><p>查找系统日期</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">%date%</span></span><br></pre></td></tr></table></figure>

<h3 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h3><p>用于批处理文件中的备注，防止执行备注的内容，常配合 <strong>@</strong> 使用用于批处理文件中的备注，防止执行备注的内容，常配合 <strong>@</strong> 使用</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="comment">@rem this is the command</span></span><br></pre></td></tr></table></figure>

<h3 id="time"><a href="#time" class="headerlink" title="time"></a>time</h3><p>设置或显示时间</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">%time%</span></span><br></pre></td></tr></table></figure>

<h3 id="choice"><a href="#choice" class="headerlink" title="choice"></a>choice</h3><p>为用户提供了一个选项列表</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">choice /c YN /m &quot;<span class="keyword">do</span> you want to continue?&quot;</span><br></pre></td></tr></table></figure>

<h3 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h3><p>关闭计算机，或者注销当前用户</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">shutdown</span><br><span class="line"></span><br><span class="line">/s	关闭计算机</span><br><span class="line">/r	重启计算机</span><br><span class="line">/l	注销当前用户</span><br><span class="line">/t	指定关闭、重启或注销操作执行之前的延迟时间（以秒为单位），默认值为 <span class="number">30</span> 秒</span><br></pre></td></tr></table></figure>

<h3 id="title"><a href="#title" class="headerlink" title="title"></a>title</h3><p>设置控制台窗口中显示的标题</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">title</span> xxx</span><br></pre></td></tr></table></figure>

<h3 id="访问网址"><a href="#访问网址" class="headerlink" title="访问网址"></a>访问网址</h3><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">explorer http://www.baidu.com</span><br></pre></td></tr></table></figure>

<h3 id="执行另一个批处理文件"><a href="#执行另一个批处理文件" class="headerlink" title="执行另一个批处理文件"></a>执行另一个批处理文件</h3><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="keyword">call</span> c:\code\run.bat</span><br></pre></td></tr></table></figure>

<h2 id="第三节变量"><a href="#第三节变量" class="headerlink" title="第三节	变量"></a>第三节	变量</h2><p>批处理文件中有两种类型的变量，其中一个参数是在调用批处理文件时可以传递的参数，另一个是通过 <strong>set</strong> 命令完成的</p>
<h3 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h3><p>批处理脚本支持命令行参数的概念，其中参数可以在被调用时传递给批处理文件，参数可以通过变量 <strong>％1</strong>，<strong>％2</strong>，<strong>％3</strong>等从批处理文件中调用</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off </span><br><span class="line"><span class="built_in">echo</span> %<span class="number">1</span> </span><br><span class="line"><span class="built_in">echo</span> %<span class="number">2</span> </span><br><span class="line"><span class="built_in">echo</span> %<span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>以下是输出结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PS C:\Users\86172\Desktop&gt; .\test.bat aaa bbb ccc</span><br><span class="line">aaa</span><br><span class="line">bbb</span><br><span class="line">ccc</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure>

<h3 id="set命令"><a href="#set命令" class="headerlink" title="set命令"></a>set命令</h3><p>变量可以被初始化的另一种方式是通过 <strong>set</strong> 命令</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off </span><br><span class="line"><span class="built_in">set</span> message=Hello World </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%message%</span></span><br></pre></td></tr></table></figure>

<p>在上面的代码片段中，定义了一个名为<code>“message”</code>的变量，其值为 <strong>Hello World</strong>，要显示变量的值，请注意变量需要包含在 <strong>%</strong> 符号中</p>
<p>以上命令产生以下输出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Hello World</span><br></pre></td></tr></table></figure>

<h3 id="使用数字值"><a href="#使用数字值" class="headerlink" title="使用数字值"></a>使用数字值</h3><p>在批处理脚本中，也可以定义一个变量来保存一个数值，这可以通过使用 <strong>&#x2F;A</strong> 开关完成</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off </span><br><span class="line"><span class="built_in">SET</span> /A a=<span class="number">5</span> </span><br><span class="line"><span class="built_in">SET</span> /A b=<span class="number">10</span> </span><br><span class="line"><span class="built_in">SET</span> /A c=<span class="variable">%a%</span> + <span class="variable">%b%</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%c%</span></span><br></pre></td></tr></table></figure>

<p>首先将<code>2</code>个变量 <strong>a</strong> 和 <strong>b</strong> 的值分别设置为5和10，相加这些值并存储在变量 <strong>c</strong> 中，最后，显示变量 <strong>c</strong> 的值</p>
<p>上述程序的输出结果为15</p>
<h3 id="局部与全局变量"><a href="#局部与全局变量" class="headerlink" title="局部与全局变量"></a>局部与全局变量</h3><p>默认情况下，变量是整个命令提示符会话的全局变量，调用 <strong>SETLOCAL</strong> 命令，使变量局部在脚本的范围内，在调用<strong>SETLOCAL</strong> 之后，任何变量赋值在调用 <strong>ENDLOCAL</strong>，调用 <strong>EXIT</strong>，或者当执行到达脚本中的文件结尾 <strong>EOF</strong> 时都会返回</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off </span><br><span class="line"><span class="built_in">set</span> globalvar=<span class="number">5</span></span><br><span class="line"><span class="built_in">SETLOCAL</span></span><br><span class="line"><span class="built_in">set</span> var=<span class="number">13145</span></span><br><span class="line"><span class="built_in">set</span> /A var=<span class="variable">%var%</span> + <span class="number">5</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%var%</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%globalvar%</span></span><br><span class="line"><span class="built_in">ENDLOCAL</span></span><br></pre></td></tr></table></figure>

<p><strong>globalvar</strong> 是用全局范围定义的，在整个脚本中都是可用的，<strong>var</strong> 变量是在局部范围内定义的，因为它被包含在 <strong>SETLOCAL</strong> 和 <strong>ENDLOCAL</strong> 块之间，这个变量在执行 <strong>ENDLOCAL</strong> 语句后就会被销毁</p>
<p>以上命令产生以下输出。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">13150</span><br><span class="line">5</span><br></pre></td></tr></table></figure>

<h3 id="使用环境变量"><a href="#使用环境变量" class="headerlink" title="使用环境变量"></a>使用环境变量</h3><p>如果有跨批处理文件使用的变量，那么最好使用环境变量，当定义了环境变量，就可以通过 <strong>%</strong> 符号来访问它</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%JAVA_HOME%</span></span><br></pre></td></tr></table></figure>

<h2 id="第四节注释"><a href="#第四节注释" class="headerlink" title="第四节	注释"></a>第四节	注释</h2><h3 id="使用Rem语句注释"><a href="#使用Rem语句注释" class="headerlink" title="使用Rem语句注释"></a>使用Rem语句注释</h3><p><strong>Rem</strong> 语句后的任何文本都将被视为注释，不会被执行</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="comment">Rem Remarks</span></span><br></pre></td></tr></table></figure>

<p>其中 <strong>Remarks</strong> 是需要添加的注释</p>
<h3 id="注释使用-声明"><a href="#注释使用-声明" class="headerlink" title="注释使用::声明"></a>注释使用::声明</h3><p>任何遵循 <strong>::</strong> 语句的文本都将被视为注释，不会被执行</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">:: Remarks</span><br><span class="line">Bat</span><br></pre></td></tr></table></figure>

<p>其中 <strong>Remarks</strong> 是需要添加的注释</p>
<h2 id="第五节字符串"><a href="#第五节字符串" class="headerlink" title="第五节	字符串"></a>第五节	字符串</h2><h3 id="创建字符串"><a href="#创建字符串" class="headerlink" title="创建字符串"></a>创建字符串</h3><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> message=Hello World </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%message%</span></span><br></pre></td></tr></table></figure>

<h3 id="字符串连接"><a href="#字符串连接" class="headerlink" title="字符串连接"></a>字符串连接</h3><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off </span><br><span class="line"><span class="built_in">SET</span> a=Hello </span><br><span class="line"><span class="built_in">SET</span> b=World </span><br><span class="line"><span class="built_in">SET</span> c=<span class="variable">%a%</span> and <span class="variable">%b%</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%c%</span></span><br></pre></td></tr></table></figure>

<p>对应输出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Hello and World</span><br></pre></td></tr></table></figure>

<h3 id="截取字符串"><a href="#截取字符串" class="headerlink" title="截取字符串"></a>截取字符串</h3><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off </span><br><span class="line"><span class="built_in">set</span> str=Helloworld </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%str%</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> str=<span class="variable">%str:~0,5%</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%str%</span></span><br></pre></td></tr></table></figure>

<p>对应输出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Helloworld </span><br><span class="line">Hello</span><br></pre></td></tr></table></figure>

<h3 id="删除字符串"><a href="#删除字符串" class="headerlink" title="删除字符串"></a>删除字符串</h3><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off </span><br><span class="line"><span class="built_in">set</span> str=Batch scripts is easy. It is really easy. </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%str%</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> str=<span class="variable">%str:is=%</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%str%</span></span><br></pre></td></tr></table></figure>

<p>对应输出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Batch scripts is easy. It is really easy. </span><br><span class="line">Batch scripts easy. It really easy.</span><br></pre></td></tr></table></figure>

<h3 id="替换字符串"><a href="#替换字符串" class="headerlink" title="替换字符串"></a>替换字符串</h3><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off </span><br><span class="line"><span class="built_in">set</span> str=This message needs changed. </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%str%</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> str=<span class="variable">%str:needs=has%</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%str%</span></span><br></pre></td></tr></table></figure>

<p>对应输出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">This message needs changed. </span><br><span class="line">This message has changed.</span><br></pre></td></tr></table></figure>

<h2 id="第六节数组"><a href="#第六节数组" class="headerlink" title="第六节	数组"></a>第六节	数组</h2><h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><p>一个数组是通过使用下面的<code>set</code>命令创建的。</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> a[<span class="number">0</span>]=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>其中0是数组的索引，<code>1</code>是分配给数组的第一个元素的值</p>
<h3 id="访问数组"><a href="#访问数组" class="headerlink" title="访问数组"></a>访问数组</h3><p>可以使用下标语法从数组中检索值，并在数组的名称后面立即传递要检索的值的索引</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> a[<span class="number">0</span>]=<span class="number">1</span> </span><br><span class="line"><span class="built_in">set</span> a[<span class="number">1</span>]=<span class="number">2</span> </span><br><span class="line"><span class="built_in">set</span> a[<span class="number">2</span>]=<span class="number">3</span> </span><br><span class="line"><span class="built_in">echo</span> The first element of the array is <span class="variable">%a[0]%</span> </span><br><span class="line"><span class="built_in">echo</span> The second element of the array is <span class="variable">%a[1]%</span> </span><br><span class="line"><span class="built_in">echo</span> The third element of the array is <span class="variable">%a[2]%</span></span><br><span class="line">Bat</span><br></pre></td></tr></table></figure>

<p>以上命令产生以下输出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">The first element of the array is 1 </span><br><span class="line">The second element of the array is 2 </span><br><span class="line">The third element of the array is 3</span><br></pre></td></tr></table></figure>

<h3 id="修改数组"><a href="#修改数组" class="headerlink" title="修改数组"></a>修改数组</h3><p>可以通过在给定索引处指定新值来修改数组的现有元素</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off </span><br><span class="line"><span class="built_in">set</span> a[<span class="number">0</span>]=<span class="number">1</span> </span><br><span class="line"><span class="built_in">set</span> a[<span class="number">1</span>]=<span class="number">2</span> </span><br><span class="line"><span class="built_in">set</span> a[<span class="number">2</span>]=<span class="number">3</span> </span><br><span class="line"><span class="comment">Rem Setting the new value for the second element of the array </span></span><br><span class="line"><span class="built_in">Set</span> a[<span class="number">1</span>]=<span class="number">5</span> </span><br><span class="line"><span class="built_in">echo</span> The new value of the second element of the array is <span class="variable">%a[1]%</span></span><br></pre></td></tr></table></figure>

<p>以上命令产生以下输出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">The new value of the second element of the array is 5</span><br></pre></td></tr></table></figure>

<h3 id="迭代数组"><a href="#迭代数组" class="headerlink" title="迭代数组"></a>迭代数组</h3><p>遍历数组是通过使用 <strong>for</strong> 循环并遍历数组的每个元素来实现的</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off     </span><br><span class="line"><span class="built_in">setlocal</span> enabledelayedexpansion </span><br><span class="line"><span class="built_in">set</span> topic[<span class="number">0</span>]=comments </span><br><span class="line"><span class="built_in">set</span> topic[<span class="number">1</span>]=variables </span><br><span class="line"><span class="built_in">set</span> topic[<span class="number">2</span>]=Arrays </span><br><span class="line"><span class="built_in">set</span> topic[<span class="number">3</span>]=Decision making </span><br><span class="line"><span class="built_in">set</span> topic[<span class="number">4</span>]=<span class="built_in">Time</span> and <span class="built_in">date</span> </span><br><span class="line"><span class="built_in">set</span> topic[<span class="number">5</span>]=Operators </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> /l <span class="variable">%%n</span> <span class="keyword">in</span> (<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>) <span class="keyword">do</span> ( </span><br><span class="line">   <span class="built_in">echo</span> <span class="variable">!topic[%%n]!</span> </span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>以下方面需要注意的事项</p>
<ul>
<li>数组中的每个元素都需要使用 <strong>set</strong> 命令专门定义</li>
<li><strong>for</strong> 循环移动范围的 <strong>&#x2F;L</strong> 参数用于迭代数组</li>
</ul>
<p>以上命令产生以下输出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Comments </span><br><span class="line">variables </span><br><span class="line">Arrays </span><br><span class="line">Decision making </span><br><span class="line">Time and date </span><br><span class="line">Operators</span><br></pre></td></tr></table></figure>

<h3 id="数组的长度"><a href="#数组的长度" class="headerlink" title="数组的长度"></a>数组的长度</h3><p>数组的长度是通过遍历数组中的值列表完成的，因为没有直接的函数来确定数组中元素的数量</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off </span><br><span class="line"><span class="built_in">set</span> Arr[<span class="number">0</span>]=<span class="number">1</span> </span><br><span class="line"><span class="built_in">set</span> Arr[<span class="number">1</span>]=<span class="number">2</span> </span><br><span class="line"><span class="built_in">set</span> Arr[<span class="number">2</span>]=<span class="number">3</span> </span><br><span class="line"><span class="built_in">set</span> Arr[<span class="number">3</span>]=<span class="number">4</span> </span><br><span class="line"><span class="built_in">set</span> &quot;x=<span class="number">0</span>&quot; </span><br><span class="line">:SymLoop </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">defined</span> Arr[<span class="variable">%x%</span>] ( </span><br><span class="line">   <span class="keyword">call</span> <span class="built_in">echo</span> <span class="variable">%%A</span>rr[<span class="variable">%x%</span>]%% </span><br><span class="line">   <span class="built_in">set</span> /a &quot;x+=<span class="number">1</span>&quot;</span><br><span class="line">   <span class="keyword">GOTO</span> :SymLoop </span><br><span class="line">)</span><br><span class="line"><span class="built_in">echo</span> &quot;The length of the array is&quot; <span class="variable">%x%</span></span><br></pre></td></tr></table></figure>

<p>以上命令产生以下输出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">The length of the array is 4</span><br></pre></td></tr></table></figure>

<h2 id="第七节决策结构"><a href="#第七节决策结构" class="headerlink" title="第七节	决策结构"></a>第七节	决策结构</h2><h3 id="7-1if语句"><a href="#7-1if语句" class="headerlink" title="7.1	if语句"></a>7.1	if语句</h3><p>以下示例显示如何将 <strong>if</strong> 语句用于数字</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off </span><br><span class="line"><span class="built_in">SET</span> /A a=<span class="number">5</span> </span><br><span class="line"><span class="built_in">SET</span> /A b=<span class="number">10</span> </span><br><span class="line"><span class="built_in">SET</span> /A c=<span class="variable">%a%</span> + <span class="variable">%b%</span> </span><br><span class="line"><span class="keyword">if</span> <span class="variable">%c%</span>==<span class="number">15</span> <span class="built_in">echo</span> &quot;The value of variable c is <span class="number">15</span>&quot; </span><br><span class="line"><span class="keyword">if</span> <span class="variable">%c%</span>==<span class="number">10</span> <span class="built_in">echo</span> &quot;The value of variable c is <span class="number">10</span>&quot;</span><br></pre></td></tr></table></figure>

<p>以上命令产生以下输出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">The value of variable c is 15</span><br></pre></td></tr></table></figure>

<p>以下示例显示如何将 <strong>if</strong> 语句用于字符串</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off </span><br><span class="line"><span class="built_in">SET</span> str1=String1 </span><br><span class="line"><span class="built_in">SET</span> str2=String2 </span><br><span class="line"><span class="keyword">if</span> <span class="variable">%str1%</span>==String1 <span class="built_in">echo</span> &quot;The value of variable String1&quot; </span><br><span class="line"><span class="keyword">if</span> <span class="variable">%str2%</span>==String3 <span class="built_in">echo</span> &quot;The value of variable c is String3&quot;</span><br></pre></td></tr></table></figure>

<p>以上命令产生以下输出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">The value of variable String1</span><br></pre></td></tr></table></figure>

<h3 id="7-2if-else语句"><a href="#7-2if-else语句" class="headerlink" title="7.2	if-else语句"></a>7.2	if-else语句</h3><p>以下示例显示如何将 <strong>if-else</strong> 语句用于数字</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off </span><br><span class="line"><span class="built_in">SET</span> /A a=<span class="number">5</span> </span><br><span class="line"><span class="built_in">SET</span> /A b=<span class="number">10</span></span><br><span class="line"><span class="built_in">SET</span> /A c=<span class="variable">%a%</span> + <span class="variable">%b%</span> </span><br><span class="line"><span class="keyword">if</span> <span class="variable">%c%</span>==<span class="number">15</span> (<span class="built_in">echo</span> &quot;The value of variable c is <span class="number">15</span>&quot;) <span class="keyword">else</span> (<span class="built_in">echo</span> &quot;Unknown value&quot;) </span><br><span class="line"><span class="keyword">if</span> <span class="variable">%c%</span>==<span class="number">10</span> (<span class="built_in">echo</span> &quot;The value of variable c is <span class="number">10</span>&quot;) <span class="keyword">else</span> (<span class="built_in">echo</span> &quot;Unknown value&quot;)</span><br></pre></td></tr></table></figure>

<p>以上命令产生以下输出 - </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;The value of variable c is 15&quot; </span><br><span class="line">&quot;Unknown value&quot;</span><br></pre></td></tr></table></figure>

<p>以下示例显示如何将 <strong>if-else</strong> 语句用于字符串</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off </span><br><span class="line"><span class="built_in">SET</span> str1=String1 </span><br><span class="line"><span class="built_in">SET</span> str2=String2 </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="variable">%str1%</span>==String1 (<span class="built_in">echo</span> &quot;The value of variable String1&quot;) <span class="keyword">else</span> (<span class="built_in">echo</span> &quot;Unknown value&quot;) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="variable">%str2%</span>==String3 (<span class="built_in">echo</span> &quot;The value of variable c is String3&quot;) <span class="keyword">else</span> (<span class="built_in">echo</span> &quot;Unknown value&quot;)</span><br></pre></td></tr></table></figure>

<p>以上命令产生以下输出</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">&quot;The value of variable String1&quot; </span><br><span class="line">&quot;Unknown value&quot;</span><br></pre></td></tr></table></figure>

<h3 id="7-3if-defined-和-if-exits"><a href="#7-3if-defined-和-if-exits" class="headerlink" title="7.3	if defined 和 if exits"></a>7.3	if defined 和 if exits</h3><p><strong>if</strong> 语句的一个特例是 <strong>if defined</strong>，用于测试变量是否存在</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">defined</span> somevariable somecommand</span><br></pre></td></tr></table></figure>

<p>以下是如何使用 <strong>if defined</strong> 语句的示例</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off </span><br><span class="line"><span class="built_in">SET</span> str1=String1 </span><br><span class="line"><span class="built_in">SET</span> str2=String2 </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">defined</span> str1 <span class="built_in">echo</span> &quot;Variable str1 is <span class="keyword">defined</span>&quot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">defined</span> str3 (<span class="built_in">echo</span> &quot;Variable str3 is <span class="keyword">defined</span>&quot;) <span class="keyword">else</span> (<span class="built_in">echo</span> &quot;Variable str3 is <span class="keyword">not</span> <span class="keyword">defined</span>&quot;)</span><br></pre></td></tr></table></figure>

<p>以下将是上述代码的输出 -</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">&quot;Variable str1 is <span class="keyword">defined</span>&quot; </span><br><span class="line">&quot;Variable str3 is <span class="keyword">not</span> <span class="keyword">defined</span>&quot;</span><br></pre></td></tr></table></figure>

<p><strong>if</strong> 语句的另一个特例是 <strong>if exists</strong>，用于测试文件是否存在</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="keyword">If</span> <span class="keyword">exist</span> somefile.ext do_something</span><br></pre></td></tr></table></figure>

<p>以下是如何使用 <strong>if exits</strong> 语句的示例</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">exist</span> C:\set2.txt <span class="built_in">echo</span> &quot;File exists&quot; </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">exist</span> C:\set3.txt (<span class="built_in">echo</span> &quot;File exists&quot;) <span class="keyword">else</span> (<span class="built_in">echo</span> &quot;File does <span class="keyword">not</span> <span class="keyword">exist</span>&quot;)</span><br></pre></td></tr></table></figure>

<p>以下将是上述代码的输出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;File exists&quot;</span><br><span class="line">&quot;File does not exist&quot;</span><br></pre></td></tr></table></figure>

<h3 id="7-4嵌套-if-语句"><a href="#7-4嵌套-if-语句" class="headerlink" title="7.4	嵌套 if 语句"></a>7.4	嵌套 if 语句</h3><p>有时候，要求有多个嵌入的 <strong>if</strong> 语句，以下是本声明的一般形式</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(condition1) <span class="keyword">if</span> (condition2) do_something</span><br></pre></td></tr></table></figure>

<p>所以只有当条件<code>1</code>和条件<code>2</code>都满足时，才会执行 <strong>do_something</strong> 块中的代码</p>
<p>以下是如何使用嵌套 <strong>if</strong> 语句的示例</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">SET</span> /A a=<span class="number">5</span></span><br><span class="line"><span class="built_in">SET</span> /A b=<span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> <span class="variable">%a%</span>==<span class="number">5</span> <span class="keyword">if</span> <span class="variable">%b%</span>==<span class="number">10</span> <span class="built_in">echo</span> &quot;The value of the variables are correct&quot;</span><br></pre></td></tr></table></figure>

<p>以上命令产生以下输出。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;The value of the variables are correct&quot;</span><br></pre></td></tr></table></figure>

<h3 id="7-5goto语句"><a href="#7-5goto语句" class="headerlink" title="7.5	goto语句"></a>7.5	goto语句</h3><p>跳转到特定部分的能力由 <strong>goto</strong> 命令提供，目标部分在开头用带冒号的名称标注</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">... </span><br><span class="line">goto :label </span><br><span class="line">...some commands </span><br><span class="line">:label </span><br><span class="line">...some other commands</span><br><span class="line">Shell</span><br></pre></td></tr></table></figure>

<p>以下是如何使用 <strong>goto</strong> 语句的示例</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off </span><br><span class="line"><span class="built_in">SET</span> /A a=<span class="number">5</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="variable">%a%</span>==<span class="number">5</span> <span class="keyword">goto</span> :labela </span><br><span class="line"><span class="keyword">if</span> <span class="variable">%a%</span>==<span class="number">10</span> <span class="keyword">goto</span> :labelb</span><br><span class="line"></span><br><span class="line">:labela </span><br><span class="line"><span class="built_in">echo</span> &quot;The value of a is <span class="number">5</span>&quot; </span><br><span class="line"></span><br><span class="line"><span class="keyword">exit</span> /b <span class="number">0</span></span><br><span class="line"></span><br><span class="line">:labelb </span><br><span class="line"><span class="built_in">echo</span> &quot;The value of a is <span class="number">10</span>&quot;</span><br></pre></td></tr></table></figure>

<p>执行上面示例代码，得到以下结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;The value of a is 5&quot;</span><br></pre></td></tr></table></figure>

<h3 id="7-6for语句"><a href="#7-6for语句" class="headerlink" title="7.6	for语句"></a>7.6	for语句</h3><p>循环命令。直接看代码：</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="keyword">for</span> <span class="variable">%%a</span> <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>) <span class="keyword">do</span> (</span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">%%a</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">1</span><br><span class="line">5</span><br></pre></td></tr></table></figure>

<p>以上代码表示，变量 <strong>a</strong> 在集合(1, 1, 5)中进行遍历，然后回显出值</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="keyword">for</span> /l <span class="variable">%%a</span> <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>) <span class="keyword">do</span> (</span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">%%a</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure>

<p>以上代码表示，变量 <strong>a</strong> 从 1 开始，步长为 1，终值为 5，进行循环</p>
<h2 id="第八节运算符"><a href="#第八节运算符" class="headerlink" title="第八节	运算符"></a>第八节	运算符</h2><h3 id="8-1算术运算符"><a href="#8-1算术运算符" class="headerlink" title="8.1	算术运算符"></a>8.1	算术运算符</h3><p>批处理脚本语言支持任何语言的普通算术运算符，以下是可用的算术运算符</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
<th align="center">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>+</strong></td>
<td align="center">两个操作数相加</td>
<td align="center"><strong>1 + 2</strong> 的结果为：<strong>3</strong></td>
</tr>
<tr>
<td align="center"><strong>-</strong></td>
<td align="center">从第一个减去第二个操作数</td>
<td align="center"><strong>2 - 1</strong> 的结果为：<strong>1</strong></td>
</tr>
<tr>
<td align="center">*****</td>
<td align="center">两个操作数的乘法</td>
<td align="center"><strong>2 * 3</strong> 的结果为：<strong>6</strong></td>
</tr>
<tr>
<td align="center"><strong>&#x2F;</strong></td>
<td align="center">分母除以分子</td>
<td align="center"><strong>3 &#x2F; 2</strong> 的结果为：<strong>1.5</strong></td>
</tr>
<tr>
<td align="center"><strong>%</strong></td>
<td align="center">模运算符，整数&#x2F;浮点除法后的余数</td>
<td align="center"><strong>3 % 2</strong> 的结果为：<strong>1</strong></td>
</tr>
</tbody></table>
<h3 id="8-2关系运算符"><a href="#8-2关系运算符" class="headerlink" title="8.2	关系运算符"></a>8.2	关系运算符</h3><p>关系运算符允许对象的比较，以下是可用的关系运算符</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
<th align="center">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>EQU</strong></td>
<td align="center">测试两个对象之间的相等性</td>
<td align="center"><strong>2 EQU 2</strong> 的结果为：真</td>
</tr>
<tr>
<td align="center"><strong>NEQ</strong></td>
<td align="center">测试两个对象之间的不相等性</td>
<td align="center"><strong>3 NEQ 2</strong> 的结果为：真</td>
</tr>
<tr>
<td align="center"><strong>LSS</strong></td>
<td align="center">检查左对象是否小于右操作数</td>
<td align="center"><strong>2 LSS 3</strong> 的结果为：真</td>
</tr>
<tr>
<td align="center"><strong>LEQ</strong></td>
<td align="center">检查左对象是否小于或等于右操作数</td>
<td align="center"><strong>2 LEQ 3</strong> 的结果为：真</td>
</tr>
<tr>
<td align="center"><strong>GTR</strong></td>
<td align="center">检查左对象是否大于右操作数</td>
<td align="center"><strong>3 GTR 2</strong> 的结果为：真</td>
</tr>
<tr>
<td align="center"><strong>GEQ</strong></td>
<td align="center">检查左对象是否大于或等于右操作数</td>
<td align="center"><strong>3 GEQ 2</strong> 的结果为：真</td>
</tr>
</tbody></table>
<h3 id="8-3逻辑运算符"><a href="#8-3逻辑运算符" class="headerlink" title="8.3	逻辑运算符"></a>8.3	逻辑运算符</h3><p>逻辑运算符用于评估布尔表达式，以下是可用的逻辑运算符</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>AND</strong></td>
<td align="center">这是逻辑的和运算符</td>
</tr>
<tr>
<td align="center"><strong>OR</strong></td>
<td align="center">这是逻辑或运算符</td>
</tr>
<tr>
<td align="center"><strong>NOT</strong></td>
<td align="center">这是逻辑的非运算符</td>
</tr>
</tbody></table>
<h3 id="8-4赋值运算符"><a href="#8-4赋值运算符" class="headerlink" title="8.4	赋值运算符"></a>8.4	赋值运算符</h3><p>批处理脚本语言还提供了赋值操作符，以下是可用的赋值运算符</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th align="center">描述</th>
<th align="center">示例</th>
</tr>
</thead>
<tbody><tr>
<td><strong>+&#x3D;</strong></td>
<td align="center">这将右操作数相加到左操作数，并将结果分配给左操作数</td>
<td align="center"><strong>Set &#x2F;A a &#x3D; 5; a +&#x3D;3</strong> ，结果为：<strong>8</strong></td>
</tr>
<tr>
<td><strong>-&#x3D;</strong></td>
<td align="center">从左操作数中减去右操作数，并将结果赋给左操作数</td>
<td align="center"><strong>Set &#x2F;A a &#x3D; 5; a -&#x3D; 3</strong>，结果为：<strong>8</strong></td>
</tr>
<tr>
<td>***&#x3D;**</td>
<td align="center">将右操作数与左操作数相乘，并将结果赋给左操作数</td>
<td align="center"><em>*Set &#x2F;A a &#x3D; 5; a *&#x3D; 3**，结果为：</em><em>15</em>*</td>
</tr>
<tr>
<td><strong>&#x2F;&#x3D;</strong></td>
<td align="center">将左操作数除以右操作数，并将结果赋给左操作数</td>
<td align="center"><strong>Set &#x2F;A a &#x3D; 6; a&#x2F; &#x3D; 3</strong>，结果为：<strong>15</strong></td>
</tr>
<tr>
<td><strong>%&#x3D;</strong></td>
<td align="center">将两个操作数取模，并将结果赋给左操作数</td>
<td align="center"><strong>Set &#x2F;A a &#x3D; 5; a% &#x3D; 3</strong>，结果为：<strong>2</strong></td>
</tr>
</tbody></table>
<h3 id="8-5按位运算符"><a href="#8-5按位运算符" class="headerlink" title="8.5	按位运算符"></a>8.5	按位运算符</h3><p>按位运算符也可以在批处理脚本中使用，以下是可用的运算符</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>&amp;</strong></td>
<td align="center">按位和</td>
</tr>
<tr>
<td align="center"><strong>|</strong></td>
<td align="center">按位或</td>
</tr>
<tr>
<td align="center"><strong>^</strong></td>
<td align="center">按位异或</td>
</tr>
</tbody></table>
<h2 id="第九节输入输出"><a href="#第九节输入输出" class="headerlink" title="第九节	输入输出"></a>第九节	输入输出</h2><h3 id="9-1重定向输出-Stdout-和-Stderr"><a href="#9-1重定向输出-Stdout-和-Stderr" class="headerlink" title="9.1	重定向输出 Stdout 和 Stderr"></a>9.1	重定向输出 Stdout 和 Stderr</h3><p>批处理文件中的一种常见做法是将程序的输出发送到日志文件，**&gt;** 运算符将 <strong>stdout</strong> 或 <strong>stderr</strong> 发送或重定向到另一个文件</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dir</span> C:\  &gt; list.txt</span><br></pre></td></tr></table></figure>

<p>在上面的例子中，命令 *<em>dir C:*</em> 的 <strong>stdout</strong> 被重定向到文件 <strong>list.txt</strong></p>
<p>如果将数字2附加到重定向过滤器，则会将 <strong>stderr</strong> 重定向到文件 <strong>lists.txt</strong></p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Dir</span> C:\ <span class="number">2</span> &gt; list.txt</span><br></pre></td></tr></table></figure>

<p>甚至可以使用文件编号和 <strong>&amp;</strong> 前缀来组合 <strong>stdout</strong> 和 <strong>stderr</strong> 流</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">DIR</span> C:\ &gt; lists.txt <span class="number">2</span>&gt; &amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="9-2抑制程序输出"><a href="#9-2抑制程序输出" class="headerlink" title="9.2	抑制程序输出"></a>9.2	抑制程序输出</h3><p>伪文件 <strong>NUL</strong> 用于丢弃程序的任何输出，下示例显示通过将输出发送到 <strong>NUL</strong> 来丢弃命令 <strong>DIR</strong> 的输出</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Dir</span> C:\ &gt; <span class="built_in">NUL</span></span><br></pre></td></tr></table></figure>

<p>要使用 <strong>Stdin</strong>，必须使用解决方法来实现此目的，这可以通过重定向命令提示符自己的标准输入来完成</p>
<p>以下示例显示了如何将输出重定向到名为 <strong>lists.txt</strong> 的文件，在执行下面的命令后，命令提示符会将用户输入的所有输入都保存到一个 <strong>EOF</strong> 字符中，稍后，它将所有输入发送到文件 <strong>lists.txt</strong></p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">TYPE</span> <span class="built_in">CON</span> &gt; lists.txt</span><br></pre></td></tr></table></figure>

<h2 id="第十节函数"><a href="#第十节函数" class="headerlink" title="第十节	函数"></a>第十节	函数</h2><h3 id="10-1函数定义"><a href="#10-1函数定义" class="headerlink" title="10.1	函数定义"></a>10.1	函数定义</h3><p>在批处理脚本中，通过使用标签语句来定义函数，当一个函数被重新定义时，它可能会将一个或多个值作为函数的输入参数，并在函数的主体中处理，并将值作为输出返回类型传回给函数</p>
<p>每个函数都有一个函数名称，它描述了函数执行的任务，要使用一个函数，需要用它的名称来调用这个函数，并传递与函数参数类型相匹配的输入值(称为参数)</p>
<p>以下是一个简单函数的语法</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">:function_name </span><br><span class="line">Do_something </span><br><span class="line"><span class="keyword">EXIT</span> /B <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>其中，</p>
<ul>
<li><strong>function_name</strong> 是赋予函数的名字，它应该与函数的实际功能相匹配</li>
<li><strong>EXIT</strong> 语句用于确保函数正常退出</li>
</ul>
<p>以下是一个简单函数的例子</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">:Display </span><br><span class="line"><span class="built_in">SET</span> /A index=<span class="number">2</span> </span><br><span class="line"><span class="built_in">echo</span> The value of index is <span class="variable">%index%</span> </span><br><span class="line"><span class="keyword">EXIT</span> /B <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="10-2常用函数"><a href="#10-2常用函数" class="headerlink" title="10.2	常用函数"></a>10.2	常用函数</h3><table>
<thead>
<tr>
<th>编号</th>
<th>函数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>调用函数</td>
<td>在批处理脚本中如何使用 <strong>call</strong> 命令调用一个函数</td>
</tr>
<tr>
<td>2</td>
<td>带参数的函数</td>
<td>当函数调用时，函数可以通过传递参数来处理参数</td>
</tr>
<tr>
<td>3</td>
<td>具有返回值的函数</td>
<td>函数可以通过传递变量名称来处理返回值</td>
</tr>
<tr>
<td>4</td>
<td>函数中的局部变量</td>
<td>函数中的局部变量可以用来避免名称冲突，并保持函数本地的变量变化</td>
</tr>
<tr>
<td>5</td>
<td>递归函数</td>
<td>通过在函数中保持局部变量的变化并且对调用者不可见，完全封装函数主体的能力</td>
</tr>
<tr>
<td>6</td>
<td>文件I&#x2F;O</td>
<td>在批处理脚本中，可以执行任何编程语言中预期的正常文件I&#x2F;O操作</td>
</tr>
<tr>
<td>7</td>
<td>创建文件</td>
<td>新文件的创建是通过重定向过滤器<code>&gt;</code>来完成的，此过滤器可用于将任何输出重定向到文件</td>
</tr>
<tr>
<td>8</td>
<td>写入文件</td>
<td>内容写入文件也是借助于重定向过滤器来完成的，此过滤器可用于将任何输出重定向到文件</td>
</tr>
<tr>
<td>9</td>
<td>附加到文件</td>
<td>内容写入文件也是在双重定向过滤器的帮助下完成的，此过滤器可用于将任何输出附加到文件</td>
</tr>
<tr>
<td>10</td>
<td>从文件读取</td>
<td>在批处理脚本中读取文件是通过使用 <strong>FOR</strong> 循环命令来完成文件中需要读取的每一行</td>
</tr>
<tr>
<td>11</td>
<td>删除文件</td>
<td>要删除文件，批处理脚本提供了 <strong>DEL</strong> 命令</td>
</tr>
<tr>
<td>12</td>
<td>重命名文件</td>
<td>要重命名文件，批处理脚本提供了 <strong>REN</strong> 或 <strong>RENAME</strong> 命令</td>
</tr>
<tr>
<td>13</td>
<td>移动文件</td>
<td>要移动文件，批处理脚本提供 <strong>MOVE</strong> 命令</td>
</tr>
<tr>
<td>14</td>
<td>批处理文件-管道</td>
<td>管道运算符(竖线)将一个命令的输出(默认为 <strong>STDOUT</strong> )引导到另一个命令的输入(默认为<strong>STDIN</strong>)</td>
</tr>
<tr>
<td>15</td>
<td>批处理文件-输入</td>
<td>批处理文件运行时，可以选择传递命令行参数，然后在程序中读取这些参数以进一步处理</td>
</tr>
<tr>
<td>16</td>
<td>使用SHIFT运算符</td>
<td>命令行参数的一个限制是它只能接受直到 <strong>%9</strong> 的参数</td>
</tr>
<tr>
<td>17</td>
<td>文件夹操作</td>
<td>在批处理脚本中，可以使用任何编程语言执行普通的基于文件夹的操作</td>
</tr>
<tr>
<td>18</td>
<td>创建文件夹</td>
<td>创建一个文件夹是在 <strong>MD</strong>(创建目录)命令的帮助下完成的</td>
</tr>
<tr>
<td>19</td>
<td>列出文件夹内容</td>
<td>文件夹内容的列表可以用 <strong>dir</strong> 命令完成，该命令用来查看当前目录中的可用文件和目录</td>
</tr>
<tr>
<td>20</td>
<td>删除文件夹</td>
<td>要删除文件夹，可使用批处理脚本提供的 <strong>DEL</strong> 命令</td>
</tr>
<tr>
<td>21</td>
<td>重命名文件夹</td>
<td>对于重命名文件夹，批处理脚本使用 <strong>REN</strong> 或 <strong>RENAME</strong> 命令</td>
</tr>
<tr>
<td>22</td>
<td>移动文件夹</td>
<td>对于移动文件夹，批处理脚本提供 <strong>MOVE</strong> 命令</td>
</tr>
</tbody></table>
<h2 id="第十一节文件"><a href="#第十一节文件" class="headerlink" title="第十一节	文件"></a>第十一节	文件</h2><h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><p>一次显示一个或多个文件的内容</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">more</span> a.txt</span><br></pre></td></tr></table></figure>

<h3 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h3><p>将当前目录的所有子目录的树显示为递归或深度的任何级别</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tree</span></span><br></pre></td></tr></table></figure>

<h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>在文件或输入中搜索字符串，输出匹配的行</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">find</span> &quot;a&quot; a.txt</span><br></pre></td></tr></table></figure>

<h3 id="start"><a href="#start" class="headerlink" title="start"></a>start</h3><p>打开文件夹</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">start</span> D:\文件夹<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>打开文件</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">start</span> D:\文件夹<span class="number">1</span>\test.txt</span><br></pre></td></tr></table></figure>

<h3 id="del"><a href="#del" class="headerlink" title="del"></a>del</h3><p>删除当前目录下的 <strong>test.txt</strong> 文件</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">del</span> test.txt</span><br></pre></td></tr></table></figure>

<p>删除上级目录下的 <strong>test.txt</strong> 文件</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">del</span> ..\test.txt</span><br></pre></td></tr></table></figure>

<h3 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h3><p>复制文件1到文件夹1、文件2到文件夹2</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">copy</span> file1.txt 文件夹<span class="number">1</span></span><br><span class="line"><span class="built_in">copy</span> file2.txt 文件夹<span class="number">2</span></span><br></pre></td></tr></table></figure>

<h3 id="ren"><a href="#ren" class="headerlink" title="ren"></a>ren</h3><p>修改文件名称，把aa.txt改为bb.c</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ren</span> aa.txt bb.c</span><br></pre></td></tr></table></figure>

<h3 id="md"><a href="#md" class="headerlink" title="md"></a>md</h3><p>创建三个文件夹</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">md</span> 文件夹<span class="number">1</span></span><br><span class="line"><span class="built_in">md</span> 文件夹<span class="number">2</span></span><br><span class="line"><span class="built_in">md</span> 文件夹<span class="number">3</span></span><br></pre></td></tr></table></figure>

<h3 id="cd-1"><a href="#cd-1" class="headerlink" title="cd"></a>cd</h3><p>当前目录创建 <strong>a.txt</strong> 文件</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span>.&gt;a.txt</span><br></pre></td></tr></table></figure>

<h3 id="dir"><a href="#dir" class="headerlink" title="dir"></a>dir</h3><p>列举当前目录所有文件和文件夹</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dir</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2024/01/28/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul>
<li>正则表达式的作用<ul>
<li>测试字符串内的模式</li>
<li>替换文本</li>
<li>基于模式匹配从字符串中提取子字符串</li>
</ul>
</li>
</ul>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul>
<li><p>普通字符：包括所有大写和小写字母、所有数字、所有标点符号和一些其他符号</p>
<table>
<thead>
<tr>
<th align="center">字符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">[ABC]</td>
<td align="center">匹配 <strong>[…]</strong> 中的所有字符</td>
</tr>
<tr>
<td align="center">[^ABC]</td>
<td align="center">匹配除了 <strong>[…]</strong> 中字符的所有字符</td>
</tr>
<tr>
<td align="center">[A-Z]</td>
<td align="center">匹配区间中的所有字符</td>
</tr>
<tr>
<td align="center">.</td>
<td align="center">匹配除换行符（\n、\r）之外的任何单个字符</td>
</tr>
<tr>
<td align="center">[\s\S]</td>
<td align="center">匹配所有</td>
</tr>
<tr>
<td align="center">\w</td>
<td align="center">匹配字母、数字、下划线</td>
</tr>
</tbody></table>
</li>
<li><p>非打印字符</p>
<table>
<thead>
<tr>
<th align="center">字符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\cx</td>
<td align="center">匹配由x指明的控制字符</td>
</tr>
<tr>
<td align="center">\f</td>
<td align="center">匹配一个换页符</td>
</tr>
<tr>
<td align="center">\n</td>
<td align="center">匹配一个换行符</td>
</tr>
<tr>
<td align="center">\r</td>
<td align="center">匹配一个回车符</td>
</tr>
<tr>
<td align="center">\s</td>
<td align="center">匹配任何空白字符，包括空格、制表符、换页符等等</td>
</tr>
<tr>
<td align="center">\S</td>
<td align="center">匹配任何非空白字符</td>
</tr>
<tr>
<td align="center">\t</td>
<td align="center">匹配一个制表符</td>
</tr>
<tr>
<td align="center">\v</td>
<td align="center">匹配一个垂直制表符</td>
</tr>
</tbody></table>
</li>
<li><p>特殊字符</p>
<table>
<thead>
<tr>
<th align="center">字符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$</td>
<td align="center">匹配输入字符串的结尾位置</td>
</tr>
<tr>
<td align="center">()</td>
<td align="center">标记一个子表达式的开始和结束位置</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">匹配前面的子表达式零次或多次</td>
</tr>
<tr>
<td align="center">+</td>
<td align="center">匹配前面的子表达式一次或多次</td>
</tr>
<tr>
<td align="center">.</td>
<td align="center">匹配除换行符 \n 之外的任何单字符</td>
</tr>
<tr>
<td align="center">[</td>
<td align="center">标记一个中括号表达式的开始</td>
</tr>
<tr>
<td align="center">?</td>
<td align="center">匹配前面的子表达式零次或一次</td>
</tr>
<tr>
<td align="center">\</td>
<td align="center">将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符</td>
</tr>
<tr>
<td align="center">^</td>
<td align="center">匹配输入字符串的开始位置</td>
</tr>
<tr>
<td align="center">{</td>
<td align="center">标记限定符表达式的开始</td>
</tr>
<tr>
<td align="center">|</td>
<td align="center">指明两项之间的一个选择</td>
</tr>
</tbody></table>
</li>
<li><p>限定符</p>
<table>
<thead>
<tr>
<th align="center">字符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">*</td>
<td align="center">匹配前面的子表达式零次或多次</td>
</tr>
<tr>
<td align="center">+</td>
<td align="center">匹配前面的子表达式一次或多次</td>
</tr>
<tr>
<td align="center">?</td>
<td align="center">匹配前面的子表达式零次或一次</td>
</tr>
<tr>
<td align="center">{n}</td>
<td align="center">匹配确定的 <strong>n</strong> 次</td>
</tr>
<tr>
<td align="center">{n,}</td>
<td align="center">至少匹配n 次</td>
</tr>
<tr>
<td align="center">{n,m}</td>
<td align="center">最少匹配 n 次且最多匹配 m 次</td>
</tr>
</tbody></table>
</li>
<li><p>定位符</p>
<table>
<thead>
<tr>
<th align="center">字符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">^</td>
<td align="center">匹配输入字符串开始的位置</td>
</tr>
<tr>
<td align="center">$</td>
<td align="center">匹配输入字符串结尾的位置</td>
</tr>
<tr>
<td align="center">\b</td>
<td align="center">匹配一个单词边界，即字与空格间的位置</td>
</tr>
<tr>
<td align="center">\B</td>
<td align="center">非单词边界匹配</td>
</tr>
</tbody></table>
</li>
<li><p>选择：用圆括号 <strong>()</strong> 将所有选择项括起来，相邻的选择项之间用 <strong>|</strong> 分隔</p>
</li>
<li><p>反向引用</p>
</li>
</ul>
<h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><h3 id="匹配规则"><a href="#匹配规则" class="headerlink" title="匹配规则"></a>匹配规则</h3><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3>]]></content>
  </entry>
  <entry>
    <title>Python</title>
    <url>/2024/01/29/Python/</url>
    <content><![CDATA[<h2 id="字符串String"><a href="#字符串String" class="headerlink" title="字符串String"></a>字符串String</h2><blockquote>
<p><strong>find函数:find(str)检测字符串是否包含特定字符，如果是，返回开始索引；否则，返回-1</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&#x27;python&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a.find(<span class="string">&#x27;th&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(a.find(<span class="string">&#x27;ab&#x27;</span>))</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>count函数:count(str,start,end)返回索引范围内特定字符串出现的次数</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&#x27;123 123 123 123&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a.count(<span class="string">&#x27;123&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(a.count(<span class="string">&#x27;123&#x27;</span>,<span class="number">0</span>,<span class="number">7</span>))</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>replace函数:replace(str1,,str2,count)替换字符串，不超过count次</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&#x27;123 123 123 123&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a.replace(<span class="string">&#x27;123&#x27;</span>,<span class="string">&#x27;321&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(a.replace(<span class="string">&#x27;123&#x27;</span>,<span class="string">&#x27;321&#x27;</span>,<span class="number">1</span>))</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>join函数:str.join(list or str)返回被子串连接的字符串</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&#x27;python&#x27;</span></span><br><span class="line">b=[<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span>.join(b))</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>strip函数:str.strip(str)去除字符串两端的指定字符</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&#x27;ab12345ab&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a=&#x27;</span>,a.strip(<span class="string">&#x27;ab&#x27;</span>))</span><br><span class="line">b=<span class="string">&#x27;  123 &#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;b=&#x27;</span>,b.strip())</span><br></pre></td></tr></table></figure>

<h2 id="列表List"><a href="#列表List" class="headerlink" title="列表List"></a>列表List</h2><blockquote>
<p><strong>跳步引用</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line"><span class="built_in">print</span>(a[::<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(a[::-<span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>append函数:append(str)在列表最右边加上一个元素</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">a.append(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>extend函数:extend(str1)合并两个列表</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">a.extend(b)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>count函数:count(str)统计列表中某个字符出现次数</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(a.count(<span class="number">1</span>))</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>index函数:index(str)查找某个元素第一次出现的位置</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;def&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(a.index(<span class="string">&#x27;abc&#x27;</span>))</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>insert函数:insert(int,str)在列表中插入一个元素</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">a.insert(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>remove函数:remove(str)删除指定的第一个元素</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>]</span><br><span class="line">a.remove(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>pop函数:删除特定位置的元素，并返回删除元素</strong></p>
</blockquote>
<ul>
<li><p><strong>pop(int)删除特定位置</strong></p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">a.pop(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>pop()删除最右端元素</strong></p>
<pre><code>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>]</span><br><span class="line">a=pop()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(a.pop())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</code></pre>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;**reverse函数:倒置列表**</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">a=[4,3,2,1]</span><br><span class="line">a.reverse()</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p><strong>sort函数:递增排序</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">a.sort()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>max函数和min函数:max(list),min(list)获取列表中的最大值和最小值</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;最大值为:&#x27;</span>,<span class="built_in">max</span>(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;最小值为&#x27;</span>,<span class="built_in">min</span>(a))</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>map函数:map(function,iterable)根据提供的函数对指定的序列做映射</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x*x</span><br><span class="line">a=<span class="built_in">map</span>(square,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">b=<span class="built_in">map</span>(<span class="built_in">int</span>,(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> b:</span><br><span class="line">    <span class="built_in">print</span>(j,end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="元组Tuple"><a href="#元组Tuple" class="headerlink" title="元组Tuple"></a>元组Tuple</h2><blockquote>
<p><strong>zip函数:zip(list_1,list_2,…,list_n)将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">c=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">zip1=<span class="built_in">zip</span>(a,b,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(zip1))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> zip1:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>*<em>zip(</em>)函数:zip(<em>zip)将元组解压为列表</em>*</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">c=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">zip1=<span class="built_in">zip</span>(a,b,c)</span><br><span class="line">zip2=<span class="built_in">zip</span>(*zip1)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> zip2:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<h2 id="字典Dictionary"><a href="#字典Dictionary" class="headerlink" title="字典Dictionary"></a>字典Dictionary</h2><blockquote>
<p><strong>dict函数:dict(tuple)利用元组创建字典</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup=([<span class="string">&#x27;c++&#x27;</span>,<span class="number">140</span>],[<span class="string">&#x27;python&#x27;</span>,<span class="number">141</span>],[<span class="string">&#x27;java&#x27;</span>,<span class="number">142</span>])</span><br><span class="line">a=<span class="built_in">dict</span>(tup)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">b=<span class="built_in">dict</span>(math=<span class="number">140</span>,english=<span class="number">141</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>clear函数:clear()清楚字典中所有元素，得到空字典</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=&#123;<span class="string">&#x27;python&#x27;</span>:<span class="number">98</span>,<span class="string">&#x27;java&#x27;</span>:<span class="number">99</span>&#125;</span><br><span class="line">a.clear()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>del函数:del dict删除字典</strong></p>
</blockquote>
<pre><code>a=&#123;&#39;python&#39;:98,&#39;java&#39;:99&#125;
del a
print(a)
</code></pre>
<blockquote>
<p><strong>pop函数:pop(key)删除字典中指定键&#x2F;值对</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=&#123;<span class="string">&#x27;python&#x27;</span>:<span class="number">98</span>,<span class="string">&#x27;java&#x27;</span>:<span class="number">99</span>&#125;</span><br><span class="line">a.pop(<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>update函数:update(dict1)合并两个字典</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=&#123;<span class="string">&#x27;python&#x27;</span>:<span class="number">98</span>,<span class="string">&#x27;java&#x27;</span>:<span class="number">99</span>&#125;</span><br><span class="line">b=&#123;<span class="string">&#x27;c++&#x27;</span>:<span class="number">97</span>&#125;</span><br><span class="line">a.update(b)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>

<h2 id="集合Set"><a href="#集合Set" class="headerlink" title="集合Set"></a>集合Set</h2><blockquote>
<p><strong>set函数:set(list)创建一个集合，删除重复元素</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="built_in">set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>add函数:add(list or num or list)在集合中增加新元素</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">a.add(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>update函数:update(set)合并两个集合</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">b=&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">a.update(b)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>clear函数:clear()清空集合，得到空集合</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">a.clear()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>remove函数:remove(list or num or string)删除集合中特定元素</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">a.remove(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>子集:a&lt;b</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#125;</span><br><span class="line">b=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(a&lt;b)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>并集:a|b</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">b=&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">c=a|b</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>交集:a&amp;b</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">b=&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">c=a&amp;b</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>补集:a-b</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">b=&#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">c=a-b</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure>

<h2 id="进制转化Base-Conversion"><a href="#进制转化Base-Conversion" class="headerlink" title="进制转化Base Conversion"></a>进制转化Base Conversion</h2><blockquote>
<p><strong>int函数:int(str,nums)其他进制转为十进制</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;二进制:&#x27;</span>,<span class="built_in">int</span>(<span class="string">&#x27;100&#x27;</span>,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;八进制:&#x27;</span>,<span class="built_in">int</span>(<span class="string">&#x27;43&#x27;</span>,<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;十六进制:&#x27;</span>,<span class="built_in">int</span>(<span class="string">&#x27;5a&#x27;</span>,<span class="number">16</span>))</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>bin函数:bin(nums)将十进制转化成二进制,输出字符串</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(<span class="number">4</span>))</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>oct函数:oct(nums)将十进制转化成八进制,输出字符串</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">oct</span>(<span class="number">17</span>))</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>hex函数:hex(nums)将十进制转化成十六进制,输出字符串</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="number">23</span>))</span><br></pre></td></tr></table></figure>

<h2 id="引用与拷贝Reference-or-Copy"><a href="#引用与拷贝Reference-or-Copy" class="headerlink" title="引用与拷贝Reference or Copy"></a>引用与拷贝Reference or Copy</h2><blockquote>
<p><strong>reference引用</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">language=[<span class="string">&#x27;python&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;c++&#x27;</span>]</span><br><span class="line">mylanguage=language</span><br><span class="line"><span class="keyword">del</span> language[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(language)</span><br><span class="line"><span class="built_in">print</span>(mylanguage)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>copy拷贝</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">language=[<span class="string">&#x27;python&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;c++&#x27;</span>]</span><br><span class="line">mylanguage=language[:]</span><br><span class="line"><span class="keyword">del</span> language[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(language)</span><br><span class="line"><span class="built_in">print</span>(mylanguage)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>copy和deepcopy(浅拷贝与深拷贝)</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">language=[<span class="string">&#x27;python&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,[<span class="string">&#x27;c++&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]]</span><br><span class="line">mylanguage1=language[:]</span><br><span class="line">mylanguage2=copy.deepcopy(language)</span><br><span class="line">language[<span class="number">2</span>][<span class="number">0</span>]=<span class="string">&#x27;c#&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;浅拷贝:&#x27;</span>,mylanguage1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;深拷贝:&#x27;</span>,mylanguage2)</span><br></pre></td></tr></table></figure>

<h2 id="占位符和占位方法Placeholders-and-Placeholder-Methods"><a href="#占位符和占位方法Placeholders-and-Placeholder-Methods" class="headerlink" title="占位符和占位方法Placeholders and Placeholder Methods"></a>占位符和占位方法Placeholders and Placeholder Methods</h2><blockquote>
<p><strong>format函数:字符串格式化操作</strong></p>
</blockquote>
<ul>
<li><p><strong>位置填充:{}.format(str)</strong></p>
<pre><code>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello &#123;&#125; i am &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;Kevin&#x27;</span>,<span class="string">&#x27;Tom&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</code></pre>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **key填充:&#123;key&#125;.format(key=value)**</span><br><span class="line"></span><br><span class="line">	```python</span><br><span class="line">	print(&#x27;hello&#123;name1&#125;i&#123;name2&#125;&#x27;.format(name1=&#x27;Kevin&#x27;,name2=&#x27;Tom&#x27;))</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>list填充:{list[i]}.format(list)</strong></p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="string">&#x27;Kevin&#x27;</span>,<span class="string">&#x27;Tom&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello &#123;name[0]&#125; i am &#123;name[1]&#125;&#x27;</span>.<span class="built_in">format</span>(name=a))</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="错误和异常Errors-and-Exceptions"><a href="#错误和异常Errors-and-Exceptions" class="headerlink" title="错误和异常Errors and Exceptions"></a>错误和异常Errors and Exceptions</h2><blockquote>
<p><strong>try except 语句:</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    nums=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输出一个数字:&#x27;</span>))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;请输入正确的格式&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="大小写转换Case-Conversion"><a href="#大小写转换Case-Conversion" class="headerlink" title="大小写转换Case Conversion"></a>大小写转换Case Conversion</h2><blockquote>
<p><strong>upper函数:str.upper()将所有字母大写</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&#x27;python&#x27;</span></span><br><span class="line">b=a.upper()</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>lower函数:str.lower()将所有字母小写</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&#x27;PYTHON&#x27;</span></span><br><span class="line">b=a.lower()</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>capitalize函数:str.capitalize()句首字母大写，其他字母小写</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&#x27;i love python&#x27;</span></span><br><span class="line">b=a.capitalize()</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>title函数:str.title()句中每个单词首字母大写，其他小写</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&#x27;i love python&#x27;</span></span><br><span class="line">b=a.title()</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure>

<h2 id="文件操作File-Operations"><a href="#文件操作File-Operations" class="headerlink" title="文件操作File Operations"></a>文件操作File Operations</h2><blockquote>
<p><strong>os.getcwd()函数:os.getcwd()获取当前工作路径</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="built_in">print</span>(os.getcwd())</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>os.chdir()函数:os.chdir(wd)更改工作路径</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.chdir(\<span class="string">&quot;C://Users//86172//Desktop//python\&quot;)</span></span><br><span class="line"><span class="string">print(os.getcwd())</span></span><br><span class="line"><span class="string">os.chdir(\&quot;C://Users//86172//jupyter notebook\&quot;)</span></span><br><span class="line"><span class="string">print(os.getcwd())</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>os.makdirs()函数:os.makedirs(wd)创建一个在指定目录下的文件夹</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.makedirs(\<span class="string">&quot;C://Users//86172//Desktop//python//1\&quot;)</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>文件逐行读取(自动在行末输出\n)</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(\<span class="string">&quot;C://Users//86172//Desktop//python//file.txt\&quot;) as f:</span></span><br><span class="line"><span class="string">      for line in f:</span></span><br><span class="line"><span class="string">          print(line)</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>read函数:file.read()读取指定文件中的全部内容,返回字符串</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(\<span class="string">&quot;C://Users//86172//Desktop//python//file_r.txt\&quot;) as f:</span></span><br><span class="line"><span class="string">    content=f.read()</span></span><br><span class="line"><span class="string">    print(content)</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>readlines函数:file.readlines()按行读取，返回列表(自动输出换行)</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(\<span class="string">&quot;C://Users//86172//Desktop//python//file_r.txt\&quot;) as f:</span></span><br><span class="line"><span class="string">      content=f.readlines()</span></span><br><span class="line"><span class="string">      print(content)</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>文件写入(‘w’;只写模式.’a’:追加模式)</strong></p>
</blockquote>
<ul>
<li><p>只写模式</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;C://Users//86172//Desktop//python//file_w.txt\&quot;,&#x27;w&#x27;) as f:</span></span><br><span class="line"><span class="string">    f.write(&#x27;python&#x27;)</span></span><br><span class="line"><span class="string">with open(&quot;</span>C://Users//<span class="number">86172</span>//Desktop//python//file_w.txt\<span class="string">&quot;) as f:</span></span><br><span class="line"><span class="string">	content=f.read()</span></span><br><span class="line"><span class="string">print(content)                            </span></span><br></pre></td></tr></table></figure>
</li>
<li><p>追加模式</p>
<pre><code>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a:&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(\<span class="string">&quot;C://Users//86172//Desktop//python//file_w.txt\&quot;,&#x27;a&#x27;) as f:</span></span><br><span class="line"><span class="string">    f.write(&#x27;python&#x27;)</span></span><br><span class="line"><span class="string">with open(\&quot;C://Users//86172//Desktop//python//file_w.txt\&quot;) as f:\n&quot;</span>,</span><br><span class="line">    content=f.read()</span><br><span class="line"><span class="built_in">print</span>(content)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</code></pre>
<pre><code>
</code></pre>
</li>
</ul>
<p>​    </p>
]]></content>
  </entry>
  <entry>
    <title>Redis</title>
    <url>/2024/06/06/Redis/</url>
    <content><![CDATA[<h2 id="第一节入门概述"><a href="#第一节入门概述" class="headerlink" title="第一节	入门概述"></a>第一节	入门概述</h2><ul>
<li><p><strong>基本介绍</strong>：全称 <strong>Remote Dictionary Server</strong> ，即远程字典服务，是一个完全开源的，使用 <strong>ANSIC</strong> 语言编写遵守 <strong>BSD</strong> 协议，高性能的 <strong>Key-Value</strong> 数据库，提供了丰富的数据结构，数据是存在内存中的，同时 <strong>Redis</strong> 支持事务、持久化、<strong>LUA</strong> 脚本、发布&#x2F;订阅、缓存淘汰、流技术等多种功能特性提供了主从模式、<strong>Redis Sentinel和Redis Cluster</strong> 集群架构方案</p>
</li>
<li><p><strong>功能</strong></p>
<ul>
<li>分布式缓存，挡在 <strong>MySQL</strong> 数据库之前的一道屏障</li>
<li>内存存储和持久化，支持异步将内存中的数据写到硬盘上，同时不影响继续服务</li>
<li>高可用架构搭配</li>
<li>缓存穿透、击穿、雪崩</li>
<li>分布式锁</li>
<li>消息队列平台</li>
</ul>
</li>
<li><p><strong>优势</strong></p>
<ul>
<li>性能极高，读写速度快</li>
<li>数据类型丰富，不仅仅支持简单的 <strong>key-value</strong> 类型的数据，同时还提供 <strong>list</strong>，<strong>zset</strong>，<strong>set</strong>，<strong>hash</strong> 等数据结构的存储</li>
<li>支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用</li>
</ul>
</li>
<li><p><strong>Redis 启动命令</strong></p>
<ul>
<li><p><strong>默认启动</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server // 启动服务器</span><br><span class="line">redis-cli // 启动客户端</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>指定参数</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server --port 6379 --requirepass 12456 // 指定端口和密码</span><br><span class="line">redis-cli -p 6379 -a 123456 // 启动客户端</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置文件启动</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server redis-6379.conf // 启动服务器</span><br><span class="line">redis-cli // 启动客户端</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第二节数据类型"><a href="#第二节数据类型" class="headerlink" title="第二节	数据类型"></a>第二节	数据类型</h2><h3 id="2-1数据库"><a href="#2-1数据库" class="headerlink" title="2.1	数据库"></a>2.1	数据库</h3><ul>
<li><p><strong>键的相关操作</strong></p>
<ul>
<li><p>查询所有键</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">keys *</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断键是否存在</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">exists key</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看键的类型</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span> key</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除指定键</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">del key</span><br></pre></td></tr></table></figure>
</li>
<li><p>非阻塞删除</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">unlink</span> key</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看过期时间</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ttl key</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置过期时间</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">expire key 1</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看键的数量</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dbsize</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>数据库的相关操作</strong></p>
<ul>
<li><p>移动数据库</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">move key [0-15]</span><br></pre></td></tr></table></figure>
</li>
<li><p>切换数据库</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> [0-15]</span><br></pre></td></tr></table></figure>
</li>
<li><p>清空当前数据库</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flushdb</span><br></pre></td></tr></table></figure>
</li>
<li><p>清空所有数据库</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flushall</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-2字符串"><a href="#2-2字符串" class="headerlink" title="2.2	字符串"></a>2.2	字符串</h3><ul>
<li><p><strong>字符串类型</strong></p>
<ul>
<li><strong>Redis</strong> 最基本的类型，一个 <strong>key</strong> 对应一个 <strong>value</strong></li>
<li><strong>string</strong> 类型是二进制安全的，可以包含任何数据，比如jpg图片或者序列化的对象</li>
<li>一个字符串 <strong>value</strong> 最多可以是512M</li>
</ul>
</li>
<li><p><strong>SET 语句</strong></p>
<ul>
<li><p>添加键值对</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> key value</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行条件</p>
<ul>
<li><p>键不存在时设置键值</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> key value nx</span><br></pre></td></tr></table></figure>
</li>
<li><p>键存在时设置键值</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> key value xx </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>设置过期时间</p>
<ul>
<li><p>以秒为单位设置过期时间</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> key value ex seconds</span><br></pre></td></tr></table></figure>
</li>
<li><p>以毫秒为单位设置过期时间</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> key value px milliseconds</span><br></pre></td></tr></table></figure>
</li>
<li><p>以秒为单位设置以 <strong>UNIX</strong> 时间戳对应时间为过期时间</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> key value exat unix-time-seconds</span><br></pre></td></tr></table></figure>
</li>
<li><p>以毫秒为单位设置以 <strong>UNIX</strong> 时间戳对应时间为过期时间</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> key value pxat unix-time-milliseconds</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>保留设置前指定键的生存时间</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> key value keepttl</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>GET 语句</strong></p>
<ul>
<li><p>返回指定键的值</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">get key</span><br></pre></td></tr></table></figure>
</li>
<li><p>返回指定键原本的值，并修改键值对</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">getset key value</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>同时获取设置多对键值对</strong></p>
<ul>
<li><p>同时设置多对键值对</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mset key1 value1 key2 value2</span><br></pre></td></tr></table></figure>
</li>
<li><p>同时获取多对键值对</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mget key1 key2</span><br></pre></td></tr></table></figure>
</li>
<li><p>仅当键都不存在时，同时设置多对键值对</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msetnx key1 value1 key2 value2</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>获取指定区间</strong></p>
<ul>
<li><p>获取键的全部值</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">getrange key 0 -1</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取键的指定区间值</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">getrange key 0 x</span><br></pre></td></tr></table></figure>
</li>
<li><p>替换键的指定区间值</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">setrange key x <span class="string">&quot;xxx&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>数值增减</strong></p>
<ul>
<li><p>数值递增</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">incr key</span><br></pre></td></tr></table></figure>
</li>
<li><p>数值相加</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">incrby key</span><br></pre></td></tr></table></figure>
</li>
<li><p>数值递减</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">decr key</span><br></pre></td></tr></table></figure>
</li>
<li><p>数值相减</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">decrby key</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>获取字符串长度和内容相加</strong></p>
<ul>
<li><p>获取键值长度</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">strlen key</span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串相加</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">append key value</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-3列表"><a href="#2-3列表" class="headerlink" title="2.3	列表"></a>2.3	列表</h3><ul>
<li><p><strong>列表类型</strong></p>
<ul>
<li>一个双端链表的结构，容量是2的32次方减1个元素，大概40多亿，主要功能有 <strong>push</strong>，<strong>pop</strong> 等，一般用在栈、队列、消息队列等场景</li>
<li><strong>left</strong>、<strong>right</strong> 都可以插入添加</li>
<li>底层就是个双向链表，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差</li>
</ul>
</li>
<li><p><strong>添加元素</strong></p>
<ul>
<li><p>左侧添加元素</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lpush key value</span><br></pre></td></tr></table></figure>
</li>
<li><p>右侧添加元素</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpush key value</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>获取元素</strong></p>
<ul>
<li><p>遍历列表</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lrange key 0 -1</span><br></pre></td></tr></table></figure>
</li>
<li><p>左侧出栈</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lpop key</span><br></pre></td></tr></table></figure>
</li>
<li><p>右侧出栈</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpop key</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过索引获取值</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lindex key index</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取元素个数</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">llen key</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>删除元素</strong></p>
<ul>
<li><p>从左到右删除指定数量的指定值</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lrem key num value</span><br></pre></td></tr></table></figure>
</li>
<li><p>从左到右删除所有指定值</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lrem key 0 value</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>修改元素</strong></p>
<ul>
<li><p>截取指定区间值</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ltrim key index1 index2</span><br></pre></td></tr></table></figure>
</li>
<li><p>将最后一个值添加到另一个列表的第一个</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpoplpush key1 key2</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改指定值</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lset key index value</span><br></pre></td></tr></table></figure>
</li>
<li><p>在指定值前后插入值</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">linsert key before/after value1 value2</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-4哈希表"><a href="#2-4哈希表" class="headerlink" title="2.4	哈希表"></a>2.4	哈希表</h3><ul>
<li><p><strong>哈希表类型</strong>：<strong>key-value</strong> 模式不变，但是 <strong>value</strong> 是一个键值对</p>
</li>
<li><p><strong>获取键值对</strong></p>
<ul>
<li><p>获取字段数量</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hlen key</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断键值对中是否含有指定键</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexists key1 key2</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取键值对中所有键</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hkeys key</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取键值对中所有值</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hvals key</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>修改键值对</strong></p>
<ul>
<li><p>添加键值对</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hset key1 key2 value</span><br></pre></td></tr></table></figure>
</li>
<li><p>键值对中的指定键的值增加指定整数</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hincrby key1 key2 num</span><br></pre></td></tr></table></figure>
</li>
<li><p>键值对中的指定键的值增加指定小数</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hincrbyfloat key1 key2 num</span><br></pre></td></tr></table></figure>
</li>
<li><p>不存在赋值，存在失效</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hsetnx key1 key2 value</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-5集合"><a href="#2-5集合" class="headerlink" title="2.5	集合"></a>2.5	集合</h3><ul>
<li><p><strong>集合类型</strong>：单个 <strong>key</strong> 含有多个 <strong>value</strong>，且不重复</p>
</li>
<li><p><strong>常用操作</strong></p>
<ul>
<li><p>添加元素</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sadd key member</span><br></pre></td></tr></table></figure>
</li>
<li><p>遍历集合</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">smenbers key</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断元素是否存在</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sismember key member</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除元素</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">srem key membr</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取集合长度</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scard key</span><br></pre></td></tr></table></figure>
</li>
<li><p>随机取出指定数量的元素</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">srandmember key m</span><br></pre></td></tr></table></figure>
</li>
<li><p>随机删除指定数量的元素</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spop key m</span><br></pre></td></tr></table></figure>
</li>
<li><p>将集合内的指定元素赋值给另外一个集合</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">smove key1 key2 member</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>集合运算</strong></p>
<ul>
<li><p>减运算</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sdiff key1 key2</span><br></pre></td></tr></table></figure>
</li>
<li><p>交运算</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sinter key1 key2</span><br></pre></td></tr></table></figure>
</li>
<li><p>并运算</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sunion key1 key2</span><br></pre></td></tr></table></figure>
</li>
<li><p>交运算结果的基数</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sintercard numkeys key1 key2</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-6有序集合"><a href="#2-6有序集合" class="headerlink" title="2.6	有序集合"></a>2.6	有序集合</h3><ul>
<li><p><strong>有序集合类型</strong>：在集合的基础上加上一个 <strong>score</strong> 分数</p>
</li>
<li><p><strong>常用操作</strong></p>
<ul>
<li><p>添加元素</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zadd key score member</span><br></pre></td></tr></table></figure>
</li>
<li><p>以分数排序返回指定区间元素</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zrange key index1 index2</span><br></pre></td></tr></table></figure>
</li>
<li><p>反序</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zrevrange key index1 index2</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取指定分数区间的元素</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zrangebyscore key min max [<span class="built_in">limit</span> offset count]</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取元素的分数</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zscore key member</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取集合元素数量</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zcard key</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除元素</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zrem key value</span><br></pre></td></tr></table></figure>
</li>
<li><p>增加指定元素的分数</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">incrby key increment member</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取指定分数区间的元素数量</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zcount key min max</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取指定元素下标值</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zrank key values</span><br></pre></td></tr></table></figure>
</li>
<li><p>逆序获得下标值</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zrevrank key values</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-7位图"><a href="#2-7位图" class="headerlink" title="2.7	位图"></a>2.7	位图</h3><ul>
<li><p><strong>位图类型</strong></p>
<ul>
<li>用 <strong>string</strong> 类型作为底层数据结构实现的一种统计二值状态的数据类型</li>
<li>本质是数组，基于 <strong>string</strong> 数据类型的按位的操作，该数组由多个二进制位组成，每个二进制位都对应一个偏移量</li>
<li>支持的最大位数是2^32位，它可以极大的节约存储空间，使用512M内存就可以存储多达42.9亿的字节信息</li>
</ul>
</li>
<li><p><strong>常用操作</strong></p>
<ul>
<li><p>设置二进制位</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">setbit key offset value</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取二进制位的值</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">getbit key offset</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取字节数</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">strlen key</span><br></pre></td></tr></table></figure>
</li>
<li><p>获得含有一的数量</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bitcount key</span><br></pre></td></tr></table></figure>
</li>
<li><p>并运算</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bitop and destKey key1 key2</span><br></pre></td></tr></table></figure>
</li>
<li><p>或运算</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bitop or destKey key1 key2</span><br></pre></td></tr></table></figure>
</li>
<li><p>异或运算</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bitop xor destKey key1 key2</span><br></pre></td></tr></table></figure>
</li>
<li><p>非运算</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bitop not destKey key1 key2</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-8基数统计"><a href="#2-8基数统计" class="headerlink" title="2.8	基数统计"></a>2.8	基数统计</h3><ul>
<li><p><strong>基数统计类型</strong></p>
<ul>
<li>去重复统计功能的基数估计算法</li>
<li>基数是一种数据集，去重复后的真实个数</li>
<li>用于统计一个集合中不重复的元素个数，就是对集合去重复后剩余元素的计算，只需要花费12KB内存，就能记录2的64次方个不同元素的基数</li>
</ul>
</li>
<li><p><strong>常用操作</strong></p>
<ul>
<li><p>添加元素</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pfadd key value</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取指定基数估算值</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pfcount key</span><br></pre></td></tr></table></figure>
</li>
<li><p>合并基数统计</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pfmerge destKey sourceKey</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-9地理空间"><a href="#2-9地理空间" class="headerlink" title="2.9	地理空间"></a>2.9	地理空间</h3><ul>
<li><p><strong>地理空间类型</strong>： 使用二维的经纬度表示，经度范围 (-180, 180]，纬度范围 (-90, 90]，只要我们确定一个点的经纬度就可以名取得他在地球的位置</p>
</li>
<li><p><strong>常用操作</strong></p>
<ul>
<li><p>添加坐标</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">geoadd key longitude latitude member</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取经纬度</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">geopos key member</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取坐标的bash32表示</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">geohash key member</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取两个位置之间的距离</p>
<ul>
<li><p>以米为单位计算</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">geodist key member1 member2 m</span><br></pre></td></tr></table></figure>
</li>
<li><p>以千米为单位计算</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">geodist key member1 member2 km</span><br></pre></td></tr></table></figure>
</li>
<li><p>以英寸为单位计算</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">geodist key member1 member2 ft</span><br></pre></td></tr></table></figure>
</li>
<li><p>以英里为单位计算</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">geodist key member1 member2 mi</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>获取指定距离内的位置元素</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">georadius key longitude latitude radius</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取指定范围内的元素</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">georadiusbymember key longitude latitude radius</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-10流"><a href="#2-10流" class="headerlink" title="2.10	流"></a>2.10	流</h3><ul>
<li><p><strong>流类型</strong>：实现消息队列，支持消息的持久化、支持自动生成全局唯一 <strong>id</strong>、支持 <strong>ACK</strong> 确认消息的模式、支持消费组模式等，让消息队列更加的稳定和可靠</p>
</li>
<li><p><strong>流的结构</strong></p>
<ul>
<li><strong>消费组</strong>：由命令创建，同一消费组可以有多个消费者</li>
<li><strong>游标</strong>：每个消费组都有一个游标，任意消费者读取消息后都会使游标向前移动</li>
<li><strong>消费者</strong>：消费组中的消费者</li>
<li><strong>待处理编号</strong>：记录当前被消费已读取但未 <strong>ACK</strong> 的消息 <strong>id</strong></li>
</ul>
</li>
<li><p><strong>常用操作</strong></p>
<ul>
<li><p><strong>队列指令</strong></p>
<ul>
<li><p>添加到队列末尾</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xadd key field value</span><br></pre></td></tr></table></figure>
</li>
<li><p>限制流的长度</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrim key maxlen len</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除消息</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xdel key <span class="built_in">id</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>获取消息长度</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xlen key</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取消息列表</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xrange key index1 index2</span><br></pre></td></tr></table></figure>
</li>
<li><p>反向获取消息列表</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xrevrange key index1 index2</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取消息</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xread count block key <span class="built_in">id</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>消费组指令</strong></p>
<ul>
<li><p>创建消费者组</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xgroup create key groupname</span><br></pre></td></tr></table></figure>
</li>
<li><p>读取消费者组的消息</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xreadgroup group group consumer key <span class="built_in">id</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>消息被标记为已处理</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xack key group <span class="built_in">id</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>设置消费组最后递送消息的 <strong>id</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xgroup setid key groupname <span class="built_in">id</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>删除消费者组</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xgroup delconsumer key groupname consumername</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取待处理消息的详细信息</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xpending key group index1 index2 count</span><br></pre></td></tr></table></figure>
</li>
<li><p>转移消息的归属权</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xclaim key group consumer time <span class="built_in">id</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>打印消费者组的详细信息</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xinfo <span class="built_in">groups</span> key</span><br></pre></td></tr></table></figure>
</li>
<li><p>打印流的详细信息</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xinfo stream key</span><br></pre></td></tr></table></figure>
</li>
<li><p>打印流的详细信息</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xinfo consumers key groupname</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>四个特殊符号</strong></p>
<ul>
<li>**+&#x2F;-**：最小和最大可能出现的 <strong>id</strong></li>
<li>**$**：表示只消费新的消息，当前流中最大的 <strong>id</strong></li>
<li>**&gt;**：用于 <strong>xreadgroup</strong> 命令，表示迄今没有发送给组中的使用者的消息</li>
<li>*****：用于 <strong>xadd</strong> 命令，让系统自动生成 <strong>id</strong></li>
</ul>
</li>
</ul>
<h3 id="2-11位域"><a href="#2-11位域" class="headerlink" title="2.11	位域"></a>2.11	位域</h3><ul>
<li><strong>位域类型</strong><ul>
<li>将很多小的整数存储到一个长度较大的位图中，又或者将一个非常庞大的键分割位多个较小的键来进行储存，从而高效利用内存</li>
<li>将 <strong>Redis</strong> 字符串看作是一个由二进制位组成的数组并能对变长位宽和任意没有字节对齐的指定整型位域进行寻址和修改</li>
</ul>
</li>
</ul>
<h2 id="第三节持久化"><a href="#第三节持久化" class="headerlink" title="第三节	持久化"></a>第三节	持久化</h2><h3 id="3-1RDB"><a href="#3-1RDB" class="headerlink" title="3.1	RDB"></a>3.1	RDB</h3><ul>
<li><p><strong>RDB</strong>：全称 <strong>Redis Data Base</strong>，即 <strong>Redis</strong> 数据库，<strong>RDB</strong> 持久性以指定的时间间隔执行数据集的时间点快照</p>
<ul>
<li>在指定的时间间隔，执行数据集的时间点快照</li>
<li>实现类似照片记录效果的方式，就是把某一时刻的数据和状态以文件的形式写到磁盘上，也就是快照，即使故障宕机，快照文件也不会丢失，数据的可靠性也就得到了保证</li>
<li>将内存数据全部保存到磁盘 <strong>dump.rdb</strong> 文件中</li>
</ul>
</li>
<li><p><strong>配置方法</strong></p>
<ul>
<li><p>配置保存间隔</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">save 3600 1 300 100 60 100  // 3600秒 修改一次  100秒 修改60次  60秒 修改10000次 触发保存</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改快照文件保存地址</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dir</span> /user/local/dump</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改快照文件名称</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">abfilename dump6666.rdb</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>恢复备份</strong></p>
<ul>
<li><strong>自动操作</strong>：物理恢复，一定服务和备份分机隔离，各自存储</li>
<li><strong>手动操作</strong><ul>
<li><strong>save</strong>：在主线程中执行会阻塞 <strong>Redis</strong> 服务器，直到持久化工作完成才能处理其他命令，线上禁止使用</li>
<li><strong>bgsave</strong>：在后台异步进行快照操作，不阻塞快照同时还可以响应客户端请求，该触发过程会 <strong>fork</strong> 一个子进程由子进程复制持久化过程</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>优缺点</strong></p>
<ul>
<li><strong>优点</strong>：适合大规模的数据恢复，按照业务定时备份，对数据完整性和一致性要求不高，<strong>RDB</strong> 文件在内存中的加载速度比 <strong>AOF</strong> 快得多</li>
<li><strong>缺点</strong><ul>
<li>在一定间隔时间做一次备份，如果 <strong>Redis</strong> 意外宕机，就会丢掉最近一次快照到宕机时的数据</li>
<li>内存数量的全量同步，如果数据量过大会导致 <strong>IO</strong> 严重影响服务器性能</li>
<li><strong>RDB</strong> 依赖于主进程的 <strong>fork</strong> ，在更大的数据集中，这可能会导致服务器请求的瞬间延迟</li>
<li><strong>fork</strong> 的时候内存中的数据被克隆了一份，大致2倍的膨胀性，需要考虑</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>检查修复快照文件</strong>：当文件受损时，检查并修复受损的文件</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-check-rdb dump.rdb</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>触发 RDB 快照的情况</strong></p>
<ul>
<li>配置文件中默认快照配置</li>
<li>手动执行 <strong>save</strong> 或者 <strong>bgsave</strong> 命令</li>
<li>执行清空数据库的命令</li>
<li>执行关机命令且没有开启 <strong>AOF</strong> 持久化</li>
<li>主从复制时，主节点自动触发</li>
</ul>
</li>
<li><p><strong>禁用快照</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">save <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>RDB 配置优化</strong></p>
<ul>
<li><p>保存错误时停止写入</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stop-writes-on-bgsave-error <span class="built_in">yes</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>快照压缩存储</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rdbcompression <span class="built_in">yes</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>算法数据校验</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rdbchecksum <span class="built_in">yes</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>删除复制中的快照文件启用</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rdb-del-sync-files no</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="3-2AOF"><a href="#3-2AOF" class="headerlink" title="3.2	AOF"></a>3.2	AOF</h3><ul>
<li><p><strong>AOF 简介</strong>：以日志的形式来记录每个写操作，将 <strong>Redis</strong> 执行过的所有写指令记录下来（读操作不记录），只许追加文件但不可以改写文件，<strong>Redis</strong> 启动之初会读取该文件重新构建数据，即根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</p>
</li>
<li><p><strong>AOF 持久化流程</strong></p>
<ul>
<li>客户端作为命令的来源，会有多个源头以及源源不断的请求命令</li>
<li>在这些命令到达服务器以后并不是直接写入 <strong>AOF</strong> 文件，会将这些命念先放入 <strong>AOF</strong> 缓存中进行保存，即内存中的一片区域，当这些命令达到一定量以后再写入磁盘，避免频繁的磁盘 <strong>IO</strong> 操作</li>
<li><strong>AOF</strong> 缓存会根据同步文件的三种写回策略将命令写入磁盘上 <strong>AOF</strong> 文件</li>
<li>随着写入 <strong>AOF</strong> 内容的增加为避免文件膨胀，会根据规则进行命令的合并，从而起到 <strong>AOF</strong> 文件压縮的目的</li>
<li>当服务器重启的时候会从 <strong>AOF</strong> 文件载入数据</li>
</ul>
</li>
<li><p><strong>AOF 缓冲区三种写回策略</strong></p>
<ul>
<li><strong>always</strong>：同步写回，每个写命令执行完立刻同步地将日志写回磁盘</li>
<li><strong>everysec</strong>：每秒写回，每个写命令执行完，只是先把日志写到 <strong>AOF</strong> 缓冲区，每隔1s把缓存区地数据写入磁盘</li>
<li><strong>no</strong>：操作系统控制写回，只是将日志先写到 <strong>AOF</strong> 文件的内存缓冲区，由操作系统决定何时将缓冲区内容写回磁盘</li>
</ul>
</li>
<li><p><strong>AOF 配置优化</strong></p>
<ul>
<li><p>开启 <strong>AOF</strong> 持久化</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">appendonly no</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置 <strong>AOF</strong> 文件保存路径</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">appenddirname <span class="string">&quot;appendonlydir&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>设置 <strong>AOF</strong> 文件名称</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">appendfilename <span class="string">&quot;appendonly.aof&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>异常恢复</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-check-aof --fix appendonly.aof</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>优缺点</strong></p>
<ul>
<li><strong>优点</strong>：更好的保护数据不丢失、性能高、可做紧急恢复</li>
<li><strong>缺点</strong><ul>
<li>相同数据集的数据而言 <strong>AOF</strong> 文件要远大于 <strong>RDB</strong> 文件，恢复速度慢于 <strong>RDB</strong></li>
<li><strong>AOF</strong> 运行效率要慢于 <strong>RDB</strong>，每秒同步策略效率较好，不同步效率和 <strong>RDB</strong> 相同</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>AOF 重写机制</strong></p>
<ul>
<li><p>开启重写机制</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure>
</li>
<li><p>自动触发</p>
<ul>
<li>满足配置文件中的选项后，<strong>Redis</strong> 会记录上次重写时的 <strong>AOF</strong> 大小</li>
<li>默认配置是当 <strong>AOF</strong> 文件大小是上次重写后大小的一倍且文件大于64M时触发</li>
</ul>
</li>
<li><p>手动触发</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bgrewriteaof</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="3-3RDB-AOF混合持久化"><a href="#3-3RDB-AOF混合持久化" class="headerlink" title="3.3	RDB-AOF混合持久化"></a>3.3	RDB-AOF混合持久化</h3><ul>
<li><strong>数据恢复顺序和加载顺序</strong>：在同时开启 <strong>RDB</strong> 和 <strong>AOF</strong> 持久化时，重启时只会加载 <strong>AOF</strong> 文件，不会加载 <strong>RDB</strong> 文件</li>
<li><strong>同时开启两种持久化方式</strong><ul>
<li>设置 <strong>aof-use-rdb-preamble</strong> 的值为 <strong>yes</strong>，开启混合方式持久化</li>
<li>当 <strong>Redis</strong> 重启时候会优先载入 <strong>AOF</strong> 文件来恢复原始的数据，在通常情况下 <strong>AOF</strong> 文件保存的数据集要比 <strong>RDB</strong> 文件保存的数据集要完整</li>
<li>当 <strong>RDB</strong> 的数据不实时，同时使用两者时服务器重启也只会找 <strong>AOF</strong> 文件</li>
</ul>
</li>
</ul>
<h3 id="3-4纯缓存模式"><a href="#3-4纯缓存模式" class="headerlink" title="3.4	纯缓存模式"></a>3.4	纯缓存模式</h3><ul>
<li><strong>同时关闭 RDB 和 AOF</strong><ul>
<li>禁用 <strong>RDB</strong> 持久化：<strong>save “”</strong> 命令，禁用 <strong>RDB</strong> 持久化模式下，仍然可以使用命令 <strong>save</strong>、<strong>bgsave</strong>生成 <strong>RDB</strong> 文件</li>
<li>禁用 <strong>AOF</strong>持久化：<strong>appendonly no</strong> 命令，禁用 <strong>AOF</strong> 持久化模式下，仍然可以使用命令 <strong>bgrewriteaof</strong> 生成 <strong>AOF</strong> 文件</li>
</ul>
</li>
</ul>
<h2 id="第四节事务"><a href="#第四节事务" class="headerlink" title="第四节	事务"></a>第四节	事务</h2><h3 id="4-1事务介绍"><a href="#4-1事务介绍" class="headerlink" title="4.1	事务介绍"></a>4.1	事务介绍</h3><ul>
<li><strong>Redis 事务介绍</strong><ul>
<li>可以一次执行多个命令，本质是一组命令的集合，一个事务中的所有命令都会序列化，按顺序地串行化执行而不会被其他命令插入，不许加塞</li>
<li>一个队列中，一次性、顺序性、排他性的执行一系列命令</li>
</ul>
</li>
<li><strong>Redis事务和数据库事务</strong><ul>
<li><strong>单独的隔离操作</strong>：仅仅保证事务里的操作会被连续地独占执行，在执行完所有指令之前不会同时执行其他客户端的请求</li>
<li><strong>没有隔离级别的概念</strong>：事务提交前不会执行任何指令，所有不存在隔离级别的概念</li>
<li><strong>不保证原子性</strong>：不保证所有指令同时成功或同时失败，没有执行到一半回滚的能力</li>
<li><strong>排它性</strong>：会保证一个事务内的命令依次执行，不会被其他命令插入</li>
</ul>
</li>
</ul>
<h3 id="4-2事务基本操作"><a href="#4-2事务基本操作" class="headerlink" title="4.2	事务基本操作"></a>4.2	事务基本操作</h3><ul>
<li><p><strong>事务命令</strong></p>
<ul>
<li><p>取消事务，放弃事务块内的所有命令</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">discard</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行事务块内的所有命令</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exec</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>标记一个事务块的开始</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">multi</span><br></pre></td></tr></table></figure>
</li>
<li><p>取消 <strong>watch</strong> 命令对所有 <strong>key</strong> 的监视</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unwatch</span><br></pre></td></tr></table></figure>
</li>
<li><p>监视一个或多个 <strong>key</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">watch key</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>事务操作</strong></p>
<ul>
<li><p>正常执行</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">multi</span><br><span class="line"><span class="built_in">exec</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>放弃事务</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">multi</span><br><span class="line">discard</span><br></pre></td></tr></table></figure>
</li>
<li><p>全体连坐：事务中含有语法错误时，全部指令都不会执行</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">multi</span><br><span class="line">// 语法错误</span><br><span class="line"><span class="built_in">exec</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>冤头债主：执行后错误时，不提供事务回滚，正确的指令依然会执行</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">multi</span><br><span class="line"><span class="built_in">exec</span></span><br><span class="line">// 执行错误</span><br></pre></td></tr></table></figure>
</li>
<li><p>监视：监视变量后，如果中途发生数据篡改，后续命令执行会失败</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">watch key</span><br><span class="line">// 加塞篡改</span><br><span class="line">multi</span><br><span class="line"><span class="built_in">exec</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第五节管道"><a href="#第五节管道" class="headerlink" title="第五节	管道"></a>第五节	管道</h2><h3 id="5-1管道介绍"><a href="#5-1管道介绍" class="headerlink" title="5.1	管道介绍"></a>5.1	管道介绍</h3><ul>
<li><p><strong>管道简介</strong></p>
<ul>
<li>可以一次性发送多条命令给服务端</li>
<li>服务端依次处理完完毕后，通过一条响应一次性将结果返回，通过减少客户端与 <strong>Redis</strong> 的通信次数来实现降低往返延时时间</li>
<li>管道实现的原理是队列，先进先出特性保证数据的顺序性</li>
<li>将多个命令都存在一个 <strong>txt</strong> 文件中，然后一同批处理，验证批处理</li>
</ul>
</li>
<li><p><strong>管道通信</strong>：<strong>Redis</strong> 是一种基于客户端-服务端模型以及请求&#x2F;响应协议的 <strong>TCP</strong> 服务，如果同时需要执行大量的命令，那么就要等待上一条命令应答后再执行，这中间不仅仅多了 <strong>RTT</strong>，而且还频繁调用系统 <strong>IO</strong>，发送网络请求，同时需要  <strong>Redis</strong> 调用多次读写系统方法，系统方法会将数据从用户态转移到内核态，会对进程上下文有较大的影响，管道通过一条响应一次性将结果返回，通过减少通信次数来实现降低往返延时时间</p>
</li>
</ul>
<h3 id="5-2管道操作"><a href="#5-2管道操作" class="headerlink" title="5.2	管道操作"></a>5.2	管道操作</h3><ul>
<li><p><strong>管道操作</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> cmd.txt | redis-cli --pipe</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>管道与原生批量</strong></p>
<ul>
<li>原生批量命令是原子性，而管道是非原子性</li>
<li>原生批量命令一次只能执行一种命令，而管道支持批量执行不同命令</li>
<li>原生批命令是服务端实现，而管道需要服务端与客户端共同完成</li>
</ul>
</li>
<li><p><strong>管道与事务</strong></p>
<ul>
<li>事务具有原子性，管道不具有原子性</li>
<li>管道一次性将多条命令发送到服务器，事务是一条一条发的，事务只有在接收到 <strong>exec</strong> 命令后才会执行，管道不会</li>
<li>执行事务时会阻塞其他命令的执行，而执行管道中的命令时不会</li>
</ul>
</li>
<li><p><strong>管道注意事项</strong></p>
<ul>
<li>管道缓冲的指令只是会依次执行，不保证原子性，如果执行中指令发生异常，将会继续执行后续的指令</li>
<li>使用管道组装的命令个数不能太多，不然数据量过大客户端阻塞的时间可能过久，同时服务器也被迫回复一个队列答复，占用很多内存</li>
</ul>
</li>
</ul>
<h2 id="第六节复制"><a href="#第六节复制" class="headerlink" title="第六节	复制"></a>第六节	复制</h2><h3 id="6-1复制介绍"><a href="#6-1复制介绍" class="headerlink" title="6.1	复制介绍"></a>6.1	复制介绍</h3><ul>
<li><strong>主从复制</strong>：将一台 <strong>Redis</strong> 服务器的数据，复制到其他的 <strong>Redis</strong> 服务器，前者称为主节点，后者称为从节点，数据的复制是单向的，只能由主节点到从节点，主节点以写为主，从节点以读为主，当主节点数据变化时，自动将新的数据异步同步到其他从节点数据库</li>
</ul>
<h3 id="6-2基本操作"><a href="#6-2基本操作" class="headerlink" title="6.2	基本操作"></a>6.2	基本操作</h3><ul>
<li><p><strong>配置方式</strong></p>
<ul>
<li><strong>配置文件</strong>：一次配置，持久稳定</li>
<li><strong>命令配置</strong>：当次生效</li>
</ul>
</li>
<li><p><strong>编辑 redis.conf 配置文件</strong></p>
<ul>
<li><p>修改端口号</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">port 6379</span><br></pre></td></tr></table></figure>
</li>
<li><p>开启守护进程模式</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">daemonize <span class="built_in">yes</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 <strong>pid</strong> 文件名</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pidfile <span class="string">&quot;/var/run/redis_6379.pid&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 <strong>log</strong> 文件名</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">logfile <span class="string">&quot;./log/6379.log&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>主从复制配置</strong></p>
<ul>
<li><p>去除配置文件中的从属关系</p>
</li>
<li><p>升级为主机</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">replicaof/slaveof no one</span><br></pre></td></tr></table></figure>
</li>
<li><p>从机连接到主机</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">replicaof/slaveof 192.168.1.100 6379</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看复制节点的主从关系和配置信息</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">info replication</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>主从复制结构</strong></p>
<ul>
<li><strong>一主多从结构</strong><ul>
<li>主机有读写能力，从机只有读能力</li>
<li>当主机宕机时，从机原地待命，不会变成主机</li>
<li>当主机恢复时，主从关系恢复正常</li>
</ul>
</li>
<li><strong>薪火相传结构</strong><ul>
<li>上一个从机也可以是下一个从机的主机，从机同样可以接受其他的从机的连接和同步请求</li>
<li>从机作为链条中下一个的主机，可以有效减轻主机的写压力</li>
<li>中途变更转向会清除之前的数据，重新建立拷贝最新的数据</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="6-3复制原理"><a href="#6-3复制原理" class="headerlink" title="6.3	复制原理"></a>6.3	复制原理</h3><ul>
<li><strong>主从复制原理</strong><ul>
<li><strong>从机启动</strong>，<strong>同步初请</strong><ul>
<li>从机启动成功连接到主机后会发送一个 <strong>sync</strong> 同步命令</li>
<li>从机首次全新连接主机，一次完全同步将被自动执行，原有数据将会被主机数据覆盖清除</li>
</ul>
</li>
<li><strong>首次连接</strong>，<strong>全量复制</strong><ul>
<li>主机节点收到同步命令后开始保存快照，同时收集所有接受接收到的数据修改命令，在执行快照持久化后，将所有的快照文件和缓存命令后发送到从机，完成一次同步</li>
<li>从机服务在接受到数据库文件操作后，将其存盘并加载到内存中，从而完成复制初始化</li>
</ul>
</li>
<li><strong>心跳持续</strong>，<strong>保持通信</strong><ul>
<li>设置复制周期 <strong>repl-ping-replica-period</strong> 参数</li>
<li>主机发出 <strong>ping</strong> 包的周期默认为10秒</li>
</ul>
</li>
<li><strong>进入平稳</strong>，<strong>增量复制</strong><ul>
<li>主机继续将新的所有收集到的修改命令自动一次传给从机，完成同步</li>
</ul>
</li>
<li><strong>从机下线</strong>，重传续传<ul>
<li>主机会检查 <strong>backlog</strong> 里面的 <strong>offset</strong>，主机和从机都会保存一个复制的 <strong>offset</strong> 怀有一个 <strong>masterId</strong></li>
<li><strong>offset</strong> 是保存在 <strong>backlog</strong> 中的，主机只会把已经复制的 <strong>offset</strong> 后面的数据赋值给从机，类似断电续传</li>
</ul>
</li>
</ul>
</li>
<li><strong>主从复制的缺点</strong><ul>
<li><strong>复制延时，信号衰弱</strong>：所有的写操作先在主机上操作，然后同步更新到从机上，存在一定的延迟<ul>
<li><strong>主机宕机</strong>：默认情况下当主机宕机时不会重选一个主机，需要人工干预</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="第七节哨兵"><a href="#第七节哨兵" class="headerlink" title="第七节	哨兵"></a>第七节	哨兵</h2><h3 id="7-1哨兵介绍"><a href="#7-1哨兵介绍" class="headerlink" title="7.1	哨兵介绍"></a>7.1	哨兵介绍</h3><ul>
<li><strong>哨兵介绍</strong>：哨兵巡查监控后主机是否故障，如果故障了根据投票数自动将某一个从库转换为新主库，继续对外服务，俗称无人值守运维</li>
<li><strong>哨兵的作用</strong><ul>
<li>监控 <strong>Redis</strong> 运行状态，包括主节点和从节点</li>
<li>当主节点宕机时，能自动将从节点切换成新主节点</li>
</ul>
</li>
<li><strong>哨兵的功能</strong><ul>
<li><strong>主从监控</strong>：监控主从 <strong>Redis</strong> 库运行是否正常</li>
<li><strong>消息通知</strong>：哨兵可以将故障转移的结果发送到客户端</li>
<li><strong>故障转移</strong>：如果主节点异常，则会进行主从切换，将其中一个从节点作为新主节点</li>
<li><strong>配置中心</strong>：客户端通过连接哨兵来获得当前 <strong>Redis</strong> 服务的主节点地址</li>
</ul>
</li>
</ul>
<h3 id="7-2基本操作"><a href="#7-2基本操作" class="headerlink" title="7.2	基本操作"></a>7.2	基本操作</h3><ul>
<li><p><strong>哨兵配置文件 sentinel.conf 参数</strong></p>
<ul>
<li><strong>bind</strong>：服务监听地址，用于客户端连接</li>
<li><strong>daemonize</strong>：守护进程模式</li>
<li><strong>protect-mode</strong>：安全保护模式</li>
<li><strong>port</strong>：端口号</li>
<li><strong>logfile</strong>：日志文件存放地址</li>
<li><strong>pidfile</strong>：<strong>pid</strong> 日志路径</li>
<li><strong>dir</strong>：工作目录</li>
<li><strong>sentinel monitor</strong><ul>
<li>设置要监视的主机</li>
<li>其中 <strong>quorum</strong> 参数表示最少有几个哨兵认可客观下线，同意故障迁移的法定票数</li>
</ul>
</li>
<li><strong>sentiel auth-pass</strong>：通过密码连接主机，对应主机 <strong>redis.conf</strong> 配置文件的 <strong>masterauth</strong> 参数</li>
</ul>
</li>
<li><p><strong>哨兵案例演示</strong></p>
<ul>
<li><p>启动一主多从的服务端和客户端</p>
</li>
<li><p>启动哨兵</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-sentinel sentinel26379.conf --sentinel</span><br><span class="line">redis-sentinel sentinel26380.conf --sentinel</span><br><span class="line">redis-sentinel sentinel26381.conf --sentinel</span><br></pre></td></tr></table></figure>
</li>
<li><p>当主机宕机时，会从从机中选举一个新的主机，如果主机恢复，则充当从机身份</p>
</li>
</ul>
</li>
</ul>
<h3 id="7-3哨兵原理"><a href="#7-3哨兵原理" class="headerlink" title="7.3	哨兵原理"></a>7.3	哨兵原理</h3><ul>
<li><strong>SDOWN 主观下线</strong><ul>
<li>单个哨兵主观上检测到关于主机的状态，如果发送 <strong>ping</strong> 包后在一定时间内没有收到合法的回复，就达到了主观下线的条件</li>
<li>哨兵配置文件中设置了 <strong>down-after-milliseconds</strong> 参数表示判断主观下线的时间长度</li>
</ul>
</li>
<li><strong>ODOWN 客观下线</strong><ul>
<li>需要一定数量的哨兵，多个哨兵达成一致意见才能认为一个主机客观上已经宕机</li>
<li>哨兵配置文件中设置了 <strong>quorum</strong> 参数表示判断主机宕机的最少哨兵数量</li>
</ul>
</li>
<li><strong>选举出领导者哨兵</strong><ul>
<li>当主节点被判断客观下线后，各哨兵会进行协商，先选举一个领导哨兵节点并由它进行故障迁移</li>
<li>使用 <strong>Raft</strong> 算法选出领导节点，算法的基本思路是先到先得，哨兵 <strong>A</strong> 向 <strong>B</strong> 发送成为领导者的请求，如果 <strong>B</strong> 没有同意其他哨兵的请求，则同意其成为领导者</li>
</ul>
</li>
<li><strong>领导者哨兵选举主机</strong><ul>
<li>过滤故障的节点</li>
<li>选择优先级 <strong>slave-priority</strong> 属性最大的从节点作为主节点，如不存在则继续</li>
<li>选择复制偏移量最大，即记录数据最多的从节点作为主节点，如不存在则继续</li>
<li>选择 <strong>runid</strong> 属性最小，即 <strong>Redis</strong> 随机标识最小的从节点作为主节点</li>
</ul>
</li>
<li><strong>哨兵选举流程</strong><ul>
<li><strong>新主登基</strong>：某一个从机备选成为新的主机</li>
<li><strong>群臣俯首</strong>：其他从机更新从属关系</li>
<li><strong>旧主拜服</strong>：原有的主机回来也会成为新主机的从机</li>
</ul>
</li>
<li><strong>哨兵的使用技巧</strong><ul>
<li>哨兵节点数量应为多个，保证高可用</li>
<li>哨兵节点数量应为奇数个</li>
<li>各个哨兵节点的配置应该保持一致</li>
<li>哨兵集群 + 主从复制并不能保证数据零丢失</li>
</ul>
</li>
</ul>
<h2 id="第八节集群"><a href="#第八节集群" class="headerlink" title="第八节	集群"></a>第八节	集群</h2><h3 id="8-1集群介绍"><a href="#8-1集群介绍" class="headerlink" title="8.1	集群介绍"></a>8.1	集群介绍</h3><ul>
<li><strong>集群简介</strong>：对多个复制集进行集群，形成水平扩展每个复制集只负责存储整个数据集的一部分，是一个提供在多个 <strong>Redis</strong> 节点间共享数据的程序集</li>
<li><strong>集群的功能</strong><ul>
<li>支持多个主机，每个主机又可以挂载多个从机</li>
<li>读写分离，支持海量数据的高可用，支持海量数据的读写存储操作</li>
<li>由于集群自带哨兵的故障转移机制，内置了高可用的支持，无需再去使用哨兵功能</li>
<li>客户端和 <strong>Redis</strong> 的节点连接，不再需要连接集群中所有节点，只需连接集群中的任意一个可用节点即可</li>
<li>槽位 <strong>slot</strong> 负责分配到各个物理服务节点，由对应的集群来负责维护节点、插槽和数据之间的关系</li>
</ul>
</li>
</ul>
<h3 id="8-2集群分布式存储"><a href="#8-2集群分布式存储" class="headerlink" title="8.2	集群分布式存储"></a>8.2	集群分布式存储</h3><ul>
<li><p><strong>哈希取余分区</strong></p>
<ul>
<li><strong>算法描述</strong>：<strong>hash(key) % N</strong> 个机器台数，计算出哈希值，用来决定数据映射到哪一个节点上</li>
<li><strong>优点</strong>：简单粗暴，直接有效，只需要预估好数据规划节点，就能保证一段时间的数据支撑，使用 <strong>Hash</strong> 算法让固定的一部分请求落到同一台服务器上，每台服务器固定处理一部分请求，起到负载均衡和分而治之的作用</li>
<li><strong>缺点</strong><ul>
<li>直接规划好节点，进行扩容或者缩容会很麻烦，每次数据变动会导致节点有变动，映射关系都要重新计算</li>
<li>如果需要弹性扩容或故障停机的情况下，原来的取模公式就会发生变化，此时地址经过取余运算的结果将发生很大变化，根据公式获取的服务器也会变得不可控</li>
<li>某个 <strong>Redis</strong> 机器宕机了，由于台数数量变化，会导致 <strong>hash</strong> 取余全部数据重新洗牌</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>一致性哈希算法分区</strong></p>
<ul>
<li><p><strong>算法描述</strong></p>
<ul>
<li>将整个哈希值组织成一个抽象的圆环，称为哈希环，哈希函数的输出值一般在0到 <strong>INT_MAX</strong> 之间，这些输出值可以均匀地映射到哈希环边上</li>
<li>将分布式系统的节点映射到圆环上，可以通过机器名称或 <strong>IP</strong> 地址将节点映射到环上</li>
<li>将需要存储的数据的关键字输入哈希函数，计算出哈希值，根据哈希值将数据映射到哈希环上</li>
<li>数据存储在按照顺时针方向遇到的第一个节点上</li>
</ul>
</li>
<li><p><strong>优点</strong></p>
<ul>
<li>容错性高，如果一台服务器不可用，则受影响的数据仅仅是此服务器到其环空间中前一台服务器</li>
<li>扩展性高，添加服务器节点不会导致 <strong>hash</strong> 取余全部数据重新洗牌</li>
</ul>
</li>
<li><p><strong>缺点</strong>：在服务节点太少时，容易因为节点分布不均匀而造成数据倾斜问题</p>
</li>
</ul>
</li>
<li><p><strong>哈希槽分区</strong></p>
<ul>
<li><strong>算法描述</strong><ul>
<li>在数据和节点之间加入一层哈希槽，本质是一个数组，用于管理数据和节点之间的关系</li>
<li>一个集群只能有 16384个 槽，这些槽会分配给集群中的所有主节点，分配策略没有要求</li>
<li>集群会记录节点和槽的对应关系，需要对 <strong>key</strong> 求哈希值，然后对16384取模，根据余数落入对应的槽里</li>
<li>当需要在集群中放置一个节点时，先对 <strong>key</strong> 使用 <strong>crc16</strong> 算法算出一个结果然后用结果对16384取模，这样每个 <strong>key</strong> 都会对应一个编号在 0-16383 之间的哈希槽，也就是映射到某个节点上</li>
</ul>
</li>
<li><strong>优点</strong>：很容易增加或删除节点，无论添加删除或者改变某个节点的哈希槽的数量都不会造成集群不可用的状态</li>
<li><strong>缺点</strong>：集群不保证强一致性，在特定的条件下，可能会丢掉一些被系统收到的写入请求命令</li>
</ul>
</li>
</ul>
<h3 id="8-3集群配置"><a href="#8-3集群配置" class="headerlink" title="8.3	集群配置"></a>8.3	集群配置</h3><ul>
<li><p><strong>集群配置步骤</strong></p>
<ul>
<li><p>创建配置文件</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cluster-enabled <span class="built_in">yes</span> // 系统启用集群</span><br><span class="line">cluster-config-file nodes-6381.conf // 指定包含集群中节点信息的配置文件</span><br><span class="line">cluster-node-timeout 5000 // 检验集群中节点无响应的超时时间</span><br></pre></td></tr></table></figure>
</li>
<li><p>构建集群关系</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server /myredis/cluster/redisCluter6381.conf // 启动服务器</span><br><span class="line">redis-cli --cluster create ip1:port1 ip2:port2 ip3:port3 ip4:port4 ip5:port5 ip6:port6 --cluster-replicas 1 // 构建主从关系</span><br></pre></td></tr></table></figure>
</li>
<li><p>检验集群状态</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli -a 123456 -p 6381 -c // 连接集群端口</span><br><span class="line">cluster nodes // 查看集群的主从关系</span><br><span class="line">cluster info // 查看集群信息</span><br><span class="line">info replication // 查看主从信息</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试集群</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cluster keyslot k1 // 查看键的槽位值</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>主从容错切换迁移</strong></p>
<ul>
<li><p>主机宕机，从机会成为主机，当原主机恢复时，不会重新成为主机</p>
</li>
<li><p>恢复原有主从关系</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CLUSTER FAILOVER   // 在原始从机端口号下执行</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>主从扩容</strong></p>
<ul>
<li><p>新建主节点服务实例配置文件并启动</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server redis_7007.conf</span><br></pre></td></tr></table></figure>
</li>
<li><p>主节点 7007 加入集群</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster add-node 192.168.3.100:7007 192.168.3.100:7001</span><br></pre></td></tr></table></figure>
</li>
<li><p>分配槽号，并输入分配槽位数量和插入节点 ID</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster reshard 192.168.3.100:7007</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查集群情况</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster check 192.168.3.100:7001</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建从节点服务实例配置文件并启动</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server redis_7008.conf</span><br></pre></td></tr></table></figure>
</li>
<li><p>从节点 7008 加入集群</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster add-node 192.168.3.100:7008 192.168.3.100:7001</span><br></pre></td></tr></table></figure>
</li>
<li><p>挂接从节点，参数为主节点的 ID</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:7008&gt; cluster replicate 1d708c5042d53b6bc1e855ea41755782b6692e1a</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查集群情况</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cluster nodes</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>主从缩容</strong></p>
<ul>
<li><p>删除从节点，参数为待删除从节点的 ID</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster del-node 192.168.3.100:7001 cd26feeb271c1260ec134d85dcdeaf4c72bfc3ad</span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭从节点 7008 服务</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli -p 7008 shutdown</span><br></pre></td></tr></table></figure>
</li>
<li><p>分配槽位给其他主节点，并输入分配槽位数量和接受节点 ID，其中 done 表示结束</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster reshard 192.168.3.100:7001</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除主节点，参数为待删除从节点的 ID</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster del-node 192.168.3.100:7001 1d708c5042d53b6bc1e855ea41755782b6692e1a</span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭主节点 7007 服务</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli -p 7007 shutdown</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第九节SpringBoot集成Redis"><a href="#第九节SpringBoot集成Redis" class="headerlink" title="第九节	SpringBoot集成Redis"></a>第九节	SpringBoot集成Redis</h2><h3 id="9-1Redis配置"><a href="#9-1Redis配置" class="headerlink" title="9.1	Redis配置"></a>9.1	Redis配置</h3><ul>
<li><p><strong>编写  redis.conf 配置文件</strong></p>
<ul>
<li><p>开启守护模式进程</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">daemonize <span class="built_in">yes</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭安全保护模式</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">protected-mode=no</span><br></pre></td></tr></table></figure>
</li>
<li><p>注释服务监听地址</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bind 127.0.0.1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加密码</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">requirepass=123456</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>防火墙配置</strong></p>
<ul>
<li><p>开启防火墙</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start firewalld</span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭防火墙</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure>
</li>
<li><p>开机禁用防火墙</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure>
</li>
<li><p>开机启用防火墙</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> firewalld</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="9-2Redis-Template"><a href="#9-2Redis-Template" class="headerlink" title="9.2	Redis Template"></a>9.2	Redis Template</h3><ul>
<li><p><strong>连接单机</strong></p>
<ul>
<li><p><strong>添加依赖</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置文件</strong></p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.data.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="attr">spring.data.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="attr">spring.data.redis.timeout</span>=<span class="string">3000</span></span><br><span class="line"><span class="attr">spring.data.redis.connectTimeout</span>=<span class="string">5000</span></span><br><span class="line"><span class="attr">spring.data.redis.lettuce.pool.min-idle</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">spring.data.redis.lettuce.pool.max-idle</span>=<span class="string">8</span></span><br><span class="line"><span class="attr">spring.data.redis.lettuce.pool.max-active</span>=<span class="string">100   </span></span><br><span class="line"><span class="attr">spring.data.redis.lettuce.pool.max-wait</span>=<span class="string">2000</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置类</strong></p>
<ul>
<li><p><strong>Redis 配置</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String,Object&gt; <span class="title function_">redisTemplate</span><span class="params">(LettuceConnectionFactory lettuceConnectionFactory)</span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(lettuceConnectionFactory);</span><br><span class="line">        <span class="comment">//设置key序列化方式String</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        <span class="comment">//设置value的序列化方式json，使用GenericJackson2JsonRedisSerializer替换默认的序列化</span></span><br><span class="line">        redisTemplate.setValueSerializer(<span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setHashKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setHashValueSerializer(<span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>());</span><br><span class="line">        redisTemplate.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>业务层</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addOrder</span><span class="params">()</span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key,value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getOrderId</span><span class="params">(Integer keyId)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (String) redisTemplate.opsForValue().get(ORDER_KEY + keyId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>控制层</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/order/add&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addOrder</span><span class="params">()</span>&#123;</span><br><span class="line">        orderService.addOrder();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/order/&#123;keyId&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getOrderId</span><span class="params">(<span class="meta">@PathVariable</span> Integer keyId)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderService.getOrderId(keyId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>连接集群</strong></p>
<ul>
<li><p><strong>配置文件</strong></p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.redis.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="attr">spring.redis.clusterspring.redis.cluster.nodes</span>=<span class="string">192.1.max-redirects=3</span></span><br><span class="line"><span class="attr">spring.redis.lettuce.pool.max-active</span>=<span class="string">8</span></span><br><span class="line"><span class="attr">spring.redis.lettuce.pool.max-wait</span>=<span class="string">-1ms</span></span><br><span class="line"><span class="attr">spring.redis.lettuce.pool.max-idle</span>=<span class="string">8</span></span><br><span class="line"><span class="attr">spring.redis.lettuce.pool.min-idle</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">68.238.111</span>:<span class="string">6381,192.168.238.111:6382,192.168.238.112:6383,192.168.238.112:6384,192.168.238.113:6385,192.168.238.113:6386</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>设置刷新节点结群拓扑和动态感应</strong></p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.redis.lettuce.cluster.refresh.adaptive</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.redis.lettuce.cluster.refresh.period</span>=<span class="string">2000</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第十节多线程"><a href="#第十节多线程" class="headerlink" title="第十节	多线程"></a>第十节	多线程</h2><h3 id="10-1Redis单线程"><a href="#10-1Redis单线程" class="headerlink" title="10.1	Redis单线程"></a>10.1	Redis单线程</h3><ul>
<li><strong>Redis单线程</strong>：主要是指 <strong>Redis</strong> 的网络 <strong>IO</strong> 和键值对读写是由一个线程来完成的，<strong>Redis</strong> 在处理客户端的请求时包括获取 (<strong>socket</strong> 读)、解析、执行、内容返回 (<strong>socket</strong> 写) 等都由一个顺序串行的主线程处理</li>
<li><strong>单线程高性能的原因</strong><ul>
<li><strong>基于内存操作</strong>：所有 <strong>Redis</strong> 的数据都存在内存中，因此所有的运算都是内存级别的，所以他的性能高</li>
<li><strong>数据结构简单</strong>：<strong>Redis</strong> 的数据结构是专门设计的，这些简单的数据结构的查找和操作时间大部分复杂度都是 **O(1)**，性能高</li>
<li><strong>多路复用和非阻塞IO</strong>：<strong>Redis</strong> 使用 <strong>I&#x2F;O</strong> 多路复用功能来监听多个 <strong>socket</strong> 连接客户端，这样可以使用一个线程来处理多个请求，减少线程切换带来额开销，同时也避免了 <strong>I&#x2F;O</strong> 阻塞操作</li>
<li><strong>避免上下文切换</strong>：因为是单线程模型，因此就避免了不必要的上下文切换和多线程竞争，这就省去了多线程切换带来的时间和性能上的消耗，而且单线程不会导致死锁问题的发生</li>
</ul>
</li>
<li><strong>单线程的优势</strong><ul>
<li>使用单线程模型是 <strong>Redis</strong> 的开发和维护更简单，因为单线程模型方便开发和调试</li>
<li>即使使用单线程模型也并发的处理多客户端的请求，主要使用的是 <strong>IO</strong> 多路复用和非阻塞 <strong>IO</strong></li>
<li>对于 <strong>Redis</strong> 系统来说，主要的性能瓶颈是内存或者网络带宽而并非 <strong>CPU</strong></li>
</ul>
</li>
</ul>
<h3 id="10-2Redis多线程"><a href="#10-2Redis多线程" class="headerlink" title="10.2	Redis多线程"></a>10.2	Redis多线程</h3><ul>
<li><p><strong>Redis多线程的优势</strong>：惰性删除，可以有效避免 <strong>Redis</strong> 主线程卡顿，unlink key，flushdb async，flushall async</p>
</li>
<li><p><strong>Redis多线程特性</strong></p>
<ul>
<li>采用多个 <strong>IO</strong> 线程来处理网络请求，提高网络请求处理的并行度</li>
<li><strong>Redis 只是将 I&#x2F;O 读写变成了多线程，而命令的执行依旧是由主线程串行执行的</strong></li>
</ul>
</li>
<li><p><strong>主线程和IO线程的四个阶段</strong></p>
<ul>
<li><strong>服务端和客户端理立 Socket 连接，并分配处理线程</strong>：主线程负责接收建立连接请求，当有客户端请求和实例建立 <strong>Socket</strong> 连接时，主线程会创建和客户端的连接，并把 <strong>Socket</strong> 放入全局等待队列中，主线程通过轮询方法把 <strong>Socket</strong> 连接分配给 <strong>IO</strong> 线程</li>
<li><strong>IO 线程读取并解析请求</strong>：主线程一旦把 <strong>Socket</strong> 分配给 <strong>IO</strong> 线程，就会进入阻塞状态，等待 <strong>IO</strong> 线程完成客户端请求读取和解析</li>
<li><strong>主线程执行请求操作</strong>：等到 <strong>IO</strong> 线程解析完请求，主线程还是会以单线程的方式执行这些命令操作</li>
<li><strong>IO 线程回写 Socket 和主线程清空全局队列</strong>：当主线程执行完请求操作后，会把需要返回的结果写入缓冲区，主线程会阻塞等待 <strong>IO</strong> 线程，把这些结果回写到 <strong>Socket</strong> 中，并返回给客户端，和 <strong>IO</strong> 线程读取和解析请求一样，<strong>IO</strong> 线程回写 <strong>Socket</strong> 时，也是有多个线程在并发执行</li>
</ul>
</li>
<li><p><strong>多线程执行流程</strong></p>
  <img src="C:\Users\86172\Pictures\Markdown\Redis\1.png" style="zoom:67%;" />
</li>
<li><p><strong>Redis开启多线程</strong></p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">io-threads</span> <span class="string">4 # 线程数</span></span><br><span class="line"><span class="attr">io-thread-do-reads</span> <span class="string">yes # 启动多线程</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第十一节BigKey"><a href="#第十一节BigKey" class="headerlink" title="第十一节	BigKey"></a>第十一节	BigKey</h2><h3 id="11-1MoreKey案例"><a href="#11-1MoreKey案例" class="headerlink" title="11.1	MoreKey案例"></a>11.1	MoreKey案例</h3><ul>
<li><p><strong>大量注入数据</strong></p>
<ul>
<li><p>生成数据并保存</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for((i=1;i&lt;=100*10000;i++)); do echo &quot;set k$i v$i&quot; &gt;&gt; /tmp/redisTest.txt ;done;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成100W条redis批量设置kv的语句(key=kn,value=vn)写入到/tmp目录下的redisTest.txt文件中</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过管道插入数据</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /tmp/redisTest.txt | redis-cli -h 127.0.0.1 -p 6379 -a 123456 --pipe</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>危险命令</strong></p>
<ul>
<li><p><strong>keys * &#x2F; flushall &#x2F; flushdb</strong></p>
</li>
<li><p>严禁在线上使用，会造成阻塞，会导致 <strong>Redis</strong> 其他的读写都被延后甚至是超时报错，可能会引起缓存雪崩甚至数据库宕机</p>
</li>
<li><p>通过配置禁用危险命令</p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">rename-command</span> <span class="string">keys &quot;&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>Scan命令</strong></p>
<ul>
<li><p>基于游标的迭代器，每次被调用之后， 都会向用户返回一个新的游标， 用户在下次迭代时需要使用这个新游标作为 <strong>SCAN</strong> 命令的游标参数， 以此来延续之前的迭代过程</p>
</li>
<li><p>返回一个包含两个元素的数组， 第一个元素是用于进行下一次迭代的新游标， 第二个元素则是一个数组， 这个数组中包含了所有被迭代的元素,如果新游标返回零表示迭代已结束</p>
</li>
<li><p>遍历顺序非常特别，它不是从第一维数组的第零位一直遍历到末尾，而是采用了高位进位加法来遍历，考虑到字典的扩容和缩容时避免槽位的遍历重复和遗漏</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scan 0 match * count 10</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="11-2BigKey案例"><a href="#11-2BigKey案例" class="headerlink" title="11.2	BigKey案例"></a>11.2	BigKey案例</h3><ul>
<li><p><strong>BigKey概述</strong></p>
<ul>
<li><strong>string</strong> 类型控制在 <strong>10KB</strong> 以内</li>
<li><strong>hash</strong>，<strong>list</strong>，<strong>set</strong>，<strong>zset</strong> 的元素个数不要超过5000</li>
<li>非字符串类型的 <strong>BigKey</strong> 不要使用 <strong>del</strong> 删除，使用渐进式方式删除</li>
</ul>
</li>
<li><p><strong>BigKey的危害</strong></p>
<ul>
<li>内存不均，集群迁移困难</li>
<li>超时删除，导致阻塞</li>
<li>网络流量阻塞</li>
</ul>
</li>
<li><p><strong>检测BigKey</strong></p>
<ul>
<li><p>查询 <strong>BigKey</strong></p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli --bigkeys</span><br></pre></td></tr></table></figure>
</li>
<li><p>计算每个键值的字节数</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">memory usage [key]</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>删除BigKey</strong></p>
<ul>
<li><strong>string 类型</strong>：一般用 <strong>del</strong>，过于庞大 <strong>unlink</strong></li>
<li><strong>hash 类型</strong>：使用 <strong>hscan</strong> 每次获取少量 <strong>field-value</strong>，再使用 <strong>hdel</strong> 删除每个 <strong>field</strong></li>
<li><strong>list 类型</strong>：使用 <strong>ltrim</strong> 渐进式逐步删除，直到全部删除</li>
<li><strong>set 类型</strong>：使用 <strong>sscan</strong> 每次获取部分元素，再使用 <strong>srem</strong> 命令删除每个元素</li>
<li><strong>zset 类型</strong>：使用 <strong>zscan</strong> 每次获取部分元素，再使用 <strong>ZREMRANGEBYRANK</strong> 命令删除每个元素</li>
</ul>
</li>
</ul>
<h3 id="11-3BigKey生产调优"><a href="#11-3BigKey生产调优" class="headerlink" title="11.3	BigKey生产调优"></a>11.3	BigKey生产调优</h3><ul>
<li><strong>阻塞和非阻塞删除命令</strong>：使用 <strong>UNLIKE</strong> 命令非阻塞删除键值对</li>
<li><strong>优化配置</strong><ul>
<li>lazyfree-lazy-eviction：是否异步驱逐key，当内存达到上限，分配失败后</li>
<li>lazyfree-lazy-expire：是否异步进行key过期事件的处理</li>
<li>lazyfree-lazy-server-del：del命令是否异步执行删除操作，类似unlink</li>
<li>replica-lazy-flush：replica client做全同步的时候，是否异步flush本地db</li>
</ul>
</li>
</ul>
<h2 id="第十二节缓存双写一致性"><a href="#第十二节缓存双写一致性" class="headerlink" title="第十二节	缓存双写一致性"></a>第十二节	缓存双写一致性</h2><h3 id="12-1缓存双写一致性"><a href="#12-1缓存双写一致性" class="headerlink" title="12.1	缓存双写一致性"></a>12.1	缓存双写一致性</h3><ul>
<li><p><strong>缓存一致性</strong></p>
<ul>
<li>如果 <strong>redis</strong> 中有数据，需要和数据库中的值相同</li>
<li>如果 <strong>redis</strong> 中无数据，数据库中的值是最新值，且准备回写redis</li>
</ul>
</li>
<li><p><strong>回写策略</strong></p>
<ul>
<li><strong>同步直写策略</strong><ul>
<li>写数据库后也同步写 <strong>redis</strong> 缓存，缓存中的数据和数据中的一致</li>
<li>对于读写缓存来说，要想保证缓存和数据库中的数据一致</li>
</ul>
</li>
<li><strong>异步缓写策略</strong><ul>
<li>正常业务运行中，<strong>mysql</strong> 数据变动了，但是可以在业务上容许出现一定时间后才作用于 <strong>redis</strong>，比如仓库、物流系统</li>
<li>异常情况出现了，不得不讲失败的动作重新修补，有可能需要借助 <strong>kafka</strong> 或者 <strong>RabbitMQ</strong> 等消息中间件，实现重写重试</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>双检加锁策略</strong></p>
<ul>
<li><p>多个线程同时去查询数据库的这条数据，就在第一个查询数据的请求上使用一个互斥锁来锁住他</p>
</li>
<li><p>其他线程获取不到锁就一直等待，等第一个线程查询到了数据，然后做了缓存</p>
</li>
<li><p>后面的线程进来发现已经有了缓存，就直接走缓存</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CACHE_KEY_USER</span> <span class="operator">=</span> <span class="string">&quot;user:&quot;</span>;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">findUserById</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_KEY_USER + id;</span><br><span class="line"></span><br><span class="line">        user = (User) redisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (UserServiceImpl.class)&#123;</span><br><span class="line">                user = (User) redisTemplate.opsForValue().get(key);</span><br><span class="line">                <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">                    user = userMapper.selectById(id);</span><br><span class="line">                    <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        redisTemplate.opsForValue().setIfAbsent(key, user, <span class="number">7L</span>, TimeUnit.DAYS);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="12-2更新策略"><a href="#12-2更新策略" class="headerlink" title="12.2	更新策略"></a>12.2	更新策略</h3><ul>
<li><p><strong>可停机的情况</strong>：挂牌报错，凌晨升级，服务降级，温馨提示，最好单线程操作</p>
</li>
<li><p><strong>不可停机的情况</strong></p>
<ul>
<li><p><strong>异常更新策略</strong></p>
<table>
<thead>
<tr>
<th align="center">策略</th>
<th align="center">存在的问题</th>
</tr>
</thead>
<tbody><tr>
<td align="center">先更新数据库，再更新缓存</td>
<td align="center">缓存更新异常，缓存读到脏数据；高并发环境下，数据不一致</td>
</tr>
<tr>
<td align="center">先更新缓存，再更新数据库</td>
<td align="center">高并发环境下，数据不一致</td>
</tr>
<tr>
<td align="center">先删除缓存，再更新数据库（<strong>解决方案</strong>：延时双删策略）</td>
<td align="center">数据库更新期间，缓存被更新依旧是脏数据</td>
</tr>
</tbody></table>
</li>
<li><p><strong>最佳更新策略</strong>：先更新数据库，再删除缓存</p>
<ul>
<li><strong>存在的问题</strong>：缓存删除不及时，请求会读取到脏数据</li>
<li><strong>解决方案</strong><ul>
<li>使用 <strong>canal</strong> 订阅数据库更新日志，实时更新缓存中的数据</li>
<li>使用 <strong>Kafka</strong> 等消息中间件，将更新后的数据放入消息队列，循环尝试删除</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>延迟双删策略</strong>：线程休眠一段时间后，再次删除缓存中的数据</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteDoubleOrderDelay</span><span class="params">(Order order)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>(<span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> RedisUtils.getJdis())&#123;</span><br><span class="line">        jedis.del(order.getId() + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        orderDao.update(order);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        Completable.supplyAsnyc(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> jedis.del(order.getId() + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;),get();</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Excepton e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第十三节大数据统计"><a href="#第十三节大数据统计" class="headerlink" title="第十三节	大数据统计"></a>第十三节	大数据统计</h2><h3 id="13-1四种统计"><a href="#13-1四种统计" class="headerlink" title="13.1	四种统计"></a>13.1	四种统计</h3><ul>
<li><strong>聚合统计</strong>：统计多个集合元素的聚合结果（交并差集合统计），使用 <strong>set</strong></li>
<li><strong>排序统计</strong>：需要展示最新列表、排行榜等场景时，如果数据更新频繁或者需要分页显示，使用 <strong>zset</strong></li>
<li><strong>二值统计</strong>：集合元素的取值就只有 0 和 1，使用 <strong>BitMap</strong></li>
<li><strong>基数统计</strong>：只统计一个集合中不重复的元素个数，使用 <strong>hyperloglog</strong></li>
</ul>
<h3 id="13-2hyperloglog"><a href="#13-2hyperloglog" class="headerlink" title="13.2	hyperloglog"></a>13.2	hyperloglog</h3><ul>
<li><strong>hyperloglog</strong>：是一种数据集，表示去重复后的真实个数，只需要花费 12KB 内存，就可以计算接近 2 的 64 次方个不同元素的基数，但是会有 0.81% 左右的误差</li>
<li><strong>统计数据</strong><ul>
<li><strong>UV</strong>：Unique Visitor，独立访客，一般理解为客户端IP （<strong>需要考虑去重</strong>）</li>
<li><strong>PV</strong>：Page View，页面浏览量，不用去重</li>
<li><strong>DAU</strong>：Daily Active User，日活跃用户量，登录或者使用了某个产品的用户数（去重复登录的用户），常用于反映网站、互联网应用或者网络游戏的运营情况</li>
<li><strong>MAU</strong>：Monthly Active User，月活跃用户量</li>
</ul>
</li>
</ul>
<h3 id="13-3统计亿级UV的Redis方案"><a href="#13-3统计亿级UV的Redis方案" class="headerlink" title="13.3	统计亿级UV的Redis方案"></a>13.3	统计亿级UV的Redis方案</h3><ul>
<li><p><strong>技术选型</strong></p>
<ul>
<li><strong>mysql</strong>：<strong>mysql</strong> 扛不住稍微大一点的并发，而且都需要存入 <strong>mysql</strong> 中，导致 <strong>mysql</strong> 的检索也会变慢</li>
<li><strong>redis 的 hash 结构存储</strong>：内存容量不足</li>
<li><strong>hyperloglog</strong>：在 <strong>Redis</strong> 里面，每个 <strong>HyperLogLog</strong> 键只需要花费 12KB 内存，就可以计算接近 2 的 64 次方个不同元素的基数</li>
</ul>
</li>
<li><p><strong>统计案例</strong></p>
<ul>
<li><p>服务层接口</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HypeLogLogService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">uv</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>服务层实现类</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HypeLogLogServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">HypeLogLogService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initIp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) &#123;</span><br><span class="line">                <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">                ip = random.nextInt(<span class="number">256</span>) + <span class="string">&quot;.&quot;</span> + random.nextInt(<span class="number">256</span>) + <span class="string">&quot;.&quot;</span> + random.nextInt(<span class="number">256</span>) + <span class="string">&quot;.&quot;</span> + random.nextInt(<span class="number">256</span>);</span><br><span class="line">                <span class="type">Long</span> <span class="variable">hll</span> <span class="operator">=</span> redisTemplate.opsForHyperLogLog().add(<span class="string">&quot;hll&quot;</span>, ip);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">uv</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHyperLogLog().size(<span class="string">&quot;hll&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>控制层</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HyperLogLogController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> HypeLogLogService hypeLogLogService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/uv&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">uv</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hypeLogLogService.uv();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第十四节实战GEO"><a href="#第十四节实战GEO" class="headerlink" title="第十四节	实战GEO"></a>第十四节	实战GEO</h2><ul>
<li><p><strong>技术选型</strong></p>
<ul>
<li><strong>mysql</strong><ul>
<li>查询性能问题，并发高、数据量大这种查询要搞垮 <strong>mysql</strong> 数据库</li>
<li>一般 <strong>mysql</strong> 查询的是一个平面矩形访问，而叫车服务要以我为中心N公里为半径的圆形覆盖</li>
<li>精准度的问题，我们知道地球不是平面坐标系，而是一个圆球，这种矩形计算在长距离计算时会有很大误差，<strong>mysql</strong> 不合适</li>
</ul>
</li>
<li><strong>GEO</strong>：可以解决上述问题</li>
</ul>
</li>
<li><p><strong>GEO 命令</strong></p>
<ul>
<li><p><strong>GEOADD</strong>：添加经纬度坐标</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">geoadd city 116.0 39,0 &quot;北京&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>GEOPOS</strong>：返回经纬度</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">geopos city &quot;北京&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>GEOHASH</strong>：返回坐标的 <strong>geohash</strong> 表示</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">geohash city &quot;北京&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>GEODIST</strong>：返回两个位置之间的距离</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">geodist city &quot;北京&quot; &quot;南京&quot; km</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>GEORADIUS</strong>：以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">georadius city 116.0 39,0 10 km withdist withcoord count 10 desc</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>GEORADIUSBYMEMBER</strong>：找出指定范围内的元素，中心点是由给定的位置元素决定</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">georadiusbymember city 116.0 39,0 10 km withdist withcoord count 10 withhash</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>查询案例</strong></p>
<ul>
<li><p>服务层接口</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GeoService</span> &#123;</span><br><span class="line">    String <span class="title function_">geoAdd</span><span class="params">()</span>;</span><br><span class="line">    Point <span class="title function_">position</span><span class="params">(String member)</span>;</span><br><span class="line">    String <span class="title function_">hash</span><span class="params">(String member)</span>;</span><br><span class="line">    Distance <span class="title function_">distance</span><span class="params">(String member1, String member2)</span>;</span><br><span class="line">    GeoResults <span class="title function_">radiusByxy</span><span class="params">()</span>;</span><br><span class="line">    GeoResults <span class="title function_">radiusMember</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>服务层实现类</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GeoServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">GeoService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CITY</span> <span class="operator">=</span> <span class="string">&quot;city&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">geoAdd</span><span class="params">()</span> &#123;</span><br><span class="line">        Map&lt;String, Point&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;白马寺&quot;</span>, <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">112.610356</span>,<span class="number">34.728481</span>));</span><br><span class="line">        map.put(<span class="string">&quot;龙门石窟&quot;</span>, <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">112.484071</span>,<span class="number">34.564375</span>));</span><br><span class="line">        map.put(<span class="string">&quot;老君山&quot;</span>, <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">111.663</span>,<span class="number">33.75186</span>));</span><br><span class="line">        map.put(<span class="string">&quot;白马寺的公共厕所1&quot;</span>, <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">112.608311</span>,<span class="number">34.726809</span>));</span><br><span class="line">        map.put(<span class="string">&quot;白马寺的公共厕所2&quot;</span>, <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">112.610356</span>,<span class="number">34.728481</span>));</span><br><span class="line">        redisTemplate.opsForGeo().add(CITY, map);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Point <span class="title function_">position</span><span class="params">(String member)</span> &#123;</span><br><span class="line">        List&lt;Point&gt; position = redisTemplate.opsForGeo().position(CITY, member);</span><br><span class="line">        <span class="keyword">return</span> position.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hash</span><span class="params">(String member)</span> &#123;</span><br><span class="line">        List&lt;String&gt; hash = redisTemplate.opsForGeo().hash(CITY, member);</span><br><span class="line">        <span class="keyword">return</span> hash.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Distance <span class="title function_">distance</span><span class="params">(String member1, String member2)</span> &#123;</span><br><span class="line">        <span class="type">Distance</span> <span class="variable">distance</span> <span class="operator">=</span> redisTemplate.opsForGeo().distance(CITY, member1, member2,</span><br><span class="line">                RedisGeoCommands.DistanceUnit.KILOMETERS);</span><br><span class="line">        <span class="keyword">return</span> distance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> GeoResults <span class="title function_">radiusByxy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Circle</span> <span class="variable">circle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">112.610356</span>, <span class="number">34.728481</span>, Metrics.KILOMETERS.getMultiplier());</span><br><span class="line">        RedisGeoCommands.<span class="type">GeoRadiusCommandArgs</span> <span class="variable">args</span> <span class="operator">=</span> RedisGeoCommands.GeoRadiusCommandArgs.newGeoRadiusArgs().includeCoordinates().sortDescending().limit(<span class="number">50</span>);</span><br><span class="line">        GeoResults&lt;RedisGeoCommands.GeoLocation&lt;String&gt;&gt; geoResults = redisTemplate.opsForGeo().radius(CITY, circle, args);</span><br><span class="line">        <span class="keyword">return</span> geoResults;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> GeoResults <span class="title function_">radiusMember</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">member</span> <span class="operator">=</span> <span class="string">&quot;白马寺&quot;</span>;</span><br><span class="line">        RedisGeoCommands.<span class="type">GeoRadiusCommandArgs</span> <span class="variable">args</span> <span class="operator">=</span> RedisGeoCommands.GeoRadiusCommandArgs.newGeoRadiusArgs().includeDistance().sortAscending().limit(<span class="number">10</span>);</span><br><span class="line">        <span class="type">Distance</span> <span class="variable">distance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Distance</span>(<span class="number">10</span>, Metrics.KILOMETERS);</span><br><span class="line">        GeoResults&lt;RedisGeoCommands.GeoLocation&lt;String&gt;&gt; geoResults = redisTemplate.opsForGeo().radius(CITY, member, distance, args);</span><br><span class="line">        <span class="keyword">return</span> geoResults;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>控制层</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GeoController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> GeoService geoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/geoadd&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">geoAdd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> geoService.geoAdd();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/geopos&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> Point <span class="title function_">position</span><span class="params">(String member)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> geoService.position(member);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/geohash&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hash</span><span class="params">(String member)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> geoService.hash(member);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/geodist&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> Distance <span class="title function_">distance</span><span class="params">(String member1, String member2)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> geoService.distance(member1,member2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/georadius&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> GeoResults <span class="title function_">radiusByxy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> geoService.radiusByxy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/georadiusByMember&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> GeoResults <span class="title function_">radiusMember</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> geoService.radiusMember();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第十五节布隆过滤器"><a href="#第十五节布隆过滤器" class="headerlink" title="第十五节	布隆过滤器"></a>第十五节	布隆过滤器</h2><h3 id="15-1BitMap"><a href="#15-1BitMap" class="headerlink" title="15.1	BitMap"></a>15.1	BitMap</h3><ul>
<li><p><strong>BitMap</strong>：由 0 和 1 状态表现得二进制位的 <strong>bit</strong> 数组</p>
</li>
<li><p><strong>BitMap 的作用</strong>：用于状态统计，签到统计等</p>
</li>
<li><p><strong>BitMap 命令</strong></p>
<ul>
<li><p><strong>SETBIT</strong>： 将第 <strong>offse</strong> 的值设为 <strong>value</strong></p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">setbit key offset value</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>GETBIT</strong>：获得第 <strong>offset</strong> 位的值</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">getbit key offset</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>STRLEN</strong>：得出占多少字节，超过8位后自己按照8位一组一 <strong>byte</strong> 再扩容</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">strlen key</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>BITCOUNT</strong>：得出该 <strong>key</strong> 里面含有几个1</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bitcount key</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>BITOP</strong>： 对一个或多个 <strong>key</strong> 求逻辑运算，并将结果保存到 <strong>destkey</strong> </p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bitop and destkey k1 k2</span><br><span class="line">bitop or destkey k1 k2</span><br><span class="line">bitop xor destkey k1 k2</span><br><span class="line">bitop not destkey k1 k2</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="15-2布隆过滤器"><a href="#15-2布隆过滤器" class="headerlink" title="15.2	布隆过滤器"></a>15.2	布隆过滤器</h3><ul>
<li><p><strong>布隆过滤器</strong>：由一个初值都为零的 <strong>bit</strong> 数组和多个哈希函数构成，用来快速判断集合中是否存在某个元素</p>
<ul>
<li><strong>目的</strong>：减少内存占用</li>
<li><strong>方式</strong>：不保存数据信息，只是在内存中做一个是否存在的标记 <strong>flag</strong></li>
<li><strong>本质</strong>：判断具体数据是否村在于一个大的集合中</li>
</ul>
</li>
<li><p><strong>布隆过滤器的作用</strong></p>
<ul>
<li>高效地插入和查询，占用空间少，返回地结果是不确定性 + 不完美性</li>
<li>一个元素如果判断结果：存在时，元素不一定存在，不存在时，元素一定不存在</li>
<li>布隆过滤器可以添加元素，但是不能删除元素</li>
</ul>
</li>
<li><p><strong>布隆过滤器使用步骤</strong></p>
<ul>
<li>由长度为 <strong>m</strong> 的位向量或位列表 （仅包含 0 或 1 位值的列表）组成，最初所有的值均设置为 0</li>
<li>添加数据，为了尽量地址不冲突，使用多个 <strong>hash</strong> 函数对 <strong>key</strong> 进行运算，算得一个下标索引值，然后对数据长度进行取模运算得到一个位置，每个 <strong>hash</strong> 函数都会算得一个不同的位置，再把位数组的这几个位置都置为 1 就完成了 <strong>add</strong> 操作</li>
<li>向布隆过滤器查询某个 <strong>key</strong> 是否存在时，先把这个 <strong>key</strong> 通过相同的多个 <strong>hash</strong> 函数进行运算，查看对应的位置是否都为 1，只要有一个位为零，那么说明布隆过滤器中这个 <strong>key</strong> 不存在</li>
</ul>
</li>
<li><p><strong>手写布隆过滤器</strong></p>
<ul>
<li><p>初始化</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BloomFilterInit</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;customer:11&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">hashValue</span> <span class="operator">=</span> Math.abs(key.hashCode());</span><br><span class="line">        <span class="type">long</span> <span class="variable">index</span> <span class="operator">=</span> (<span class="type">long</span>) (hashValue % Math.pow(<span class="number">2</span>, <span class="number">32</span>));</span><br><span class="line">        log.info(key + <span class="string">&quot;对应的坑位 index： &#123;&#125;&quot;</span>, index);</span><br><span class="line">        redisTemplate.opsForValue().setBit(<span class="string">&quot;whitelistCustomer&quot;</span>, index, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>工具类</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckUtils</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkWithBloomFilter</span><span class="params">(String checkItem, String key)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">hashValue</span> <span class="operator">=</span> Math.abs(key.hashCode());</span><br><span class="line">        <span class="type">long</span> <span class="variable">index</span> <span class="operator">=</span> (<span class="type">long</span>) (hashValue % Math.pow(<span class="number">2</span>, <span class="number">32</span>));</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">existOK</span> <span class="operator">=</span> redisTemplate.opsForValue().getBit(checkItem, index);</span><br><span class="line">        log.info(<span class="string">&quot;----&gt;:&quot;</span> + key +<span class="string">&quot;对应坑位下标index：&quot;</span>+ index + <span class="string">&quot;是否存在：&quot;</span> + existOK);</span><br><span class="line">        <span class="keyword">return</span> existOK;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>服务层</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CACHE_KEY_CUSTOMER</span> <span class="operator">=</span> <span class="string">&quot;customer:&quot;</span>;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> CustomerMapper customerMapper;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> CheckUtils checkUtils;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Customer <span class="title function_">findCustomerByIdWithBloomFilter</span><span class="params">(Integer customerId)</span> &#123;</span><br><span class="line">        <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_KEY_CUSTOMER + customerId;</span><br><span class="line">        <span class="keyword">if</span> (!checkUtils.checkWithBloomFilter(<span class="string">&quot;whitelistCustomer&quot;</span>, key)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;白名单没有此信息，不可以访问&quot;</span> + key);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        customer = (Customer) redisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="keyword">if</span> (customer == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (CustomerService.class) &#123;</span><br><span class="line">                customer = (Customer) redisTemplate.opsForValue().get(key);</span><br><span class="line">                <span class="keyword">if</span> (customer == <span class="literal">null</span>) &#123;</span><br><span class="line">                    customer = customerMapper.selectByPrimaryKey(customerId);</span><br><span class="line">                    <span class="keyword">if</span> (customer == <span class="literal">null</span>) &#123;</span><br><span class="line">                        redisTemplate.opsForValue().set(key, <span class="string">&quot;defaultNull&quot;</span>, <span class="number">7L</span>, TimeUnit.DAYS);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        redisTemplate.opsForValue().set(key, customer, <span class="number">7L</span>, TimeUnit.DAYS);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> customer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>控制层</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> CustomerService customerService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/customer/add&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCustomer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>();</span><br><span class="line">            customer.setCname(<span class="string">&quot;customer&quot;</span> +i);</span><br><span class="line">            customer.setAge(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">30</span>)+<span class="number">1</span>);</span><br><span class="line">            customer.setPhone(<span class="string">&quot;12345678910&quot;</span>);</span><br><span class="line">            customer.setSex((<span class="type">byte</span>) <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">2</span>));</span><br><span class="line">            customer.setBirth(Date.from(LocalDateTime.now().atZone(ZoneId.systemDefault()).toInstant()));</span><br><span class="line">            customerService.addCustomer(customer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/customer/&#123;customerId&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> Customer <span class="title function_">findCustomerById</span><span class="params">(<span class="meta">@PathVariable(&quot;customerId&quot;)</span> Integer customerId)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customerService.findCustomerById(customerId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/bloomfilter/&#123;customerId&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> Customer <span class="title function_">findCustomerByIdWithBloomFilter</span><span class="params">(<span class="meta">@PathVariable(&quot;customerId&quot;)</span> Integer customerId)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customerService.findCustomerByIdWithBloomFilter(customerId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>Google 布隆过滤器 Guava</strong></p>
<ul>
<li><p>导入依赖</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>23.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>控制层</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GuavaBloomFilterService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">_1W</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SIZE</span> <span class="operator">=</span> <span class="number">100</span> * _1W;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="variable">fpp</span> <span class="operator">=</span> <span class="number">0.01</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BloomFilter&lt;Integer&gt; bloomFilter = BloomFilter.create(Funnels.integerFunnel(), SIZE, fpp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">guavaBloomFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; SIZE; i++) &#123;</span><br><span class="line">            bloomFilter.put(i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(bloomFilter.mightContain(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第十六节缓存"><a href="#第十六节缓存" class="headerlink" title="第十六节	缓存"></a>第十六节	缓存</h2><h3 id="16-1缓存预热"><a href="#16-1缓存预热" class="headerlink" title="16.1	缓存预热"></a>16.1	缓存预热</h3><ul>
<li><p><strong>缓存预热</strong>：缓存预热就是系统上线后，提前将相关的缓存数据直接加载到缓存系统，避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题，用户直接查询事先被预热的缓存数据</p>
</li>
<li><p><strong>缓存预热的解决方法</strong>：使用 <strong>@PostConstruct</strong> 初始化白名单数据</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;HashMap&gt; list = telDao.getList();</span><br><span class="line">    <span class="keyword">for</span> (HashMap map:list)&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(map.get(<span class="string">&quot;id&quot;</span>).toString(),map.get(<span class="string">&quot;tel&quot;</span>).toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="16-2缓存雪崩"><a href="#16-2缓存雪崩" class="headerlink" title="16.2	缓存雪崩"></a>16.2	缓存雪崩</h3><ul>
<li><strong>缓存雪崩</strong>：缓存雪崩就是瞬间过期数据量太大，导致对数据库服务器造成压力</li>
<li><strong>缓存雪崩的发生情况</strong><ul>
<li><strong>redis</strong> 主机挂了， <strong>redis</strong> 全盘崩溃，偏硬件运维</li>
<li><strong>redis</strong> 中有大量 <strong>key</strong> 同时过期大面积失效，偏软件开发</li>
</ul>
</li>
<li><strong>缓存雪崩解决方法</strong><ul>
<li><strong>redis</strong> 中 <strong>key</strong> 设置为永不过期或者过期时间错开</li>
<li><strong>redis</strong> 缓存集群实现高可用<ul>
<li>主从 + 哨兵</li>
<li><strong>redis</strong> 集群</li>
<li>开启 <strong>redis</strong> 持久化机制 <strong>aof</strong> &#x2F; <strong>rdb</strong>，尽快恢复缓存集群</li>
</ul>
</li>
<li>多缓存结合预防雪崩，<strong>ehcache</strong> 本地缓存 + <strong>redis</strong> 缓存</li>
<li>服务降级，<strong>Hystrix</strong> 或者 <strong>sentinel</strong> 限流降级</li>
</ul>
</li>
</ul>
<h3 id="16-3缓存穿透"><a href="#16-3缓存穿透" class="headerlink" title="16.3	缓存穿透"></a>16.3	缓存穿透</h3><ul>
<li><strong>缓存穿透</strong>：请求去查询一条数据，先查 <strong>redis</strong>，<strong>redis</strong> 里面没有，再查 <strong>mysql</strong>，<strong>mysql</strong> 里面无，都查询不到该条记录，但是请求每次都会打到数据库上面去，导致后台数据库压力暴增</li>
<li><strong>缓存穿透解决方法</strong><ul>
<li>空对象缓存或者缺省值</li>
<li>布隆过滤器设置白名单</li>
</ul>
</li>
</ul>
<h3 id="16-4缓存击穿"><a href="#16-4缓存击穿" class="headerlink" title="16.4	缓存击穿"></a>16.4	缓存击穿</h3><ul>
<li><p><strong>缓存击穿</strong>：大量请求同时查询一个 <strong>key</strong> 时，此时这个 <strong>key</strong> 正好失效了，就会导致大量的请求都打到数据库上面去，也就是热点 <strong>key</strong> 突然都失效了，<strong>MySQL</strong> 承受高并发量</p>
</li>
<li><p><strong>缓存击穿解决方法</strong></p>
<ul>
<li>差异失效时间，对于访问频繁的热点 <strong>key</strong>，不设置过期时间</li>
<li>互斥更新，采用双检加锁</li>
</ul>
</li>
<li><p><strong>缓存击穿案例</strong></p>
<ul>
<li><p>服务层</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JHSTaskService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JHS_KEY</span> <span class="operator">=</span> <span class="string">&quot;jhs&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JHS_KEY_A</span> <span class="operator">=</span> <span class="string">&quot;jhs:a&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JHS_KEY_B</span> <span class="operator">=</span> <span class="string">&quot;jhs:b&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initJHSAB</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                List&lt;Product&gt; list = <span class="built_in">this</span>.getProductsFromMysql();</span><br><span class="line">                </span><br><span class="line">                redisTemplate.delete(JHS_KEY_B);</span><br><span class="line">                redisTemplate.opsForList().leftPushAll(JHS_KEY_B, list);</span><br><span class="line">                redisTemplate.expire(JHS_KEY_B, <span class="number">86410L</span>, TimeUnit.SECONDS);</span><br><span class="line">                </span><br><span class="line">                redisTemplate.delete(JHS_KEY_A);</span><br><span class="line">                redisTemplate.opsForList().leftPushAll(JHS_KEY_A, list);</span><br><span class="line">                redisTemplate.expire(JHS_KEY_A, <span class="number">86400L</span>, TimeUnit.SECONDS);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.MINUTES.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>控制层</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JHSProductController</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JHS_KEY</span> <span class="operator">=</span> <span class="string">&quot;jhs&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JHS_KEY_A</span> <span class="operator">=</span> <span class="string">&quot;jhs:a&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JHS_KEY_B</span> <span class="operator">=</span> <span class="string">&quot;jhs:b&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/product/findAB&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Product&gt; <span class="title function_">findAB</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> size)</span> &#123;</span><br><span class="line">        List&lt;Product&gt; list = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> (page - <span class="number">1</span>) * size;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> start + size - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            list = redisTemplate.opsForList().range(JHS_KEY_A, start, end);</span><br><span class="line">            <span class="keyword">if</span> (CollectionUtils.isEmpty(list)) &#123;</span><br><span class="line">                <span class="comment">// A没有来找B</span></span><br><span class="line">                list = redisTemplate.opsForList().range(JHS_KEY_B, start, end);</span><br><span class="line">                <span class="keyword">if</span> (CollectionUtils.isEmpty(list))&#123;</span><br><span class="line">                    <span class="comment">// TODO 走mysql查询</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">// 。。。重试机制 再次查询mysql</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第十七节分布式锁"><a href="#第十七节分布式锁" class="headerlink" title="第十七节	分布式锁"></a>第十七节	分布式锁</h2><h3 id="17-1分布式锁"><a href="#17-1分布式锁" class="headerlink" title="17.1	分布式锁"></a>17.1	分布式锁</h3><ul>
<li><strong>分布式锁的特性</strong><ul>
<li><strong>独占性</strong>：任何时刻有且只有一个线程持有这个锁</li>
<li><strong>高可用</strong><ul>
<li>若 <strong>redis</strong> 集群环境下，不能因为某一个节点挂了而出现获取锁和释放锁失败的情况</li>
<li>高并发请求下，依旧性能很好</li>
</ul>
</li>
<li><strong>防死锁</strong>：不能出现死锁问题，必须有超时重试机制或者撤销操作，有个终止跳出的途径</li>
<li><strong>不乱抢</strong>：防止张冠李戴，只能解锁自己的锁，不能把别人的锁给释放了</li>
<li><strong>重入性</strong>：同一节点的同一线程如果获得锁之后，他可以再次获取这个锁</li>
</ul>
</li>
</ul>
<h3 id="17-2分布式锁的实现"><a href="#17-2分布式锁的实现" class="headerlink" title="17.2	分布式锁的实现"></a>17.2	分布式锁的实现</h3><ul>
<li><p><strong>购物场景案例</strong></p>
<ul>
<li><p>配置类</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Serializable&gt; <span class="title function_">redisTemplate</span><span class="params">(LettuceConnectionFactory connectionFactory)</span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Serializable&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setValueSerializer(<span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>控制层</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GoodController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/buy_goods&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">buy_Goods</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(<span class="string">&quot;goods:001&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">goodsNumber</span> <span class="operator">=</span> result == <span class="literal">null</span> ? <span class="number">0</span> : Integer.parseInt(result);</span><br><span class="line">        <span class="type">String</span> <span class="variable">retStr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (goodsNumber &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">realNumber</span> <span class="operator">=</span> goodsNumber - <span class="number">1</span>;</span><br><span class="line">            stringRedisTemplate.opsForValue().set(<span class="string">&quot;goods:001&quot;</span>, realNumber + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            retStr = <span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            retStr = <span class="string">&quot;商品已经售罄/活动结束/调用超时，欢迎下次光临&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> retStr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>案例升级</strong></p>
<ul>
<li><p><strong>单机版加锁</strong>：防止在高并发情况下库存不准</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">sale</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">retMessage</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(<span class="string">&quot;inventory001&quot;</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">inventoryNumber</span> <span class="operator">=</span> result == <span class="literal">null</span> ? <span class="number">0</span> : Integer.parseInt(result);</span><br><span class="line">        <span class="keyword">if</span> (inventoryNumber &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            stringRedisTemplate.opsForValue().set(<span class="string">&quot;inventory001&quot;</span>, String.valueOf(--inventoryNumber));</span><br><span class="line">            retMessage = <span class="string">&quot;成功卖出一个商品，库存剩余: &quot;</span> + inventoryNumber;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            retMessage = <span class="string">&quot;商品卖完了，o(╥﹏╥)o&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> retMessage + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;服务端口号：&quot;</span> + port;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>安装 nginx，使用 setnx 命令</strong>：分布式锁，防止超卖现象</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">sale</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">retMessage</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;xfcyRedisLock&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> IdUtil.simpleUUID() + <span class="string">&quot;:&quot;</span> + Thread.currentThread().getId();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!stringRedisTemplate.opsForValue().setIfAbsent(key, value)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">20</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(<span class="string">&quot;inventory001&quot;</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">inventoryNumber</span> <span class="operator">=</span> result == <span class="literal">null</span> ? <span class="number">0</span> : Integer.parseInt(result);</span><br><span class="line">        <span class="keyword">if</span> (inventoryNumber &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            stringRedisTemplate.opsForValue().set(<span class="string">&quot;inventory001&quot;</span>, String.valueOf(--inventoryNumber));</span><br><span class="line">            retMessage = <span class="string">&quot;成功卖出一个商品，库存剩余: &quot;</span> + inventoryNumber;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            retMessage = <span class="string">&quot;商品卖完了，o(╥﹏╥)o&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        stringRedisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> retMessage + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;服务端口号：&quot;</span> + port;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>设置过期时间</strong>：防止服务器宕机无法成功释放分布式锁</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">sale</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">retMessage</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;xfcyRedisLock&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> IdUtil.simpleUUID() + <span class="string">&quot;:&quot;</span> + Thread.currentThread().getId();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!stringRedisTemplate.opsForValue().setIfAbsent(key, value)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">20</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stringRedisTemplate.expire(key, <span class="number">30L</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(<span class="string">&quot;inventory001&quot;</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">inventoryNumber</span> <span class="operator">=</span> result == <span class="literal">null</span> ? <span class="number">0</span> : Integer.parseInt(result);</span><br><span class="line">        <span class="keyword">if</span> (inventoryNumber &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            stringRedisTemplate.opsForValue().set(<span class="string">&quot;inventory001&quot;</span>, String.valueOf(--inventoryNumber));</span><br><span class="line">            retMessage = <span class="string">&quot;成功卖出一个商品，库存剩余: &quot;</span> + inventoryNumber;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            retMessage = <span class="string">&quot;商品卖完了，o(╥﹏╥)o&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        stringRedisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> retMessage + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;服务端口号：&quot;</span> + port;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>合并加锁和设置过期时间</strong>：使操作具备原子性</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">sale</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">retMessage</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;xfcyRedisLock&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> IdUtil.simpleUUID() + <span class="string">&quot;:&quot;</span> + Thread.currentThread().getId();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!stringRedisTemplate.opsForValue().setIfAbsent(key, value, <span class="number">30L</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">20</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(<span class="string">&quot;inventory001&quot;</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">inventoryNumber</span> <span class="operator">=</span> result == <span class="literal">null</span> ? <span class="number">0</span> : Integer.parseInt(result);</span><br><span class="line">        <span class="keyword">if</span> (inventoryNumber &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            stringRedisTemplate.opsForValue().set(<span class="string">&quot;inventory001&quot;</span>, String.valueOf(--inventoryNumber));</span><br><span class="line">            retMessage = <span class="string">&quot;成功卖出一个商品，库存剩余: &quot;</span> + inventoryNumber;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            retMessage = <span class="string">&quot;商品卖完了，o(╥﹏╥)o&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        stringRedisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> retMessage + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;服务端口号：&quot;</span> + port;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>判断锁所属线程</strong>：防止误删其他线程的锁</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">sale</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">retMessage</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;xfcyRedisLock&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> IdUtil.simpleUUID() + <span class="string">&quot;:&quot;</span> + Thread.currentThread().getId();</span><br><span class="line">    <span class="keyword">while</span> (!stringRedisTemplate.opsForValue().setIfAbsent(key, value, <span class="number">30L</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">20</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(<span class="string">&quot;inventory001&quot;</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">inventoryNumber</span> <span class="operator">=</span> result == <span class="literal">null</span> ? <span class="number">0</span> : Integer.parseInt(result);</span><br><span class="line">        <span class="keyword">if</span> (inventoryNumber &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            stringRedisTemplate.opsForValue().set(<span class="string">&quot;inventory001&quot;</span>, String.valueOf(--inventoryNumber));</span><br><span class="line">            retMessage = <span class="string">&quot;成功卖出一个商品，库存剩余: &quot;</span> + inventoryNumber;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            retMessage = <span class="string">&quot;商品卖完了，o(╥﹏╥)o&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (stringRedisTemplate.opsForValue().get(key).equalsIgnoreCase(value)) &#123;</span><br><span class="line">            stringRedisTemplate.delete(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> retMessage + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;服务端口号：&quot;</span> + port;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用 Lua 脚本</strong>：使判断操作和删除操作具备原子性</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">sale</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">retMessage</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;xfcyRedisLock&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> IdUtil.simpleUUID() + <span class="string">&quot;:&quot;</span> + Thread.currentThread().getId();</span><br><span class="line">    <span class="keyword">while</span> (!stringRedisTemplate.opsForValue().setIfAbsent(key, value, <span class="number">30L</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">20</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(<span class="string">&quot;inventory001&quot;</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">inventoryNumber</span> <span class="operator">=</span> result == <span class="literal">null</span> ? <span class="number">0</span> : Integer.parseInt(result);</span><br><span class="line">        <span class="keyword">if</span> (inventoryNumber &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            stringRedisTemplate.opsForValue().set(<span class="string">&quot;inventory001&quot;</span>, String.valueOf(--inventoryNumber));</span><br><span class="line">            retMessage = <span class="string">&quot;成功卖出一个商品，库存剩余: &quot;</span> + inventoryNumber;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            retMessage = <span class="string">&quot;商品卖完了，o(╥﹏╥)o&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">luaScript</span> <span class="operator">=</span></span><br><span class="line">                <span class="string">&quot;if (redis.call(&#x27;get&#x27;,KEYS[1]) == ARGV[1]) then &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;return redis.call(&#x27;del&#x27;,KEYS[1]) &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;else &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;return 0 &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;end&quot;</span>;</span><br><span class="line">        stringRedisTemplate.execute(<span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;&gt;(luaScript, Boolean.class), Arrays.asList(key), value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> retMessage + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;服务端口号：&quot;</span> + port;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用 hash 类型的锁，引入工厂模式</strong>：实现锁的可重入性，实现锁的过期时间自动续期</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">sale</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">retMessage</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">Lock</span> <span class="variable">redisLock</span> <span class="operator">=</span> distributedLockFactory.getDistributedLock(<span class="string">&quot;redis&quot;</span>);</span><br><span class="line">    redisLock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(<span class="string">&quot;inventory001&quot;</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">inventoryNumber</span> <span class="operator">=</span> result == <span class="literal">null</span> ? <span class="number">0</span> : Integer.parseInt(result);</span><br><span class="line">        <span class="keyword">if</span> (inventoryNumber &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            stringRedisTemplate.opsForValue().set(<span class="string">&quot;inventory001&quot;</span>, String.valueOf(--inventoryNumber));</span><br><span class="line">            retMessage = <span class="string">&quot;成功卖出一个商品，库存剩余: &quot;</span> + inventoryNumber;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            retMessage = <span class="string">&quot;商品卖完了，o(╥﹏╥)o&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        redisLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> retMessage + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;服务端口号：&quot;</span> + port;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DistributedLockFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line">    <span class="keyword">private</span> String lockName;</span><br><span class="line">    <span class="keyword">private</span> String uuidValue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DistributedLockFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.uuidValue = IdUtil.simpleUUID();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Lock <span class="title function_">getDistributedLock</span><span class="params">(String lockType)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (lockType == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (lockType.equalsIgnoreCase(<span class="string">&quot;REDIS&quot;</span>)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.lockName = <span class="string">&quot;xfcyRedisLock&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RedisDistributedLock</span>(stringRedisTemplate, lockName, uuidValue);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (lockType.equalsIgnoreCase(<span class="string">&quot;ZOOKEEPER&quot;</span>)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.lockName = <span class="string">&quot;xfcyZookeeperLock&quot;</span>;</span><br><span class="line">            <span class="comment">// TODO zoookeeper 版本的分布式锁</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (lockType.equalsIgnoreCase(<span class="string">&quot;MYSQL&quot;</span>))&#123;</span><br><span class="line">            <span class="built_in">this</span>.lockName = <span class="string">&quot;xfcyMysqlLock&quot;</span>;</span><br><span class="line">            <span class="comment">// TODO MYSQL 版本的分布式锁</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisDistributedLock</span> <span class="keyword">implements</span> <span class="title class_">Lock</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String lockName;    <span class="comment">// KEYS[1]</span></span><br><span class="line">    <span class="keyword">private</span> String uuidValue;   <span class="comment">// ARGV[1]</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> expireTime;    <span class="comment">// ARGV[2]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RedisDistributedLock</span><span class="params">(StringRedisTemplate stringRedisTemplate, String lockName, String uuidValue)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">        <span class="built_in">this</span>.lockName = lockName;</span><br><span class="line">        <span class="built_in">this</span>.uuidValue = uuidValue + <span class="string">&quot;:&quot;</span> + Thread.currentThread().getId();</span><br><span class="line">        <span class="built_in">this</span>.expireTime = <span class="number">30L</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">        tryLock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            tryLock(-<span class="number">1L</span>, TimeUnit.SECONDS);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">if</span> (time == -<span class="number">1L</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">script</span> <span class="operator">=</span> <span class="string">&quot;if redis.call(&#x27;exists&#x27;,KEYS[1]) == 0 or redis.call(&#x27;hexists&#x27;,KEYS[1],ARGV[1]) == 1 then &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;redis.call(&#x27;hincrby&#x27;,KEYS[1],ARGV[1],1)  &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;redis.call(&#x27;expire&#x27;,KEYS[1],ARGV[2]) &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;return 1 &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;else &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;return 0 &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;end&quot;</span>;</span><br><span class="line">            <span class="keyword">while</span> (!stringRedisTemplate.execute(<span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;&gt;(script, Boolean.class), Arrays.asList(lockName), uuidValue, String.valueOf(expireTime))) &#123;</span><br><span class="line">                Thread.sleep(<span class="number">60</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            resetExpire();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">script</span> <span class="operator">=</span> <span class="string">&quot;if redis.call(&#x27;HEXISTS&#x27;,KEYS[1],ARGV[1]) == 0 then &quot;</span> +</span><br><span class="line">                <span class="string">&quot;return nil &quot;</span> +</span><br><span class="line">                <span class="string">&quot;elseif redis.call(&#x27;HINCRBY&#x27;,KEYS[1],ARGV[1],-1) == 0 then  &quot;</span> +</span><br><span class="line">                <span class="string">&quot;return redis.call(&#x27;del&#x27;,KEYS[1]) &quot;</span> +</span><br><span class="line">                <span class="string">&quot;else  &quot;</span> +</span><br><span class="line">                <span class="string">&quot;return 0 &quot;</span> +</span><br><span class="line">                <span class="string">&quot;end&quot;</span>;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">flag</span> <span class="operator">=</span> stringRedisTemplate.execute(<span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;&gt;(script, Long.class), Arrays.asList(lockName), uuidValue, String.valueOf(expireTime));</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == flag) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;this lock doesn&#x27;t exists0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">resetExpire</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">script</span> <span class="operator">=</span> <span class="string">&quot;if redis.call(&#x27;HEXISTS&#x27;,KEYS[1],ARGV[1]) == 1 then &quot;</span> +</span><br><span class="line">                <span class="string">&quot;return redis.call(&#x27;expire&#x27;,KEYS[1],ARGV[2]) &quot;</span> +</span><br><span class="line">                <span class="string">&quot;else &quot;</span> +</span><br><span class="line">                <span class="string">&quot;return 0 &quot;</span> +</span><br><span class="line">                <span class="string">&quot;end&quot;</span>;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Timer</span>().schedule(<span class="keyword">new</span> <span class="title class_">TimerTask</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (stringRedisTemplate.execute(<span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;&gt;(script, Boolean.class), Arrays.asList(lockName), uuidValue, String.valueOf(expireTime))) &#123;</span><br><span class="line">                    resetExpire();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, (<span class="built_in">this</span>.expireTime * <span class="number">1000</span>) / <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Condition <span class="title function_">newCondition</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第十八节Redlock算法和Redisson的使用"><a href="#第十八节Redlock算法和Redisson的使用" class="headerlink" title="第十八节	Redlock算法和Redisson的使用"></a>第十八节	Redlock算法和Redisson的使用</h2><h3 id="18-1Redlock红锁算法"><a href="#18-1Redlock红锁算法" class="headerlink" title="18.1	Redlock红锁算法"></a>18.1	Redlock红锁算法</h3><ul>
<li><strong>解决单点故障问题</strong><ul>
<li><strong>Redis</strong> 提供了 <strong>Redlock</strong> 算法，用来实现基于多个实例的分布式锁</li>
<li>锁变量由多个实例维护，即使有实例发生了故障，锁变量仍然是存在的，客户端还是可以完成锁操作</li>
<li><strong>Redlock</strong> 算法是实现高可靠分布式锁的一种有效解决方案，可以在实际开发中使用</li>
</ul>
</li>
<li><strong>设计理念</strong><ul>
<li>依次尝试从5个实例，使用相同的 <strong>key</strong> 和随机值获取锁，当向 <strong>Redis</strong> 请求获取锁时，客户端应该设置一个超时时间，这个超时时间应该小于锁的失效时间，这样可以防止客户端在试图与一个宕机的 <strong>Redis</strong> 节点对话时长时间处于阻塞状态，如果一个实例不可用，客户端应该尽快尝试去另外一个 <strong>Redis</strong> 实例请求获取锁</li>
<li>客户端通过当前时间减去步骤 1 记录的时间来计算获取锁使用的时间，当且仅当从大多数 N&#x2F;2+1 的 <strong>Redis</strong> 节点都取到锁，并且获取锁使用的时间小于锁失效时间时，锁才算获取成功</li>
<li>如果取到了锁，其真正有效时间等于初始有效时间减去获取锁所使用的时间</li>
<li>如果由于某些原因未能获得锁，客户端应该在所有的 <strong>Redis</strong> 实例上进行解锁</li>
</ul>
</li>
</ul>
<h3 id="18-2红锁使用案例"><a href="#18-2红锁使用案例" class="headerlink" title="18.2	红锁使用案例"></a>18.2	红锁使用案例</h3><ul>
<li><p><strong>使用 Redisson 对象</strong></p>
<ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.13.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置类</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(LettuceConnectionFactory lettuceConnectionFactory)</span>&#123;</span><br><span class="line">        RedisTemplate&lt;String,Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(lettuceConnectionFactory);</span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setValueSerializer(<span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>());</span><br><span class="line"></span><br><span class="line">        redisTemplate.setHashKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setHashValueSerializer(<span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>());</span><br><span class="line"></span><br><span class="line">        redisTemplate.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Redisson <span class="title function_">redisson</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        config.useSingleServer()</span><br><span class="line">                .setAddress(<span class="string">&quot;redis://192.168.238.111:6379&quot;</span>)</span><br><span class="line">                .setDatabase(<span class="number">0</span>)</span><br><span class="line">                .setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> (Redisson) Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>控制层</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InvetoryController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> InventoryService inventoryService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/inventory/sale&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sale</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> inventoryService.sale();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/inventory/saleByRedisson&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">saleByRedisson</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> inventoryService.saleByRedisson();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>服务层</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InventoryService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Redisson redisson;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">saleByRedisson</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">retMessage</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">RLock</span> <span class="variable">redissonLock</span> <span class="operator">=</span> redisson.getLock(<span class="string">&quot;xfcyRedisLock&quot;</span>);</span><br><span class="line">        redissonLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(<span class="string">&quot;inventory001&quot;</span>);</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">inventoryNumber</span> <span class="operator">=</span> result == <span class="literal">null</span> ? <span class="number">0</span> : Integer.parseInt(result);</span><br><span class="line">            <span class="keyword">if</span> (inventoryNumber &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                stringRedisTemplate.opsForValue().set(<span class="string">&quot;inventory001&quot;</span>, String.valueOf(--inventoryNumber));</span><br><span class="line">                retMessage = <span class="string">&quot;成功卖出一个商品，库存剩余: &quot;</span> + inventoryNumber;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                retMessage = <span class="string">&quot;商品卖完了，o(╥﹏╥)o&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (redissonLock.isLocked() &amp;&amp; redissonLock.isHeldByCurrentThread())&#123;</span><br><span class="line">                redissonLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> retMessage + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;服务端口号：&quot;</span> + port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>多级部署案例</strong></p>
<ul>
<li><p><strong>Docker</strong> 部署 <strong>Redis</strong></p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 6381:6379 --name redis-master-1 -d redis</span><br><span class="line">docker run -p 6382:6379 --name redis-master-2 -d redis</span><br><span class="line">docker run -p 6383:6379 --name redis-master-3 -d redis</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入 <strong>Redis</strong> 容器</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it redis-master-1 redis-cli</span><br><span class="line">docker exec -it redis-master-2 /bin/bash </span><br><span class="line">docker exec -it redis-master-3 /bin/bash  </span><br></pre></td></tr></table></figure>
</li>
<li><p>配置文件</p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.redis.database</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">spring.redis.password</span>=<span class="string"></span></span><br><span class="line"><span class="attr">spring.redis.timeout</span>=<span class="string">3000</span></span><br><span class="line"><span class="attr">spring.redis.mode</span>=<span class="string">single</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.redis.pool.conn-timeout</span>=<span class="string">3000</span></span><br><span class="line"><span class="attr">spring.redis.pool.so-timeout</span>=<span class="string">3000</span></span><br><span class="line"><span class="attr">spring.redis.pool.size</span>=<span class="string">10</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.redis.single.address1</span>=<span class="string">192.168.238.111:6381</span></span><br><span class="line"><span class="attr">spring.redis.single.address2</span>=<span class="string">192.168.238.111:6382</span></span><br><span class="line"><span class="attr">spring.redis.single.address3</span>=<span class="string">192.168.238.111:6383</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置类</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(RedisProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisProperties redisProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    RedissonClient <span class="title function_">redissonClient1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">node</span> <span class="operator">=</span> redisProperties.getSingle().getAddress1();</span><br><span class="line">        node = node.startsWith(<span class="string">&quot;redis://&quot;</span>) ? node : <span class="string">&quot;redis://&quot;</span> + node;</span><br><span class="line">        <span class="type">SingleServerConfig</span> <span class="variable">serverConfig</span> <span class="operator">=</span> config.useSingleServer()</span><br><span class="line">                .setAddress(node)</span><br><span class="line">                .setTimeout(redisProperties.getPool().getConnTimeout())</span><br><span class="line">                .setConnectionPoolSize(redisProperties.getPool().getSize())</span><br><span class="line">                .setConnectionMinimumIdleSize(redisProperties.getPool().getMinIdle());</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(redisProperties.getPassword())) &#123;</span><br><span class="line">            serverConfig.setPassword(redisProperties.getPassword());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    RedissonClient <span class="title function_">redissonClient2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">node</span> <span class="operator">=</span> redisProperties.getSingle().getAddress2();</span><br><span class="line">        node = node.startsWith(<span class="string">&quot;redis://&quot;</span>) ? node : <span class="string">&quot;redis://&quot;</span> + node;</span><br><span class="line">        <span class="type">SingleServerConfig</span> <span class="variable">serverConfig</span> <span class="operator">=</span> config.useSingleServer()</span><br><span class="line">                .setAddress(node)</span><br><span class="line">                .setTimeout(redisProperties.getPool().getConnTimeout())</span><br><span class="line">                .setConnectionPoolSize(redisProperties.getPool().getSize())</span><br><span class="line">                .setConnectionMinimumIdleSize(redisProperties.getPool().getMinIdle());</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(redisProperties.getPassword())) &#123;</span><br><span class="line">            serverConfig.setPassword(redisProperties.getPassword());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    RedissonClient <span class="title function_">redissonClient3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">node</span> <span class="operator">=</span> redisProperties.getSingle().getAddress3();</span><br><span class="line">        node = node.startsWith(<span class="string">&quot;redis://&quot;</span>) ? node : <span class="string">&quot;redis://&quot;</span> + node;</span><br><span class="line">        <span class="type">SingleServerConfig</span> <span class="variable">serverConfig</span> <span class="operator">=</span> config.useSingleServer()</span><br><span class="line">                .setAddress(node)</span><br><span class="line">                .setTimeout(redisProperties.getPool().getConnTimeout())</span><br><span class="line">                .setConnectionPoolSize(redisProperties.getPool().getSize())</span><br><span class="line">                .setConnectionMinimumIdleSize(redisProperties.getPool().getMinIdle());</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(redisProperties.getPassword())) &#123;</span><br><span class="line">            serverConfig.setPassword(redisProperties.getPassword());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置信息类</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisPoolProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maxIdle;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> minIdle;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maxActive;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maxWait;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> connTimeout;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> soTimeout;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.redis&quot;, ignoreUnknownFields = false)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> database;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">timeout</span> <span class="operator">=</span> <span class="number">3000</span>;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String mode;</span><br><span class="line">    <span class="keyword">private</span> RedisPoolProperties pool;</span><br><span class="line">    <span class="keyword">private</span> RedisSingleProperties single;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisSingleProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String address1;</span><br><span class="line">    <span class="keyword">private</span> String address2;</span><br><span class="line">    <span class="keyword">private</span> String address3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>服务层 + 控制层</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedLockController</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CACHE_KEY_REDLOCK</span> <span class="operator">=</span> <span class="string">&quot;ATGUIGU_REDLOCK&quot;</span>;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedissonClient redissonClient1;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedissonClient redissonClient2;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedissonClient redissonClient3;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> isLockBoolean;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/multiLock&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMultiLock</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span>  IdUtil.simpleUUID();</span><br><span class="line">        <span class="type">String</span> <span class="variable">uuidValue</span> <span class="operator">=</span> uuid+<span class="string">&quot;:&quot;</span>+Thread.currentThread().getId();</span><br><span class="line"></span><br><span class="line">        <span class="type">RLock</span> <span class="variable">lock1</span> <span class="operator">=</span> redissonClient1.getLock(CACHE_KEY_REDLOCK);</span><br><span class="line">        <span class="type">RLock</span> <span class="variable">lock2</span> <span class="operator">=</span> redissonClient2.getLock(CACHE_KEY_REDLOCK);</span><br><span class="line">        <span class="type">RLock</span> <span class="variable">lock3</span> <span class="operator">=</span> redissonClient3.getLock(CACHE_KEY_REDLOCK);</span><br><span class="line"></span><br><span class="line">        <span class="type">RedissonMultiLock</span> <span class="variable">redLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedissonMultiLock</span>(lock1, lock2, lock3);</span><br><span class="line">        redLock.lock();</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(uuidValue+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;---come in biz multiLock&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123; TimeUnit.SECONDS.sleep(<span class="number">30</span>); &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace(); &#125;</span><br><span class="line">            System.out.println(uuidValue+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;---task is over multiLock&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            redLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;multiLock task is over  &quot;</span>+uuidValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="18-3缓存淘汰策略"><a href="#18-3缓存淘汰策略" class="headerlink" title="18.3	缓存淘汰策略"></a>18.3	缓存淘汰策略</h3><ul>
<li><p><strong>查看最大占用内存</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">maxmemory 0</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>查看内存使用情况</strong></p>
<ul>
<li><p>内存信息</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">info memory</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看最大内存</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">config get maxmemory</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>过期键删除策略</strong></p>
<ul>
<li><p><strong>立即删除</strong>：创建一个定时器，让定时器在该过期时间到来时，立即执行对其进行删除的操作，对 <strong>CPU</strong> 不友好，用处理器性能换取存储空间</p>
</li>
<li><p><strong>惰性删除</strong>：当需要该 <strong>key</strong> 时，再检查其是否过期，对内存不友好，用存储空间换取处理器性能</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">lazyfree-lazy-eviction=yes</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>定期删除</strong>：每隔一段时间，我们就对一些 <strong>key</strong> 进行检查，删除里面过期的 <strong>key</strong>，来减少删除操作对 <strong>CPU</strong> 时间的影响</p>
</li>
</ul>
</li>
<li><p><strong>缓存淘汰策略</strong></p>
<ul>
<li><strong>淘汰算法</strong><ul>
<li><strong>LRU</strong>：最近最少使用的页面置换算法，淘汰最长时间未被使用的页面，看页面最后一次被使用到发生调度的时间长短，首先淘汰最长时间未被使用的页面</li>
<li><strong>LFU</strong>：最近最不常用页面置换算法，淘汰一定时期内被访问次数最少的页面，看一定时间段内被访问次数最少的页，看一定时间段内页面被使用的频率，淘汰一定时期内被访问次数最少的页</li>
</ul>
</li>
<li><strong>8种缓存淘汰策略</strong><ul>
<li><strong>noevication</strong> ： 不会驱逐任何 <strong>key</strong>，表示即使内存达到上限也不进行置换，所有能引起内存增加的命令都返回 <strong>error</strong></li>
<li><strong>allkeys-lru</strong>： 对所有 <strong>key</strong> 使用 <strong>LRU</strong> 算法进行删除，优先删除掉最近不经常使用的 <strong>key</strong>，用以保存新数据</li>
<li>**volatie-lru **: 对所有设置了过期时间的 <strong>key</strong> 使用 <strong>LRU</strong> 算法删除</li>
<li><strong>allkeys-random</strong> ：对所有 <strong>key</strong> 随机删除</li>
<li><strong>volatie-random</strong> ： 对所有设置了过期时间的 <strong>key</strong> 随机删除</li>
<li><strong>volatie-ttl</strong>：对所有设置了过期时间的 <strong>key</strong> 随即删除</li>
<li><strong>allkeys-lfu</strong>：对所有 <strong>key</strong> 使用 <strong>LFU</strong> 算法进行删除</li>
<li><strong>volatile-lfu</strong>：对所有设置了过期时间的 <strong>key</strong> 使用 <strong>LFU</strong> 算法进行删除</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="第十九节Redis数据类型源码"><a href="#第十九节Redis数据类型源码" class="headerlink" title="第十九节	Redis数据类型源码"></a>第十九节	Redis数据类型源码</h2><h3 id="19-1Redis架构"><a href="#19-1Redis架构" class="headerlink" title="19.1	Redis架构"></a>19.1	Redis架构</h3><ul>
<li><p><strong>Redis 数据结构</strong></p>
<ul>
<li>简单动态字符串 <strong>sds</strong></li>
<li>整数集合 <strong>intset</strong></li>
<li>压缩列表 <strong>ziplist</strong></li>
<li>快速链表 <strong>quicklist</strong></li>
<li>紧凑列表 <strong>listpack</strong></li>
<li>字典 <strong>dict</strong></li>
</ul>
</li>
<li><p><strong>Redis 数据库的实现</strong>：数据库底层实现 <strong>db.c</strong> 和持久化 <strong>rdb.c</strong> 、<strong>aof.c</strong></p>
</li>
<li><p><strong>Redis 服务端和客户端实现</strong></p>
<ul>
<li>事件驱动 <strong>ae.c</strong> 和 <strong>ae_epoll.c</strong></li>
<li>网络连接 <strong>anet.c 和 networking.c</strong></li>
<li>服务端程序 <strong>server.c</strong></li>
<li>客户端程序 <strong>redis-cli.c</strong></li>
</ul>
</li>
<li><p><strong>Redis KV 数据库键值对</strong>：<strong>redis</strong> 是 <strong>key-value</strong> 存储系统，<strong>key</strong> 一般是 <strong>String</strong> 类型的字符串对象，<strong>value</strong> 类型则为 <strong>redis</strong> 对象，<strong>value</strong> 可以是字符串对象，也可以是集合数据类型的对象，比如 <strong>List</strong> 对象，<strong>Hash</strong> 对象，<strong>set</strong> 对象和 <strong>zset</strong> 对象</p>
</li>
<li><p><strong>Redis 对象</strong>：<strong>redis</strong> 定义了 <strong>redisobject</strong> 结构体来表示 <strong>string</strong>、<strong>hash</strong>、<strong>list</strong>、<strong>set</strong>、<strong>zset</strong> 等数据结构</p>
<ul>
<li><p>哈希表节点</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span>&#123;</span></span><br><span class="line">    <span class="type">void</span> *key; <span class="comment">// 指向 String 对象</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span>&#123;</span></span><br><span class="line">        <span class="type">void</span> *val;</span><br><span class="line">        <span class="type">uint64_t</span> u64;</span><br><span class="line">        <span class="type">int64_t</span> s64;</span><br><span class="line">        <span class="type">double</span> d;</span><br><span class="line">    &#125; v; <span class="comment">// 指向 value 对象</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="type">void</span> *metadata[];</span><br><span class="line">&#125; dictEntry;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Redis</strong> 对象</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisObject</span>&#123;</span></span><br><span class="line">    <span class="type">unsigned</span> type:<span class="number">4</span>; <span class="comment">// 对象类型</span></span><br><span class="line">    <span class="type">unsigned</span> encoding:<span class="number">4</span>; <span class="comment">// 具体的数据结构</span></span><br><span class="line">    <span class="type">unsigned</span> lru:LRU_BITS; <span class="comment">// 24位，记录最后一次被命令访问的时间</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> refcount; <span class="comment">// 引用计数，用于垃圾计数</span></span><br><span class="line">    <span class="type">void</span> *ptr; <span class="comment">// 指向对象的数据结构</span></span><br><span class="line">&#125; robj;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>返回 Redis 对象信息</strong></p>
<ul>
<li><p>开启 <strong>Debug</strong> 命令</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">enable-debug-command local</span><br></pre></td></tr></table></figure>
</li>
<li><p>返回对象信息</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">DEBUG OBJECT k1</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="19-2五大数据类型源码"><a href="#19-2五大数据类型源码" class="headerlink" title="19.2	五大数据类型源码"></a>19.2	五大数据类型源码</h3><ul>
<li><strong>动态字符串 SDS</strong><ul>
<li><strong>int len</strong>：已用的字节长度</li>
<li><strong>int alloc</strong>：字符串的最大字节长度</li>
<li><strong>char flags</strong>：表示动态字符串的类型</li>
<li>**char buf[]**：真正有效的字符串数据</li>
</ul>
</li>
<li><strong>String 数据类型</strong><ul>
<li><strong>int</strong>：保存 <strong>long</strong> 型的64位有符号整数，只有整数才会使用 <strong>int</strong>，<strong>Redis</strong> 启动时会预先建立 10000 个分别存储 0~9999 的 <strong>redisObject</strong> 变量作为共享对象，节省了指针的空间开销</li>
<li><strong>embstr</strong>：代表 <strong>embstr</strong> 格式的简单动态字符串，保存长度小于44字节的字符串，只分配一块连续的内存空间，空间中依次包含 <strong>redisObject</strong> 与 <strong>sdshdr</strong> 两个数据结构，让元数据、指针和 <strong>SDS</strong> 是一块连续的内存区域，这样就可以避免内存碎片</li>
<li><strong>raw</strong>：保存长度大于44字节的字符串，调用两次内存分配函数，分配两块内存空间，一块用于包含 <strong>redisObject</strong> 结构，而另一块用于包含 <strong>sdshdr</strong> 结构</li>
</ul>
</li>
<li><strong>Hash 数据类型</strong><ul>
<li><strong>压缩列表 ziplist</strong><ul>
<li>键的字段个数小于 <strong>hash-max-ziplist-entries</strong> 并且每个字段名和字段值的长度小于 <strong>hash-max-ziplist-value</strong></li>
<li>一个经过特殊编码的双向链表，不存储指向前一个链表节点 <strong>prev</strong> 和指向下一个链表节点的指针 <strong>next</strong> 而是存储上一个节点长度和当前节点长度，通过牺牲部分读写性能，来换取高效的内存空间利用率，节约内存，只用在字段个数少，字段值小的场景里面</li>
</ul>
</li>
<li><strong>哈希表 hashtable</strong><ul>
<li>每个键值对都会有一个 <strong>dictEntry</strong></li>
<li>底层真正的散列表数据结构是一层层嵌套下去，使用数组 + 链表的数据结构</li>
</ul>
</li>
<li><strong>紧凑列表 packlist</strong><ul>
<li>哈希对象保存的键值对数量小于 512 个，所有的键值对的健和值的字符串长度都小于等于 64 <strong>byte</strong>，在 <strong>Redis7</strong> 中替代 <strong>ziplist</strong></li>
<li>使用 <strong>prevlen</strong> 字段记录前一个节点的长度，该字段空间大小与前一个节点长度有关</li>
<li><strong>packlist</strong> 解决了 <strong>ziplist</strong> 的连锁更新问题</li>
</ul>
</li>
</ul>
</li>
<li><strong>List 数据类型</strong><ul>
<li><strong>快速链表 quicklist</strong><ul>
<li>是 <strong>zipList</strong> 和 <strong>linkedList</strong> 的混合体，它将 <strong>linkedList</strong> 按段切分，每一段使用 <strong>zipList</strong> 来紧凑存储，多个 <strong>zipList</strong> 之间使用双向指针串接起来</li>
<li><strong>redis6</strong> 底层是 <strong>ziplist</strong>，<strong>redis7</strong> 底层是 <strong>listpack</strong></li>
</ul>
</li>
</ul>
</li>
<li><strong>Set 数据类型</strong><ul>
<li><strong>intset</strong><ul>
<li>如果元素都是整数类型且元素个数小于 <strong>set-max-intset-entries</strong>，就用 <strong>intset</strong> 存储</li>
</ul>
</li>
<li><strong>hashset</strong><ul>
<li>如果不是整数类型，就用 <strong>hashtable</strong>，<strong>key</strong> 就是元素的值，<strong>value</strong> 为 <strong>null</strong></li>
</ul>
</li>
</ul>
</li>
<li><strong>ZSet 数据类型</strong><ul>
<li><strong>ziplist</strong><ul>
<li><strong>Redis6</strong> 以及以前版本使用</li>
</ul>
</li>
<li><strong>skiplist</strong><ul>
<li>当有序集合中包含的元素数量超过服务器属性 <strong>server.zset_max_ziplist_entries</strong> 的值，或者有序集合中新添加元素的 <strong>member</strong> 的长度大于服务器属性 <strong>server.zset_max_ziplist_value</strong> 的值时<strong>，redis</strong> 会使用跳表作为有序集合的底层实现</li>
<li>其根本思想是二分查找的思想，对有序链表建立一级索引，每两个节点提取一个节点到索引层，在第一级索引的基础上，每两个节点抽出一个节点到第二级索引，重复构成链表加多级索引的结构</li>
</ul>
</li>
<li><strong>listpack</strong><ul>
<li><strong>Redis7</strong> 引入来替代 <strong>ziplist</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="第二十节IO多路复用"><a href="#第二十节IO多路复用" class="headerlink" title="第二十节	IO多路复用"></a>第二十节	IO多路复用</h2><h3 id="20-1Redis多并发连接"><a href="#20-1Redis多并发连接" class="headerlink" title="20.1	Redis多并发连接"></a>20.1	Redis多并发连接</h3><ul>
<li><strong>Redis 实现多路复用</strong>：采用 <strong>Reactor</strong> 的方式来实现文件事件处理器<ul>
<li>多个套接字（<strong>socket</strong> 连接）</li>
<li><strong>IO</strong> 多路复用程序</li>
<li>文件事件分派器</li>
<li>事件处理器</li>
</ul>
</li>
<li><strong>IO 处理模式</strong><ul>
<li><strong>同步</strong>：调用者要一直等待调用结果的通知后才能进行后续的执行</li>
<li><strong>异步</strong>：指被调用方先返回应答让调用者先回去，然后再计算调用结果，计算完最终结果后再通知并返回给调用方，异步调用要想获得结果一般通过回调</li>
<li><strong>阻塞</strong>：调用方一直在等待而且别的事情什么都不做，当前线&#x2F;进程都会被挂起，啥也不干</li>
<li><strong>非阻塞</strong>：调用在发出去后，调用方先去忙别的事情，不会阻塞当前进&#x2F;线程，而会立即返回</li>
</ul>
</li>
</ul>
<h3 id="20-2BIO"><a href="#20-2BIO" class="headerlink" title="20.2	BIO"></a>20.2	BIO</h3><ul>
<li><p><strong>Java 模拟 BIO</strong></p>
<ul>
<li><p><strong>Redis</strong> 服务端</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisServerBIOMultiThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();   <span class="comment">// 阻塞1，等待客户端连接</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">                    <span class="type">int</span> <span class="variable">lenth</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">                    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                    <span class="keyword">while</span> ((lenth = inputStream.read(bytes)) != -<span class="number">1</span>) &#123;  <span class="comment">// 阻塞2  等待客户端发送数据</span></span><br><span class="line">                        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, lenth));</span><br><span class="line">                    &#125;</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, Thread.currentThread().getName()).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Redis</strong> 客户端</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisClient01</span> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.next();</span><br><span class="line">            <span class="keyword">if</span> (str.equalsIgnoreCase(<span class="string">&quot;quit&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            socket.getOutputStream().write(str.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">        outputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisClient02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.next();</span><br><span class="line">            <span class="keyword">if</span> (str.equalsIgnoreCase(<span class="string">&quot;quit&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            socket.getOutputStream().write(str.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">        outputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>存在的问题</strong>：每来一个客户端，就要开辟一个线程，如果来1万个客户端，那就要开辟1万个线程，在操作系统中用户态不能直接开辟线程，需要调用内核来创建的一个线程，这其中还涉及到用户状态的切换（上下文的切换），十分消耗资源</p>
</li>
</ul>
<h3 id="20-3NIO"><a href="#20-3NIO" class="headerlink" title="20.3	NIO"></a>20.3	NIO</h3><ul>
<li><p><strong>Java 模拟 NIO</strong></p>
<ul>
<li><p><strong>Redis</strong> 服务端</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisServerNIO</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> ArrayList&lt;SocketChannel&gt; socketList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> <span class="type">ByteBuffer</span> <span class="variable">byteBuffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ServerSocketChannel</span> <span class="variable">serverSocket</span> <span class="operator">=</span> ServerSocketChannel.open();</span><br><span class="line">        serverSocket.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>));</span><br><span class="line">        serverSocket.configureBlocking(<span class="literal">false</span>);<span class="comment">//设置为非阻塞模式</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (SocketChannel element : socketList) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">read</span> <span class="operator">=</span> element.read(byteBuffer);</span><br><span class="line">                <span class="keyword">if</span> (read &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    byteBuffer.flip();</span><br><span class="line">                    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[read];</span><br><span class="line">                    byteBuffer.get(bytes);</span><br><span class="line">                    System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes));</span><br><span class="line">                    byteBuffer.clear();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">SocketChannel</span> <span class="variable">socketChannel</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">            <span class="keyword">if</span> (socketChannel != <span class="literal">null</span>) &#123;</span><br><span class="line">                socketChannel.configureBlocking(<span class="literal">false</span>);<span class="comment">//设置为非阻塞模式</span></span><br><span class="line">                socketList.add(socketChannel);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Redis</strong> 客户端</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisClient01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.next();</span><br><span class="line">            <span class="keyword">if</span> (str.equalsIgnoreCase(<span class="string">&quot;quit&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            socket.getOutputStream().write(str.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">        outputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisClient02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.next();</span><br><span class="line">            <span class="keyword">if</span> (str.equalsIgnoreCase(<span class="string">&quot;quit&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            socket.getOutputStream().write(str.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">        outputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>存在的问题</strong>：如何用单线程处理大量的链接</p>
</li>
</ul>
<h3 id="20-4IO多路复用"><a href="#20-4IO多路复用" class="headerlink" title="20.4	IO多路复用"></a>20.4	IO多路复用</h3><ul>
<li><strong>Reactor 设计模式</strong>：基于 <strong>I&#x2F;O</strong> 复用模型，多个连接共用一个阻塞对象，应用程序只需要在一个阻塞对象上等待，无需阻塞等待所有连接。当某条连接有新的数据可以处理时，操作系统通知应用程序，线程从阻塞状态返回，开始进行业务处理<ul>
<li><strong>Reactor</strong>：在一个单独的线程中运行，负责监听和分发事件，分发给适当的处理程序来对 <strong>IO</strong> 事件做出反应。 它就像公司的电话接线员，它接听来自客户的电话并将线路转移到适当的联系人</li>
<li><strong>Handlers</strong>：处理程序执行 <strong>IO</strong> 事件要完成的实际事件，类似于客户想要与之交谈的公司中的实际办理人，<strong>Reactor</strong> 通过调度适当的处理程序来响应 <strong>IO</strong> 事件，处理程序执行非阻塞操作</li>
</ul>
</li>
<li><strong>select 方法</strong><ul>
<li><strong>select</strong> 是一个阻塞函数，当没有数据时，会一直阻塞在 <strong>select</strong> 那一行</li>
<li>当有数据时会将 <strong>reset</strong> 中对应的那一位置为1</li>
<li><strong>select</strong> 函数返回，不再阻塞</li>
<li>遍历文件描述符数组，判断哪个 <strong>fd</strong> 被置位了</li>
<li>读取数据，然后处理</li>
</ul>
</li>
<li><strong>select 的缺点</strong><ul>
<li><strong>bitmap</strong> 最大1024位，一个进程最多只能处理1024个客户端</li>
<li>文件描述符数组拷贝到了内核态，仍然有开销</li>
<li><strong>select</strong> 并没有通知用户态哪一个 <strong>socket</strong> 有数据，需要 <strong>O(n)</strong> 的遍历</li>
</ul>
</li>
<li><strong>poll 方法</strong><ul>
<li>将五个 <strong>fd</strong> 从用户态拷贝到内核态</li>
<li><strong>poll</strong> 为阻塞方法，执行 <strong>poll</strong> 方法，如果有数据会将 <strong>fd</strong> 对应的 <strong>revents</strong> 置为 <strong>POLLIN</strong></li>
<li><strong>poll</strong> 方法返回</li>
<li>循环遍历，查看哪个 <strong>fd</strong> 被置位为 <strong>POLLIN</strong> 了</li>
<li>将 <strong>revents</strong> 重置为0，便于复用</li>
<li>对置位的 <strong>fd</strong> 进行读取和处理</li>
</ul>
</li>
<li><strong>poll 的优缺点</strong><ul>
<li><strong>优点</strong><ul>
<li><strong>poll</strong> 使用 <strong>pollfd</strong> 数组来代替 <strong>select</strong> 中的 <strong>bitmap</strong>，数组没有1024的限制，可以一次管理更多的 <strong>client</strong></li>
<li>当 <strong>pollfds</strong> 数组中有事件发生，相应的 <strong>revents</strong> 置位为1，遍历的时候又置位回零，实现了 <strong>pollfd</strong> 数组的重用</li>
</ul>
</li>
<li><strong>缺点</strong>：仍然需要 <strong>O(n)</strong> 的遍历</li>
</ul>
</li>
<li><strong>epoll 方法</strong><ul>
<li>当有数据的时候，会把相应的文件描述符置位，但是 <strong>epoll</strong> 没有 <strong>revent</strong> 标志位，所以并不是真正的置位，这时候会把有数据的文件描述符放到队首</li>
<li><strong>epoll</strong> 会返回有数据的文件描述符的个数</li>
<li>根据返回的个数，读取前N个文件描述符即可</li>
<li>读取、处理</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Shell</title>
    <url>/2024/06/11/Shell/</url>
    <content><![CDATA[<h2 id="第一节概述"><a href="#第一节概述" class="headerlink" title="第一节	概述"></a>第一节	概述</h2><ul>
<li><p><strong>Shell 概述</strong></p>
<ul>
<li><strong>Shell</strong> 是一个用 <strong>C</strong> 语言编写的程序，它是用户使用 <strong>Linux</strong> 的桥梁，<strong>Shell</strong> 既是一种命令语言，又是一种程序设计语言</li>
<li><strong>Shell</strong> 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务</li>
<li><strong>Shell</strong> 脚本，是一种为 <strong>shell</strong> 编写的脚本程序</li>
<li><strong>Shell</strong> 编程跟 <strong>JavaScript</strong>、<strong>php</strong> 编程一样，只要有一个能编写代码的文本编辑器和一个能解释执行的脚本解释器就可以了</li>
</ul>
</li>
<li><p><strong>Shell 种类</strong></p>
<ul>
<li>Bourne Shell（&#x2F;usr&#x2F;bin&#x2F;sh或&#x2F;bin&#x2F;sh）</li>
<li>Bourne Again Shell（&#x2F;bin&#x2F;bash）</li>
<li>C Shell（&#x2F;usr&#x2F;bin&#x2F;csh）</li>
<li>K Shell（&#x2F;usr&#x2F;bin&#x2F;ksh）</li>
<li>Shell for Root（&#x2F;sbin&#x2F;sh）</li>
</ul>
</li>
<li><p><strong>各种 Shell 的区别</strong></p>
<ul>
<li><strong>sh</strong>：是 <strong>UNIX</strong> 最初使用的 <strong>shell</strong>，而且在每种 <strong>UNIX</strong> 上都可以使用</li>
<li><strong>Bourne Shell</strong> ：在 <strong>shell</strong> 编程方面相当优秀，但在处理与用户的交互方面做得不如其他几种 <strong>shell</strong></li>
<li><strong>bash</strong> ：<strong>LinuxOS</strong> 默认的，它是 <strong>Bourne</strong> <strong>Shell</strong> 的扩展，与 <strong>Bourne</strong> <strong>Shell</strong> 完全兼容，并且在 <strong>Bourne</strong> <strong>Shell</strong> 的基础上增加了很多特性。可以提供命令补全，命令编辑和命令历史等功能，它还包含了很多 <strong>C</strong> <strong>Shell</strong> 和 <strong>Korn</strong> <strong>Shell</strong> 中的优点，有灵活和强大的编辑接口，同时又很友好的用户界面</li>
<li><strong>csh</strong>：是一种比 <strong>Bourne</strong> <strong>Shell</strong> 更适合的变种 <strong>Shell</strong>，它的语法与 <strong>C</strong> 语言很相似</li>
<li><strong>Tcsh：</strong> ：是 <strong>Linux</strong> 提供的 <strong>C</strong> <strong>Shell</strong> 的一个扩展版本，<strong>Tcsh</strong> 包括命令行编辑，可编程单词补全，拼写校正，历史命令替换，作业控制和类似 <strong>C</strong> 语言的语法，他不仅和 <strong>Bash</strong> <strong>Shell</strong> 提示符兼容，而且还提供比 <strong>Bash</strong> <strong>Shell</strong> 更多的提示符参数</li>
<li><strong>ksh</strong> ：集合了 <strong>C</strong> <strong>Shell</strong> 和 <strong>Bourne</strong> <strong>Shell</strong> 的优点并且和 <strong>Bourne</strong> <strong>Shell</strong> 完全兼容</li>
<li><strong>pdksh</strong> ：是 <strong>Linux</strong> 系统提供的 <strong>ksh</strong> 的扩展，<strong>pdksh</strong> 支持人物控制，可以在命令行上挂起，后台执行，唤醒或终止程序</li>
</ul>
</li>
<li><p><strong>查看当前 Linux 提供的 Shell 解析器</strong></p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@Demo ~]$ cat /etc/shells</span><br><span class="line">/bin/sh</span><br><span class="line">/bin/bash</span><br><span class="line">/usr/bin/sh</span><br><span class="line">/usr/bin/bash</span><br><span class="line">/bin/tcsh</span><br><span class="line">/bin/csh</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>编写 Shell 脚本</strong>：脚本以  <strong>#!&#x2F;bin&#x2F;bash</strong> 开头，指定脚本解析器</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;helloworld&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>脚本的常用执行方式</strong></p>
<ul>
<li><p>直接运行，开辟子 <strong>Shell</strong></p>
<ul>
<li><p>绝对路径</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash /home/shells/helloworld.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>相对路径</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash ./helloworld.sh</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>赋予可执行权限，开辟子 <strong>Shell</strong></p>
<ul>
<li><p>赋予权限</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chomd +x helloworld.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>绝对路径</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/home/shells/helloworld.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>相对路径</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./helloworld.sh</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>使用当前解析器解析</p>
<ul>
<li><p>点</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">. helloworld.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>source</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source helloworld.sh</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="第二节变量"><a href="#第二节变量" class="headerlink" title="第二节	变量"></a>第二节	变量</h2><ul>
<li><p><strong>常用系统变量</strong></p>
<table>
<thead>
<tr>
<th align="center">变量名</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$HOME</td>
<td align="center">当前用户的主路径</td>
</tr>
<tr>
<td align="center">$PWD</td>
<td align="center">当前工作目录的路径</td>
</tr>
<tr>
<td align="center">$SHELL</td>
<td align="center">当前使用的 Shell 类型</td>
</tr>
<tr>
<td align="center">$USER</td>
<td align="center">当前登录的用户名</td>
</tr>
<tr>
<td align="center">$PATH</td>
<td align="center">可执行文件目录列表</td>
</tr>
</tbody></table>
</li>
<li><p><strong>查看系统变量</strong></p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $HOME</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>显示当前所有变量</strong></p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>显示当前所有环境变量</strong></p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">env</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>变量类型</strong></p>
<ul>
<li><p><strong>局部变量</strong>：局部变量在脚本或命令中定义，仅在当前 <strong>shell</strong> 实例中有效，其他 <strong>shell</strong> 启动的程序不能访问局部变量</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a=6</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>环境变量</strong>：所有的程序，包括 <strong>shell</strong> 启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行，必要的时候 <strong>shell</strong> 脚本也可以定义环境变量</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export a</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>只读变量</strong>：使用 <strong>readonly</strong>  命令可以将变量定义为只读变量，只读变量的值不能被改变</p>
</li>
<li><p><strong>删除变量</strong>：使用 <strong>unset</strong> 命令可以删除变量，变量被删除后不能再次使用。<strong>unset</strong> 命令不能删除只读变量</p>
</li>
<li><p><strong>特殊变量</strong></p>
<ul>
<li><p><strong>$n</strong>：**$0** 代表脚本名称，其余代表输入的参数</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;$0 $1 $2&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>**$#**：输入参数的个数</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $#</span><br></pre></td></tr></table></figure>
</li>
<li><p>**$***：代表的命令行中的所有参数</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $*</span><br></pre></td></tr></table></figure>
</li>
<li><p>**$@*<em>：与 <strong>$</strong></em> 类似，但是会把每个参数区别对待</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $@</span><br></pre></td></tr></table></figure>
</li>
<li><p>**$?**：最后一次执行的命令的返回状态，如果这个变量的值为0，证明上一个命令正确执行</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $?</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>注释</strong></p>
<ul>
<li><p>单行注释</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这是一个注释</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#### 开始 #####</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里可以添加描述信息</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#### 结束  #####</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>多行注释</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:&lt;&lt;EOF</span><br><span class="line">注释内容...</span><br><span class="line">注释内容...</span><br><span class="line">注释内容...</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第三节Shell数据类型"><a href="#第三节Shell数据类型" class="headerlink" title="第三节	Shell数据类型"></a>第三节	Shell数据类型</h2><ul>
<li><p><strong>字符串</strong>：字符串是 <strong>shell</strong> 编程中最常用最有用的数据类型，字符串可以用单引号，也可以用双引号，也可以不用引号</p>
<ul>
<li>单引号<ul>
<li>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的</li>
<li>单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用</li>
</ul>
</li>
<li>双引号<ul>
<li>双引号里可以有变量</li>
<li>双引号里可以出现转义字符</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>字符串操作</strong></p>
<ul>
<li><p>拼接字符串</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">greeting=&quot;hello, &quot;$your_name&quot; !&quot;</span><br><span class="line">greeting_1=&quot;hello, $&#123;your_name&#125; !&quot;</span><br><span class="line">echo $greeting  $greeting_1</span><br><span class="line"></span><br><span class="line">greeting_2=&#x27;hello, &#x27;$your_name&#x27; !&#x27;</span><br><span class="line">echo $greeting_2</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取字符串长度</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">string=&quot;abcd&quot;</span><br><span class="line">echo $&#123;#string&#125;   # 输出 4</span><br></pre></td></tr></table></figure>
</li>
<li><p>提取子字符串</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">string=&quot;runoob is a great site&quot;</span><br><span class="line">echo $&#123;string:1:4&#125;   # 输出 unoo</span><br></pre></td></tr></table></figure>
</li>
<li><p>查找子字符串</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">string=&quot;runoob is a great site&quot;</span><br><span class="line">echo `expr index &quot;$string&quot; io`  # 输出 4</span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串截取</p>
<ul>
<li><p><strong>#</strong> 号截取，删除左边字符，保留右边字符</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">var=http://www.aaa.com/123.htm</span><br><span class="line">echo $&#123;var#*//&#125; # 结果是 ：www.aaa.com/123.htm</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>##</strong> 号截取，删除左边字符，保留右边字符</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $&#123;var##*/&#125; # 结果是 123.htm</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>%</strong> 号截取，删除右边字符，保留左边字符</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $&#123;var%/*&#125; # 结果是：http://www.aaa.com</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>%%</strong> 号截取，删除右边字符，保留左边字符</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $&#123;var%%/*&#125; # 结果是：http:</span><br></pre></td></tr></table></figure>
</li>
<li><p>从左边第几个字符开始，及字符的个数</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $&#123;var:0:5&#125; # 结果是：http:</span><br></pre></td></tr></table></figure>
</li>
<li><p>从左边第几个字符开始，一直到结束</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $&#123;var:7&#125; # 结果是 ：www.aaa.com/123.htm</span><br></pre></td></tr></table></figure>
</li>
<li><p>从右边第几个字符开始，及字符的个数</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $&#123;var:0-7:3&#125; # 结果是：123</span><br></pre></td></tr></table></figure>
</li>
<li><p>从右边第几个字符开始，一直到结束</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $&#123;var:0-7&#125; # 结果是：123.htm</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>数组</strong></p>
<ul>
<li><p>定义数组</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">array_name=(value0 value1 value2 value3)</span><br><span class="line">array_name=(</span><br><span class="line">value0</span><br><span class="line">value1</span><br><span class="line">value2</span><br><span class="line">value3</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li><p>读取数组</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $&#123;array_name[@]&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取数组长度</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">length=$&#123;#array_name[@]&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">length=$&#123;#array_name[*]&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取得数组单个元素的长度</span></span><br><span class="line">lengthn=$&#123;#array_name[n]&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>关联数组</strong></p>
<ul>
<li><p>创建关联数组</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">declare -A site=([&quot;A&quot;]=&quot;1&quot; [&quot;B&quot;]=&quot;2&quot; [&quot;C&quot;]=&quot;3&quot;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>访问数组元素</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $&#123;site[&quot;B&quot;]&#125;  # 执行脚本，输出结果：2</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第四节运算符"><a href="#第四节运算符" class="headerlink" title="第四节	运算符"></a>第四节	运算符</h2><ul>
<li><p><strong>“$(())” 或 “$[]”</strong></p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a=$[(2+3)*4]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>expr 表达式</strong>：运算符间要有空格，乘法使用 <strong>\</strong>*</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">expr `expr 3 + 2` \* 4</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第五节条件判断"><a href="#第五节条件判断" class="headerlink" title="第五节	条件判断"></a>第五节	条件判断</h2><ul>
<li><p><strong>基本语法</strong>：[ condition ] ，中间必须含有括号</p>
</li>
<li><p><strong>常用判断条件</strong></p>
<ul>
<li><p>整数比较</p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-lt</td>
<td align="center">（less than）小于</td>
</tr>
<tr>
<td align="center">-le</td>
<td align="center">(less equal) 小于等于</td>
</tr>
<tr>
<td align="center">-eq</td>
<td align="center">(equal)等于</td>
</tr>
<tr>
<td align="center">-gt</td>
<td align="center">(greater than) 大于</td>
</tr>
<tr>
<td align="center">-ge</td>
<td align="center">(greater equal) 大于等于</td>
</tr>
<tr>
<td align="center">-ne</td>
<td align="center">(not equal) 不等于</td>
</tr>
</tbody></table>
</li>
<li><p>文件权限</p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-r</td>
<td align="center">有读的权限（read）</td>
</tr>
<tr>
<td align="center">-w</td>
<td align="center">有写的权限（write）</td>
</tr>
<tr>
<td align="center">-x</td>
<td align="center">有执行的权限（execute）</td>
</tr>
</tbody></table>
</li>
<li><p>文件类型</p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-f</td>
<td align="center">文件存在并且是一个常规的文件（file）</td>
</tr>
<tr>
<td align="center">-e</td>
<td align="center">文件存在（existence）</td>
</tr>
<tr>
<td align="center">-d</td>
<td align="center">文件存在并是一个目录（directory）</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p><strong>test 命令</strong>：<strong>Shell</strong> 中的 <strong>test</strong> 命令用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试</p>
</li>
<li><p><strong>多条件判断</strong>：**&amp;&amp;** 表示前一条命令执行成功，才执行后一条命令，**||** 表示上一条命令执行失败后，才执行下一条命令</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[ condition ] &amp;&amp; echo OK || echo notok</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第六节流程控制"><a href="#第六节流程控制" class="headerlink" title="第六节	流程控制"></a>第六节	流程控制</h2><ul>
<li><p><strong>if 判断</strong></p>
<ul>
<li><p>基本语法</p>
<ul>
<li><p>单行写法</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [ 条件判断 ]; then 程序; fi</span><br></pre></td></tr></table></figure>
</li>
<li><p>多行写法</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [ 条件判断1 ]</span><br><span class="line">then</span><br><span class="line">    程序</span><br><span class="line">elif [ 条件判断2 ] </span><br><span class="line">then </span><br><span class="line">    程序</span><br><span class="line">else</span><br><span class="line">    程序</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>注意事项</p>
<ul>
<li>[ 条件判断式 ]，中括号和判断式之间必须有空格</li>
<li><strong>if</strong> 后要有空格</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>case 语句</strong></p>
<ul>
<li><p>基本语法</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">case $变量名 in</span><br><span class="line">&quot;值1&quot;)</span><br><span class="line">	如果变量的值等于值1，则执行程序1</span><br><span class="line">;;</span><br><span class="line">&quot;值2&quot;)</span><br><span class="line">	如果变量的值等于值1，则执行程序2</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">	如果变量的值都不是以上的值，则执行此程序</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意事项</p>
<ul>
<li><strong>case</strong> 行尾必须为单词 <strong>in</strong>，每个模式匹配必须以右括号 <strong>)</strong> 结束</li>
<li>双分号 <strong>;;</strong> 表示命令序列结束，相对相当于 <strong>break</strong></li>
<li>最后的 ***)** 表示默认模式，相当于 <strong>default</strong></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>for 循环</strong></p>
<ul>
<li><p>基本语法</p>
<ul>
<li><p>连续的值</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for ((初始值;循环控制条件;变量变化))</span><br><span class="line"> do</span><br><span class="line"> 	程序</span><br><span class="line"> done</span><br></pre></td></tr></table></figure>
</li>
<li><p>离散的值</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for 变量 in 值1 值2 值3</span><br><span class="line"> do</span><br><span class="line"> 	程序</span><br><span class="line"> done</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>$</strong>* 和 <strong>$@</strong> 区别：**$*** 把所有的参数看成一个整体，而 <strong>$@</strong> 把每个参数区别对待</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for i in &quot;$*&quot;</span><br><span class="line"> do</span><br><span class="line">	echo $i</span><br><span class="line"> done</span><br><span class="line"></span><br><span class="line">for i in &quot;$@&quot;</span><br><span class="line"> do</span><br><span class="line">        echo $i</span><br><span class="line"> done</span><br><span class="line"></span><br><span class="line">1 2 3 4 5 6</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>while 循环</strong></p>
<ul>
<li><p>基本语法</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">while [ 条件判断 ]</span><br><span class="line"> do</span><br><span class="line"> 	程序</span><br><span class="line"> done</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第七节控制台输入"><a href="#第七节控制台输入" class="headerlink" title="第七节	控制台输入"></a>第七节	控制台输入</h2><ul>
<li><p><strong>控制台输入</strong></p>
<ul>
<li><p>基本语法</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">read [option] [param]</span><br></pre></td></tr></table></figure>
</li>
<li><p>参数选项</p>
<ul>
<li><strong>-p</strong>：指定读取值时的提示符</li>
<li><strong>-t</strong>：指定读取值时等待的时间（秒）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="第八节函数"><a href="#第八节函数" class="headerlink" title="第八节	函数"></a>第八节	函数</h2><ul>
<li><p><strong>系统函数</strong></p>
<ul>
<li><p><strong>basename</strong>：删掉所有的前缀包括最后一个 <strong>&#x2F;</strong> 字符，并显示字符串</p>
<ul>
<li><p>基本语法</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">basename [string / pathname] [suffix]</span><br></pre></td></tr></table></figure>
</li>
<li><p>选项参数</p>
<ul>
<li><strong>pathname</strong>：路径字符串</li>
<li><strong>suffix</strong>：后缀</li>
</ul>
</li>
<li><p>案例</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@KyServer datas]# basename /home/datas/banzhang.txt </span><br><span class="line">banzhang.txt</span><br><span class="line">[root@KyServer datas]# basename /home/datas/banzhang.txt .txt</span><br><span class="line">banzhang</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>dirname</strong>：从给定的包含绝对路径的文件名中去除文件名（非目录的部分），然后返回剩下的路径（目录的部分）</p>
<ul>
<li><p>基本语法</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dirname [string / pathname]</span><br></pre></td></tr></table></figure>
</li>
<li><p>选项参数</p>
<ul>
<li><strong>pathname</strong>：路径字符串</li>
</ul>
</li>
<li><p>案例</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@KyServer datas]# dirname /home/datas/banzhang.txt </span><br><span class="line">/home/datas</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>自定义函数</strong></p>
<ul>
<li><p>基本语法</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[function] funname[()]</span><br><span class="line">&#123;</span><br><span class="line">	Action;</span><br><span class="line">	[return int;]</span><br><span class="line">&#125;</span><br><span class="line">funname</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意事项</p>
<ul>
<li>必须在调用函数地方之前，先声明函数，<strong>shell</strong> 脚本是逐行运行，不会像其他语言一样先编译</li>
<li>可以显示加 <strong>return</strong> 返回，如果不加，将以最后一条命令运行结果，作为返回值，<strong>return</strong> 后跟数值n(0-255）</li>
</ul>
</li>
<li><p>案例</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">function sum()</span><br><span class="line">&#123;</span><br><span class="line">	s=$[$1+$2]</span><br><span class="line">	echo $s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">read -p &quot;请在7s内输入参数1：&quot; -t 7 P1</span><br><span class="line">read -p &quot;请在7s内输入参数2：&quot; -t 7 P2</span><br><span class="line">sum $P1 $P2</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第九节Shell工具"><a href="#第九节Shell工具" class="headerlink" title="第九节	Shell工具"></a>第九节	Shell工具</h2><ul>
<li><p><strong>cut</strong>：从文件的每一行剪切字节、字符和字段将这些字节、字符和字段输出</p>
<ul>
<li><p>基本用法</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cut [option] filename</span><br></pre></td></tr></table></figure>
</li>
<li><p>参数选项</p>
<ul>
<li><strong>-f</strong>：列号，提取第几列</li>
<li><strong>-d</strong>：分隔符，按照指定分隔符分割列</li>
</ul>
</li>
<li><p>案例</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@KyServer datas]# cut -d &quot; &quot; -f 2,3 cut.txt </span><br><span class="line">shen</span><br><span class="line">zhen</span><br><span class="line">wo</span><br><span class="line">lai</span><br><span class="line">le</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>sed</strong>：一种流编辑器，它一次处理一行内容，把当前处理的行存储在临时缓冲区中，称为模式空间，接着处理缓冲区中的内容，处理完成后，把缓存区的内容送往屏幕，接着处理下一行，这样不断重复，直到文件末尾，文件内容并没有改变，除非你使用重定向存储输出</p>
<ul>
<li><p>基本用法</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed [option] [command] filename</span><br></pre></td></tr></table></figure>
</li>
<li><p>参数选项</p>
<ul>
<li><strong>-e</strong>：直接在指令列模式上进行sed的动作编辑</li>
</ul>
</li>
<li><p>命令功能</p>
<ul>
<li><strong>a</strong>：新增，<strong>a</strong> 后面可以接字符串，在下一行出现</li>
<li><strong>d</strong>：删除</li>
<li><strong>s</strong>：查找并替换</li>
</ul>
</li>
<li><p>案例</p>
<ul>
<li><p>插入</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@KyServer datas]# sed &quot;2a mei nv&quot; sed.txt </span><br><span class="line">dong shen</span><br><span class="line">guan zhen</span><br><span class="line">mei nv</span><br><span class="line">wo wo</span><br><span class="line">lai lai</span><br><span class="line">le le</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@KyServer datas]# sed &#x27;/wo/d&#x27; sed.txt</span><br><span class="line">dong shen</span><br><span class="line">guan zhen</span><br><span class="line">lai lai</span><br><span class="line">le le</span><br></pre></td></tr></table></figure>
</li>
<li><p>替换：<strong>g</strong> 表示全部替换</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@KyServer datas]# sed &#x27;s/wo/ni/g&#x27; sed.txt</span><br><span class="line">dong shen</span><br><span class="line">guan zhen</span><br><span class="line">ni ni</span><br><span class="line">lai lai</span><br><span class="line">le le</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>awk</strong>：一个强大的文本分析工具，把文件逐行地读入，以空格为默认分隔符将每行切片，切开的部分再进行分析处理</p>
<ul>
<li><p>基本用法</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk[option] ‘pattern1&#123;action1&#125; pattern2&#123;action2&#125;’ filename</span><br></pre></td></tr></table></figure>
</li>
<li><p>参数选项</p>
<ul>
<li><strong>-F</strong>：指定输入文件拆分隔符</li>
<li><strong>-v</strong>：赋值一个用户定义变量</li>
</ul>
</li>
<li><p>案例</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@KyServer datas]# awk -F : -v i=1  &#x27;&#123;print $3+i&#125;&#x27; passwd</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">...省略...</span><br><span class="line">997</span><br><span class="line">49</span><br><span class="line">996</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>sort</strong>：它将文件进行排序，并将排序结果标准输出</p>
<ul>
<li><p>基本用法</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sort [option] [param]</span><br></pre></td></tr></table></figure>
</li>
<li><p>参数选项</p>
<ul>
<li><strong>-n</strong>：依照数值的大小排序</li>
<li><strong>-r</strong>：以相反的顺序来排序</li>
<li><strong>-t</strong>：设置排序时所用的分隔字符</li>
<li><strong>-k</strong>：指定需要排序的列</li>
<li><strong>-o</strong>：将排序后的结果存入指定的文件</li>
</ul>
</li>
<li><p>案例</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@KyServer datas]# sort -t : -nrk 3 sort.sh </span><br><span class="line">bb:40:5.4</span><br><span class="line">bd:20:4.2</span><br><span class="line">cls:10:3.5</span><br><span class="line">xz:50:2.3</span><br><span class="line">ss:30:1.6</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>SpringBoot</title>
    <url>/2024/07/24/SpringBoot/</url>
    <content><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h2 id="第一节SpringBoot快速入门"><a href="#第一节SpringBoot快速入门" class="headerlink" title="第一节	SpringBoot快速入门"></a>第一节	SpringBoot快速入门</h2><h3 id="1-1简介"><a href="#1-1简介" class="headerlink" title="1.1	简介"></a>1.1	简介</h3><ul>
<li><p><strong>SpringBoot 简介</strong>：<strong>SpringBoot</strong> 帮我们简单、快速地创建一个独立的、生产级别的 <strong>Spring</strong> 应用，大多数 <strong>SpringBoot</strong> 应用只需要编写少量配置即可快速整合 <strong>Spring</strong> 平台以及第三方技术</p>
</li>
<li><p><strong>SpringBoot 的特性</strong></p>
<ul>
<li>快速创建独立 <strong>Spring</strong> 应用</li>
<li>直接嵌入<strong>Tomcat</strong>、<strong>Jetty</strong> 或者 <strong>Undertow</strong>，无需部署 <strong>war</strong> 包</li>
<li>提供可选的 <strong>starter</strong>，简化应用整合</li>
<li>按需自动配置 <strong>Spring</strong> 以及第三方库</li>
<li>提供生产级特性，如监控指标、健康检查、外部化配置等</li>
<li>无代码生成、无 <strong>xml</strong></li>
</ul>
</li>
</ul>
<h3 id="1-2快速体验"><a href="#1-2快速体验" class="headerlink" title="1.2	快速体验"></a>1.2	快速体验</h3><ul>
<li><p><strong>依赖配置</strong></p>
<ul>
<li><p><strong>继承父项目</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;!--所有springboot项目都必须继承--&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.1</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/parent&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>添加依赖</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--web开发的场景启动器 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>添加插件</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--SpringBoot应用打包插件--&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>源代码编写</strong></p>
<ul>
<li><p><strong>主程序</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>映射类</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello,springboot&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>特性总结</strong></p>
<ul>
<li><strong>简化整合</strong>：导入相关的场景，拥有相关的功能，场景启动器</li>
<li><strong>简化开发</strong>：无需编写任何配置，直接开发业务</li>
<li><strong>简化配置</strong>：集中式管理配置，只需要修改配置文件，配置基本都有默认值</li>
<li><strong>简化部署</strong>：打包为可执行的 <strong>jar</strong> 包，<strong>linux</strong> 服务器上有 <strong>Java</strong> 环境</li>
<li><strong>简化运维</strong>：修改配置、监控、健康检查</li>
</ul>
</li>
<li><p><strong>Spring</strong> <strong>Initializr 创建向导</strong>：一键创建好整个项目结构</p>
</li>
</ul>
<h3 id="1-3应用分析"><a href="#1-3应用分析" class="headerlink" title="1.3	应用分析"></a>1.3	应用分析</h3><ul>
<li><strong>依赖管理机制</strong><ul>
<li>导入<strong>starter-web</strong> 自动导入所有相关依赖</li>
<li>父项目是版本仲裁中心，声明所有常见的 <strong>jar</strong> 包的依赖版本，无需自定义版本号</li>
<li>自定义版本号，可以利用 <strong>Maven</strong> 的就近原则，直接在导入依赖的时候声明版本</li>
<li><strong>boot</strong> 父项目没有管理的第三方的 <strong>jar</strong> 包需要自行声明</li>
</ul>
</li>
<li><strong>自动配置机制</strong><ul>
<li><strong>自动配置组件</strong>：导入场景，容器中就会自动配置好这个场景的核心组件，例如 <strong>Tomcat</strong>、<strong>SpringMVC</strong> 等</li>
<li><strong>默认的包扫描规则</strong>：**@SpringBootApplication** 标注主程序类，<strong>SpringBoot</strong> 只会扫描主程序所在的包及其下面的子包</li>
<li><strong>自定义扫描路径</strong>：使用 **@SpringBootApplication(scanBasePackages &#x3D; “com.example”)**，或者 <strong>@ComponentScan(“com.example”)</strong> 直接指定扫描的路径</li>
<li><strong>配置默认值</strong>：配置文件的所有配置项是和属性类的对象值进行一一绑定</li>
<li><strong>按需加载自动配置</strong>：场景启动器除了会导入相关功能依赖，也会导入一个 <strong>spring-boot-starter</strong>，包含 <strong>spring-boot-autoconfigure</strong> 包，容纳各种场景的<strong>AutoConfiguration</strong> 自动配置类， 导入哪个场景就开启哪个自动配置</li>
</ul>
</li>
<li><strong>自动配置流程细节梳理</strong><ul>
<li><strong>导入 starter-web 场景启动器</strong><ul>
<li>场景启动器导入了相关场景的所有依赖</li>
<li>每个场景启动器都引入了一个 <strong>spring-boot-starter</strong> 核心场景启动器</li>
<li>核心场景启动器引入了 <strong>spring-boot-autoconfigure</strong> 包，里面囊括了所有场景的所有配置</li>
<li><strong>SpringBoot</strong> 默认扫描不到 <strong>spring-boot-autoconfigure</strong> 下写好的所有配置类，只扫描主程序所在的包</li>
</ul>
</li>
<li><strong>主程序 @SpringBootApplication</strong><ul>
<li><strong>@SpringBootApplication</strong> 由 <strong>@SpringBootConfiguration</strong>、**@EnableAutoConfiguration<strong>、</strong>@ComponentScan** 三个注解组成</li>
<li><strong>SpringBoot</strong> 默认只能扫描自己主程序所在的包及其下面的子包，扫描不到 <strong>spring-boot-autoconfigure</strong> 包中官方写好的配置</li>
<li><strong>@EnableAutoConfiguration</strong> 注解是开启自动配置的核心注解</li>
<li><strong>@Import</strong> 注解会批量给容器中导入组件，<strong>SpringBoot</strong> 启动会默认加载来自于 <strong>spring-boot-autoconfigure</strong> 下 <strong>META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports</strong> 文件的配置类</li>
<li>并不是所有自动配置类都能生效，每一个自动配置类，都有条件注解 <strong>@ConditionalOnxxx</strong>，只有条件成立，才会按需生效</li>
</ul>
</li>
<li><strong>xxxxAutoConfiguration 自动配置类</strong><ul>
<li>使用 <strong>@Bean</strong> 注解向容器中添加组件</li>
<li>每个自动配置类都可能有这个注解 <strong>@EnableConfigurationProperties</strong>，用来把配置文件中配的指定前缀的属性值封装到 <strong>xxxProperties</strong> 属性类中</li>
<li><strong>xxxProperties</strong> 都是和配置文件绑定，只需要改配置文件的值，核心组件的底层参数都能修改</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="1-4核心技能"><a href="#1-4核心技能" class="headerlink" title="1.4	核心技能"></a>1.4	核心技能</h3><ul>
<li><p><strong>常用注解</strong></p>
<ul>
<li><p><strong>组件注册</strong></p>
<ul>
<li><p><strong>@SpringBootApplication</strong>：用在启动类上，主要组合包含了以下 3 个注解：**@Configuration<strong>，</strong>@EnableAutoConfiguration** 和**@ComponentScan**</p>
</li>
<li><p><strong>@Configuration</strong>：实现配置文件的功能，该类是 <strong>bean</strong> 配置的信息源</p>
</li>
<li><p><strong>@Bean</strong>：标识一个方法，替代以前的 <strong>bean</strong> 标签，产生一个 <strong>bean</strong> 并交给 <strong>spring</strong> 管理</p>
</li>
<li><p><strong>@Scope</strong>：用于指定 <strong>spring</strong> <strong>bean</strong> 的作用域，可以是 <strong>Singleton</strong>、<strong>Prototype</strong>、<strong>Request</strong>、<strong>Session</strong> 等</p>
</li>
<li><p><strong>@Import</strong>：用于引入其他配置类或组件类，可以将其他配置类中的 <strong>bean</strong> 引入到当前配置类中</p>
</li>
<li><p><strong>@ComponentScan</strong>：用于开启组件扫描，用于自动扫描并注册注解类到 <strong>spring</strong> 容器</p>
</li>
</ul>
</li>
<li><p><strong>条件注解</strong></p>
<ul>
<li><strong>@ConditionalOnClass</strong>：如果类路径中存在这个类，则触发指定行为</li>
<li><strong>@ConditionalOnMissingClass</strong>：如果类路径中不存在这个类，则触发指定行为</li>
<li><strong>@ConditionalOnBean</strong>：如果容器中存在这个 <strong>bean</strong>，则触发指定行为</li>
<li><strong>@ConditionalOnMissingBean</strong>：如果容器中不存在这个 <strong>bean</strong>，则触发指定行为</li>
<li><strong>@ConditionalOnBean</strong>：判断容器中是否有这个类型的组件，并且名字是指定的值</li>
</ul>
</li>
<li><p><strong>属性绑定</strong></p>
<ul>
<li><strong>@ConfigurationProperties</strong>： 声明组件的属性和配置文件哪些前缀开始项进行绑定</li>
<li><strong>@EnableConfigurationProperties</strong>：标识于配置类上，将容器中任意组件的属性值和配置文件的配置项的值进行绑定</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>YAML 配置文件</strong></p>
<ul>
<li><p><strong>基本语法</strong></p>
<ul>
<li>大小写敏感</li>
<li>使用缩进表示层级关系，<strong>key: value</strong>，使用空格分割，缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li>
<li>#表示注释，从这个字符一直到行尾，都会被解析器忽略</li>
<li>数组可以使用 <strong>- value</strong> 的方式，也可以使用 <strong>[cat,dog,pig]</strong> 的行内方式</li>
<li>对象可以使用嵌套结构，也可以使用 <strong>{‘name’: ‘Tom Smith’, ‘age’: 37}</strong> 的行内方式</li>
</ul>
</li>
<li><p><strong>语法细节</strong></p>
<ul>
<li><strong>文本</strong>：单引号不会转义字符，双引号会转义字符</li>
<li><strong>大文本</strong>： <strong>|</strong> 开头，大文本写在下层，保留文本格式，换行符正确显示；**&gt;** 开头，大文本写在下层，折叠换行符</li>
<li><strong>多文档合并</strong>：使用 <strong>—</strong> 可以把多个 <strong>yaml</strong> 文档合并在一个文档中，每个文档区依然认为内容独立</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>日志配置</strong></p>
<ul>
<li><p><strong>简介</strong>：<strong>Spring</strong> 使用 <strong>commons-logging</strong> 作为内部日志，但底层日志实现开放，也可以对接其他日志框架</p>
</li>
<li><p><strong>日志配置</strong></p>
<ul>
<li>核心场景引入了日志的所用功能 <strong>spring-boot-starter-logging</strong>，默认使用了 <strong>logback + slf4j</strong> 组合作为默认底层日志</li>
<li>日志使用 <strong>ApplicationListener</strong> 监听器配置，在系统启动后即配置完成</li>
<li>日志所有的配置都可以通过修改配置文件中的以 <strong>logging</strong> 开始的所有配置项完成</li>
</ul>
</li>
<li><p><strong>日志格式</strong></p>
<ul>
<li>时间和日期：毫秒级精度</li>
<li>日志级别：<strong>ERROR</strong>，<strong>WARN</strong>，<strong>INFO</strong>，<strong>DEBUG</strong>，<strong>TRACE</strong></li>
<li>进程 <strong>ID</strong></li>
<li>**—**： 消息分割符</li>
<li>线程名： 使用 <strong>[]</strong> 包含</li>
<li><strong>Logger</strong> 名： 通常是产生日志的类名</li>
<li>消息： 日志记录的内容</li>
</ul>
</li>
<li><p><strong>记录日志</strong>：使用 <strong>getLogger</strong> 方法获取日志信息</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass());</span><br><span class="line">longger.info(<span class="string">&quot;hello,logger&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>日志级别</strong></p>
<ul>
<li><strong>ALL</strong>：打印所有日志</li>
<li><strong>TRACE</strong>：追踪框架详细流程日志，一般不使用</li>
<li><strong>DEBUG</strong>：开发调试细节日志</li>
<li><strong>INFO</strong>：关键、感兴趣信息日志，是默认日志级别</li>
<li><strong>WARN</strong>：警告但不是错误的信息日志，比如：版本过时</li>
<li><strong>ERROR</strong>：业务错误日志，比如出现各种异常</li>
<li><strong>FATAL</strong>：致命错误日志，比如jvm系统崩溃</li>
<li><strong>OFF</strong>：关闭所有日志记录</li>
</ul>
</li>
<li><p><strong>日志分组</strong></p>
<ul>
<li><p><strong>自定义分组</strong>：将相关的 <strong>logger</strong> 分组在一起，便于统一管理</p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging.group.tomcat</span>=<span class="string">org.apache.catalina,org.apache.coyote,org.apache.tomcat</span></span><br><span class="line"><span class="attr">logging.level.tomcat</span>=<span class="string">trace</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>预分组</strong></p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#web分组</span></span><br><span class="line"><span class="attr">web</span>=<span class="string">org.springframework.core.codec, org.springframework.http, org.springframework.web, org.springframework.boot.actuate.endpoint.web, org.springframework.boot.web.servlet.ServletContextInitializerBeans</span></span><br><span class="line"><span class="comment">#sql分组</span></span><br><span class="line"><span class="attr">sql</span>=<span class="string">org.springframework.jdbc.core, org.hibernate.SQL, org.jooq.tools.LoggerListener</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>文件输出</strong>：在配置文件中添加 <strong>logging.file.name</strong> 和 <strong>logging.file.path</strong> 配置项</p>
<table>
<thead>
<tr>
<th align="center">logging.file.name</th>
<th align="center">logging.file.path</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">未指定</td>
<td align="center">未指定</td>
<td align="center">仅控制台输出</td>
</tr>
<tr>
<td align="center">指定</td>
<td align="center">未指定</td>
<td align="center">写入指定文件，可以添加路径</td>
</tr>
<tr>
<td align="center">未指定</td>
<td align="center">指定</td>
<td align="center">写入指定目录，例如&#x2F;var&#x2F;log，文件名为 spring.log</td>
</tr>
<tr>
<td align="center">指定</td>
<td align="center">指定</td>
<td align="center">以 logging.file.name 为准</td>
</tr>
</tbody></table>
</li>
<li><p><strong>文件归档与滚动切割</strong></p>
<ul>
<li><p><strong>归档</strong>：每天的日志单独存到一个文档中</p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">ogging.logback.rollingpolicy.file-name-pattern</span>=<span class="string">$&#123;LOG_FILE&#125;.%d&#123;yyyy-MM-dd&#125;.%i.gz</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>切割</strong>：每个文件限制大小，超过大小切割成另外一个文件</p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging.logback.rollingpolicy.max-file-size</span>=<span class="string">1MB</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="第二节SpringBoot-Web开发"><a href="#第二节SpringBoot-Web开发" class="headerlink" title="第二节	SpringBoot-Web开发"></a>第二节	SpringBoot-Web开发</h2><h3 id="2-1WebMvcAutoConfiguration原理"><a href="#2-1WebMvcAutoConfiguration原理" class="headerlink" title="2.1	WebMvcAutoConfiguration原理"></a>2.1	WebMvcAutoConfiguration原理</h3><ul>
<li><p><strong>WebMvcAutoConfiguration 生效条件</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AutoConfiguration(after = &#123; DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,</span></span><br><span class="line"><span class="meta">		ValidationAutoConfiguration.class &#125;)</span> <span class="comment">//在这些自动配置之后</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span> <span class="comment">//如果是web应用就生效，类型SERVLET、REACTIVE 响应式web</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span> <span class="comment">//容器中没有这个Bean，才生效。默认就是没有</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span><span class="comment">//优先级</span></span><br><span class="line"><span class="meta">@ImportRuntimeHints(WebResourcesRuntimeHints.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcAutoConfiguration</span> &#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置类效果</strong></p>
<ul>
<li><strong>Filter 类</strong><ul>
<li><strong>HiddenHttpMethodFilter</strong>；页面表单提交 <strong>Rest</strong> 请求（<strong>GET</strong>、<strong>POST</strong>、<strong>PUT</strong>、<strong>DELETE</strong>）</li>
<li><strong>FormContentFilter</strong>： 避免 <strong>PUT</strong>、<strong>DELETE</strong> 请求被服务器忽略</li>
</ul>
</li>
<li><strong>WebMvcConfigurer 组件</strong><ul>
<li>所有的功能最终会和配置文件进行绑定</li>
<li><strong>WebMvcProperties</strong>：绑定 <strong>spring.mvc</strong> 配置文件</li>
<li><strong>WebProperties</strong>：绑定 <strong>spring.web</strong> 配置文件</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2-2Web场景"><a href="#2-2Web场景" class="headerlink" title="2.2	Web场景"></a>2.2	Web场景</h3><ul>
<li><p><strong>配置文件的配置项</strong></p>
<ul>
<li><strong>SpringMVC</strong> 的所有配置以 <strong>spring.mvc</strong> 开头</li>
<li><strong>Web</strong> 场景通用配置以 <strong>spring.web</strong> 开头</li>
<li>文件上传配置以 <strong>spring.servlet.multipart</strong> 开头</li>
<li>服务器的配置以 <strong>server</strong> 开头</li>
</ul>
</li>
<li><p><strong>默认配置</strong></p>
<ul>
<li>包含了 <strong>ContentNegotiatingViewResolver</strong> 和 <strong>BeanNameViewResolver</strong> 组件，方便视图解析</li>
<li>默认的静态资源处理机制： 静态资源放在 <strong>static</strong> 文件夹下即可直接访问</li>
<li>自动注册了 <strong>Converter</strong>，<strong>GenericConverter</strong>，<strong>Formatter</strong> 组件，适配常见数据类型转换和格式化需求</li>
<li>支持 <strong>HttpMessageConverters</strong>，可以方便返回 <strong>json</strong> 等数据类型</li>
<li>注册 <strong>MessageCodesResolver</strong>，方便国际化及错误消息处理</li>
<li>支持静态 <strong>index.html</strong></li>
<li>自动使用 <strong>ConfigurableWebBindingInitializer</strong>，实现消息处理、数据绑定、类型转化、数据校验等功能</li>
</ul>
</li>
</ul>
<h3 id="2-3静态资源"><a href="#2-3静态资源" class="headerlink" title="2.3	静态资源"></a>2.3	静态资源</h3><ul>
<li><p><strong>静态资源默认规则</strong></p>
<ul>
<li><p><strong>静态资源规则映射</strong></p>
<ul>
<li>浏览器访问 <strong>&#x2F;webjars&#x2F;**</strong> 路径服务器去 <strong>classpath:&#x2F;META-INF&#x2F;resources&#x2F;webjars&#x2F;</strong> 下找资源</li>
<li>浏览器访问 <strong>&#x2F;**</strong> 路径服务器去静态资源默认的四个位置 <strong>classpath:&#x2F;META-INF&#x2F;resources&#x2F;<strong>，</strong>classpath:&#x2F;resources&#x2F;<strong>，</strong>classpath:&#x2F;static&#x2F;<strong>，</strong>classpath:&#x2F;public&#x2F;</strong> 下找资源</li>
</ul>
</li>
<li><p><strong>静态资源缓存规则设置</strong></p>
<ul>
<li>所有缓存的设置，直接通过配置文件 <strong>spring.web</strong> 进行配置</li>
<li><strong>cachePeriod</strong>：缓存周期</li>
<li><strong>cacheControl</strong>：<strong>HTTP</strong> 缓存控制</li>
<li><strong>useLastModified</strong>：是否使用最后一次修改，配合 <strong>HTTP Cache</strong> 规则</li>
</ul>
</li>
<li><p><strong>页面配置</strong></p>
<ul>
<li>默认页面在静态资源目录下的 <strong>index.html</strong>，如果没有就在 <strong>templates</strong>下找 <strong>index</strong> 模板页</li>
<li>默认图标在静态资源目录下的 <strong>favicon.ico</strong> 文件</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>自定义静态资源默认规则</strong></p>
<ul>
<li><p><strong>配置方式</strong></p>
<ul>
<li><p><strong>spring.web 配置项</strong></p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启静态资源映射规则</span></span><br><span class="line"><span class="attr">spring.web.resources.add-mappings</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#设置缓存</span></span><br><span class="line"><span class="attr">spring.web.resources.cache.period</span>=<span class="string">3600</span></span><br><span class="line"><span class="attr">spring.web.resources.cache.cachecontrol.max-age</span>=<span class="string">7200</span></span><br><span class="line"><span class="attr">spring.web.resources.cache.cachecontrol.cache-public</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.web.resources.cache.use-last-modified</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#自定义静态资源文件夹位置</span></span><br><span class="line"><span class="attr">spring.web.resources.static-locations</span>=<span class="string">classpath:/a/,classpath:/b/,classpath:/static/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>spring.mvc 配置项</strong></p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#自定义webjars路径前缀</span></span><br><span class="line"><span class="attr">spring.mvc.webjars-path-pattern</span>=<span class="string">/wj/**</span></span><br><span class="line"><span class="comment">#静态资源访问路径前缀</span></span><br><span class="line"><span class="attr">spring.mvc.static-path-pattern</span>=<span class="string">/static/**</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>代码方式</strong></p>
<ul>
<li><p><strong>实现 WebMvcConfigurer 接口</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/static/**&quot;</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">&quot;classpath:/a/&quot;</span>,<span class="string">&quot;classpath:/b/&quot;</span>)</span><br><span class="line">                .setCacheControl(CacheControl.maxAge(<span class="number">1180</span>, TimeUnit.SECONDS));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>添加 WebMvcConfigurer 组件</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WebMvcConfigurer <span class="title function_">webMvcConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebMvcConfigurer</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">                registry.addResourceHandler(<span class="string">&quot;/static/**&quot;</span>)</span><br><span class="line">                        .addResourceLocations(<span class="string">&quot;classpath:/a/&quot;</span>, <span class="string">&quot;classpath:/b/&quot;</span>)</span><br><span class="line">                        .setCacheControl(CacheControl.maxAge(<span class="number">1180</span>, TimeUnit.SECONDS));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2-4路径匹配"><a href="#2-4路径匹配" class="headerlink" title="2.4	路径匹配"></a>2.4	路径匹配</h3><ul>
<li><p><strong>Ant 风格路径用法</strong></p>
<ul>
<li>*****：表示任意数量的字符</li>
<li>**?**：表示任意一个字符</li>
<li>******：表示任意数量的目录</li>
<li><strong>{}</strong>：表示一个命名模式的占位符</li>
<li>**[]**：表示字符集合</li>
<li><strong>\</strong>：表示特殊字符转义</li>
</ul>
</li>
<li><p><strong>模式切换</strong></p>
<ul>
<li><p><strong>PathPatternParser</strong></p>
<ul>
<li>兼容 <strong>Ant</strong> 风格路径用法，并支持更多类型的路径模式</li>
<li>****** 多段匹配仅支持在模式末尾使用</li>
</ul>
</li>
<li><p><strong>路径匹配规则使用</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/a*/b?/&#123;p1:[a-f]+&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(HttpServletRequest request, </span></span><br><span class="line"><span class="params">                    <span class="meta">@PathVariable(&quot;p1&quot;)</span> String path)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">    <span class="keyword">return</span> uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>匹配模式切换</strong></p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.mvc.pathmatch.matching-strategy</span>=<span class="string">ant_path_matcher</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-5内容协商"><a href="#2-5内容协商" class="headerlink" title="2.5	内容协商"></a>2.5	内容协商</h3><ul>
<li><p><strong>多段内容适配</strong></p>
<ul>
<li><p><strong>默认规则</strong></p>
<ul>
<li><strong>基于请求头</strong>：默认开启，客户端向服务端发送请求，携带 <strong>HTTP</strong> 标准的 <strong>Accept</strong> 请求头</li>
<li><strong>基于请求参数</strong>：需要手动开启，根据 <strong>Get</strong> 请求携带的参数匹配，返回不同的数据类型</li>
</ul>
</li>
<li><p><strong>流程演示</strong></p>
<ul>
<li><p><strong>添加依赖</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>标识注解</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JacksonXmlRootElement</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Person <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1L</span>,<span class="string">&quot;Jack&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>开启基于请求参数的内容协商</strong></p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.mvc.contentnegotiation.favor-parameter</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.mvc.contentnegotiation.parameter-name</span>=<span class="string">type</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>自定义内容返回</strong></p>
<ul>
<li><p><strong>添加依赖</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-yaml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>对象类型转换</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">1L</span>,<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;aaa@qq.com&quot;</span>,<span class="number">18</span>);</span><br><span class="line"><span class="type">YAMLFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">YAMLFactory</span>().disable(YAMLGenerator.Feature.WRITE_DOC_START_MARKER);</span><br><span class="line"><span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>(factory);</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> mapper.writeValueAsString(person);</span><br><span class="line">System.out.println(s);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>编写配置</strong></p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#新增一种媒体类型</span></span><br><span class="line"><span class="attr">spring.mvc.contentnegotiation.media-types.yaml</span>=<span class="string">text/yaml</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>添加组件</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> WebMvcConfigurer <span class="title function_">webMvcConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebMvcConfigurer</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span> <span class="comment">//配置一个能把对象转为yaml的messageConverter</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">            converters.add(<span class="keyword">new</span> <span class="title class_">MyYamlHttpMessageConverter</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-6模板引擎"><a href="#2-6模板引擎" class="headerlink" title="2.6	模板引擎"></a>2.6	模板引擎</h3><ul>
<li><p><strong>基本语法</strong></p>
<ul>
<li><p><strong>th:xxx 属性</strong>：动态渲染指定的 <strong>html</strong> 标签属性值、或者 <strong>th</strong> 指令（遍历、判断等）</p>
</li>
<li><p><strong>表达式</strong></p>
<table>
<thead>
<tr>
<th align="center">表达式</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>${}</strong></td>
<td align="center">变量取值</td>
</tr>
<tr>
<td align="center"><strong>@{}</strong></td>
<td align="center">url路径</td>
</tr>
<tr>
<td align="center"><strong>#{}</strong></td>
<td align="center">国际化消息</td>
</tr>
<tr>
<td align="center"><strong>~{}</strong></td>
<td align="center">片段引用</td>
</tr>
<tr>
<td align="center"><strong>*{}</strong></td>
<td align="center">变量选择</td>
</tr>
</tbody></table>
</li>
<li><p><strong>内置对象</strong></p>
<table>
<thead>
<tr>
<th align="center">对象</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>param</strong></td>
<td align="center">请求参数对象</td>
</tr>
<tr>
<td align="center"><strong>session</strong></td>
<td align="center">session对象</td>
</tr>
<tr>
<td align="center"><strong>application</strong></td>
<td align="center">application对象</td>
</tr>
<tr>
<td align="center"><strong>#dates</strong></td>
<td align="center">日期工具类</td>
</tr>
<tr>
<td align="center"><strong>#strings</strong></td>
<td align="center">字符串操作</td>
</tr>
<tr>
<td align="center"><strong>#arrays</strong></td>
<td align="center">array工具</td>
</tr>
<tr>
<td align="center"><strong>#lists</strong></td>
<td align="center">list工具</td>
</tr>
<tr>
<td align="center"><strong>#sets</strong></td>
<td align="center">set工具</td>
</tr>
<tr>
<td align="center"><strong>#maps</strong></td>
<td align="center">map工具</td>
</tr>
</tbody></table>
</li>
<li><p><strong>属性设置</strong></p>
<ul>
<li><p><strong>th:text</strong>：动态绑定标签内容</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;content&#125;&quot;</span>&gt;</span>原内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>th:href</strong>：动态绑定链接目标</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>th:attr</strong>：设置标签的属性</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">th:attr</span>=<span class="string">&quot;src=@&#123;/images/gtvglogo.png&#125;,title=#&#123;logo&#125;,alt=#&#123;logo&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>th:each</strong>：遍历集合的内容</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;prod : $&#123;prods&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;prod.name&#125;&quot;</span>&gt;</span>Onions<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;prod.price&#125;&quot;</span>&gt;</span>2.41<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>th:if</strong>：判断属性值决定是否执行</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;comments.html&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">th:if</span>=<span class="string">&quot;$&#123;not #lists.isEmpty(prod.comments)&#125;&quot;</span>&gt;</span>view<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>th:switch</strong>：多项选择</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">&quot;$&#123;user.role&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">&quot;&#x27;admin&#x27;&quot;</span>&gt;</span>User is an administrator<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">&quot;#&#123;roles.manager&#125;&quot;</span>&gt;</span>User is a manager<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">&quot;*&quot;</span>&gt;</span>User is some other thing<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>行内写法</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, [[$&#123;session.user.name&#125;]]!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>模板布局</strong></p>
<ul>
<li><p><strong>th:fragment</strong>：定义模板</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">th:fragment</span>=<span class="string">&quot;copy&quot;</span>&gt;</span><span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>**~{templatename::selector}**：引用模板</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">&quot;~&#123;footer :: copy&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;~&#123;footer :: copy&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>th:insert 和 th:replace</strong>：插入模板</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">&quot;~&#123;footer :: copy&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;~&#123;footer :: copy&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2-7国际化"><a href="#2-7国际化" class="headerlink" title="2.7	国际化"></a>2.7	国际化</h3><ul>
<li><p><strong>国际化步骤</strong></p>
<ul>
<li><p><strong>消息文件</strong></p>
<ul>
<li><strong>messages.properties</strong>：默认消息文件</li>
<li><strong>messages_zh_CN.properties</strong>：中文环境消息文件</li>
<li><strong>messages_en_US.properties</strong>：英语环境消息文件</li>
</ul>
</li>
<li><p><strong>获取配置项值</strong></p>
<ul>
<li><p><strong>代码方式</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">MessageSource messageSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/haha&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">haha</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    <span class="type">Locale</span> <span class="variable">locale</span> <span class="operator">=</span> request.getLocale();</span><br><span class="line">    <span class="type">String</span> <span class="variable">login</span> <span class="operator">=</span> messageSource.getMessage(<span class="string">&quot;login&quot;</span>, <span class="literal">null</span>, locale);</span><br><span class="line">    <span class="keyword">return</span> login;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>页面标签方式</strong></p>
  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;login&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2-8错误处理"><a href="#2-8错误处理" class="headerlink" title="2.8	错误处理"></a>2.8	错误处理</h3><ul>
<li><p><strong>默认机制</strong></p>
<ul>
<li><p>自动配置类 <strong>ErrorMvcAutoConfiguration</strong></p>
</li>
<li><p><strong>SpringBoot</strong> 会自适应处理错误<strong>，</strong>响应页面或 <strong>JSON</strong> 数据</p>
</li>
<li><p><strong>SpringMVC</strong> 的错误处理机制依然保留，<strong>MVC</strong> 处理不了，才会交给 <strong>boot</strong> 进行处理</p>
  <img src="C:\Users\86172\Pictures\Markdown\SpringBoot\错误处理.svg" style="zoom:50%;" /></li>
</ul>
</li>
<li><p><strong>错误处理流程</strong></p>
<ul>
<li><p>发生错误以后，转发给 <strong>&#x2F;error</strong> 路径，<strong>SpringBoot</strong> 在底层写好一个 <strong>BasicErrorController</strong> 的组件，专门处理这个请求</p>
</li>
<li><p>容器中有一个专门的错误视图解析器</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(DispatcherServlet.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(ErrorViewResolver.class)</span></span><br><span class="line">DefaultErrorViewResolver <span class="title function_">conventionErrorViewResolver</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultErrorViewResolver</span>(<span class="built_in">this</span>.applicationContext, <span class="built_in">this</span>.resources);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>解析一个错误页规则</p>
</li>
</ul>
<ol>
<li><ul>
<li>如果发生了 <strong>500</strong>、<strong>404</strong>、<strong>503</strong>、<strong>403</strong> 这些错误，如果有模板引擎，默认在  <strong>classpath:&#x2F;templates&#x2F;error&#x2F;精确码.html</strong>，否则在静态资源文件夹下找  <strong>精确码.html</strong>&#96;</li>
<li>如果匹配不到 <strong>精确码.html</strong> 这些精确的错误页，就去找 <strong>5xx.html</strong>，<strong>4xx.html</strong> 模糊匹配，如果有模板引擎，默认 <strong>classpath:&#x2F;templates&#x2F;error&#x2F;5xx.html</strong>，否则在静态资源文件夹下找 <strong>5xx.html</strong></li>
<li>如果模板引擎路径 <strong>templates</strong> 下有 <strong>error.html</strong> 页面，就直接渲染</li>
</ul>
</li>
</ol>
</li>
<li><p><strong>自定义错误响应</strong></p>
<ul>
<li>自定义 <strong>json</strong> 响应：使用 <strong>@ControllerAdvice</strong> + <strong>@ExceptionHandler</strong> 进行统一异常处理</li>
<li>自定义页面响应：根据 <strong>boot</strong> 的错误页面规则，自定义页面模板</li>
</ul>
</li>
</ul>
<h3 id="2-9嵌入式容器"><a href="#2-9嵌入式容器" class="headerlink" title="2.9	嵌入式容器"></a>2.9	嵌入式容器</h3><ul>
<li><p><strong>Servlet 容器</strong>：管理、运行 <strong>Servlet</strong>组件（<strong>Servlet</strong>、<strong>Filter</strong>、<strong>Listener</strong>）的环境，一般指服务器</p>
</li>
<li><p><strong>自动配置原理</strong></p>
<ul>
<li><p><strong>SpringBoot</strong> 默认嵌入<strong>Tomcat</strong> 作为 <strong>Servlet</strong> 容器</p>
</li>
<li><p>自动配置类是 <strong>ServletWebServerFactoryAutoConfiguration</strong>，<strong>EmbeddedWebServerFactoryCustomizerAutoConfiguration</strong></p>
</li>
<li><p><strong>ServletWebServerFactoryAutoConfiguration</strong> 自动配置了嵌入式容器场景，绑定了 <strong>ServerProperties</strong> 配置类，所有和服务器有关的配置</p>
</li>
<li><p><strong>ServletWebServerFactoryAutoConfiguration</strong> 导入了嵌入式的三大服务器 <strong>Tomcat</strong>、<strong>Jetty</strong>、<strong>Undertow</strong></p>
<ul>
<li>导入 <strong>Tomcat</strong> 、<strong>Jetty</strong>、<strong>Undertow</strong> 都具备条件注解</li>
<li>默认 <strong>Tomcat</strong> 配置生效，向容器中添加 <strong>TomcatServletWebServerFactory</strong></li>
<li>都向容器添加  <strong>ServletWebServerFactory</strong> 服务器工厂</li>
<li>服务器工厂具备一个功能，使用 <strong>getWebServer</strong> 获取 <strong>web</strong> 服务器</li>
<li><strong>TomcatServletWebServerFactory</strong> 创建了 <strong>tomcat</strong></li>
</ul>
</li>
<li><p><strong>ServletWebServerApplicationContext</strong> <strong>ioc</strong> 容器，启动的时候会调用来创建 <strong>web</strong> 服务器</p>
</li>
<li><p><strong>Spring</strong> 容器刷新（启动）的时候，会通过 <strong>onRefresh()</strong> 函数预留一个时机来刷新子容器</p>
</li>
<li><p>使用 <strong>refresh()</strong> 来实现容器刷新</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onRefresh</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onRefresh();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        createWebServer();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ApplicationContextException</span>(<span class="string">&quot;Unable to start web server&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>自定义容器</strong>：通过配置文件来切换服务器</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-api.version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">servlet-api.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Exclude the Tomcat dependency --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Use Jetty instead --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-10全面接管SpringMVC"><a href="#2-10全面接管SpringMVC" class="headerlink" title="2.10	全面接管SpringMVC"></a>2.10	全面接管SpringMVC</h3><ul>
<li><p><strong>自动配置规则</strong></p>
<ul>
<li><p>支持 <strong>RESTful</strong> 的 <strong>filter</strong>：<strong>HiddenHttpMethodFilter</strong></p>
</li>
<li><p>支持非 <strong>POST</strong> 请求，请求体携带数据：<strong>FormContentFilter</strong></p>
</li>
<li><p>导入 <strong>EnableWebMvcConfiguration</strong> 组件</p>
<ul>
<li><strong>RequestMappingHandlerAdapter</strong>：请求映射处理</li>
<li><strong>WelcomePageHandlerMapping</strong>： 欢迎页功能支持（模板引擎目录、静态资源目录放 <strong>index.html</strong>），项目访问&#x2F; 就默认展示这个页面.</li>
<li><strong>RequestMappingHandlerMapping</strong>：找每个请求由谁处理的映射关系</li>
<li><strong>ExceptionHandlerExceptionResolver</strong>：默认的异常解析器 </li>
<li><strong>LocaleResolver</strong>：国际化解析器</li>
<li><strong>ThemeResolver</strong>：主题解析器</li>
<li><strong>FlashMapManager</strong>：临时数据共享</li>
<li><strong>FormattingConversionService</strong>： 数据格式化 、类型转化</li>
<li><strong>Validator</strong>： 数据校验 <strong>JSR303</strong> 提供的数据校验功能</li>
<li><strong>WebBindingInitializer</strong>：请求参数的封装与绑定</li>
<li><strong>ContentNegotiationManager</strong>：内容协商管理器</li>
</ul>
</li>
<li><p><strong>WebMvcAutoConfigurationAdapter</strong> 配置生效，它是一个 <strong>WebMvcConfigurer</strong> 组件，用于定义 <strong>mvc</strong> 底层组件</p>
<ul>
<li>定义 <strong>WebMvcConfigurer</strong> 底层组件默认功能</li>
<li><strong>InternalResourceViewResolver</strong>：视图解析器</li>
<li><strong>BeanNameViewResolver</strong>：视图解析器，视图名就是组件名</li>
<li><strong>ContentNegotiatingViewResolver</strong>：内容协商解析器</li>
<li><strong>RequestContextFilter</strong>：请求上下文过滤器，任意位置直接获取当前请求</li>
<li>静态资源链规则</li>
<li><strong>ProblemDetailsExceptionHandler</strong>：错误详情处理器，<strong>SpringMVC</strong> 内部场景异常被它捕获</li>
</ul>
</li>
<li><p>定义了 <strong>MVC</strong> 默认的底层行为 <strong>WebMvcConfigurer</strong></p>
</li>
</ul>
</li>
<li><p><strong>禁用默认行为</strong></p>
<ul>
<li><strong>@EnableWebMvc</strong> 给容器中导入 <strong>DelegatingWebMvcConfiguration</strong> 组件，是 <strong>WebMvcConfigurationSupport</strong></li>
</ul>
<ol start="2">
<li><strong>WebMvcAutoConfiguration</strong> 有一个核心的条件注解，**@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)<strong>，即当容器中没有</strong>WebMvcConfigurationSupport<strong>，</strong>WebMvcAutoConfiguration** 时才生效</li>
<li><strong>@EnableWebMvc</strong> 导入 <strong>WebMvcConfigurationSupport</strong> 导致 <strong>WebMvcAutoConfiguration</strong> 失效，导致禁用了默认行为</li>
</ol>
</li>
<li><p><strong>WebMvcConfigurer 功能</strong></p>
<table>
<thead>
<tr>
<th>提供方法</th>
<th>核心参数</th>
<th>功能</th>
<th>默认</th>
</tr>
</thead>
<tbody><tr>
<td><strong>addFormatters</strong></td>
<td>FormatterRegistry</td>
<td><strong>格式化器</strong>：支持属性上@NumberFormat和@DatetimeFormat的数据类型转换</td>
<td>GenericConversionService</td>
</tr>
<tr>
<td><strong>getValidator</strong></td>
<td>无</td>
<td><strong>数据校验</strong>：校验 Controller 上使用@Valid标注的参数合法性。需要导入starter-validator</td>
<td>无</td>
</tr>
<tr>
<td><strong>addInterceptors</strong></td>
<td>InterceptorRegistry</td>
<td><strong>拦截器</strong>：拦截收到的所有请求</td>
<td>无</td>
</tr>
<tr>
<td><strong>configureContentNegotiation</strong></td>
<td>ContentNegotiationConfigurer</td>
<td><strong>内容协商</strong>：支持多种数据格式返回。需要配合支持这种类型的HttpMessageConverter</td>
<td>支持 json</td>
</tr>
<tr>
<td><strong>configureMessageConverters</strong></td>
<td>List&lt;HttpMessageConverter&lt;?&gt;&gt;</td>
<td><strong>消息转换器</strong>：标注@ResponseBody的返回值会利用MessageConverter直接写出去</td>
<td>8 个，支持byte，string,multipart,resource，json</td>
</tr>
<tr>
<td><strong>addViewControllers</strong></td>
<td>ViewControllerRegistry</td>
<td><strong>视图映射</strong>：直接将请求路径与物理视图映射。用于无 java 业务逻辑的直接视图页渲染</td>
<td>无 <a href="mvc:view-controller">mvc:view-controller</a></td>
</tr>
<tr>
<td><strong>configureViewResolvers</strong></td>
<td>ViewResolverRegistry</td>
<td><strong>视图解析器</strong>：逻辑视图转为物理视图</td>
<td>ViewResolverComposite</td>
</tr>
<tr>
<td><strong>addResourceHandlers</strong></td>
<td>ResourceHandlerRegistry</td>
<td><strong>静态资源处理</strong>：静态资源路径映射、缓存控制</td>
<td>ResourceHandlerRegistry</td>
</tr>
<tr>
<td><strong>configureDefaultServletHandling</strong></td>
<td>DefaultServletHandlerConfigurer</td>
<td><strong>默认 Servlet</strong>：可以覆盖 Tomcat 的DefaultServlet。让DispatcherServlet拦截&#x2F;</td>
<td>无</td>
</tr>
<tr>
<td><strong>configurePathMatch</strong></td>
<td>PathMatchConfigurer</td>
<td><strong>路径匹配</strong>：自定义 URL 路径匹配。可以自动为所有路径加上指定前缀，比如 &#x2F;api</td>
<td>无</td>
</tr>
<tr>
<td><strong>configureAsyncSupport</strong></td>
<td>AsyncSupportConfigurer</td>
<td><strong>异步支持</strong>：</td>
<td>TaskExecutionAutoConfiguration</td>
</tr>
<tr>
<td><strong>addCorsMappings</strong></td>
<td>CorsRegistry</td>
<td><strong>跨域</strong>：</td>
<td>无</td>
</tr>
<tr>
<td><strong>addArgumentResolvers</strong></td>
<td>List<HandlerMethodArgumentResolver></td>
<td><strong>参数解析器</strong>：</td>
<td>mvc 默认提供</td>
</tr>
<tr>
<td><strong>addReturnValueHandlers</strong></td>
<td>List<HandlerMethodReturnValueHandler></td>
<td><strong>返回值解析器</strong>：</td>
<td>mvc 默认提供</td>
</tr>
<tr>
<td><strong>configureHandlerExceptionResolvers</strong></td>
<td>List<HandlerExceptionResolver></td>
<td><strong>异常处理器</strong>：</td>
<td>默认 3 个 ExceptionHandlerExceptionResolver ResponseStatusExceptionResolver DefaultHandlerExceptionResolver</td>
</tr>
<tr>
<td><strong>getMessageCodesResolver</strong></td>
<td>无</td>
<td><strong>消息码解析器</strong>：国际化使用</td>
<td>无</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="2-11Web新特性"><a href="#2-11Web新特性" class="headerlink" title="2.11	Web新特性"></a>2.11	Web新特性</h3><ul>
<li><p><strong>Problemdetails</strong></p>
<ul>
<li><p><strong>ProblemDetailsExceptionHandler</strong> 是一个 <strong>@ControllerAdvice</strong> 集中处理系统异常</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.mvc.problemdetails&quot;, name = &quot;enabled&quot;, havingValue = &quot;true&quot;)</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ProblemDetailsErrorHandlingConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(ResponseEntityExceptionHandler.class)</span></span><br><span class="line">    ProblemDetailsExceptionHandler <span class="title function_">problemDetailsExceptionHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProblemDetailsExceptionHandler</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果系统出现以下异常，会被 <strong>SpringBoot</strong> 支持以 <strong>RFC 7807</strong> 规范方式返回错误数据</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(&#123;</span></span><br><span class="line"><span class="meta">        HttpRequestMethodNotSupportedException.class,</span></span><br><span class="line"><span class="meta">        HttpMediaTypeNotSupportedException.class,</span></span><br><span class="line"><span class="meta">        HttpMediaTypeNotAcceptableException.class,</span></span><br><span class="line"><span class="meta">        MissingPathVariableException.class,</span></span><br><span class="line"><span class="meta">        MissingServletRequestParameterException.class,</span></span><br><span class="line"><span class="meta">        MissingServletRequestPartException.class,</span></span><br><span class="line"><span class="meta">        ServletRequestBindingException.class,</span></span><br><span class="line"><span class="meta">        MethodArgumentNotValidException.class,</span></span><br><span class="line"><span class="meta">        NoHandlerFoundException.class,</span></span><br><span class="line"><span class="meta">        AsyncRequestTimeoutException.class,</span></span><br><span class="line"><span class="meta">        ErrorResponseException.class,</span></span><br><span class="line"><span class="meta">        ConversionNotSupportedException.class,</span></span><br><span class="line"><span class="meta">        TypeMismatchException.class,</span></span><br><span class="line"><span class="meta">        HttpMessageNotReadableException.class,</span></span><br><span class="line"><span class="meta">        HttpMessageNotWritableException.class,</span></span><br><span class="line"><span class="meta">        BindException.class</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>函数式 Web</strong></p>
<ul>
<li><p>构建路由函数</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRoutingConfiguration</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">RequestPredicate</span> <span class="variable">ACCEPT_JSON</span> <span class="operator">=</span> accept(MediaType.APPLICATION_JSON);</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RouterFunction&lt;ServerResponse&gt; <span class="title function_">routerFunction</span><span class="params">(MyUserHandler userHandler)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> route()</span><br><span class="line">                .GET(<span class="string">&quot;/&#123;user&#125;&quot;</span>, ACCEPT_JSON, userHandler::getUser)</span><br><span class="line">                .GET(<span class="string">&quot;/&#123;user&#125;/customers&quot;</span>, ACCEPT_JSON, userHandler::getUserCustomers)</span><br><span class="line">                .DELETE(<span class="string">&quot;/&#123;user&#125;&quot;</span>, ACCEPT_JSON, userHandler::deleteUser)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>构建对应的处理器</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyUserHandler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ServerResponse <span class="title function_">getUser</span><span class="params">(ServerRequest request)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> ServerResponse.ok().build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> ServerResponse <span class="title function_">getUserCustomers</span><span class="params">(ServerRequest request)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> ServerResponse.ok().build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> ServerResponse <span class="title function_">deleteUser</span><span class="params">(ServerRequest request)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> ServerResponse.ok().build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第三节SpringBoot数据访问"><a href="#第三节SpringBoot数据访问" class="headerlink" title="第三节	SpringBoot数据访问"></a>第三节	SpringBoot数据访问</h2><ul>
<li><p><strong>数据访问流程</strong></p>
<ul>
<li><p>整合 <strong>ssm</strong> 组件</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置数据源</p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://192.168.200.100:3306/demo</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="attr">spring.datasource.type</span>=<span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 <strong>Mybatis</strong></p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#指定mapper映射文件位置</span></span><br><span class="line"><span class="attr">mybatis.mapper-locations</span>=<span class="string">classpath:/mapper/*.xml</span></span><br><span class="line"><span class="comment">#参数项调整</span></span><br><span class="line"><span class="attr">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写增删改查语句：编写 <strong>bean</strong> 组件，编写 <strong>Mybatis</strong> 接口，使用 <strong>MybatisX</strong> 插件快速生成 <strong>xml</strong> 文件，测试</p>
</li>
</ul>
</li>
<li><p><strong>自动配置原理</strong></p>
<ul>
<li>自动配置 <strong>jdbc</strong><ul>
<li><strong>mybatis-spring-boot-starter</strong> 导入 <strong>spring-boot-starter-jdbc</strong>，<strong>jdbc</strong> 是操作数据库的场景</li>
<li><strong>Jdbc</strong> 场景的自动配置<ul>
<li><strong>DataSourceAutoConfiguration</strong>：数据源的自动配置，所有和数据源有关的配置都绑定在 <strong>DataSourceProperties</strong>，默认使用 <strong>HikariDataSource</strong></li>
<li><strong>JdbcTemplateAutoConfiguration</strong>：给容器中放了 <strong>JdbcTemplate</strong> 操作数据库</li>
<li><strong>JndiDataSourceAutoConfiguration</strong></li>
<li><strong>XADataSourceAutoConfiguration</strong>：基于 <strong>XA</strong> 二阶提交协议的分布式事务数据源</li>
<li><strong>DataSourceTransactionManagerAutoConfiguration</strong>：支持事务</li>
</ul>
</li>
<li>具有的底层能力：数据源、<strong>JdbcTemplate</strong>、事务</li>
</ul>
</li>
<li>自动配置 <strong>Mybatis</strong><ul>
<li><strong>mybatis-spring-boot-starter</strong> 导入 <strong>mybatis-spring-boot-autoconfigure</strong></li>
<li>默认加载两个自动配置类<ul>
<li><strong>MybatisLanguageDriverAutoConfiguration</strong></li>
<li><strong>MybatisAutoConfiguration</strong></li>
<li>必须在数据源配置好之后才配置，向容器中添加 <strong>SqlSessionFactory</strong> 组件，创建和数据库的一次会话，向容器中添加 <strong>SqlSessionTemplate</strong> 组件，操作数据库</li>
</ul>
</li>
<li><strong>MyBatis</strong> 的所有配置绑定在 <strong>MybatisProperties</strong> 组件中</li>
<li>每个 <strong>Mapper</strong> 接口的代理对象，利用 <strong>@Import(MapperScannerRegistrar.class)</strong> 批量给容器中注册组件，解析指定的包路径里面的每一个类，为每一个 <strong>Mapper</strong> 接口类，创建 <strong>Bean</strong> 定义信息，注册到容器中</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="第四节SpringBoot基础特性"><a href="#第四节SpringBoot基础特性" class="headerlink" title="第四节	SpringBoot基础特性"></a>第四节	SpringBoot基础特性</h2><h3 id="4-1SpringApplication"><a href="#4-1SpringApplication" class="headerlink" title="4.1	SpringApplication"></a>4.1	SpringApplication</h3><ul>
<li><p><strong>自定义 banner</strong>：类路径添加 <strong>banner.txt</strong> 或设置 <strong>spring.banner.location</strong> 就可以定制 <strong>banner</strong></p>
</li>
<li><p><strong>自定义 SpringApplication</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SpringApplication</span> <span class="variable">application</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplication</span>(MyApplication.class);</span><br><span class="line">        application.setBannerMode(Banner.Mode.OFF);</span><br><span class="line">        application.run(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>FluentBuilder API</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">SpringApplicationBuilder</span>()</span><br><span class="line">    .sources(Parent.class)</span><br><span class="line">    .child(Application.class)</span><br><span class="line">    .bannerMode(Banner.Mode.OFF)</span><br><span class="line">    .run(args);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-2Profiles"><a href="#4-2Profiles" class="headerlink" title="4.2	Profiles"></a>4.2	Profiles</h3><ul>
<li><p><strong>环境隔离</strong>：快速切换开发、测试、生产环境</p>
<ul>
<li><strong>标识环境</strong>：指定哪些组件、配置在哪个环境生效</li>
<li><strong>切换环境</strong>：这个环境对应的所有组件和配置就应该生效</li>
</ul>
</li>
<li><p><strong>配置流程</strong></p>
<ul>
<li><p><strong>指定环境</strong></p>
<ul>
<li><strong>Spring</strong> <strong>Profiles</strong> 提供一种隔离配置的方式，使其仅在特定环境生效</li>
<li>任何 @Component，@Configuration 或 @ConfigurationProperties 可以使用 @Profile 标记，来指定何时被加载</li>
</ul>
</li>
<li><p><strong>环境激活</strong></p>
<ul>
<li><p>配置文件激活</p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.profiles.active</span>=<span class="string">production,hsqldb</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>命令行激活</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--spring.profiles.active=dev,hsqldb</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置默认环境</p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.profiles.default</span>=<span class="string">test</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>环境包含</strong></p>
<ul>
<li><p>添加生效的环境</p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.profiles.include[0]</span>=<span class="string">common</span></span><br><span class="line"><span class="attr">spring.profiles.include[1]</span>=<span class="string">local</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>生效的环境 &#x3D; 激活的环境&#x2F;默认环境  + 包含的环境</p>
</li>
</ul>
</li>
<li><p><strong>Profile 分组</strong></p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.profiles.group.prod[0]</span>=<span class="string">db</span></span><br><span class="line"><span class="attr">spring.profiles.group.prod[1]</span>=<span class="string">mq</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>配置文件</strong></p>
<ul>
<li><strong>application-{profile}.properties</strong> 可以作为指定环境的配置文件</li>
<li>最终生效的所有配置是<br>  ○ <strong>application.properties</strong>：主配置文件，任意时候都生效，优先级较低<br>○ <strong>application-{profile}.properties</strong>：指定环境配置文件，激活指定环境生效，优先级较高</li>
</ul>
</li>
</ul>
<h3 id="4-3外部化配置"><a href="#4-3外部化配置" class="headerlink" title="4.3	外部化配置"></a>4.3	外部化配置</h3><ul>
<li><p><strong>外部配置</strong>：给 <strong>jar</strong> 应用所在的文件夹放一个 <strong>application.properties</strong> 最新配置文件，重启项目就能自动应用最新配置</p>
</li>
<li><p><strong>配置优先级（由低到高）</strong></p>
<ul>
<li><strong>默认属性</strong>（通过 <strong>SpringApplication.setDefaultProperties</strong> 指定）</li>
<li><strong>@PropertySource</strong> 指定加载的配置（需要写在 <strong>@Configuration</strong> 类上才可生效）</li>
<li>配置文件（ <strong>application.properties&#x2F;yml</strong>等）</li>
<li><strong>RandomValuePropertySource</strong> 支持的 <strong>random.</strong>* 配置</li>
<li><strong>OS</strong> 环境变量</li>
<li><strong>Java</strong> 系统属性（**System.getProperties()**）</li>
<li><strong>JNDI</strong> 属性（来自 <strong>java:comp&#x2F;env</strong>）</li>
<li><strong>ServletContext</strong> 初始化参数</li>
<li><strong>ServletConfig</strong> 初始化参数</li>
<li><strong>SPRING_APPLICATION_JSON</strong> 属性（内置在环境变量或系统属性中的 <strong>JSON</strong>）</li>
<li>命令行参数</li>
<li>测试属性(<strong>@SpringBootTest</strong> 进行测试时指定的属性)</li>
<li>测试类 <strong>@TestPropertySource</strong> 注解</li>
<li><strong>Devtools</strong> 设置的全局属性(<strong>$HOME&#x2F;.config&#x2F;spring-boot</strong>)</li>
</ul>
</li>
<li><p><strong>配置文件优先级（由低到高）</strong></p>
<ul>
<li><strong>jar</strong> 包内的 <strong>application.properties&#x2F;yml</strong></li>
<li><strong>jar</strong> 包内的 <strong>application-{profile}.properties&#x2F;yml</strong></li>
<li><strong>jar</strong> 包外的 <strong>application.properties&#x2F;yml</strong></li>
<li><strong>jar</strong> 包外的 <strong>application-{profile}.properties&#x2F;yml</strong></li>
</ul>
</li>
<li><p><strong>外部配置优先级（由低到高）</strong></p>
<ul>
<li>类根路径</li>
<li>类下 <strong>&#x2F;config</strong> 包</li>
<li>当前路径</li>
<li>当前下 <strong>&#x2F;config</strong> 子目录</li>
<li><strong>&#x2F;config</strong> 目录的直接子目录</li>
</ul>
</li>
<li><p><strong>导入配置</strong></p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.config.import</span>=<span class="string">my.properties</span></span><br><span class="line"><span class="attr">my.property</span>=<span class="string">value</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>属性占位符</strong></p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">app.name</span>=<span class="string">MyApp</span></span><br><span class="line"><span class="attr">app.description</span>=<span class="string">$&#123;app.name&#125; is a Spring Boot application written by $&#123;username:Unknown&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-4单元测试JUnit5"><a href="#4-4单元测试JUnit5" class="headerlink" title="4.4	单元测试JUnit5"></a>4.4	单元测试JUnit5</h3><ul>
<li><p><strong>整合单元测试</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>测试注解</strong></p>
<ul>
<li><strong>@Test</strong>：表示方法是测试方法，不能声明任何属性，拓展的测试将会由 <strong>Jupiter</strong> 提供额外测试</li>
<li><strong>@ParameterizedTest</strong>：表示方法是参数化测试</li>
<li><strong>@RepeatedTest</strong>：表示方法可重复执行</li>
<li><strong>@DisplayName</strong>：为测试类或者测试方法设置展示名称</li>
<li><strong>@BeforeEach</strong>：表示在每个单元测试之前执行</li>
<li><strong>@AfterEach</strong>：表示在每个单元测试之后执行</li>
<li><strong>@BeforeAll</strong>：表示在所有单元测试之前执行</li>
<li><strong>@AfterAll</strong>：表示在所有单元测试之后执行</li>
<li><strong>@Tag</strong>：表示单元测试类别</li>
<li><strong>@Disabled</strong>：表示测试类或测试方法不执行</li>
<li><strong>@Timeout</strong>：表示测试方法运行如果超过了指定时间将会返回错误</li>
<li><strong>@ExtendWith</strong>：为测试类或测试方法提供扩展类引用</li>
</ul>
</li>
<li><p><strong>测试断言</strong></p>
<ul>
<li><strong>assertEquals</strong>：判断两个对象或两个原始类型是否相等</li>
<li><strong>assertNotEquals</strong>：判断两个对象或两个原始类型是否不相等</li>
<li><strong>assertSame</strong>：判断两个对象引用是否指向同一个对象</li>
<li><strong>assertNotSame</strong>：判断两个对象引用是否指向不同的对象</li>
<li><strong>assertTrue</strong>：判断给定的布尔值是否为 true</li>
<li><strong>assertFalse</strong>：判断给定的布尔值是否为 false</li>
<li><strong>assertNull</strong>：判断给定的对象引用是否为 null</li>
<li><strong>assertNotNull</strong>：判断给定的对象引用是否不为 null</li>
<li><strong>assertArrayEquals</strong>：数组断言</li>
<li><strong>assertAll</strong>：组合断言</li>
<li><strong>assertThrows</strong>：异常断言</li>
<li><strong>assertTimeout</strong>：超时断言</li>
<li><strong>fail</strong>：快速失败</li>
</ul>
</li>
<li><p><strong>嵌套测试</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestingAStackDemo</span> &#123;</span><br><span class="line">    <span class="meta">@Nested</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">WhenNew</span> &#123;</span><br><span class="line">        <span class="meta">@Nested</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">AfterPushing</span> &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>参数化测试</strong></p>
<ul>
<li><p><strong>@ValueSource</strong>：为参数化测试指定入参来源</p>
</li>
<li><p><strong>@NullSource</strong>：表示为参数化测试提供一个 <strong>null</strong> 的入参</p>
</li>
<li><p><strong>@EnumSource</strong>：表示为参数化测试提供一个枚举入参</p>
</li>
<li><p><strong>@CsvFileSource</strong>：表示读取指定 <strong>CSV</strong> 文件内容作为参数化测试入参</p>
</li>
<li><p><strong>@MethodSource</strong>：表示读取指定方法的返回值作为参数化测试入参</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line"><span class="meta">@ValueSource(strings = &#123;&quot;one&quot;, &quot;two&quot;, &quot;three&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parameterizedTest1</span><span class="params">(String string)</span> &#123;</span><br><span class="line">    System.out.println(string);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line"><span class="meta">@MethodSource(&quot;method&quot;)</span>    <span class="comment">//指定方法名</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWithExplicitLocalMethodSource</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> Stream&lt;String&gt; <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Stream.of(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第五节SpringBoot核心原理"><a href="#第五节SpringBoot核心原理" class="headerlink" title="第五节	SpringBoot核心原理"></a>第五节	SpringBoot核心原理</h2><h3 id="5-1事件和监听器"><a href="#5-1事件和监听器" class="headerlink" title="5.1	事件和监听器"></a>5.1	事件和监听器</h3><ul>
<li><p><strong>监听器 SpringApplicationRunListener</strong></p>
<ul>
<li><p>编写 <strong>SpringApplicationRunListener</strong> 实现类</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomizedSpringApplicationRunListener</span> <span class="keyword">implements</span> <span class="title class_">SpringApplicationRunListener</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 <strong>META-INF&#x2F;spring.factories</strong> 中配置 <strong>org.springframework.boot.SpringApplicationRunListener</strong> 为自己的 <strong>Listener</strong>，还可以指定一个有参构造器，接受两个参数 <strong>(SpringApplication application, String[] args)</strong></p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">org.springframework.boot.SpringApplicationRunListener</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.example.listener.CustomizedSpringApplicationRunListener</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>springboot</strong> 在 <strong>spring-boot.jar</strong> 中配置了默认的 <strong>Listener</strong></p>
</li>
</ul>
</li>
<li><p><strong>生命周期全流程</strong></p>
<ul>
<li><strong>引导</strong><ul>
<li><strong>start</strong>：启动</li>
<li><strong>environmentPrepared</strong>：环境准备完成</li>
</ul>
</li>
<li><strong>启动</strong><ul>
<li><strong>contextPrepared</strong>：创建 <strong>ioc</strong>，准备完成，主程序未加载</li>
<li><strong>contextLoaded</strong>：加载 <strong>ioc</strong>，并未刷新</li>
<li><strong>started</strong>：刷新 <strong>ioc</strong>，<strong>return</strong> 未调用</li>
<li><strong>ready</strong>：属性 <strong>ioc</strong>，<strong>return</strong> 调用完成</li>
</ul>
</li>
<li><strong>运行</strong><ul>
<li>**context.isReturn()**：运行中</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>回调监听器</strong></p>
<ul>
<li><p><strong>BootstrapRegistryInitializer</strong>：感知引导初始化</p>
<ul>
<li><p>创建引导上下文 <strong>bootstrapContext</strong> 的时候触发</p>
</li>
<li><p>场景：进行密钥校对授权</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">application.addBootstrapRegistryInitializer();</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>ApplicationContextInitializer</strong>：感知 <strong>ioc</strong> 容器初始化</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">application.addInitializers();</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>ApplicationListener</strong>：感知全阶段，基于事件机制，感知事件</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SpringApplication.addListeners()</span><br><span class="line">SpringApplicationBuilder.listeners()</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>SpringApplicationRunListener</strong>：感知全阶段生命周期，各种阶段都能自定义操作</p>
</li>
<li><p><strong>ApplicationRunner</strong>：感知应用就绪 <strong>Ready</strong> 阶段</p>
</li>
<li><p><strong>CommandLineRunner</strong>：感知应用就绪 <strong>Ready</strong> 阶段</p>
</li>
</ul>
</li>
<li><p><strong>完整触发流程</strong></p>
<ul>
<li><p><strong>ApplicationStartingEvent</strong>：应用启动但未做任何事情, 除过注册 <strong>listeners</strong> 和 <strong>initializers</strong></p>
</li>
<li><p><strong>ApplicationEnvironmentPreparedEvent</strong>：环境准备完毕，但 <strong>context</strong> 未创建</p>
</li>
<li><p><strong>ApplicationContextInitializedEvent</strong>：<strong>ApplicationContext</strong> 准备完毕，<strong>ApplicationContextInitializers</strong> 调用，但是任何 <strong>bean</strong> 未加载</p>
</li>
<li><p><strong>ApplicationPreparedEvent</strong>： 容器刷新之前，<strong>bean</strong> 定义信息加载</p>
</li>
<li><p><strong>ApplicationStartedEvent</strong>： 容器刷新完成， <strong>runner</strong> 未调用</p>
</li>
<li><p><strong>AvailabilityChangeEvent</strong>： <strong>LivenessState.CORRECT</strong> 应用存活，存活探针</p>
</li>
<li><p><strong>ApplicationReadyEvent</strong>: 任何 <strong>runner</strong> 被调用</p>
</li>
<li><p><strong>AvailabilityChangeEvent</strong>：<strong>ReadinessState.ACCEPTING_TRAFFIC</strong> 就绪探针，可以接受请求</p>
</li>
<li><p><strong>ApplicationFailedEvent</strong> ：启动出错</p>
  <img src="C:\Users\86172\Pictures\Markdown\SpringBoot\流程.png" style="zoom:67%;" /></li>
</ul>
</li>
<li><p><strong>SpringBoot驱动开发</strong></p>
<ul>
<li><p>事件发布</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EventPublisher</span> <span class="keyword">implements</span> <span class="title class_">ApplicationEventPublisherAware</span> &#123;</span><br><span class="line">    ApplicationEventPublisher applicationEventPublisher;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendEvent</span><span class="params">(ApplicationEvent event)</span> &#123;</span><br><span class="line">        applicationEventPublisher.publishEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationEventPublisher</span><span class="params">(ApplicationEventPublisher applicationEventPublisher)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.applicationEventPublisher = applicationEventPublisher;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>事件监听</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CouponService</span> &#123;</span><br><span class="line">    <span class="meta">@Order(1)</span></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onEvent</span><span class="params">(LoginSuccessEvent loginSuccessEvent)</span>&#123;</span><br><span class="line">        <span class="type">UserEntity</span> <span class="variable">source</span> <span class="operator">=</span> (UserEntity) loginSuccessEvent.getSource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="5-2自动配置原理"><a href="#5-2自动配置原理" class="headerlink" title="5.2	自动配置原理"></a>5.2	自动配置原理</h3><ul>
<li><strong>自动配置流程</strong><ul>
<li>导入 <strong>starter</strong></li>
<li>依赖导入 <strong>autoconfigure</strong></li>
<li>寻找类路径下 <strong>META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports</strong> 文件</li>
<li>启动并加载所有自动配置类 <strong>xxxAutoConfiguration</strong><ul>
<li>给容器中配置功能组件</li>
<li>组件参数绑定到属性类中，<strong>xxxProperties</strong></li>
<li>属性类和配置文件前缀项绑定</li>
<li><strong>@Contional</strong> 派生的条件注解进行判断是否组件生效</li>
</ul>
</li>
<li>效果<ul>
<li>修改配置文件，修改底层参数</li>
<li>所有场景自动配置好直接使用</li>
<li>可以注入 <strong>SpringBoot</strong> 配置好的组件随时使用</li>
</ul>
</li>
</ul>
</li>
<li><strong>SPI机制</strong><ul>
<li><strong>SPI</strong> 全称 <strong>Service</strong> <strong>Provider</strong> <strong>Interface</strong>，即服务提供者接口，是一种软件设计模式，用于在应用程序中动态地发现和加载组件，<strong>SPI</strong> 的思想是，定义一个接口或抽象类，然后通过在 <strong>classpath</strong> 中定义实现该接口的类来实现对组件的动态发现和加载</li>
<li><strong>SPI</strong> 的主要目的是解决在应用程序中使用可插拔组件的问题，例如一个应用程序可能需要使用不同的日志框架或数据库连接池，但是这些组件的选择可能取决于运行时的条件，通过使用 <strong>SPI</strong>，应用程序可以在运行时发现并加载适当的组件，而无需在代码中硬编码这些组件的实现类</li>
<li>在 <strong>Java</strong> 中，<strong>SPI</strong> 的实现方式是通过在 <strong>META-INF&#x2F;services</strong> 目录下创建一个以服务接口全限定名为名字的文件，文件中包含实现该服务接口的类的全限定名，当应用程序启动时，<strong>Java</strong> 的 <strong>SPI</strong> 机制会自动扫描 <strong>classpath</strong> 中的这些文件，并根据文件中指定的类名来加载实现类</li>
<li>通过使用 <strong>SPI</strong>，应用程序可以实现更灵活、可扩展的架构，同时也可以避免硬编码依赖关系和增加代码的可维护性</li>
<li>在 <strong>SpringBoot</strong> 中，服务接口文件在 <strong>META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports</strong> 下</li>
</ul>
</li>
<li><strong>@SpringBootApplication注解</strong><ul>
<li><strong>@SpringBootConfiguration</strong>：即 <strong>@Configuration</strong> ，容器中的组件配置类，spring ioc 启动就会加载创建这个类对象</li>
<li><strong>@EnableAutoConfiguration</strong>：开启自动配置</li>
<li><strong>@AutoConfigurationPackage</strong>：扫描主程序包，加载自己的组件</li>
<li>**@Import(AutoConfigurationImportSelector.class)**：加载所有自动配置类，加载 starter 导入的组件</li>
<li><strong>@ComponentScan</strong>：组件扫描，并排除一些组件</li>
</ul>
</li>
</ul>
<h3 id="5-3自定义starter"><a href="#5-3自定义starter" class="headerlink" title="5.3	自定义starter"></a>5.3	自定义starter</h3><ul>
<li><p><strong>自定义starter</strong></p>
<ul>
<li><p>业务代码</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;robot&quot;)</span>  <span class="comment">//此属性类和配置文件指定前缀绑定</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RobotProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>导入依赖</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>基本抽取</p>
<ul>
<li>创建 <strong>starter</strong> 项目，把公共代码需要的所有依赖导入</li>
<li>把公共代码复制进来</li>
<li>自己写一个 <strong>RobotAutoConfiguration</strong>，给容器中导入这个场景需要的所有组件</li>
</ul>
</li>
<li><p>使用 <strong>@EnableXXX</strong> 机制</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import(RobotAutoConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableRobot &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>完全自动配置</p>
<ul>
<li>在 <strong>resource</strong> 文件夹下的 <strong>META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports</strong> 文件中编写好我们自动配置类的全类名</li>
<li>项目启动，自动加载我们的自动配置类</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="5-4SpringBoot3新特性"><a href="#5-4SpringBoot3新特性" class="headerlink" title="5.4	SpringBoot3新特性"></a>5.4	SpringBoot3新特性</h3><ul>
<li><p>自动配置包位置变化</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>jakata api</strong> 迁移：<strong>druid</strong> 有问题</p>
</li>
<li><p>函数式 <strong>Web</strong>、<strong>ProblemDetails</strong></p>
</li>
<li><p><strong>GraalVM</strong> 与 <strong>AOT</strong></p>
</li>
<li><p>响应式编程全套</p>
</li>
</ul>
<h2 id="第六节NoSQL"><a href="#第六节NoSQL" class="headerlink" title="第六节	NoSQL"></a>第六节	NoSQL</h2><h3 id="6-1Redis整合"><a href="#6-1Redis整合" class="headerlink" title="6.1	Redis整合"></a>6.1	Redis整合</h3><ul>
<li><p><strong>整合场景</strong></p>
<ul>
<li><p>依赖导入</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置文件</p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.data.redis.host</span>=<span class="string">192.168.200.100</span></span><br><span class="line"><span class="attr">spring.data.redis.password</span>=<span class="string">Lfy123!@!</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试代码</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">redisTest</span><span class="params">()</span>&#123;</span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;1234&quot;</span>);</span><br><span class="line">    Assertions.assertEquals(<span class="string">&quot;1234&quot;</span>,redisTemplate.opsForValue().get(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>自动配置原理</strong></p>
<ul>
<li><p><strong>META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports</strong> 文件中导入了 <strong>RedisAutoConfiguration</strong>、<strong>RedisReactiveAutoConfiguration</strong> 和 <strong>RedisRepositoriesAutoConfiguration</strong>，所有属性绑定在 <strong>RedisProperties</strong> </p>
</li>
<li><p><strong>RedisReactiveAutoConfiguration</strong> 属于响应式编程，<strong>RedisRepositoriesAutoConfiguration</strong> 属于 <strong>JPA</strong> 操作</p>
</li>
<li><p><strong>RedisAutoConfiguration</strong> 配置了以下组件</p>
<ul>
<li><p><strong>LettuceConnectionConfiguration</strong>：给容器中注入了连接工厂 <strong>LettuceConnectionFactory</strong>，和操作 <strong>redis</strong> 的客户端 <strong>DefaultClientResources</strong></p>
<ul>
<li><p>**RedisTemplate&lt;Object, Object&gt;**： 可给 <strong>redis</strong> 中存储任意对象，会使用 <strong>jdk</strong> 默认序列化方式</p>
</li>
<li><p><strong>StringRedisTemplate</strong>： 给 <strong>redis</strong> 中存储字符串，如果要存对象，需要开发人员自己进行序列化，<strong>key-value</strong> 都是字符串进行操作</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>定制化</strong></p>
<ul>
<li><p>序列化</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppRedisConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        template.setDefaultSerializer(<span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>());</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>客户端</p>
<ul>
<li><strong>Lettuce</strong>： 默认</li>
<li><strong>Jedis</strong>：可以使用以下切换</li>
</ul>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;io.lettuce&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lettuce-core&lt;/artifactId&gt;</span><br><span class="line">        &lt;/exclusion&gt;</span><br><span class="line">    &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--        切换 jedis 作为操作redis的底层客户端--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置文件</p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.data.redis.host</span>=<span class="string">8.130.74.183</span></span><br><span class="line"><span class="attr">spring.data.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="comment">#spring.data.redis.client-type=lettuce</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#设置lettuce的底层参数</span></span><br><span class="line"><span class="comment">#spring.data.redis.lettuce.pool.enabled=true</span></span><br><span class="line"><span class="comment">#spring.data.redis.lettuce.pool.max-active=8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.data.redis.client-type</span>=<span class="string">jedis</span></span><br><span class="line"><span class="attr">spring.data.redis.jedis.pool.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.data.redis.jedis.pool.max-active</span>=<span class="string">8</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第七节接口文档"><a href="#第七节接口文档" class="headerlink" title="第七节	接口文档"></a>第七节	接口文档</h2><h3 id="7-1Swagger"><a href="#7-1Swagger" class="headerlink" title="7.1	Swagger"></a>7.1	Swagger</h3><ul>
<li><p><strong>整合场景</strong></p>
<ul>
<li><p>导入依赖</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springdoc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springdoc-openapi-starter-webmvc-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置文件</p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /api-docs endpoint custom path 默认 /v3/api-docs</span></span><br><span class="line"><span class="attr">springdoc.api-docs.path</span>=<span class="string">/api-docs</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># swagger 相关配置在  springdoc.swagger-ui</span></span><br><span class="line"><span class="comment"># swagger-ui custom path</span></span><br><span class="line"><span class="attr">springdoc.swagger-ui.path</span>=<span class="string">/swagger-ui.html</span></span><br><span class="line"></span><br><span class="line"><span class="attr">springdoc.show-actuator</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>接口文档使用</strong></p>
<ul>
<li><p>常用注解</p>
<table>
<thead>
<tr>
<th>注解</th>
<th>标注位置</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><strong>@Tag</strong></td>
<td>controller 类</td>
<td>标识 controller 作用</td>
</tr>
<tr>
<td><strong>@Parameter</strong></td>
<td>参数</td>
<td>标识参数作用</td>
</tr>
<tr>
<td><strong>@Parameters</strong></td>
<td>参数</td>
<td>参数多重说明</td>
</tr>
<tr>
<td><strong>@Schema</strong></td>
<td>model 层的 JavaBean</td>
<td>描述模型作用及每个属性</td>
</tr>
<tr>
<td><strong>@Operation</strong></td>
<td>方法</td>
<td>描述方法作用</td>
</tr>
<tr>
<td><strong>@ApiResponse</strong></td>
<td>方法</td>
<td>描述响应状态码等</td>
</tr>
</tbody></table>
</li>
<li><p><strong>Docket</strong> 配置</p>
<ul>
<li><p>代码配置</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> GroupedOpenApi <span class="title function_">publicApi</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> GroupedOpenApi.builder()</span><br><span class="line">          .group(<span class="string">&quot;springshop-public&quot;</span>)</span><br><span class="line">          .pathsToMatch(<span class="string">&quot;/public/**&quot;</span>)</span><br><span class="line">          .build();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> GroupedOpenApi <span class="title function_">adminApi</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> GroupedOpenApi.builder()</span><br><span class="line">          .group(<span class="string">&quot;springshop-admin&quot;</span>)</span><br><span class="line">          .pathsToMatch(<span class="string">&quot;/admin/**&quot;</span>)</span><br><span class="line">          .addMethodFilter(method -&gt; method.isAnnotationPresent(Admin.class))</span><br><span class="line">          .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置文件</p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">springdoc.packagesToScan</span>=<span class="string">package1, package2</span></span><br><span class="line"><span class="attr">springdoc.pathsToMatch</span>=<span class="string">/v1, /api/balance/**</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>OpenAPI</strong> 配置</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> OpenAPI <span class="title function_">springShopOpenAPI</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OpenAPI</span>()</span><br><span class="line">          .info(<span class="keyword">new</span> <span class="title class_">Info</span>().title(<span class="string">&quot;SpringShop API&quot;</span>)</span><br><span class="line">          .description(<span class="string">&quot;Spring shop sample application&quot;</span>)</span><br><span class="line">          .version(<span class="string">&quot;v0.0.1&quot;</span>)</span><br><span class="line">          .license(<span class="keyword">new</span> <span class="title class_">License</span>().name(<span class="string">&quot;Apache 2.0&quot;</span>).url(<span class="string">&quot;http://springdoc.org&quot;</span>)))</span><br><span class="line">          .externalDocs(<span class="keyword">new</span> <span class="title class_">ExternalDocumentation</span>()</span><br><span class="line">          .description(<span class="string">&quot;SpringShop Wiki Documentation&quot;</span>)</span><br><span class="line">          .url(<span class="string">&quot;https://springshop.wiki.github.org/docs&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>Springfox 迁移</strong></p>
<ul>
<li><p>注解变化</p>
<table>
<thead>
<tr>
<th>原注解</th>
<th>现注解</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><strong>@Api</strong></td>
<td><strong>@Tag</strong></td>
<td>描述Controller</td>
</tr>
<tr>
<td><strong>@ApiIgnore</strong></td>
<td><strong>@Parameter(hidden &#x3D; true)  @Operation(hidden &#x3D; true) @Hidden</strong></td>
<td>描述忽略操作</td>
</tr>
<tr>
<td><strong>@ApiImplicitParam</strong></td>
<td><strong>@Parameter</strong></td>
<td>描述参数</td>
</tr>
<tr>
<td><strong>@ApiImplicitParams</strong></td>
<td><strong>@Parameters</strong></td>
<td>描述参数</td>
</tr>
<tr>
<td><strong>@ApiModel</strong></td>
<td><strong>@Schema</strong></td>
<td>描述对象</td>
</tr>
<tr>
<td><strong>@ApiModelProperty(hidden &#x3D; true)</strong></td>
<td><strong>@Schema(accessMode &#x3D; READ_ONLY)</strong></td>
<td>描述对象属性</td>
</tr>
<tr>
<td><strong>@ApiModelProperty</strong></td>
<td><strong>@Schema</strong></td>
<td>描述对象属性</td>
</tr>
<tr>
<td><strong>@ApiOperation(value &#x3D; “foo”, notes &#x3D; “bar”)</strong></td>
<td><strong>@Operation(summary &#x3D; “foo”, description &#x3D; “bar”)</strong></td>
<td>描述方法</td>
</tr>
<tr>
<td><strong>@ApiParam</strong></td>
<td><strong>@Parameter</strong></td>
<td>描述参数</td>
</tr>
<tr>
<td><strong>@ApiResponse(code &#x3D; 404, message &#x3D; “foo”)</strong></td>
<td><strong>@ApiResponse(responseCode &#x3D; “404”, description &#x3D; “foo”)</strong></td>
<td>描述响应</td>
</tr>
</tbody></table>
</li>
<li><p><strong>Docket</strong> 配置</p>
<ul>
<li><p>旧写法</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Docket <span class="title function_">publicApi</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">          .select()</span><br><span class="line">          .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;org.github.springshop.web.public&quot;</span>))</span><br><span class="line">          .paths(PathSelectors.regex(<span class="string">&quot;/public.*&quot;</span>))</span><br><span class="line">          .build()</span><br><span class="line">          .groupName(<span class="string">&quot;springshop-public&quot;</span>)</span><br><span class="line">          .apiInfo(apiInfo());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Docket <span class="title function_">adminApi</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">          .select()</span><br><span class="line">          .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;org.github.springshop.web.admin&quot;</span>))</span><br><span class="line">          .paths(PathSelectors.regex(<span class="string">&quot;/admin.*&quot;</span>))</span><br><span class="line">          .apis(RequestHandlerSelectors.withMethodAnnotation(Admin.class))</span><br><span class="line">          .build()</span><br><span class="line">          .groupName(<span class="string">&quot;springshop-admin&quot;</span>)</span><br><span class="line">          .apiInfo(apiInfo());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>新写法</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> GroupedOpenApi <span class="title function_">publicApi</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> GroupedOpenApi.builder()</span><br><span class="line">          .group(<span class="string">&quot;springshop-public&quot;</span>)</span><br><span class="line">          .pathsToMatch(<span class="string">&quot;/public/**&quot;</span>)</span><br><span class="line">          .build();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> GroupedOpenApi <span class="title function_">adminApi</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> GroupedOpenApi.builder()</span><br><span class="line">          .group(<span class="string">&quot;springshop-admin&quot;</span>)</span><br><span class="line">          .pathsToMatch(<span class="string">&quot;/admin/**&quot;</span>)</span><br><span class="line">          .addOpenApiMethodFilter(method -&gt; method.isAnnotationPresent(Admin.class))</span><br><span class="line">          .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加 <strong>OpenAPI</strong> 组件</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> OpenAPI <span class="title function_">springShopOpenAPI</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OpenAPI</span>()</span><br><span class="line">          .info(<span class="keyword">new</span> <span class="title class_">Info</span>().title(<span class="string">&quot;SpringShop API&quot;</span>)</span><br><span class="line">          .description(<span class="string">&quot;Spring shop sample application&quot;</span>)</span><br><span class="line">          .version(<span class="string">&quot;v0.0.1&quot;</span>)</span><br><span class="line">          .license(<span class="keyword">new</span> <span class="title class_">License</span>().name(<span class="string">&quot;Apache 2.0&quot;</span>).url(<span class="string">&quot;http://springdoc.org&quot;</span>)))</span><br><span class="line">          .externalDocs(<span class="keyword">new</span> <span class="title class_">ExternalDocumentation</span>()</span><br><span class="line">          .description(<span class="string">&quot;SpringShop Wiki Documentation&quot;</span>)</span><br><span class="line">          .url(<span class="string">&quot;https://springshop.wiki.github.org/docs&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="第八节远程调用"><a href="#第八节远程调用" class="headerlink" title="第八节	远程调用"></a>第八节	远程调用</h2><h3 id="8-1远程调用"><a href="#8-1远程调用" class="headerlink" title="8.1	远程调用"></a>8.1	远程调用</h3><ul>
<li><p><strong>服务调用</strong></p>
<ul>
<li>本地过程调用：函数调用，不同方法都在同一个 <strong>JVM</strong> 运行</li>
<li>远程过程调用：服务提供者，服务消费者，通过连接对方服务器进行请求响应交互，来实现调用效果</li>
</ul>
</li>
<li><p><strong>API&#x2F;SDK的区别</strong></p>
<ul>
<li><strong>api</strong>：接口，远程提供功能</li>
</ul>
</li>
</ul>
<ul>
<li><strong>sdk</strong>：软件工具包，导入 <strong>jar</strong> 包，直接调用功能即可</li>
</ul>
<h3 id="8-2WebClient"><a href="#8-2WebClient" class="headerlink" title="8.2	WebClient"></a>8.2	WebClient</h3><ul>
<li><p><strong>创建和配置</strong></p>
<ul>
<li><p>创建客户端</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">WebClient.create()</span><br><span class="line">WebClient.create(String baseUrl)</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置参数</p>
<ul>
<li><strong>uriBuilderFactory</strong>：自定义 <strong>UriBuilderFactory</strong> ，定义 <strong>baseurl</strong></li>
<li><strong>defaultUriVariables</strong>：默认 <strong>uri</strong> 变量</li>
<li><strong>defaultHeader</strong>：每个请求默认头</li>
<li><strong>defaultCookie</strong>：每个请求默认 <strong>cookie</strong></li>
<li><strong>defaultRequest</strong>：<strong>Consumer</strong> 自定义每个请求</li>
<li><strong>filter</strong>：过滤 <strong>client</strong> 发送的每个请求</li>
<li><strong>exchangeStrategies</strong>：<strong>HTTP</strong> 消息 <strong>reader</strong>&#x2F;<strong>writer</strong> 自定义</li>
<li><strong>clientConnector</strong>：<strong>HTTP</strong> <strong>client</strong> 库设置</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>获取响应</strong></p>
<ul>
<li><p>获取完整信息</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">WebClient</span> <span class="variable">client</span> <span class="operator">=</span> WebClient.create(<span class="string">&quot;https://example.org&quot;</span>);</span><br><span class="line">Mono&lt;ResponseEntity&lt;Person&gt;&gt; result = client.get()</span><br><span class="line">        .uri(<span class="string">&quot;/persons/&#123;id&#125;&quot;</span>, id).accept(MediaType.APPLICATION_JSON)</span><br><span class="line">        .retrieve()</span><br><span class="line">        .toEntity(Person.class);</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取 <strong>body</strong> 内容</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">WebClient</span> <span class="variable">client</span> <span class="operator">=</span> WebClient.create(<span class="string">&quot;https://example.org&quot;</span>);</span><br><span class="line">Mono&lt;Person&gt; result = client.get()</span><br><span class="line">        .uri(<span class="string">&quot;/persons/&#123;id&#125;&quot;</span>, id).accept(MediaType.APPLICATION_JSON)</span><br><span class="line">        .retrieve()</span><br><span class="line">        .bodyToMono(Person.class);</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取流数据</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Flux&lt;Quote&gt; result = client.get()</span><br><span class="line">        .uri(<span class="string">&quot;/quotes&quot;</span>).accept(MediaType.TEXT_EVENT_STREAM)</span><br><span class="line">        .retrieve()</span><br><span class="line">        .bodyToFlux(Quote.class);</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义错误处理</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Mono&lt;Person&gt; result = client.get()</span><br><span class="line">        .uri(<span class="string">&quot;/persons/&#123;id&#125;&quot;</span>, id).accept(MediaType.APPLICATION_JSON)</span><br><span class="line">        .retrieve()</span><br><span class="line">        .onStatus(HttpStatus::is4xxClientError, response -&gt; ...)</span><br><span class="line">        .onStatus(HttpStatus::is5xxServerError, response -&gt; ...)</span><br><span class="line">        .bodyToMono(Person.class);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>定义请求体</strong></p>
<ul>
<li><p>单个数据</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Mono&lt;Person&gt; personMono = ... ;</span><br><span class="line">Mono&lt;Void&gt; result = client.post()</span><br><span class="line">        .uri(<span class="string">&quot;/persons/&#123;id&#125;&quot;</span>, id)</span><br><span class="line">        .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">        .body(personMono, Person.class)</span><br><span class="line">        .retrieve()</span><br><span class="line">        .bodyToMono(Void.class);</span><br></pre></td></tr></table></figure>
</li>
<li><p>多个数据</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Flux&lt;Person&gt; personFlux = ... ;</span><br><span class="line">Mono&lt;Void&gt; result = client.post()</span><br><span class="line">        .uri(<span class="string">&quot;/persons/&#123;id&#125;&quot;</span>, id)</span><br><span class="line">        .contentType(MediaType.APPLICATION_STREAM_JSON)</span><br><span class="line">        .body(personFlux, Person.class)</span><br><span class="line">        .retrieve()</span><br><span class="line">        .bodyToMono(Void.class);</span><br></pre></td></tr></table></figure>
</li>
<li><p>普通对象</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> ... ;</span><br><span class="line">Mono&lt;Void&gt; result = client.post()</span><br><span class="line">        .uri(<span class="string">&quot;/persons/&#123;id&#125;&quot;</span>, id)</span><br><span class="line">        .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">        .bodyValue(person)</span><br><span class="line">        .retrieve()</span><br><span class="line">        .bodyToMono(Void.class);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="8-3HTTP-Interface"><a href="#8-3HTTP-Interface" class="headerlink" title="8.3	HTTP Interface"></a>8.3	HTTP Interface</h3><ul>
<li><p><strong>导入依赖</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>定义接口</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BingService</span> &#123;</span><br><span class="line">    <span class="meta">@GetExchange(url = &quot;/search&quot;)</span></span><br><span class="line">    String <span class="title function_">search</span><span class="params">(<span class="meta">@RequestParam(&quot;q&quot;)</span> String keyword)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建代理测试</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Boot05TaskApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">WebClient</span> <span class="variable">client</span> <span class="operator">=</span> WebClient.builder()</span><br><span class="line">                .baseUrl(<span class="string">&quot;https://cn.bing.com&quot;</span>)</span><br><span class="line">                .codecs(clientCodecConfigurer -&gt; &#123;</span><br><span class="line">                    clientCodecConfigurer</span><br><span class="line">                            .defaultCodecs()</span><br><span class="line">                            .maxInMemorySize(<span class="number">256</span>*<span class="number">1024</span>*<span class="number">1024</span>);</span><br><span class="line">                &#125;)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="type">HttpServiceProxyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> HttpServiceProxyFactory</span><br><span class="line">                .builder(WebClientAdapter.forClient(client)).build();</span><br><span class="line">        <span class="type">BingService</span> <span class="variable">bingService</span> <span class="operator">=</span> factory.createClient(BingService.class);</span><br><span class="line">        Mono&lt;String&gt; search = bingService.search(<span class="string">&quot;尚硅谷&quot;</span>);</span><br><span class="line">        search.subscribe(str -&gt; System.out.println(str));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第九节消息服务"><a href="#第九节消息服务" class="headerlink" title="第九节	消息服务"></a>第九节	消息服务</h2><h3 id="9-1消息队列"><a href="#9-1消息队列" class="headerlink" title="9.1	消息队列"></a>9.1	消息队列</h3><ul>
<li><strong>异步</strong>：系统不需要立即处理请求，可以将请求放入消息队列中，稍后再处理，这有助于提升系统的响应速度</li>
<li><strong>解耦</strong>：将系统的各个组件独立开来，通过消息队列进行通信，一个组件的变更或故障不会直接影响到其他组件</li>
<li><strong>削峰</strong>：在高峰期间，通过消息队列平滑流量，防止系统过载</li>
<li><strong>缓冲</strong>：消息队列可以作为一个缓冲区，处理速度不匹配的组件之间的数据传输问题</li>
</ul>
<h3 id="9-2Kafka"><a href="#9-2Kafka" class="headerlink" title="9.2	Kafka"></a>9.2	Kafka</h3><ul>
<li><p><strong>消息模式</strong></p>
<ul>
<li>点对点模式：消息被发送到一个队列中，并且每条消息只会被一个消费者消费，确保了消息被一个消费者处理后即被删除，适用于需要确保每条消息仅被处理一次的场景</li>
<li>发布订阅模式：消息被发送到一个主题，并且可以被多个消费者订阅，每个订阅该主题的消费者都会接收到消息，适用于广播消息给多个接收者的场景</li>
</ul>
</li>
<li><p><strong>工作原理</strong></p>
<ul>
<li>分区<ul>
<li>分区是 <strong>Kafka</strong> 中的基本存储单位，每个主题可以分为多个分区，每个分区是一个有序的、不可变的消息序列</li>
<li>分区内的消息是有序的，每条消息都有一个唯一的偏移量</li>
<li>多个分区可以分布在不同的服务器上，允许并行处理，提高了系统的吞吐量</li>
<li>通过增加分区数量，可以更好地分配负载，避免单点瓶颈</li>
</ul>
</li>
<li>副本<ul>
<li>副本是指主题分区的冗余副本，用于实现数据的高可用性和容错，每个分区可以有多个副本，其中一个是主副本，其余的是副副本</li>
<li>副本机制确保即使某个节点发生故障，数据依然可用</li>
<li>当主副本不可用时，<strong>Kafka</strong> 会自动从副副本中选举一个新的主副本，保证系统的持续可用性</li>
<li>所有的读写操作首先发生在主副本上，然后副副本从主副本同步数据</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Kafka工作流程</strong></p>
<ul>
<li>消息写入<ul>
<li>生产者将消息发送到指定的主题</li>
<li><strong>Kafka</strong> 根据分区策略将消息写入到相应的分区的主副本</li>
</ul>
</li>
<li>数据同步<ul>
<li>副副本从主副本拉取数据并进行同步。</li>
<li>同步完成后，副副本会向主副本发送确认</li>
</ul>
</li>
<li>消息读取<ul>
<li>消费者从分区的主副本读取消息</li>
<li><strong>Kafka</strong> 确保同一分区内的消息顺序性，但不保证不同分区之间的消息顺序</li>
</ul>
</li>
<li>故障恢复<ul>
<li>当主副本故障时，<strong>Kafka</strong> 会从副副本中选举一个新的主副本，确保系统的高可用性</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>整合场景</strong></p>
<ul>
<li><p>导入依赖</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置文件</p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.kafka.bootstrap-servers</span>=<span class="string">172.20.128.1:9092</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>消息发送</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Boot07KafkaApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    KafkaTemplate kafkaTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="type">StopWatch</span> <span class="variable">watch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StopWatch</span>();</span><br><span class="line">        watch.start();</span><br><span class="line">        CompletableFuture[] futures = <span class="keyword">new</span> <span class="title class_">CompletableFuture</span>[<span class="number">10000</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="type">CompletableFuture</span> <span class="variable">send</span> <span class="operator">=</span> kafkaTemplate.send(<span class="string">&quot;order&quot;</span>, <span class="string">&quot;order.create.&quot;</span>+i, <span class="string">&quot;订单创建了：&quot;</span>+i);</span><br><span class="line">            futures[i]=send;</span><br><span class="line">        &#125;</span><br><span class="line">        CompletableFuture.allOf(futures).join();</span><br><span class="line">        watch.stop();</span><br><span class="line">        System.out.println(<span class="string">&quot;总耗时：&quot;</span>+watch.getTotalTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>消息监听</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderMsgListener</span> &#123;</span><br><span class="line">    <span class="meta">@KafkaListener(topics = &quot;order&quot;,groupId = &quot;order-service&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listen</span><span class="params">(ConsumerRecord record)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收到消息：&quot;</span>+record); <span class="comment">//可以监听到发给kafka的新消息，以前的拿不到</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@KafkaListener(groupId = &quot;order-service-2&quot;,topicPartitions = &#123;</span></span><br><span class="line"><span class="meta">            @TopicPartition(topic = &quot;order&quot;,partitionOffsets = &#123;</span></span><br><span class="line"><span class="meta">                    @PartitionOffset(partition = &quot;0&quot;,initialOffset = &quot;0&quot;)</span></span><br><span class="line"><span class="meta">            &#125;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenAll</span><span class="params">(ConsumerRecord record)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收到partion-0消息：&quot;</span>+record);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>参数配置</strong></p>
<ul>
<li><p>消费者</p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.kafka.consumer.value-deserializer</span>=<span class="string">org.springframework.kafka.support.serializer.JsonDeserializer</span></span><br><span class="line"><span class="attr">spring.kafka.consumer.properties[spring.json.value.default.type]</span>=<span class="string">com.example.Invoice</span></span><br><span class="line"><span class="attr">spring.kafka.consumer.properties[spring.json.trusted.packages]</span>=<span class="string">com.example.main,com.example.another</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>生产者</p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.kafka.producer.value-serializer</span>=<span class="string">org.springframework.kafka.support.serializer.JsonSerializer</span></span><br><span class="line"><span class="attr">spring.kafka.producer.properties[spring.json.add.type.headers]</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>自动配置原理</strong></p>
<ul>
<li><strong>kafka</strong> 自动配置在 <strong>KafkaAutoConfiguration</strong></li>
<li>容器中放了 <strong>KafkaTemplate</strong> 可以进行消息收发</li>
<li>容器中放了<strong>KafkaAdmin</strong> 可以进行 <strong>Kafka</strong> 的管理，比如创建 <strong>topic</strong> 等</li>
<li><strong>kafka</strong> 的配置在 <strong>KafkaProperties</strong> 中</li>
<li><strong>@EnableKafka</strong> 可以开启基于注解的模式</li>
</ul>
</li>
</ul>
<h2 id="第十节Web安全"><a href="#第十节Web安全" class="headerlink" title="第十节	Web安全"></a>第十节	Web安全</h2><h3 id="10-1安全架构"><a href="#10-1安全架构" class="headerlink" title="10.1	安全架构"></a>10.1	安全架构</h3><ul>
<li><strong>认证</strong>：确定用户身份，登录系统，用户系统</li>
<li><strong>授权</strong>：权限管理，用户授权</li>
<li><strong>攻击防护</strong>：XSS，CSRF，CORS，SQL注入</li>
<li><strong>权限模型</strong><ul>
<li><strong>RDBC</strong>：全称 <strong>Role Based Access Control</strong>，即基于角色的访问控制，具备用户表，用户_角色表，角色表，角色_权限表，权限表</li>
<li><strong>ACL</strong>：全称 <strong>Access Control List</strong>，即访问控制列表，直接用户和权限挂钩，具备用户表，用户_权限表，权限表</li>
</ul>
</li>
</ul>
<h3 id="10-2Spring-Security-原理"><a href="#10-2Spring-Security-原理" class="headerlink" title="10.2	Spring Security 原理"></a>10.2	Spring Security 原理</h3><ul>
<li><strong>过滤器链</strong>：<strong>Spring</strong> <strong>Security</strong> 利用 <strong>FilterChainProxy</strong> 封装一系列拦截器链，实现各种安全拦截功能</li>
<li><strong>FilterChainProxy</strong>：过滤链代理对象，包含多个过滤器，用于实现安全拦截功能</li>
<li><strong>SecurityFilterChain</strong>：安全过滤器链，在客户端和 <strong>Servlet</strong> 中的过滤器链中插入多个过滤器</li>
</ul>
<h3 id="10-3使用"><a href="#10-3使用" class="headerlink" title="10.3	使用"></a>10.3	使用</h3><ul>
<li><p><strong>HttpSecurity</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Order(SecurityProperties.BASIC_AUTH_ORDER - 10)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationConfigurerAdapter</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    http.antMatcher(<span class="string">&quot;/match1/**&quot;</span>)</span><br><span class="line">      .authorizeRequests()</span><br><span class="line">        .antMatchers(<span class="string">&quot;/match1/user&quot;</span>).hasRole(<span class="string">&quot;USER&quot;</span>)</span><br><span class="line">        .antMatchers(<span class="string">&quot;/match1/spam&quot;</span>).hasRole(<span class="string">&quot;SPAM&quot;</span>)</span><br><span class="line">        .anyRequest().isAuthenticated();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>MethodSecurity</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(securedEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SampleSecureApplication</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">  <span class="meta">@Secured(&quot;ROLE_USER&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">secure</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello Security&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="10-4实战"><a href="#10-4实战" class="headerlink" title="10.4	实战"></a>10.4	实战</h3><ul>
<li><p><strong>引入依赖</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity6<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置类</strong></p>
<ul>
<li><p>视图控制</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/home&quot;</span>).setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/&quot;</span>).setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/hello&quot;</span>).setViewName(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/login&quot;</span>).setViewName(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>安全配置</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSecurityConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http</span><br><span class="line">                .authorizeHttpRequests((requests) -&gt; requests</span><br><span class="line">                        .requestMatchers(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;/home&quot;</span>).permitAll()</span><br><span class="line">                        .anyRequest().authenticated()</span><br><span class="line">                )</span><br><span class="line">                .formLogin((form) -&gt; form</span><br><span class="line">                        .loginPage(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">                        .permitAll()</span><br><span class="line">                )</span><br><span class="line">                .logout((logout) -&gt; logout.permitAll());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> UserDetailsService <span class="title function_">userDetailsService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserDetails</span> <span class="variable">user</span> <span class="operator">=</span></span><br><span class="line">                User.withDefaultPasswordEncoder()</span><br><span class="line">                        .username(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                        .password(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                        .roles(<span class="string">&quot;USER&quot;</span>)</span><br><span class="line">                        .build();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">InMemoryUserDetailsManager</span>(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第十一节可观测性"><a href="#第十一节可观测性" class="headerlink" title="第十一节	可观测性"></a>第十一节	可观测性</h2><h3 id="11-1SpringBoot-Actuator"><a href="#11-1SpringBoot-Actuator" class="headerlink" title="11.1	SpringBoot Actuator"></a>11.1	SpringBoot Actuator</h3><ul>
<li><p><strong>实战流程</strong></p>
<ul>
<li><p>场景引入</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>暴露指标</p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">management</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">endpoints</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">enabled-by-default</span>: <span class="string">true #暴露所有端点信息</span></span><br><span class="line">    <span class="attr">web</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">exposure</span>:<span class="string"></span></span><br><span class="line">        <span class="attr">include</span>: <span class="string">&#x27;*&#x27;  #以web方式暴露</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>访问数据</p>
<ul>
<li>访问 <a href="http://localhost:8080/actuator/">http://localhost:8080/actuator</a>：展示出所有可以用的监控端点</li>
<li><a href="http://localhost:8080/actuator/beans">http://localhost:8080/actuator/beans</a></li>
<li><a href="http://localhost:8080/actuator/configprops">http://localhost:8080/actuator/configprops</a></li>
<li><a href="http://localhost:8080/actuator/metrics">http://localhost:8080/actuator/metrics</a></li>
<li><a href="http://localhost:8080/actuator/metrics/jvm.gc.pause">http://localhost:8080/actuator/metrics/jvm.gc.pause</a></li>
<li>[<a href="http://localhost:8080/actuator/endpointName/detailPath">http://localhost:8080/actuator/endpointName/detailPath</a></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Endpoint</strong></p>
<ul>
<li><p>常用端点</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><strong>auditevents</strong></td>
<td>暴露当前应用程序的审核事件信息，需要一个 <strong>AuditEventRepository</strong> 组件</td>
</tr>
<tr>
<td><strong>beans</strong></td>
<td>显示应用程序中所有 <strong>Spring</strong> <strong>Bean</strong> 的完整列表</td>
</tr>
<tr>
<td><strong>caches</strong></td>
<td>暴露可用的缓存</td>
</tr>
<tr>
<td><strong>conditions</strong></td>
<td>显示自动配置的所有条件信息，包括匹配或不匹配的原因</td>
</tr>
<tr>
<td><strong>configprops</strong></td>
<td>显示所有 <strong>@ConfigurationProperties</strong></td>
</tr>
<tr>
<td><strong>env</strong></td>
<td>暴露 <strong>Spring</strong> 的属性 <strong>ConfigurableEnvironment</strong></td>
</tr>
<tr>
<td><strong>flyway</strong></td>
<td>显示已应用的所有 <strong>Flyway</strong> 数据库迁移，需要一个或多个 <strong>Flyway</strong> 组件</td>
</tr>
<tr>
<td><strong>health</strong></td>
<td>显示应用程序运行状况信息</td>
</tr>
<tr>
<td><strong>httptrace</strong></td>
<td>显示 <strong>HTTP</strong> 跟踪信息，需要一个 <strong>HttpTraceRepository</strong> 组件</td>
</tr>
<tr>
<td><strong>info</strong></td>
<td>显示应用程序信息</td>
</tr>
<tr>
<td><strong>integrationgraph</strong></td>
<td>显示 <strong>Spring</strong>  <strong>integrationgraph</strong>，需要依赖 <strong>spring-integration-core</strong></td>
</tr>
<tr>
<td><strong>loggers</strong></td>
<td>显示和修改应用程序中日志的配置</td>
</tr>
<tr>
<td><strong>liquibase</strong></td>
<td>显示已应用的所有 <strong>Liquibase</strong> 数据库迁移，需要一个或多个 <strong>Liquibase</strong> 组件</td>
</tr>
<tr>
<td><strong>metrics</strong></td>
<td>显示当前应用程序的指标信息</td>
</tr>
<tr>
<td><strong>mappings</strong></td>
<td>显示所有 <strong>@RequestMapping</strong> 路径列表</td>
</tr>
<tr>
<td><strong>scheduledtasks</strong></td>
<td>显示应用程序中的计划任务</td>
</tr>
<tr>
<td><strong>sessions</strong></td>
<td>允许从<strong>Spring</strong> <strong>Session</strong>支持的会话存储中检索和删除用户会话，需要使用 <strong>Spring</strong> <strong>Session</strong> 的基于 <strong>Servlet</strong> 的 <strong>Web</strong> 应用程序</td>
</tr>
<tr>
<td><strong>shutdown</strong></td>
<td>使应用程序正常关闭，默认禁用</td>
</tr>
<tr>
<td><strong>startup</strong></td>
<td>显示由 <strong>ApplicationStartup</strong> 收集的启动步骤数据，需要使用 <strong>SpringApplication</strong> 进行配置 <strong>BufferingApplicationStartup</strong></td>
</tr>
<tr>
<td><strong>threaddump</strong></td>
<td>执行线程转储</td>
</tr>
<tr>
<td><strong>heapdump</strong></td>
<td>返回 <strong>hprof</strong> 堆转储文件</td>
</tr>
<tr>
<td><strong>jolokia</strong></td>
<td>通过 <strong>HTTP</strong> 暴露 <strong>JMX</strong> <strong>bean</strong>，需要引入依赖 <strong>jolokia-core</strong></td>
</tr>
<tr>
<td><strong>logfile</strong></td>
<td>返回日志文件的内容，支持使用 <strong>HTTP</strong> <strong>Range</strong> 标头来检索部分日志文件的内容</td>
</tr>
<tr>
<td><strong>prometheus</strong></td>
<td>以 <strong>Prometheus</strong> 服务器可以抓取的格式公开指标，需要依赖 <strong>micrometer-registry-prometheus</strong></td>
</tr>
</tbody></table>
</li>
<li><p>定制端点</p>
<ul>
<li><p>健康监控：返回存活或者死亡</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyHealthIndicator</span> <span class="keyword">implements</span> <span class="title class_">HealthIndicator</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Health <span class="title function_">health</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">errorCode</span> <span class="operator">=</span> check(); <span class="comment">// perform some specific health check</span></span><br><span class="line">        <span class="keyword">if</span> (errorCode != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Health.down().withDetail(<span class="string">&quot;Error Code&quot;</span>, errorCode).build();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Health.up().build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构建Health</span></span><br><span class="line"><span class="type">Health</span> <span class="variable">build</span> <span class="operator">=</span> Health.down()</span><br><span class="line">                .withDetail(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;error service&quot;</span>)</span><br><span class="line">                .withDetail(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;500&quot;</span>)</span><br><span class="line">                .withException(<span class="keyword">new</span> <span class="title class_">RuntimeException</span>())</span><br><span class="line">                .build();</span><br></pre></td></tr></table></figure>

  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">management</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">health</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">enabled</span>: <span class="string">true</span></span><br><span class="line">      <span class="attr">show-details</span>: <span class="string">always #总是显示详细信息。可显示每个模块的状态信息</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>指标监控：次数，发生率</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyService</span>&#123;</span><br><span class="line">    Counter counter;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyService</span><span class="params">(MeterRegistry meterRegistry)</span>&#123;</span><br><span class="line">         counter = meterRegistry.counter(<span class="string">&quot;myservice.method.running.counter&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        counter.increment();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="11-2监控案例"><a href="#11-2监控案例" class="headerlink" title="11.2	监控案例"></a>11.2	监控案例</h3><ul>
<li><p><strong>安装</strong></p>
<ul>
<li><p>时序数据库</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装prometheus:时序数据库</span></span><br><span class="line">docker run -p 9090:9090 -d \</span><br><span class="line">-v pc:/etc/prometheus \</span><br><span class="line">prom/prometheus</span><br></pre></td></tr></table></figure>
</li>
<li><p>grafana</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装grafana；默认账号密码 admin:admin</span></span><br><span class="line">docker run -d --name=grafana -p 3000:3000 grafana/grafana</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>场景导入</strong></p>
<ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.micrometer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>micrometer-registry-prometheus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置文件</p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">management</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">endpoints</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">web</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">exposure</span>: <span class="string">#暴露所有监控的端点</span></span><br><span class="line">        <span class="attr">include</span>: <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>部署 <strong>Java</strong> 应用</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装上传工具</span></span><br><span class="line">yum install lrzsz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装openjdk</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载openjdk</span></span><br><span class="line">wget https://download.oracle.com/java/17/latest/jdk-17_linux-x64_bin.tar.gz</span><br><span class="line"></span><br><span class="line">mkdir -p /opt/java</span><br><span class="line">tar -xzf jdk-17_linux-x64_bin.tar.gz -C /opt/java/</span><br><span class="line">sudo vi /etc/profile</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">加入以下内容</span></span><br><span class="line">export JAVA_HOME=/opt/java/jdk-17.0.7</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">环境变量生效</span></span><br><span class="line">source /etc/profile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">后台启动java应用</span></span><br><span class="line">nohup java -jar boot3-14-actuator-0.0.1-SNAPSHOT.jar &gt; output.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>配置文件</strong></p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 修改 prometheus.yml 配置文件</span></span><br><span class="line"><span class="attr">scrape_configs</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">-</span> <span class="string">job_name: &#x27;spring-boot-actuator-exporter&#x27;</span></span><br><span class="line">    <span class="attr">metrics_path</span>: <span class="string">&#x27;/actuator/prometheus&#x27; #指定抓取的路径</span></span><br><span class="line">    <span class="attr">static_configs</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">-</span> <span class="string">targets: [&#x27;192.168.200.1:8001&#x27;]</span></span><br><span class="line">        <span class="attr">labels</span>:<span class="string"></span></span><br><span class="line">          <span class="attr">nodename</span>: <span class="string">&#x27;app-demo&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置监控面板</strong></p>
<ul>
<li>添加数据源</li>
<li>添加面板，可去 <strong>dashboard</strong> 市场找一个自己喜欢的面板，也可以自己开发面板</li>
</ul>
</li>
</ul>
<h2 id="第十二节AOT"><a href="#第十二节AOT" class="headerlink" title="第十二节	AOT"></a>第十二节	AOT</h2><h3 id="12-1AOT与JIT"><a href="#12-1AOT与JIT" class="headerlink" title="12.1	AOT与JIT"></a>12.1	AOT与JIT</h3><ul>
<li><p><strong>编译方式</strong></p>
<ul>
<li><p><strong>AOT</strong>：全称 <strong>Ahead-of-Time</strong>，即提前编译，程序执行前，全部被编译成机器码</p>
</li>
<li><p><strong>JIT</strong>：全称 <strong>Just in Time</strong>，即即时编译，程序执行前，全部被编译成机器码</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">JIT</th>
<th>AOT</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>优点</strong></td>
<td align="center">具备实时调整能力，生成最优机器指令，根据代码运行情况优化内存占用</td>
<td>速度快，优化了运行时编译时间和内存消耗，程序初期就能达最高性能，加快程序启动速度</td>
</tr>
<tr>
<td align="center"><strong>缺点</strong></td>
<td align="center">运行期边编译速度慢，初始编译不能达到最高性能</td>
<td>程序第一次编译占用时间长，牺牲高级语言一些特性</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p><strong>编译器和解释器</strong></p>
<table>
<thead>
<tr>
<th>对比项</th>
<th><strong>编译器</strong></th>
<th><strong>解释器</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>机器执行速度</strong></td>
<td>快，因为源代码只需被转换一次</td>
<td>慢，因为每行代码都需要被解释执行</td>
</tr>
<tr>
<td><strong>开发效率</strong></td>
<td>慢，因为需要耗费大量时间编译</td>
<td>快，无需花费时间生成目标代码，更快的开发和测试</td>
</tr>
<tr>
<td><strong>调试</strong></td>
<td>难以调试编译器生成的目标代码</td>
<td>容易调试源代码，因为解释器一行一行地执行</td>
</tr>
<tr>
<td><strong>可移植性（跨平台）</strong></td>
<td>不同平台需要重新编译目标平台代码</td>
<td>同一份源码可以跨平台执行，因为每个平台会开发对应的解释器</td>
</tr>
<tr>
<td><strong>学习难度</strong></td>
<td>相对较高，需要了解源代码、编译器以及目标机器的知识</td>
<td>相对较低，无需了解机器的细节</td>
</tr>
<tr>
<td><strong>错误检查</strong></td>
<td>编译器可以在编译代码时检查错误</td>
<td>解释器只能在执行代码时检查错误</td>
</tr>
<tr>
<td><strong>运行时增强</strong></td>
<td>无</td>
<td>可以动态增强</td>
</tr>
</tbody></table>
</li>
<li><p><strong>JVM架构</strong></p>
  <img src="C:\Users\86172\Pictures\Markdown\SpringBoot\JVM架构.png" style="zoom:67%;" />
</li>
<li><p><strong>Java执行过程</strong></p>
<p>  <img src="C:\Users\86172\Pictures\Markdown\SpringBoot\Java执行.png"></p>
</li>
<li><p><strong>JVM编译器</strong></p>
<ul>
<li>Client Compiler：注重启动速度和局部的优化</li>
<li>Server Compiler：更加关注全局优化，性能更好，但由于会进行更多的全局分析，所以启动速度会慢</li>
</ul>
</li>
<li><p><strong>分层编译</strong>：将 <strong>JVM</strong> 的执行状态分为了五个层次</p>
<ul>
<li>解释执行</li>
<li>执行不带 <strong>profiling</strong> 的 <strong>C1</strong> 代码</li>
<li>执行仅带方法调用次数以及循环回边执行次数 <strong>profiling</strong> 的 <strong>C1</strong> 代码</li>
<li>执行带所有 <strong>profiling</strong> 的 <strong>C1</strong> 代码</li>
<li>执行 <strong>C2</strong> 代码</li>
</ul>
</li>
</ul>
<h3 id="12-2GraalVM"><a href="#12-2GraalVM" class="headerlink" title="12.2	GraalVM"></a>12.2	GraalVM</h3><ul>
<li><p><strong>GraalVM</strong>：一个高性能 <strong>JDK</strong>，可提高基于 <strong>Java</strong> 和 <strong>JVM</strong> 的应用的性能并简化 <strong>Java</strong> 云原生服务的构建和运行，它提供优化的编译器，可以更快地生成代码并降低计算资源消耗，实现微服务即时启动</p>
</li>
<li><p><strong>使用流程</strong></p>
<ul>
<li><p>安装</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf graalvm-ce-java17-linux-amd64-22.3.2.tar.gz -C /opt/java/</span><br><span class="line"></span><br><span class="line">sudo vim /etc/profile</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改以下内容</span></span><br><span class="line">export JAVA_HOME=/opt/java/graalvm-ce-java17-22.3.2</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line">gu install --file native-image-installable-svm-java17-linux-amd64-22.3.2.jar</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">native-image -cp xxx.jar org.example.App</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="12-3SpringBoot整合"><a href="#12-3SpringBoot整合" class="headerlink" title="12.3	SpringBoot整合"></a>12.3	SpringBoot整合</h3><ul>
<li><p><strong>依赖导入</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.graalvm.buildtools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>native-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>生成镜像</strong></p>
<ul>
<li><p>运行 <strong>aot</strong> 提前处理命令</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn springboot:process-aot</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行 <strong>native</strong> 打包</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn -Pnative native:build</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第十三节Java响应式流"><a href="#第十三节Java响应式流" class="headerlink" title="第十三节	Java响应式流"></a>第十三节	Java响应式流</h2><h3 id="13-1Lambda表达式"><a href="#13-1Lambda表达式" class="headerlink" title="13.1	Lambda表达式"></a>13.1	Lambda表达式</h3><ul>
<li><p><strong>Lambda表达式</strong>：接口中有且只有一个未实现的方法，可以使用 <strong>Lambda</strong> 表达式简化</p>
</li>
<li><p><strong>语法格式</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(params) -&gt; &#123;function&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="13-2函数式接口"><a href="#13-2函数式接口" class="headerlink" title="13.2	函数式接口"></a>13.2	函数式接口</h3><ul>
<li><p><strong>函数式接口</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Function</span>&lt;T,R&gt; &#123;</span><br><span class="line">    R <span class="title function_">apply</span><span class="params">(T t)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>供给者接口</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Supplier</span>&lt;T&gt; &#123;</span><br><span class="line">    T <span class="title function_">get</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>消费者接口</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Consumer</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(T t)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>断言者接口</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Predicate</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(T t)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="13-3StreamAPI"><a href="#13-3StreamAPI" class="headerlink" title="13.3	StreamAPI"></a>13.3	StreamAPI</h3><ul>
<li><strong>中间操作</strong><ul>
<li>过滤：filter</li>
<li>一对一映射：mapToInt，mapToDouble，mapToLong</li>
<li>一对多映射：flatMap</li>
<li>排序：sorted</li>
<li>限制：limit</li>
<li>跳过：skip</li>
</ul>
</li>
<li><strong>终止操作</strong><ul>
<li>遍历：forEach</li>
<li>转数组：toArray</li>
<li>收集：collect</li>
<li>最值：max&#x2F;min</li>
<li>计数：count</li>
<li>头值：findFirst</li>
</ul>
</li>
</ul>
<h3 id="13-4Reactive-Stream"><a href="#13-4Reactive-Stream" class="headerlink" title="13.4	Reactive-Stream"></a>13.4	Reactive-Stream</h3><ul>
<li><strong>Reactive Streams</strong>：<strong>Java</strong> 面向流的库的标准和规范<ul>
<li>处理可能无限数量的元素</li>
<li>有序</li>
<li>在组件之间异步传递元素</li>
<li>强制性非阻塞，背压模式</li>
</ul>
</li>
<li><strong>API组件</strong><ul>
<li>Publisher：发布者，产生数据流</li>
<li>Subscriber：订阅者，消费数据流</li>
<li>Subscription：订阅关系，记录发布者和消费者之间的关系</li>
<li>Processor：处理器，同时实现发布者和订阅者，充当中间环节处理数据流</li>
</ul>
</li>
<li><strong>响应式编程</strong><ul>
<li>底层：数据缓冲队列，消息驱动模型，异步回调机制</li>
<li>编码：流式编程，链式调用，声明式 <strong>API</strong></li>
<li>效果：全异步，消息实时处理，高吞吐量，占用少量资源</li>
</ul>
</li>
</ul>
<h2 id="第十四节Reactor核心"><a href="#第十四节Reactor核心" class="headerlink" title="第十四节	Reactor核心"></a>第十四节	Reactor核心</h2><h3 id="14-1Reactor简介"><a href="#14-1Reactor简介" class="headerlink" title="14.1	Reactor简介"></a>14.1	Reactor简介</h3><ul>
<li><p><strong>Reactor</strong>：用于 <strong>JVM</strong> 的完全非阻塞的响应式编程框架，具备高效的需求管理能力，它与 <strong>Java</strong> 8 函数式 <strong>API</strong> 直接集成，提供了异步序列 <strong>API</strong> <strong>Flux</strong>和 <strong>Mono</strong>，并完全遵循和实现了响应式扩展规范</p>
</li>
<li><p><strong>项目构建</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.projectreactor<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>reactor-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.projectreactor<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>reactor-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="14-2响应式编程"><a href="#14-2响应式编程" class="headerlink" title="14.2	响应式编程"></a>14.2	响应式编程</h3><ul>
<li><strong>响应式编程</strong><ul>
<li>阻塞是对资源的浪费</li>
<li>异步编程，回调难以组合，代码难以理解和维护</li>
<li>从命令式编程到响应式编程，可编排性与可读性增强，数据装配流水线，操作符对数据进行处理</li>
</ul>
</li>
</ul>
<h3 id="14-3核心特性"><a href="#14-3核心特性" class="headerlink" title="14.3	核心特性"></a>14.3	核心特性</h3><ul>
<li><p><strong>Mono 和 Flux</strong></p>
<ul>
<li>Mono：01 数据流</li>
<li>Flux：N 数据流</li>
<li>响应式流：元素 + 信号</li>
</ul>
</li>
<li><p><strong>订阅</strong></p>
<ul>
<li><p>信号感知回调</p>
<ul>
<li><p>元素处理</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">v-&gt; System.out.println(<span class="string">&quot;v = &quot;</span> + v), <span class="comment">//流元素消费</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>异常处理</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">throwable -&gt; System.out.println(<span class="string">&quot;throwable = &quot;</span> + throwable), <span class="comment">//感知异常结束</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>结束处理</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">()-&gt; System.out.println(<span class="string">&quot;流结束了...&quot;</span>) <span class="comment">//感知正常结束</span></span><br></pre></td></tr></table></figure></li>
</ul>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">flux.subscribe(</span><br><span class="line">        v-&gt; System.out.println(<span class="string">&quot;v = &quot;</span> + v), <span class="comment">//流元素消费</span></span><br><span class="line">        throwable -&gt; System.out.println(<span class="string">&quot;throwable = &quot;</span> + throwable), <span class="comment">//感知异常结束</span></span><br><span class="line">        ()-&gt; System.out.println(<span class="string">&quot;流结束了...&quot;</span>) <span class="comment">//感知正常结束</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义消费者（生命周期钩子）</p>
<ul>
<li><p>订阅关系绑定</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">hookOnSubscribe</span><span class="params">(Subscription subscription)</span> &#123;</span><br><span class="line">    <span class="comment">// 流被订阅的时候触发</span></span><br><span class="line">    System.out.println(<span class="string">&quot;绑定了...&quot;</span>+subscription);</span><br><span class="line">    <span class="comment">//找发布者要数据</span></span><br><span class="line">    request(<span class="number">1</span>); <span class="comment">//要1个数据</span></span><br><span class="line"><span class="comment">//  requestUnbounded(); //要无限数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>数据到达</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">hookOnNext</span><span class="params">(String value)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;数据到达，正在处理：&quot;</span>+value);</span><br><span class="line">    request(<span class="number">1</span>); <span class="comment">//要1个数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>完成</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">hookOnComplete</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;流正常结束...&quot;</span>);</span><br><span class="line">&#125;     </span><br></pre></td></tr></table></figure>
</li>
<li><p>错误</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">hookOnError</span><span class="params">(Throwable throwable)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;流异常...&quot;</span>+throwable);</span><br><span class="line">&#125;           </span><br></pre></td></tr></table></figure>
</li>
<li><p>取消</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">hookOnCancel</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;流被取消...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>最终回调</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">hookFinally</span><span class="params">(SignalType type)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;最终回调...一定会被执行&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">flux.subscribe(<span class="keyword">new</span> <span class="title class_">BaseSubscriber</span>&lt;String&gt;() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">hookOnSubscribe</span><span class="params">(Subscription subscription)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">hookOnNext</span><span class="params">(String value)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">hookOnComplete</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">hookOnError</span><span class="params">(Throwable throwable)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">hookOnCancel</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">hookFinally</span><span class="params">(SignalType type)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>流的取消</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">hookOnNext</span><span class="params">(String value)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;数据到达，正在处理：&quot;</span>+value);</span><br><span class="line">    <span class="keyword">if</span>(value.equals(<span class="string">&quot;哈哈：5&quot;</span>))&#123;</span><br><span class="line">        cancel(); <span class="comment">//取消流</span></span><br><span class="line">    &#125;</span><br><span class="line">    request(<span class="number">1</span>); <span class="comment">//要1个数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>背压和请求重塑</strong></p>
<ul>
<li><p>缓冲</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Flux&lt;List&lt;Integer&gt;&gt; flux = Flux.range(<span class="number">1</span>, <span class="number">10</span>)  <span class="comment">//原始流10个</span></span><br><span class="line">        .buffer(<span class="number">3</span>)</span><br><span class="line">        .log();<span class="comment">//缓冲区：缓冲3个元素: 消费一次最多可以拿到三个元素； 凑满数批量发给消费者</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //一次发一个，一个一个发；</span></span><br><span class="line"><span class="comment">// 10元素，buffer(3)；消费者请求4次，数据消费完成</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>限流</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Flux.range(<span class="number">1</span>, <span class="number">1000</span>)</span><br><span class="line">    .log()</span><br><span class="line">    <span class="comment">//限流触发，看上游是怎么限流获取数据的</span></span><br><span class="line">    .limitRate(<span class="number">100</span>) <span class="comment">//一次预取30个元素； 第一次 request(100)，以后request(75)</span></span><br><span class="line">    .subscribe();</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>以编程的方式创建序列</strong></p>
<ul>
<li><p>同步环境</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Fulx&lt;Object&gt; flux = </span><br><span class="line">    Flux.generate(() -&gt; <span class="number">0</span>, <span class="comment">// 初始值</span></span><br><span class="line">                  (srate,sink) -&gt; &#123;</span><br><span class="line">                      <span class="keyword">if</span>(state &lt;= <span class="number">10</span>)&#123;</span><br><span class="line">                          sink.next(state);</span><br><span class="line">                      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                          sink.complete();</span><br><span class="line">                      &#125;</span><br><span class="line">                      <span class="keyword">if</span>(state == <span class="number">7</span>)&#123;</span><br><span class="line">                          sink.error(<span class="keyword">new</span> <span class="title class_">RuntimeException</span>());</span><br><span class="line">                      &#125;</span><br><span class="line">                      <span class="keyword">return</span> state + <span class="number">1</span>;</span><br><span class="line">                  &#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>多线程</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Fulx&lt;Object&gt; flux = </span><br><span class="line">    Flux.create(fluxSink -&gt; &#123;</span><br><span class="line">        <span class="type">MyListener</span> <span class="variable">listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyListener</span>(fluxSink); <span class="comment">// 监听器</span></span><br><span class="line">        listener.online();</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>处理规则</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Flux.range(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line">        .handle((value,sink)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;拿到的值：&quot;</span>+value);</span><br><span class="line">            sink.next(<span class="string">&quot;张三：&quot;</span>+value); <span class="comment">//可以向下发送数据的通道</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .log() <span class="comment">//日志</span></span><br><span class="line">        .subscribe();</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>线程调度</strong></p>
<ul>
<li><p>默认使用当前线程，生成流，发布流，流操作</p>
</li>
<li><p>当前线程</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Scheduler</span> <span class="variable">s</span> <span class="operator">=</span> Schedulers.immediate();</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建单线程</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Scheduler</span> <span class="variable">s</span> <span class="operator">=</span> Schedulers.single();</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建多线程</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Scheduler</span> <span class="variable">s</span> <span class="operator">=</span> Schedulers.boundedElastic();</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义线程池</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Scheduler</span> <span class="variable">s</span> <span class="operator">=</span> Schedulers.fromExecutor();</span><br></pre></td></tr></table></figure>
</li>
<li><p>绑定调度策略</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Flux&lt;String&gt; flux = Flux</span><br><span class="line">    .range(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    .map(i -&gt; <span class="number">10</span> + i)</span><br><span class="line">    .log()</span><br><span class="line">    .publishOn(s)</span><br><span class="line">    .map(i -&gt; <span class="string">&quot;value &quot;</span> + i);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>错误处理</strong></p>
<ul>
<li><p>消费者默认处理</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">flux.subscribe(</span><br><span class="line">        v-&gt; System.out.println(<span class="string">&quot;v = &quot;</span> + v), <span class="comment">//流元素消费</span></span><br><span class="line">        throwable -&gt; System.out.println(<span class="string">&quot;throwable = &quot;</span> + throwable), <span class="comment">//感知异常结束</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>返回值：onErrorReturn</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Flux.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line">        .map(i -&gt; <span class="string">&quot;100 / &quot;</span> + i + <span class="string">&quot; = &quot;</span> + (<span class="number">100</span> / i))</span><br><span class="line">        .onErrorReturn(NullPointerException.class,<span class="string">&quot;哈哈-6666&quot;</span>)</span><br><span class="line">        .subscribe(v-&gt; System.out.println(<span class="string">&quot;v = &quot;</span> + v),</span><br><span class="line">                err -&gt; System.out.println(<span class="string">&quot;err = &quot;</span> + err),</span><br><span class="line">                ()-&gt; System.out.println(<span class="string">&quot;流结束&quot;</span>)); <span class="comment">// error handling example</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>执行方法：onErrorResume</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Flux.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line">        .map(i -&gt; <span class="string">&quot;100 / &quot;</span> + i + <span class="string">&quot; = &quot;</span> + (<span class="number">100</span> / i))</span><br><span class="line">    	.onErrorResume(err -&gt; Mono.just(<span class="string">&quot;哈哈-777&quot;</span>))</span><br><span class="line">        .subscribe(v -&gt; System.out.println(<span class="string">&quot;v = &quot;</span> + v),</span><br><span class="line">                err -&gt; System.out.println(<span class="string">&quot;err = &quot;</span> + err),</span><br><span class="line">                () -&gt; System.out.println(<span class="string">&quot;流结束&quot;</span>));</span><br></pre></td></tr></table></figure>
</li>
<li><p>返回一个新值：onErrorResume</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Flux.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line">        .map(i -&gt; <span class="string">&quot;100 / &quot;</span> + i + <span class="string">&quot; = &quot;</span> + (<span class="number">100</span> / i))</span><br><span class="line">    	.onErrorResume(err -&gt; Flux.error(<span class="keyword">new</span> <span class="title class_">BusinessException</span>(err.getMessage()+<span class="string">&quot;：炸了&quot;</span>)))</span><br><span class="line">        .subscribe(v -&gt; System.out.println(<span class="string">&quot;v = &quot;</span> + v),</span><br><span class="line">                err -&gt; System.out.println(<span class="string">&quot;err = &quot;</span> + err),</span><br><span class="line">                () -&gt; System.out.println(<span class="string">&quot;流结束&quot;</span>));</span><br></pre></td></tr></table></figure>
</li>
<li><p>包装异常并抛出：onErrorMap</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Flux.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line">        .map(i -&gt; <span class="string">&quot;100 / &quot;</span> + i + <span class="string">&quot; = &quot;</span> + (<span class="number">100</span> / i))</span><br><span class="line">        .onErrorMap(err-&gt; <span class="keyword">new</span> <span class="title class_">BusinessException</span>(err.getMessage()+<span class="string">&quot;: 又炸了...&quot;</span>))</span><br><span class="line">        .subscribe(v -&gt; System.out.println(<span class="string">&quot;v = &quot;</span> + v),</span><br><span class="line">                err -&gt; System.out.println(<span class="string">&quot;err = &quot;</span> + err),</span><br><span class="line">                () -&gt; System.out.println(<span class="string">&quot;流结束&quot;</span>));</span><br></pre></td></tr></table></figure>
</li>
<li><p>记录错误日志并抛出：doOnError</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Flux.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line">        .map(i -&gt; <span class="string">&quot;100 / &quot;</span> + i + <span class="string">&quot; = &quot;</span> + (<span class="number">100</span> / i))</span><br><span class="line">        .doOnError(err -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;err已被记录 = &quot;</span> + err);</span><br><span class="line">        &#125;).subscribe(v -&gt; System.out.println(<span class="string">&quot;v = &quot;</span> + v),</span><br><span class="line">                err -&gt; System.out.println(<span class="string">&quot;err = &quot;</span> + err),</span><br><span class="line">                () -&gt; System.out.println(<span class="string">&quot;流结束&quot;</span>));</span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭资源：doFinally</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Flux.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">        .map(i -&gt; <span class="string">&quot;100 / &quot;</span> + i + <span class="string">&quot; = &quot;</span> + (<span class="number">100</span> / i))</span><br><span class="line">        .doOnError(err -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;err已被记录 = &quot;</span> + err);</span><br><span class="line">        &#125;)</span><br><span class="line">        .doFinally(signalType -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;流信号：&quot;</span>+signalType);</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>忽略异常：onErrorContinue</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Flux.just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">5</span>)</span><br><span class="line">        .map(i-&gt;<span class="number">10</span>/i)</span><br><span class="line">        .onErrorContinue((err,val)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;err = &quot;</span> + err);</span><br><span class="line">            System.out.println(<span class="string">&quot;val = &quot;</span> + val);</span><br><span class="line">            System.out.println(<span class="string">&quot;发现&quot;</span>+val+<span class="string">&quot;有问题了，继续执行其他的，我会记录这个问题&quot;</span>);</span><br><span class="line">        &#125;) <span class="comment">//发生</span></span><br><span class="line">        .subscribe(v-&gt; System.out.println(<span class="string">&quot;v = &quot;</span> + v),</span><br><span class="line">                err-&gt; System.out.println(<span class="string">&quot;err = &quot;</span> + err));</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>常用操作</strong></p>
<ul>
<li><p><strong>filter</strong>：过滤器</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.filter(i % <span class="number">2</span> == <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>flatMap</strong>：扁平化</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.flatMap(v -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> Flux.fromArray(v.split(<span class="string">&quot; &quot;</span>));</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>concat&#x2F;concatWith&#x2F;concatMap</strong>：连接</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.concat(Flux.just(<span class="number">1</span>,<span class="number">2</span>),Flux.just(<span class="number">2</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>transform&#x2F;transfromDeferred</strong>：转换</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.transform(values -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> values.map(String::toUpperCase)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>defaultIfEmpty&#x2F;switchIfEmpty</strong>：默认值</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.defaultIfEmpty(<span class="string">&quot;a&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>merge&#x2F;mergeWith</strong>：合并</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.merge(Flux.just(<span class="number">1</span>,<span class="number">2</span>),Flux.just(<span class="number">2</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>zip&#x2F;zipWith</strong>：压缩</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.zipWith(Flux.just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>超时与重试</strong></p>
<ul>
<li><p>超时：timeout</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.delayElements(Duratons.ofSeconds(<span class="number">3</span>))</span><br><span class="line">.timeout(Durations.ofSeconds(<span class="number">1</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>重试：retry，从头到尾重新请求</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.retry(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>缓存</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.cache(<span class="number">3</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>阻塞式API</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.collecList()</span><br><span class="line">.block()</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>并发流</strong></p>
<ul>
<li><p>并发</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.parallel(<span class="number">8</span>)</span><br><span class="line">.runOn(Schedulers.newparallel(<span class="string">&quot;abc&quot;</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>上下文读写</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.contextWrite(Context.of(<span class="string">&quot;k&quot;</span>,<span class="string">&quot;v&quot;</span>))</span><br><span class="line">cotext.get(<span class="string">&quot;k&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="14-4Sinks工具类"><a href="#14-4Sinks工具类" class="headerlink" title="14.4	Sinks工具类"></a>14.4	Sinks工具类</h3><ul>
<li><p><strong>Sinks类</strong></p>
<ul>
<li><p>接收器，数据管道，所有的数据顺着管道流动</p>
</li>
<li><p>发送 <strong>Flux</strong> 数据</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Flux.many()</span><br></pre></td></tr></table></figure>
</li>
<li><p>发送 <strong>Mono</strong> 数据</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Flux.one()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>传播机制</strong></p>
<ul>
<li><p>单播</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Flux.many().unicast()</span><br></pre></td></tr></table></figure>
</li>
<li><p>多播</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Flux.many().multicast()</span><br></pre></td></tr></table></figure>
</li>
<li><p>重放</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Flux.many().replay()</span><br></pre></td></tr></table></figure>
</li>
<li><p>背压</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.onBackpressurebuffer()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第十五节Spring-Webflux"><a href="#第十五节Spring-Webflux" class="headerlink" title="第十五节	Spring Webflux"></a>第十五节	Spring Webflux</h2><h3 id="15-1WebFlux简介"><a href="#15-1WebFlux简介" class="headerlink" title="15.1	WebFlux简介"></a>15.1	WebFlux简介</h3><ul>
<li><p><strong>WebFlux</strong>：响应式堆栈 <strong>Web</strong> 框架， 完全无阻塞，支持响应式流背压，并在以下服务器上运行 <strong>Netty</strong>、<strong>Undertow</strong> 和 <strong>Servlet</strong> 容器</p>
<ul>
<li>需要一个非阻塞的 <strong>web</strong> 堆栈来处理少量线程的并发性，并用更少的硬件资源进行扩展</li>
<li>函数式编程，在 <strong>Java</strong> 8 中添加 <strong>lambda</strong> 表达式为 <strong>Java</strong> 中的函数式 <strong>API</strong> 创造了机会，允许声明性 异步逻辑的组成</li>
</ul>
</li>
<li><p><strong>依赖引入</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="15-2WebFlux核心"><a href="#15-2WebFlux核心" class="headerlink" title="15.2	WebFlux核心"></a>15.2	WebFlux核心</h3><ul>
<li><p><strong>HttpHandler</strong>：网络请求处理器</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HttpHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (ServerHttpRequest request,</span><br><span class="line">                           ServerHttpResponse response)-&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> response.writeWith(Mono.just(<span class="number">0</span>));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>获取响应头</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.getHeaders(); <span class="comment">//获取响应头</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>获取 <strong>cookie</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.getCookies(); <span class="comment">//获取Cookie</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>获取响应状态码</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.getStatusCode(); <span class="comment">//获取响应状态码；</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>缓存 <strong>buffer</strong> 工厂</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.bufferFactory(); <span class="comment">//buffer工厂</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>写入数据</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.writeWith() <span class="comment">//把xxx写出去</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>响应结束</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setComplete(); <span class="comment">//响应结束</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>返回数据</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建 响应数据的 DataBuffer</span></span><br><span class="line"><span class="type">DataBufferFactory</span> <span class="variable">factory</span> <span class="operator">=</span> response.bufferFactory();</span><br><span class="line"><span class="comment">//数据Buffer</span></span><br><span class="line"><span class="type">DataBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> factory.wrap(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Hello!&quot;</span>).getBytes());</span><br><span class="line"><span class="comment">// 需要一个 DataBuffer 的发布者</span></span><br><span class="line"><span class="keyword">return</span> response.writeWith(Mono.just(buffer));</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>HttpServer</strong>：服务器</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 启动一个服务器，监听8080端口，接受数据，拿到数据交给 HttpHandler 进行请求处理</span></span><br><span class="line"><span class="type">ReactorHttpHandlerAdapter</span> <span class="variable">adapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReactorHttpHandlerAdapter</span>(handler);</span><br><span class="line"><span class="comment">// 启动Netty服务器</span></span><br><span class="line">HttpServer.create()</span><br><span class="line">        .host(<span class="string">&quot;localhost&quot;</span>)</span><br><span class="line">        .port(<span class="number">8080</span>)</span><br><span class="line">        .handle(adapter) <span class="comment">//用指定的处理器处理请求</span></span><br><span class="line">        .bindNow(); <span class="comment">//现在就绑定</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>DispatcherHandler</strong>：前端控制器</p>
<ul>
<li><p><strong>HandlerMapping</strong>：请求映射处理器，保存每个请求由哪个方法进行处理</p>
</li>
<li><p><strong>HandlerAdapter</strong>：处理器适配器，反射执行目标方法</p>
</li>
<li><p><strong>HandlerResultHandler</strong>：处理器结果处理器</p>
</li>
<li><p><strong>handle</strong> 方法：处理所有请求，分配 <strong>handler</strong> 对象</p>
<ul>
<li><p>请求和响应都封装在 <strong>ServerWebExchange</strong> 对象中，由 <strong>handle</strong> 方法进行处理</p>
</li>
<li><p>如果没有任何的请求映射器，直接返回一个创建一个未找到的错误 404，返回 <strong>Mono.error</strong> 终结流</p>
</li>
<li><p>跨域工具，是否跨域请求，跨域请求检查是否复杂跨域，需要预检请求</p>
</li>
<li><p><strong>Flux</strong> 流式操作，先找到 <strong>HandlerMapping</strong>，再获取 <strong>handlerAdapter</strong>，再用 <strong>Adapter</strong> 处理请求，期间的错误由 <strong>onErrorResume</strong> 触发回调进行处理</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">handle</span><span class="params">(ServerWebExchange exchange)</span> &#123; </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.handlerMappings == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> createNotFoundError();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (CorsUtils.isPreFlightRequest(exchange.getRequest())) &#123;</span><br><span class="line">        <span class="keyword">return</span> handlePreFlight(exchange);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Flux.fromIterable(<span class="built_in">this</span>.handlerMappings) <span class="comment">//拿到所有的 handlerMappings</span></span><br><span class="line">            .concatMap(mapping -&gt; mapping.getHandler(exchange)) <span class="comment">//找每一个mapping看谁能处理请求</span></span><br><span class="line">            .next() <span class="comment">//直接触发获取元素； 拿到流的第一个元素； 找到第一个能处理这个请求的handlerAdapter</span></span><br><span class="line">            .switchIfEmpty(createNotFoundError()) <span class="comment">//如果没拿到这个元素，则响应404错误；</span></span><br><span class="line">            .onErrorResume(ex -&gt; handleDispatchError(exchange, ex)) <span class="comment">//异常处理，一旦前面发生异常，调用处理异常</span></span><br><span class="line">            .flatMap(handler -&gt; handleRequestWith(exchange, handler)); <span class="comment">//调用方法处理请求，得到响应结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>handleRequestWith</strong> 方法：<strong>handlerAdapter</strong> 处理请求逻辑</p>
</li>
<li><p><strong>handleResult</strong> 方法：处理各种类型结果</p>
</li>
</ul>
</li>
</ul>
<h3 id="15-3WebFlux开发"><a href="#15-3WebFlux开发" class="headerlink" title="15.3	WebFlux开发"></a>15.3	WebFlux开发</h3><ul>
<li><p><strong>目标方法传参</strong></p>
<ul>
<li><strong>ServerWebExchange</strong>：封装了请求和响应对象的对象，自定义获取数据，自定义响应</li>
<li><strong>ServerHttpRequest</strong>：请求</li>
<li><strong>ServerHttpResponse</strong>：响应</li>
<li><strong>WebSession</strong>  访问 <strong>Session</strong> 对象</li>
<li><strong>org.springframework.http.HttpMethod</strong>：请求方式</li>
<li><strong>@PathVariable</strong>：路径变量</li>
<li><strong>@RequestParam</strong>：请求参数</li>
<li><strong>@CookieValue</strong>：获取 <strong>Cookie</strong></li>
<li><strong>@RequestBody</strong>：获取请求体，<strong>Post</strong>，文件上传</li>
<li><strong>@RequestPart</strong>：获取文件上传的数据 <strong>multipart&#x2F;form-data</strong></li>
</ul>
</li>
<li><p><strong>返回值格式</strong></p>
<ul>
<li><strong>@ResponseBody</strong>：将响应数据写出去，如果是对象，将自动转换为 JSON。</li>
<li>**HttpEntity&lt;\B&gt;<strong>、</strong>ResponseEntity&lt;\B&gt;**：支持快速自定义响应内容，包括状态码、头信息和响应体</li>
<li><strong>HttpHeaders</strong>：只有响应头，没有响应内容</li>
<li><strong>ErrorResponse</strong>：快速构建错误响应</li>
<li><strong>ProblemDetail</strong>：<strong>SpringBoot</strong> 中的错误响应类型</li>
<li><strong>String</strong>：返回字符串类型的响应内容</li>
<li><strong>forward</strong>：转发到一个地址</li>
<li><strong>redirect</strong>：重定向到一个地址</li>
<li>配合模板引擎，返回视图对象：<ul>
<li><strong>View</strong>：直接返回视图对象。</li>
<li><strong>java.util.Map</strong>、<strong>org.springframework.ui.Model</strong>：返回模型数据</li>
<li><strong>@ModelAttribute</strong>：返回模型数据</li>
</ul>
</li>
<li><strong>Rendering</strong>：新版的页面跳转 <strong>API</strong>，不能标注 <strong>@ResponseBody</strong> 注解</li>
<li><strong>void</strong>：仅代表响应完成信号</li>
<li><strong>Flux&lt;\ServerSentEvent&gt;<strong>、</strong>Observable&lt;\ServerSentEvent&gt;</strong> 或其他响应式类型：使用 <strong>text&#x2F;event-stream</strong> 完成服务器推送事件效果</li>
<li>其他返回值：未在上述列表中的其他返回值，都会被当成给页面的数据</li>
</ul>
</li>
<li><p><strong>文件上传</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">handle</span><span class="params">(<span class="meta">@RequestPart(&quot;meta-data&quot;)</span> Part metadata, </span></span><br><span class="line"><span class="params">		<span class="meta">@RequestPart(&quot;file-data&quot;)</span> FilePart file)</span> &#123; </span><br><span class="line">	<span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>错误处理</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(ArithmeticException.class)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">error</span><span class="params">(ArithmeticException exception)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;炸了，哈哈...&quot;</span>;</span><br><span class="line">&#125;=</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>自定义Flux配置</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyWebConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WebFluxConfigurer <span class="title function_">webFluxConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebFluxConfigurer</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">                registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                        .allowedHeaders(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                        .allowedMethods(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                        .allowedOrigins(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>过滤器Filter</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyWebFilter</span> <span class="keyword">implements</span> <span class="title class_">WebFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, WebFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> exchange.getRequest();</span><br><span class="line">        <span class="type">ServerHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> exchange.getResponse();</span><br><span class="line"></span><br><span class="line">        Mono&lt;Void&gt; filter = chain.filter(exchange); <span class="comment">//放行</span></span><br><span class="line">        Mono&lt;Void&gt; voidMono = filter.doOnError(err -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;目标方法异常以后...&quot;</span>);</span><br><span class="line">                &#125;) <span class="comment">// 目标方法发生异常后做事</span></span><br><span class="line">                .doFinally(signalType -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;目标方法执行以后...&quot;</span>);</span><br><span class="line">                &#125;);<span class="comment">// 目标方法执行之后</span></span><br><span class="line">        <span class="comment">//上面执行不花时间。</span></span><br><span class="line">        <span class="keyword">return</span> voidMono; <span class="comment">//看清楚返回的是谁！！！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第十六节R2DBC"><a href="#第十六节R2DBC" class="headerlink" title="第十六节	R2DBC"></a>第十六节	R2DBC</h2><h3 id="16-1R2DBC简介"><a href="#16-1R2DBC简介" class="headerlink" title="16.1	R2DBC简介"></a>16.1	R2DBC简介</h3><ul>
<li><p><strong>R2DBC</strong>：响应式关系数据库连接项目为关系数据库带来了响应式编程 API</p>
<ul>
<li>基于 <strong>Reactive</strong> <strong>Streams</strong> 规范</li>
<li>适用于关系数据库</li>
<li>支持可扩展的解决方案</li>
<li>提供开放规范</li>
</ul>
</li>
<li><p><strong>构建项目</strong></p>
<ul>
<li><p>导入依赖</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.asyncer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>r2dbc-mysql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置数据库</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">MySqlConnectionConfiguration</span> <span class="variable">configuration</span> <span class="operator">=</span> MySqlConnectionConfiguration.builder()</span><br><span class="line">            .host(<span class="string">&quot;localhost&quot;</span>)</span><br><span class="line">            .port(<span class="number">3306</span>)</span><br><span class="line">            .username(<span class="string">&quot;root&quot;</span>)</span><br><span class="line">            .password(<span class="string">&quot;123456&quot;</span>)</span><br><span class="line">            .database(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">            .build();</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取连接工厂</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">MySqlConnectionFactory</span> <span class="variable">connectionFactory</span> <span class="operator">=</span> MySqlConnectionFactory.from(configuration);</span><br></pre></td></tr></table></figure>

</li>
<li><p>数据发布</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Mono.from(connectionFactory.create())</span><br><span class="line">    .flatMapMany(connection -&gt;</span><br><span class="line">            connection</span><br><span class="line">                    .createStatement(<span class="string">&quot;select * from t_author where id=?id and name=?name&quot;</span>)</span><br><span class="line">                    .bind(<span class="string">&quot;id&quot;</span>,<span class="number">1L</span>) <span class="comment">//具名参数</span></span><br><span class="line">                    .bind(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">                    .execute()</span><br><span class="line">    ).flatMap(result -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> result.map(readable -&gt; &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> readable.get(<span class="string">&quot;id&quot;</span>, Long.class);</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> readable.get(<span class="string">&quot;name&quot;</span>, String.class);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TAuthor</span>(id, name);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe(tAuthor -&gt; System.out.println(<span class="string">&quot;tAuthor = &quot;</span> + tAuthor))</span><br><span class="line">;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="16-2Spring-Data-R2DBC"><a href="#16-2Spring-Data-R2DBC" class="headerlink" title="16.2	Spring Data R2DBC"></a>16.2	Spring Data R2DBC</h3><ul>
<li><p><strong>SpringBoot整合R2BDC</strong></p>
<ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.asyncer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>r2dbc-mysql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-r2dbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写配置</p>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">r2dbc:</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">r2dbc:mysql://localhost:3306/test</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">test</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>数据访问层使用</strong></p>
<ul>
<li><p>定义接口</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AuthorRepositories</span> <span class="keyword">extends</span> <span class="title class_">R2dbcRepository</span>&lt;TAuthor,Long&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    Flux&lt;TAuthor&gt; <span class="title function_">findAllByIdInAndNameLike</span><span class="params">(Collection&lt;Long&gt; id, String name)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Query(&quot;select * from t_author&quot;)</span> <span class="comment">//自定义query注解，指定sql语句</span></span><br><span class="line">    Flux&lt;TAuthor&gt; <span class="title function_">findHaha</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义转换器</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ReadingConverter</span> <span class="comment">//读取数据库数据的时候,把row转成 TBook</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;Row, TBook&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> TBook <span class="title function_">convert</span><span class="params">(Row source)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(source == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//自定义结果集的封装</span></span><br><span class="line">        <span class="type">TBook</span> <span class="variable">tBook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TBook</span>();</span><br><span class="line"></span><br><span class="line">        tBook.setId(source.get(<span class="string">&quot;id&quot;</span>, Long.class));</span><br><span class="line">        tBook.setTitle(source.get(<span class="string">&quot;title&quot;</span>, String.class));</span><br><span class="line"></span><br><span class="line">        <span class="type">Long</span> <span class="variable">author_id</span> <span class="operator">=</span> source.get(<span class="string">&quot;author_id&quot;</span>, Long.class);</span><br><span class="line">        tBook.setAuthorId(author_id);</span><br><span class="line">        <span class="comment">//        tBook.setPublishTime(source.get(&quot;publish_time&quot;, Instant.class));</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">TAuthor</span> <span class="variable">tAuthor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TAuthor</span>();</span><br><span class="line">        tAuthor.setId(author_id);</span><br><span class="line">        tAuthor.setName(source.get(<span class="string">&quot;name&quot;</span>, String.class));</span><br><span class="line"></span><br><span class="line">        tBook.setAuthor(tAuthor);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置生效</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableR2dbcRepositories</span> <span class="comment">//开启 R2dbc 仓库功能；jpa</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R2DbcConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//替换容器中原来的</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="keyword">public</span> R2dbcCustomConversions <span class="title function_">conversions</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把我们的转换器加入进去； 效果新增了我们的 Converter</span></span><br><span class="line">        <span class="keyword">return</span> R2dbcCustomConversions.of(MySqlDialect.INSTANCE,<span class="keyword">new</span> <span class="title class_">BookConverter</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="16-3RBAC-SOL"><a href="#16-3RBAC-SOL" class="headerlink" title="16.3	RBAC-SOL"></a>16.3	RBAC-SOL</h3><ul>
<li><p><strong>一对一查询</strong></p>
<ul>
<li><p>自定义转换器</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">R2dbcCustomConversions <span class="title function_">r2dbcCustomConversions</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;Converter&lt;?, ?&gt;&gt; converters = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    converters.add(<span class="keyword">new</span> <span class="title class_">BookConverter</span>());</span><br><span class="line">    <span class="keyword">return</span> R2dbcCustomConversions.of(MySqlDialect.INSTANCE, converters);</span><br><span class="line">&#125;</span><br><span class="line">bookRepostory.hahaBook(<span class="number">1L</span>)</span><br><span class="line">        .subscribe(tBook -&gt; System.out.println(<span class="string">&quot;tBook = &quot;</span> + tBook));</span><br></pre></td></tr></table></figure>
</li>
<li><p>编程封装：使用 <strong>DatabaseClient</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">databaseClient.sql(<span class="string">&quot;select b.*,t.name as name from t_book b &quot;</span> +</span><br><span class="line">            <span class="string">&quot;LEFT JOIN t_author t on b.author_id = t.id &quot;</span> +</span><br><span class="line">            <span class="string">&quot;WHERE b.id = ?&quot;</span>)</span><br><span class="line">    .bind(<span class="number">0</span>, <span class="number">1L</span>)</span><br><span class="line">    .fetch()</span><br><span class="line">    .all()</span><br><span class="line">    .map(row-&gt; &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> row.get(<span class="string">&quot;id&quot;</span>).toString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">title</span> <span class="operator">=</span> row.get(<span class="string">&quot;title&quot;</span>).toString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">author_id</span> <span class="operator">=</span> row.get(<span class="string">&quot;author_id&quot;</span>).toString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> row.get(<span class="string">&quot;name&quot;</span>).toString();</span><br><span class="line">        <span class="type">TBook</span> <span class="variable">tBook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TBook</span>();</span><br><span class="line"></span><br><span class="line">        tBook.setId(Long.parseLong(id));</span><br><span class="line">        tBook.setTitle(title);</span><br><span class="line"></span><br><span class="line">        <span class="type">TAuthor</span> <span class="variable">tAuthor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TAuthor</span>();</span><br><span class="line">        tAuthor.setName(name);</span><br><span class="line">        tAuthor.setId(Long.parseLong(author_id));</span><br><span class="line"></span><br><span class="line">        tBook.setAuthor(tAuthor);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> tBook;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe(tBook -&gt; System.out.println(<span class="string">&quot;tBook = &quot;</span> + tBook));</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>一对多查询</strong>：使用底层 <strong>API</strong> <strong>DatabaseClient</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Flux&lt;TAuthor&gt; flux = databaseClient.sql(<span class="string">&quot;select a.id aid,a.name,b.* from t_author a  &quot;</span> +</span><br><span class="line">                <span class="string">&quot;left join t_book b on a.id = b.author_id &quot;</span> +</span><br><span class="line">                <span class="string">&quot;order by a.id&quot;</span>)</span><br><span class="line">        .fetch()</span><br><span class="line">        .all()</span><br><span class="line">        .bufferUntilChanged(rowMap -&gt; Long.parseLong(rowMap.get(<span class="string">&quot;aid&quot;</span>).toString()))</span><br><span class="line">        .map(list -&gt; &#123;</span><br><span class="line">            <span class="type">TAuthor</span> <span class="variable">tAuthor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TAuthor</span>();</span><br><span class="line">            Map&lt;String, Object&gt; map = list.get(<span class="number">0</span>);</span><br><span class="line">            tAuthor.setId(Long.parseLong(map.get(<span class="string">&quot;aid&quot;</span>).toString()));</span><br><span class="line">            tAuthor.setName(map.get(<span class="string">&quot;name&quot;</span>).toString());、</span><br><span class="line"></span><br><span class="line">            <span class="comment">//查到的所有图书</span></span><br><span class="line">            List&lt;TBook&gt; tBooks = list.stream()</span><br><span class="line">                    .map(ele -&gt; &#123;</span><br><span class="line">                        <span class="type">TBook</span> <span class="variable">tBook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TBook</span>();</span><br><span class="line"></span><br><span class="line">                        tBook.setId(Long.parseLong(ele.get(<span class="string">&quot;id&quot;</span>).toString()));</span><br><span class="line">                        tBook.setAuthorId(Long.parseLong(ele.get(<span class="string">&quot;author_id&quot;</span>).toString()));</span><br><span class="line">                        tBook.setTitle(ele.get(<span class="string">&quot;title&quot;</span>).toString());</span><br><span class="line">                        <span class="keyword">return</span> tBook;</span><br><span class="line">                    &#125;)</span><br><span class="line">                    .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">            tAuthor.setBooks(tBooks);</span><br><span class="line">            <span class="keyword">return</span> tAuthor;</span><br><span class="line">        &#125;);<span class="comment">//Long 数字缓存 -127 - 127；// 对象比较需要自己写好equals方法</span></span><br><span class="line">flux.subscribe(tAuthor -&gt; System.out.println(<span class="string">&quot;tAuthor = &quot;</span> + tAuthor));</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="第十七节Spring-Security-Reactive"><a href="#第十七节Spring-Security-Reactive" class="headerlink" title="第十七节	Spring Security Reactive"></a>第十七节	Spring Security Reactive</h2><h3 id="17-1Spring-Security-Reactive简介"><a href="#17-1Spring-Security-Reactive简介" class="headerlink" title="17.1	Spring Security Reactive简介"></a>17.1	Spring Security Reactive简介</h3><ul>
<li><p><strong>应用安全</strong></p>
<ul>
<li>网络攻击：DDos、CSRF、XSS、SQL注入</li>
<li>控制权限<ul>
<li>登录的用户能干什么</li>
<li>用户登录系统以后要控制住用户的所有行为，防止越权</li>
</ul>
</li>
<li>传输加密：https，X509</li>
<li>认证：OAuth2.0，JWT</li>
</ul>
</li>
<li><p><strong>RBAC权限模型</strong>： 基于角色的访问控制</p>
<ul>
<li>一个网站有很多用户</li>
<li>每个用户可以有很多角色</li>
<li>一个角色可以关联很多权限</li>
</ul>
</li>
</ul>
<h3 id="17-2Spring-Security-Reactive开发"><a href="#17-2Spring-Security-Reactive开发" class="headerlink" title="17.2	Spring Security Reactive开发"></a>17.2	Spring Security Reactive开发</h3><ul>
<li><p><strong>认证流程</strong></p>
<ul>
<li><p>配置类</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableReactiveMethodSecurity</span> <span class="comment">//开启响应式的基于方法级别的权限控制</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppSecurityConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ReactiveUserDetailsService appReactiveUserDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    SecurityWebFilterChain <span class="title function_">springSecurityFilterChain</span><span class="params">(ServerHttpSecurity http)</span> &#123;</span><br><span class="line">        <span class="comment">//1、定义哪些请求需要认证，哪些不需要</span></span><br><span class="line">        http.authorizeExchange(authorize -&gt; &#123;</span><br><span class="line">            <span class="comment">//1.1、允许所有人都访问静态资源；</span></span><br><span class="line">            authorize.matchers(PathRequest.toStaticResources()</span><br><span class="line">                    .atCommonLocations()).permitAll();</span><br><span class="line">            <span class="comment">//1.2、剩下的所有请求都需要认证（登录）</span></span><br><span class="line">            authorize.anyExchange().authenticated();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、开启默认的表单登录</span></span><br><span class="line">        http.formLogin(formLoginSpec -&gt; &#123;</span><br><span class="line"><span class="comment">//            formLoginSpec.loginPage(&quot;/haha&quot;);</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、安全控制:</span></span><br><span class="line">        http.csrf(csrfSpec -&gt; &#123;</span><br><span class="line">            csrfSpec.disable();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、配置 认证规则： 如何去数据库中查询到用户;</span></span><br><span class="line">        http.authenticationManager(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">UserDetailsRepositoryReactiveAuthenticationManager</span>(</span><br><span class="line">                        appReactiveUserDetailsService)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构建出安全配置</span></span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">PasswordEncoder</span> <span class="variable">encoder</span> <span class="operator">=</span> PasswordEncoderFactories.createDelegatingPasswordEncoder();</span><br><span class="line">        <span class="keyword">return</span> encoder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>服务层</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>  <span class="comment">// 来定义如何去数据库中按照用户名查用户</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppReactiveUserDetailsService</span> <span class="keyword">implements</span> <span class="title class_">ReactiveUserDetailsService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DatabaseClient databaseClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义如何按照用户名去数据库查询用户信息</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    PasswordEncoder passwordEncoder;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;UserDetails&gt; <span class="title function_">findByUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="comment">//从数据库查询用户、角色、权限所有数据的逻辑</span></span><br><span class="line">        Mono&lt;UserDetails&gt; userDetailsMono = databaseClient.sql(<span class="string">&quot;select u.*,r.id rid,r.name,r.value,pm.id pid,pm.value pvalue,pm.description &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;from t_user u &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;left join t_user_role ur on ur.user_id=u.id &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;left join t_roles r on r.id = ur.role_id &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;left join t_role_perm rp on rp.role_id=r.id &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;left join t_perm pm on rp.perm_id=pm.id &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;where u.username = ? limit 1&quot;</span>)</span><br><span class="line">                .bind(<span class="number">0</span>, username)</span><br><span class="line">                .fetch()</span><br><span class="line">                .one()<span class="comment">// all()</span></span><br><span class="line">                .map(map -&gt; &#123;</span><br><span class="line">                    <span class="type">UserDetails</span> <span class="variable">details</span> <span class="operator">=</span> User.builder()</span><br><span class="line">                            .username(username)</span><br><span class="line">                            .password(map.get(<span class="string">&quot;password&quot;</span>).toString())</span><br><span class="line">                            <span class="comment">//自动调用密码加密器把前端传来的明文 encode</span></span><br><span class="line"><span class="comment">//                            .passwordEncoder(str-&gt; passwordEncoder.encode(str)) //为啥？？？</span></span><br><span class="line">                            <span class="comment">//权限</span></span><br><span class="line"><span class="comment">//                            .authorities(new SimpleGrantedAuthority(&quot;ROLE_delete&quot;)) //默认不成功</span></span><br><span class="line">                            .roles(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;sale&quot;</span>,<span class="string">&quot;haha&quot;</span>,<span class="string">&quot;delete&quot;</span>) <span class="comment">//ROLE成功</span></span><br><span class="line">                            .build();</span><br><span class="line">                    <span class="comment">//角色和权限都被封装成 SimpleGrantedAuthority</span></span><br><span class="line">                    <span class="comment">// 角色有 ROLE_ 前缀， 权限没有</span></span><br><span class="line">                    <span class="comment">// hasRole：hasAuthority</span></span><br><span class="line">                    <span class="keyword">return</span> details;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">return</span> userDetailsMono;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>授权</strong></p>
<ul>
<li><p>控制层</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasRole(&#x27;admin&#x27;)&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;String&gt; <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Mono.just(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//复杂的SpEL表达式</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasRole(&#x27;delete&#x27;)&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/world&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;String&gt; <span class="title function_">world</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Mono.just(<span class="string">&quot;world!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置类</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableReactiveMethodSecurity</span> <span class="comment">//开启响应式 的 基于方法级别的权限控制</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppSecurityConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ReactiveUserDetailsService appReactiveUserDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    SecurityWebFilterChain <span class="title function_">springSecurityFilterChain</span><span class="params">(ServerHttpSecurity http)</span> &#123;</span><br><span class="line">        <span class="comment">//1、定义哪些请求需要认证，哪些不需要</span></span><br><span class="line">        http.authorizeExchange(authorize -&gt; &#123;</span><br><span class="line">            <span class="comment">//1.1、允许所有人都访问静态资源；</span></span><br><span class="line">            authorize.matchers(PathRequest.toStaticResources()</span><br><span class="line">                    .atCommonLocations()).permitAll();</span><br><span class="line">            <span class="comment">//1.2、剩下的所有请求都需要认证（登录）</span></span><br><span class="line">            authorize.anyExchange().authenticated();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、开启默认的表单登录</span></span><br><span class="line">        http.formLogin(formLoginSpec -&gt; &#123;</span><br><span class="line"><span class="comment">//            formLoginSpec.loginPage(&quot;/haha&quot;);</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、安全控制:</span></span><br><span class="line">        http.csrf(csrfSpec -&gt; &#123;</span><br><span class="line">            csrfSpec.disable();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、配置 认证规则： 如何去数据库中查询到用户;</span></span><br><span class="line">        http.authenticationManager(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">UserDetailsRepositoryReactiveAuthenticationManager</span>(</span><br><span class="line">                        appReactiveUserDetailsService)</span><br><span class="line">        );</span><br><span class="line">        <span class="comment">//构建出安全配置</span></span><br><span class="line">        <span class="keyword">return</span> http.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">PasswordEncoder</span> <span class="variable">encoder</span> <span class="operator">=</span> PasswordEncoderFactories.createDelegatingPasswordEncoder();</span><br><span class="line">        <span class="keyword">return</span> encoder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>RabbitMQ</title>
    <url>/2024/07/26/RabbitMQ/</url>
    <content><![CDATA[<h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><h2 id="第一节RabbitMQ基本概念"><a href="#第一节RabbitMQ基本概念" class="headerlink" title="第一节	RabbitMQ基本概念"></a>第一节	RabbitMQ基本概念</h2><h3 id="1-1消息队列"><a href="#1-1消息队列" class="headerlink" title="1.1	消息队列"></a>1.1	消息队列</h3><ul>
<li><p><strong>消息队列</strong>：实现应用程序和应用程序之间通信的中间件产品</p>
</li>
<li><p><strong>消息队列的功能</strong></p>
<ul>
<li>功能解耦</li>
<li>快速响应</li>
<li>削峰限流</li>
<li>便于扩展</li>
</ul>
</li>
<li><p><strong>底层通信标准</strong></p>
<ul>
<li><strong>AMQP</strong>：通用协议，<strong>IBM</strong> 公司研发</li>
<li><strong>JMS</strong>：专门为 <strong>Java</strong> 语言服务，<strong>SUN</strong> 公司研发，一组由 <strong>Java</strong> 接口组成的 <strong>Java</strong> 标准</li>
</ul>
</li>
<li><p><strong>底层通信标准对比</strong></p>
<ul>
<li>七层网络模型<ul>
<li><strong>AMQP</strong> 对应传输层与会话层</li>
<li><strong>JMS</strong> 对应应用层</li>
</ul>
</li>
<li>消息模型<ul>
<li><strong>AMQP</strong> 支持多种消息模型，包括点对点和发布&#x2F;订阅</li>
<li><strong>JMS</strong> 主要支持点对点和发布&#x2F;订阅两种消息模型</li>
</ul>
</li>
<li>支持的编程语言和平台<ul>
<li><strong>AMQP</strong> 支持多种编程语言和平台，包括 <strong>Java</strong>、<strong>C++<strong>、</strong>Python</strong> 等</li>
<li><strong>JMS</strong> 主要针对 <strong>Java</strong> 平台，因此在其他编程语言和平台上的支持相对较少</li>
</ul>
</li>
<li>可靠性<ul>
<li><strong>AMQP</strong> 提供了强大的消息可靠性保证，包括消息持久化、事务性消息和消息确认机制</li>
<li><strong>JMS</strong> 也支持消息持久化和事务性消息，但具体实现取决于消息传递系统的提供者</li>
</ul>
</li>
<li>传输协议<ul>
<li><strong>AMQP</strong> 使用二进制协议进行消息传递，提供了高效、可靠的消息投递机制</li>
<li><strong>JMS</strong> 使用一种面向文本的协议，消息的传输效率可能较低</li>
</ul>
</li>
<li>扩展性和兼容性<ul>
<li><strong>AMQP</strong> 具有很好的拓展性和兼容性，可以在不同的消息代理之间交互操作</li>
<li><strong>JMS</strong> 在 <strong>Java</strong> 环境中有较好的拓展性和兼容性，但在与非 <strong>Java</strong> 环境集成时受到限制</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="1-2RabbitMQ概述"><a href="#1-2RabbitMQ概述" class="headerlink" title="1.2	RabbitMQ概述"></a>1.2	RabbitMQ概述</h3><ul>
<li><p><strong>RabbitMQ</strong>：基于 <strong>AMQP</strong>、由 <strong>Erlang</strong> 语言开发的消息队列产品</p>
</li>
<li><p><strong>RabbitMQ体系结构</strong></p>
<ul>
<li><strong>Producer</strong>：消息的发送端，生产者</li>
<li><strong>Consumer</strong>：消息的接收端，消费者</li>
<li><strong>Connection</strong>：生产者到消息队列主体服务器之间的TCP连接</li>
<li><strong>Channel</strong>：在一个已经建立的 <strong>Connection</strong> 中建立的逻辑连接，每个 <strong>Channel</strong> 都有自己的 <strong>id</strong>，实现 <strong>Connection</strong> 复用</li>
<li><strong>Broker</strong>：主体服务器本身，负责接受消息和分发消息</li>
<li><strong>Virtual Host</strong>：每一个 <strong>Virtual</strong> <strong>Host</strong> 就是一个虚拟分组，用户在自己的 <strong>Virtual</strong> <strong>Host</strong> 中使用 <strong>RabbitMQ</strong> 组件</li>
<li><strong>Enchange</strong>：交换机，是消息达到 <strong>Broker</strong> 的第一站</li>
<li><strong>Queue</strong>：队列，是消息的容器，消息放在这里等待被消费端取走</li>
</ul>
</li>
<li><p><strong>HelloWorld</strong></p>
<ul>
<li><p>创建项目</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.20.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>生产者</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建连接工厂  </span></span><br><span class="line"><span class="type">ConnectionFactory</span> <span class="variable">connectionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();  </span><br><span class="line"><span class="comment">// 设置主机地址  </span></span><br><span class="line">connectionFactory.setHost(<span class="string">&quot;192.168.200.100&quot;</span>);  </span><br><span class="line"><span class="comment">// 设置连接端口号：默认为 5672</span></span><br><span class="line">connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line"><span class="comment">// 虚拟主机名称：默认为 /</span></span><br><span class="line">connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"><span class="comment">// 设置连接用户名；默认为guest  </span></span><br><span class="line">connectionFactory.setUsername(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line"><span class="comment">// 设置连接密码；默认为guest  </span></span><br><span class="line">connectionFactory.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"><span class="comment">// 创建连接  </span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> connectionFactory.newConnection();  </span><br><span class="line"><span class="comment">// 创建频道  </span></span><br><span class="line"><span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();  </span><br><span class="line"><span class="comment">// 声明（创建）队列  </span></span><br><span class="line"><span class="comment">// queue      参数1：队列名称  </span></span><br><span class="line"><span class="comment">// durable    参数2：是否定义持久化队列，当 MQ 重启之后还在  </span></span><br><span class="line"><span class="comment">// exclusive  参数3：是否独占本次连接。若独占，只能有一个消费者监听这个队列且 Connection 关闭时删除这个队列  </span></span><br><span class="line"><span class="comment">// autoDelete 参数4：是否在不使用的时候自动删除队列，也就是在没有Consumer时自动删除  </span></span><br><span class="line"><span class="comment">// arguments  参数5：队列其它参数  </span></span><br><span class="line">channel.queueDeclare(<span class="string">&quot;simple_queue&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);  </span><br><span class="line"><span class="comment">// 要发送的信息  </span></span><br><span class="line"><span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;你好；小兔子！&quot;</span>;  </span><br><span class="line"><span class="comment">// 参数1：交换机名称,如果没有指定则使用默认Default Exchange  </span></span><br><span class="line"><span class="comment">// 参数2：路由key,简单模式可以传递队列名称  </span></span><br><span class="line"><span class="comment">// 参数3：配置信息  </span></span><br><span class="line"><span class="comment">// 参数4：消息内容  </span></span><br><span class="line">channel.basicPublish(<span class="string">&quot;&quot;</span>, <span class="string">&quot;simple_queue&quot;</span>, <span class="literal">null</span>, message.getBytes());  </span><br><span class="line"><span class="comment">// 关闭资源  </span></span><br><span class="line">channel.close();  </span><br><span class="line">connection.close();  </span><br></pre></td></tr></table></figure>
</li>
<li><p>消费者</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.创建连接工厂  </span></span><br><span class="line"><span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();  </span><br><span class="line"><span class="comment">// 2. 设置参数  </span></span><br><span class="line">factory.setHost(<span class="string">&quot;192.168.200.100&quot;</span>);  </span><br><span class="line">factory.setPort(<span class="number">5672</span>);  </span><br><span class="line">factory.setVirtualHost(<span class="string">&quot;/&quot;</span>);  </span><br><span class="line">factory.setUsername(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">factory.setPassword(<span class="string">&quot;123456&quot;</span>);  </span><br><span class="line"><span class="comment">// 3. 创建连接 Connection        </span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();  </span><br><span class="line"><span class="comment">// 4. 创建Channel  </span></span><br><span class="line"><span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();  </span><br><span class="line"><span class="comment">// 5. 创建队列  </span></span><br><span class="line"><span class="comment">// 如果没有一个名字叫simple_queue的队列，则会创建该队列，如果有则不会创建  </span></span><br><span class="line"><span class="comment">// 参数1. queue：队列名称  </span></span><br><span class="line"><span class="comment">// 参数2. durable：是否持久化。如果持久化，则当MQ重启之后还在  </span></span><br><span class="line"><span class="comment">// 参数3. exclusive：是否独占。  </span></span><br><span class="line"><span class="comment">// 参数4. autoDelete：是否自动删除。当没有Consumer时，自动删除掉  </span></span><br><span class="line"><span class="comment">// 参数5. arguments：其它参数。  </span></span><br><span class="line">channel.queueDeclare(<span class="string">&quot;simple_queue&quot;</span>,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);  </span><br><span class="line"><span class="comment">// 接收消息  </span></span><br><span class="line"><span class="type">DefaultConsumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;  </span><br><span class="line">    <span class="comment">// 回调方法,当收到消息后，会自动执行该方法  </span></span><br><span class="line">    <span class="comment">// 参数1. consumerTag：标识  </span></span><br><span class="line">    <span class="comment">// 参数2. envelope：获取一些信息，交换机，路由key...  </span></span><br><span class="line">    <span class="comment">// 参数3. properties：配置信息  </span></span><br><span class="line">    <span class="comment">// 参数4. body：数据  </span></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;consumerTag：&quot;</span>+consumerTag);  </span><br><span class="line">        System.out.println(<span class="string">&quot;Exchange：&quot;</span>+envelope.getExchange());  </span><br><span class="line">        System.out.println(<span class="string">&quot;RoutingKey：&quot;</span>+envelope.getRoutingKey());  </span><br><span class="line">        System.out.println(<span class="string">&quot;properties：&quot;</span>+properties);  </span><br><span class="line">        System.out.println(<span class="string">&quot;body：&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(body));  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;;  </span><br><span class="line"><span class="comment">// 参数1. queue：队列名称  </span></span><br><span class="line"><span class="comment">// 参数2. autoAck：是否自动确认，类似咱们发短信，发送成功会收到一个确认消息  </span></span><br><span class="line"><span class="comment">// 参数3. callback：回调对象  </span></span><br><span class="line"><span class="comment">// 消费者类似一个监听程序，主要是用来监听消息  </span></span><br><span class="line">channel.basicConsume(<span class="string">&quot;simple_queue&quot;</span>,<span class="literal">true</span>,consumer);  </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="1-3RabbitMQ工作模式"><a href="#1-3RabbitMQ工作模式" class="headerlink" title="1.3	RabbitMQ工作模式"></a>1.3	RabbitMQ工作模式</h3><ul>
<li><strong>Work Queues</strong><ul>
<li>多个消费者监听同一个队列，各消费者之间对同一个消息是竞争的关系</li>
<li>适用于任务较重或任务较多的情况，多消费者分摊任务可以提高消息处理的效率</li>
</ul>
</li>
<li><strong>Publish&#x2F;Subscribe</strong><ul>
<li>生产者把消息发送到交换机</li>
<li>交换机有如下3种常见类型<ul>
<li><strong>Fanout</strong>：广播，将消息发送给所有绑定到交换机的队列</li>
<li><strong>Direct</strong>：定向，把消息交给符合指定路由键的队列</li>
<li><strong>Topic</strong>：通配符，把消息交给符合路由模式的队列</li>
</ul>
</li>
<li>队列直接和交换机绑定</li>
</ul>
</li>
<li><strong>Routing</strong><ul>
<li>通过路由绑定的方式，把交换机和队列关联起来</li>
<li>交换机和队列通过路由键进行绑定</li>
<li>生产者发送消息时不仅要指定交换机，还要指定路由键</li>
<li>交换机接收到消息会发送到路由键绑定的队列</li>
</ul>
</li>
<li><strong>Topics</strong><ul>
<li>让队列在绑定路由键的时候使用通配符</li>
</ul>
</li>
<li><strong>RPC</strong><ul>
<li>远程过程调用，本质上是同步调用</li>
</ul>
</li>
</ul>
<h3 id="1-4SpringBoot整合RabbitMQ"><a href="#1-4SpringBoot整合RabbitMQ" class="headerlink" title="1.4	SpringBoot整合RabbitMQ"></a>1.4	SpringBoot整合RabbitMQ</h3><ul>
<li><p><strong>搭建项目</strong></p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>编写配置</strong></p>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.200</span><span class="number">.100</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.atguigu.mq.listener.MyMessageListener:</span> <span class="string">info</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>生产者</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">rabbitTemplate.convertAndSend(  </span><br><span class="line">                <span class="string">&quot;exchange.direct.order&quot;</span>,   </span><br><span class="line">                <span class="string">&quot;order&quot;</span>,   </span><br><span class="line">                <span class="string">&quot;Hello rabbitmq&quot;</span>); </span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>消费者</strong></p>
<ul>
<li><p><strong>bindings</strong> 属性：指定交换机和队列之间的绑定关系，并指定监听队列</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(value = &quot;queue.order&quot;, durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(value = &quot;exchange.direct.order&quot;),</span></span><br><span class="line"><span class="meta">        key = &#123;&quot;order&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processMessage</span><span class="params">(String dateString,Message message,Channel channel)</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>queue</strong> 属性：只指定监听队列</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &#123;&quot;queue.order&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processMessage</span><span class="params">(String dateString,Message message,Channel channel)</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第二节RabbitMQ机制"><a href="#第二节RabbitMQ机制" class="headerlink" title="第二节	RabbitMQ机制"></a>第二节	RabbitMQ机制</h2><h3 id="2-1消息可靠性投递"><a href="#2-1消息可靠性投递" class="headerlink" title="2.1	消息可靠性投递"></a>2.1	消息可靠性投递</h3><ul>
<li><p><strong>故障情况</strong></p>
<ul>
<li>消息没有发送到消息队列上</li>
<li>消息队列服务器宕机</li>
<li>消费端出现问题</li>
</ul>
</li>
<li><p><strong>解决方案</strong></p>
<ul>
<li><p>消息没有发送到消息队列</p>
<ul>
<li><p>在生产者端进行确认，分别针对交换机和队列来确认，如果没有成功发送到消息队列服务器上，那就尝试重新发送</p>
<ul>
<li><p>编写配置</p>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">publisher-confirm-type:</span> <span class="string">CORRELATED</span> <span class="comment"># 交换机的确认</span></span><br><span class="line">    <span class="attr">publisher-returns:</span> <span class="literal">true</span> <span class="comment"># 队列的确认</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置类</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MQProducerAckConfig</span> <span class="keyword">implements</span> <span class="title class_">RabbitTemplate</span>.ConfirmCallback, RabbitTemplate.ReturnsCallback&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        rabbitTemplate.setConfirmCallback(<span class="built_in">this</span>);</span><br><span class="line">        rabbitTemplate.setReturnsCallback(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">confirm</span><span class="params">(CorrelationData correlationData, <span class="type">boolean</span> ack, String cause)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (ack) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;消息发送到交换机成功！数据：&quot;</span> + correlationData);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;消息发送到交换机失败！数据：&quot;</span> + correlationData + <span class="string">&quot; 原因：&quot;</span> + cause);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnedMessage</span><span class="params">(ReturnedMessage returned)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;消息主体: &quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(returned.getMessage().getBody()));</span><br><span class="line">        log.info(<span class="string">&quot;应答码: &quot;</span> + returned.getReplyCode());</span><br><span class="line">        log.info(<span class="string">&quot;描述：&quot;</span> + returned.getReplyText());</span><br><span class="line">        log.info(<span class="string">&quot;消息使用的交换器 exchange : &quot;</span> + returned.getExchange());</span><br><span class="line">        log.info(<span class="string">&quot;消息使用的路由键 routing : &quot;</span> + returned.getRoutingKey());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>为目标交换机指定备份交换机，当目标交换机投递失败时，把消息投递至备份交换机</p>
<ul>
<li>创建备份交换机，类型为 <strong>fanout</strong></li>
<li>创建队列，绑定交换机</li>
</ul>
</li>
</ul>
</li>
<li><p>消息队列服务器宕机</p>
<ul>
<li>消息持久化到硬盘上，哪怕服务器重启也不会导致消息丢失<ul>
<li>在后台管理界面创建交换机和队列时，默认就是持久化的模式</li>
</ul>
</li>
</ul>
</li>
<li><p>消费端出现问题</p>
<ul>
<li><p>消费端消费消息成功，给服务器返回ACK信息，然后消息队列删除该消息，否则给服务器端返回NACK信息，同时把消息恢复为待消费的状态</p>
<ul>
<li><p>编写配置</p>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">manual</span> <span class="comment"># 把消息确认模式改为手动确认</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>消费者监听器</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修饰监听方法</span></span><br><span class="line"><span class="meta">@RabbitListener(</span></span><br><span class="line"><span class="meta">    // 设置绑定关系</span></span><br><span class="line"><span class="meta">    bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        // 配置队列信息：durable 设置为 true 表示队列持久化；autoDelete 设置为 false 表示关闭自动删除</span></span><br><span class="line"><span class="meta">        value = @Queue(value = QUEUE_NAME, durable = &quot;true&quot;, autoDelete = &quot;false&quot;),</span></span><br><span class="line"><span class="meta">        // 配置交换机信息：durable 设置为 true 表示队列持久化；autoDelete 设置为 false 表示关闭自动删除</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(value = EXCHANGE_DIRECT, durable = &quot;true&quot;, autoDelete = &quot;false&quot;),</span></span><br><span class="line"><span class="meta">        // 配置路由键信息</span></span><br><span class="line"><span class="meta">        key = &#123;ROUTING_KEY&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processMessage</span><span class="params">(String dataString, Message message, Channel channel)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1、获取当前消息的 deliveryTag 值备用</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">deliveryTag</span> <span class="operator">=</span> message.getMessageProperties().getDeliveryTag();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 2、正常业务操作</span></span><br><span class="line">        log.info(<span class="string">&quot;消费端接收到消息内容：&quot;</span> + dataString);</span><br><span class="line">        <span class="comment">// 3、给 RabbitMQ 服务器返回 ACK 确认信息</span></span><br><span class="line">        channel.basicAck(deliveryTag, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">// 4、获取信息，看当前消息是否曾经被投递过</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">redelivered</span> <span class="operator">=</span> message.getMessageProperties().getRedelivered();</span><br><span class="line">        <span class="keyword">if</span> (!redelivered) &#123;</span><br><span class="line">            <span class="comment">// 5、如果没有被投递过，那就重新放回队列，重新投递，再试一次</span></span><br><span class="line">            channel.basicNack(deliveryTag, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 6、如果已经被投递过，且这一次仍然进入了 catch 块，那么返回拒绝且不再放回队列</span></span><br><span class="line">            channel.basicReject(deliveryTag, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2-2消息端限流"><a href="#2-2消息端限流" class="headerlink" title="2.2	消息端限流"></a>2.2	消息端限流</h3><ul>
<li><p><strong>削峰限流的好处</strong></p>
<ul>
<li>在消息队列的协助下，峰值流量下降服务器运行更稳定</li>
<li>任务转移到相对空闲的时间段处理资源利用更充分</li>
</ul>
</li>
<li><p><strong>设置方式</strong></p>
<ul>
<li><p>编写配置</p>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span> <span class="comment"># 设置每次最多从消息队列服务器取回多少消息</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-3消息超时"><a href="#2-3消息超时" class="headerlink" title="2.3	消息超时"></a>2.3	消息超时</h3><ul>
<li><p><strong>设置过期时间</strong></p>
<ul>
<li>队列：这个队列中的消息全部使用同一个过期时间</li>
<li>消息：给具体的某个消息设定过期时间</li>
</ul>
</li>
<li><p><strong>设置方式</strong></p>
<ul>
<li><p>队列：客户端设置</p>
</li>
<li><p>消息：后置处理器</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、创建消息后置处理器对象  </span></span><br><span class="line"><span class="type">MessagePostProcessor</span> <span class="variable">messagePostProcessor</span> <span class="operator">=</span> (Message message) -&gt; &#123;  </span><br><span class="line">    <span class="comment">// 设定 TTL 时间，以毫秒为单位</span></span><br><span class="line">    message.getMessageProperties().setExpiration(<span class="string">&quot;5000&quot;</span>);  </span><br><span class="line">    <span class="keyword">return</span> message;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 2、发送消息  </span></span><br><span class="line">rabbitTemplate.convertAndSend(    </span><br><span class="line">        EXCHANGE_DIRECT,     </span><br><span class="line">        ROUTING_KEY,     </span><br><span class="line">        <span class="string">&quot;Hello atguigu&quot;</span>, messagePostProcessor); </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-4死信和死信队列"><a href="#2-4死信和死信队列" class="headerlink" title="2.4	死信和死信队列"></a>2.4	死信和死信队列</h3><ul>
<li><strong>死信</strong>：当一个消息无法被消费，它就变成了死信</li>
<li><strong>死信的来源</strong><ul>
<li>拒绝：消费者拒接消息，并且不把消息重新放入原目标队列</li>
<li>溢出：队列中消息数量到达限制</li>
<li>超时：消息到达超时时间未被消费</li>
</ul>
</li>
<li><strong>死信的处理方式</strong><ul>
<li>丢弃：对不重要的消息直接丢弃，不做处理</li>
<li>入库：把死信写入数据库，日后处理</li>
<li>监听：消息变成死信后进入死信队列，我们专门设置消费端监听死信队列，做后续处理</li>
</ul>
</li>
<li><strong>死信处理方式</strong><ul>
<li>创建死信交换机</li>
<li>创建死信队列</li>
<li>消费者监听死信</li>
</ul>
</li>
</ul>
<h3 id="2-5延迟队列"><a href="#2-5延迟队列" class="headerlink" title="2.5	延迟队列"></a>2.5	延迟队列</h3><ul>
<li><p><strong>延迟队列</strong>：延迟一段时间后，执行指定操作</p>
</li>
<li><p><strong>延迟队列的实现方式</strong></p>
<ul>
<li>借助消息超时时间和死信队列</li>
<li>安装插件</li>
</ul>
</li>
<li><p><strong>延迟插件</strong></p>
<ul>
<li><p>安装插件</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker inspect rabbitmq</span><br><span class="line">wget https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/download/v3.13.0/rabbitmq_delayed_message_exchange-3.13.0.ez</span><br><span class="line">mv rabbitmq_delayed_message_exchange-3.13.0.ez /var/lib/docker/volumes/rabbitmq-plugin/_data</span><br></pre></td></tr></table></figure>
</li>
<li><p>启用插件</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录进入容器内部</span></span><br><span class="line">docker exec -it rabbitmq /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">rabbitmq-plugins命令所在目录已经配置到<span class="variable">$PATH</span>环境变量中了，可以直接调用</span></span><br><span class="line">rabbitmq-plugins enable rabbitmq_delayed_message_exchange</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出Docker容器</span></span><br><span class="line">exit</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启Docker容器</span></span><br><span class="line">docker restart rabbitmq</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建交换机，类型为 <strong>x-delayed-message</strong></p>
</li>
<li><p>生产者</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">rabbitTemplate.convertAndSend(</span><br><span class="line">    EXCHANGE_DELAY,</span><br><span class="line">    ROUTING_KEY_DELAY,</span><br><span class="line">    <span class="string">&quot;测试基于插件的延迟消息 [&quot;</span> + <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;hh:mm:ss&quot;</span>).format(<span class="keyword">new</span> <span class="title class_">Date</span>()) + <span class="string">&quot;]&quot;</span>,</span><br><span class="line">    messageProcessor -&gt; &#123;</span><br><span class="line">        <span class="comment">// 设置延迟时间：以毫秒为单位</span></span><br><span class="line">        messageProcessor.getMessageProperties().setHeader(<span class="string">&quot;x-delay&quot;</span>, <span class="string">&quot;10000&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> messageProcessor;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-6事务消息"><a href="#2-6事务消息" class="headerlink" title="2.6	事务消息"></a>2.6	事务消息</h3><ul>
<li><p><strong>事务消息</strong></p>
<ul>
<li>在生产者端使用事务消息和消费端没有关系</li>
<li>在生产者端使用事务消息仅仅是控制事务内的消息是否发送</li>
<li>提交事务就把事务内所有消息都发送到交换机</li>
<li>回滚事务则事务内任何消息都不会被发送</li>
</ul>
</li>
<li><p><strong>使用事务消息</strong></p>
<ul>
<li><p>配置类</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RabbitTransactionManager <span class="title function_">transactionManager</span><span class="params">(CachingConnectionFactory connectionFactory)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RabbitTransactionManager</span>(connectionFactory);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RabbitTemplate <span class="title function_">rabbitTemplate</span><span class="params">(CachingConnectionFactory connectionFactory)</span> &#123;</span><br><span class="line">    <span class="type">RabbitTemplate</span> <span class="variable">rabbitTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>(connectionFactory);</span><br><span class="line">    rabbitTemplate.setChannelTransacted(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> rabbitTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>生产者</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、发送第一条消息</span></span><br><span class="line">rabbitTemplate.convertAndSend(EXCHANGE_NAME, ROUTING_KEY, <span class="string">&quot;I am a dragon(tx msg ~~~01)&quot;</span>);</span><br><span class="line"><span class="comment">// 2、抛出异常</span></span><br><span class="line">log.info(<span class="string">&quot;do bad:&quot;</span> + <span class="number">10</span> / <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 3、发送第二条消息</span></span><br><span class="line">rabbitTemplate.convertAndSend(EXCHANGE_NAME, ROUTING_KEY, <span class="string">&quot;I am a dragon(tx msg ~~~02)&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-7惰性队列"><a href="#2-7惰性队列" class="headerlink" title="2.7	惰性队列"></a>2.7	惰性队列</h3><ul>
<li><p><strong>惰性队列</strong>：以惰性模式运行的经典队列，队列中的消息会尽可能早地移动到磁盘，这些消息仅在消费者请求时加载到 <strong>RAM</strong> 中</p>
</li>
<li><p><strong>应用场景</strong></p>
<ul>
<li>消费者离线&#x2F;崩溃&#x2F;停机进行维护</li>
<li>突然出现消息进入高峰，生产者的速度超过了消费者</li>
<li>消费者比正常情况慢</li>
</ul>
</li>
<li><p><strong>设置惰性队列</strong></p>
<ul>
<li><p>基于策略方式</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录Docker容器</span></span><br><span class="line">docker exec -it rabbitmq /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行rabbitmqctl命令</span></span><br><span class="line">rabbitmqctl set_policy Lazy &quot;^lazy-queue$&quot; &#x27;&#123;&quot;queue-mode&quot;:&quot;lazy&quot;&#125;&#x27; --apply-to queues</span><br></pre></td></tr></table></figure>
</li>
<li><p>声明队列时使用参数</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Queue(value = QUEUE_NAME, durable = &quot;true&quot;, autoDelete = &quot;false&quot;, arguments = &#123;</span></span><br><span class="line"><span class="meta">	@Argument(name = &quot;x-queue-mode&quot;, value = &quot;lazy&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-8优先级队列"><a href="#2-8优先级队列" class="headerlink" title="2.8	优先级队列"></a>2.8	优先级队列</h3><ul>
<li><p><strong>优先级队列</strong></p>
<ul>
<li>默认情况：基于队列先进先出的特性，通常来说，先入队的先投递</li>
<li>设置优先级：优先级高的消息更大几率先投递</li>
</ul>
</li>
<li><p><strong>设置优先级</strong></p>
<ul>
<li><p>创建交换机</p>
</li>
<li><p>创建队列，设置 <strong>x-max-priority</strong> 优先级字段，类型为 <strong>Number</strong></p>
</li>
<li><p>绑定交换机和队列</p>
</li>
<li><p>生产者</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">rabbitTemplate.convertAndSend(EXCHANGE_PRIORITY, ROUTING_KEY_PRIORITY, <span class="string">&quot;I am a message with priority 1.&quot;</span>, message-&gt;&#123;</span><br><span class="line">        message.getMessageProperties().setPriority(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="第三节RabbitMQ集群"><a href="#第三节RabbitMQ集群" class="headerlink" title="第三节	RabbitMQ集群"></a>第三节	RabbitMQ集群</h2><h3 id="3-1工作机制"><a href="#3-1工作机制" class="headerlink" title="3.1	工作机制"></a>3.1	工作机制</h3><ul>
<li><strong>基本诉求</strong><ul>
<li>避免单点故障</li>
<li>大流量场景分摊负载</li>
<li>数据同步</li>
</ul>
</li>
<li><strong>工作机制</strong>：各节点逐步加入集群</li>
</ul>
<h3 id="3-2集群搭建"><a href="#3-2集群搭建" class="headerlink" title="3.2	集群搭建"></a>3.2	集群搭建</h3><p>省略</p>
<h3 id="3-3负载均衡"><a href="#3-3负载均衡" class="headerlink" title="3.3	负载均衡"></a>3.3	负载均衡</h3><ul>
<li><strong>管理界面负载均衡</strong></li>
<li><strong>核心功能负载均衡</strong></li>
</ul>
<h3 id="3-4仲裁队列"><a href="#3-4仲裁队列" class="headerlink" title="3.4	仲裁队列"></a>3.4	仲裁队列</h3><p>省略</p>
<h3 id="3-5流式队列"><a href="#3-5流式队列" class="headerlink" title="3.5	流式队列"></a>3.5	流式队列</h3><p>省略</p>
<h3 id="3-6异地容灾"><a href="#3-6异地容灾" class="headerlink" title="3.6	异地容灾"></a>3.6	异地容灾</h3><ul>
<li><strong>Federation插件</strong></li>
<li><strong>Shovel插件</strong></li>
</ul>
]]></content>
  </entry>
</search>
